import java.util.concurrent.Callable;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import android.util.Log;
import java.io.File;
import java.lang.Character;
import java.lang.StringBuffer;

//import java.lang.*;
/*** 'Editable' - you can edit the code below based on the needs ***/
User user; // don't touch
String userid;

loadAllUserQuery="select userid, fname || ' ' || lname from user where userdeleted is null order by lname asc";



/***User***/
onEvent("user/usertab/users", "click", "login()");
onEvent("user/usertab/user_Search", "click", "userSearch()");
loadUsers() {
    fetchAll(loadAllUserQuery, new FetchCallback() {
        onFetch(result) {
            populateList("user/usertab/users", result);
        }
    });
}
userSearch(){
	String userKeyword=getFieldValue("user/usertab/user_keyword");
	if((isNull(userKeyword)) || userKeyword.equals("*")){
		 fetchAll(loadAllUserQuery, new FetchCallback() {
		        onFetch(result) {
		            populateList("user/usertab/users", result);
		        }
		    });
	}
	else{
		searchUserQuery="select userid, fname || ' ' || lname from user where userdeleted is null and fname like '%"
						+userKeyword+"%'or lname like '%"+userKeyword+"%'";
		fetchAll(searchUserQuery, new FetchCallback() {
	        onFetch(result) {
	            populateList("user/usertab/users", result);
	        }
	    });
	}
}
loadUsers();

String username = "";
String device = "";

login() {
    fetchOne("select userid,fname,lname,email from user where userid='" + getListItemValue() + "';", new FetchCallback() {
        onFetch(result) {
            user = new User(result.get(0),result.get(1),result.get(2),result.get(3));
            setUser(user);
            username = result.get(1) + " " + result.get(2);
            userid=result.get(0);
            createFieldTripSelPage();
            showTabGroup("fieldTripSel");
            //showTabGroup("control");
            //activeFieldTripCheck();
            //createControlGroupView();
            //showTabGroup("control");
        }
    });
}

addActionBarItem("sync", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "Disable Sync";
    }
    actionOn() {
        setSyncEnabled(false);
        setFileSyncEnabled(false);
        showToast("Sync disabled.");
    }
    isActionOff() {
        isSyncEnabled();
    } 
    actionOffLabel() {
        "Enable Sync";
    }
    actionOff() {
        setSyncEnabled(true);
        setFileSyncEnabled(true);
        showToast("Sync enabled.");
    }
});

addActionBarItem("internal_gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{Internal_GPS_Enabled}";
    }
    actionOn() {
        stopGPS();
        showToast("{GPS_Disabled}");
    }
    isActionOff() {
        isInternalGPSOn();
    }
    actionOffLabel() {
        "{Internal_GPS_Disabled}";
    }
    actionOff() {
        if(isExternalGPSOn()) {
            stopGPS();
        }
        startInternalGPS();
        showToast("{GPS_Enabled}");
    }
});

startInternalGPS();
onSyncEvent("onSyncStart()", "onSyncSuccess()", "onSyncFailure()");


onSyncStart() {
    showToast("sync started");
}
 
onSyncSuccess() {
    showToast("sync success");
}
 
onSyncFailure() {
    showToast("sync failed");
}
/*** Thing to do when login ***/
createFieldTripSelPage(){
	if(!hasView("fieldTripSel/fieldTripSelInfo/fieldTripSelList")){
		executeViewTask(new ViewTask() {
    	doTask() { 
    		style1 = "orientation";
	        style2 = "even";

	        newFTButtonDef = createViewDef().createButton().setLabel("New").setStyleCss("faims-blue");

	        createView("fieldTripSel/fieldTripSelInfo/fieldTripS_New_bn", newFTButtonDef,"fieldTripSel/fieldTripSelInfo");

	        createContainer("fieldTripSel/fieldTripSelInfo/fieldTripSelSearchCtn", "orientation");  	
			createContainer("fieldTripSel/fieldTripSelInfo/fieldTripSelSearchChild1", "even", "fieldTripSel/fieldTripSelInfo/fieldTripSelSearchCtn");
	        createContainer("fieldTripSel/fieldTripSelInfo/fieldTripSelSearchChild2", "even", "fieldTripSel/fieldTripSelInfo/fieldTripSelSearchCtn");

	        searchKeywordViewDef=createViewDef().createTextField().setLabel("keyword").setAnnotationEnabled(false);
	       	searchButtonDef = createViewDef().createButton().setLabel("Search").setStyleCss("faims-blue");

	        fTListDef=createViewDef().createList().setLabel("Active fieldTrip").setAnnotationEnabled(false).setStyleCss("ftSel-list");

	        createView("fieldTripSel/fieldTripSelInfo/fieldTripSel_Search_kw", searchKeywordViewDef,"fieldTripSel/fieldTripSelInfo/fieldTripSelSearchChild1");
	        createView("fieldTripSel/fieldTripSelInfo/fieldTripSel_Search_bn", searchButtonDef,"fieldTripSel/fieldTripSelInfo/fieldTripSelSearchChild2");

			createView("fieldTripSel/fieldTripSelInfo/fieldTripSelList", fTListDef,"fieldTripSel/fieldTripSelInfo");

	        refreshTabgroupCSS("fieldTripSel");

	        onEvent("fieldTripSel/fieldTripSelInfo/fieldTripS_New_bn","click","createFieldTripInfoPage(\"new\")");
	        onEvent("fieldTripSel/fieldTripSelInfo","show","activeFieldTripCheck(\"n\")");
	        onEvent("fieldTripSel/fieldTripSelInfo/fieldTripSelList","click","selectActiveFT(null)");
	        onEvent("fieldTripSel/fieldTripSelInfo/fieldTripSel_Search_bn","click","entitySearch(\"fieldTrip\",\"fieldTripSel/fieldTripSelInfo/fieldTripSel_Search_kw\",\"fieldTripSel/fieldTripSelInfo/fieldTripSelList\",null,null)");
			}
	    
		});
	}
}

activeFieldTrip=new ArrayList();
String activeFieldTripId=null;
activeFieldTripCheck(String typeflag){
	//FORMAT:YYYY-MM-DD
	String currentDate=getCurrentDate();
	//showWarning("currentDate",currentDate);
	activeFieldTrip.clear();
	//search for fieldTrip that this date is in
	/*
	fieldTripSearchQuery="select uuid from latestNonDeletedAentValue "+
		"where AttributeID=(select AttributeID from AttributeKey where AttributeName='FieldTripStartTime') "+
		"and measure <='"+currentDate+"' and uuid in "+
		"(select uuid from latestNonDeletedAentValue where "+
		"AttributeID=(select AttributeID from AttributeKey where AttributeName='FieldTripEndTime') "+
		"and measure >='"+currentDate+"' and uuid in "+
		"(select uuid from latestNonDeletedAentValue where "+
		"AttributeID=(select AttributeID from AttributeKey where AttributeName='FieldTripID') "+
		"and measure like '"+username+"%'))";
	*/
	fieldTripSearchQuery="select FT.uuid, FT.measure from "+
	"latestNonDeletedAentValue as FT,latestNonDeletedAentValue as FTS, latestNonDeletedAentValue as FTE "+
	"where FT.AttributeID=(select AttributeID from AttributeKey where AttributeName='FieldTripName') "+
	"and FTS.AttributeID=(select AttributeID from AttributeKey where AttributeName='FieldTripStartTime') "+
	"AND FTE.AttributeID=(select AttributeID from AttributeKey where AttributeName='FieldTripEndTime') "+
	"and FT.uuid=FTS.uuid AND FT.uuid=FTE.uuid "+
	"AND FTS.measure <='"+currentDate+"' "+
	"AND FTE.measure >='"+currentDate+"' "+
	"and FT.uuid in (select uuid from latestNonDeletedArchEntIdentifiers "+
		"where attributeID=(select AttributeID from AttributeKey where AttributeName='FieldTripID')) ORDER BY FT.uuid desc";

	fetchAll(fieldTripSearchQuery, new FetchCallback() {
        onFetch(result) {
        	if(typeflag.equals("n")){
        		populateList("fieldTripSel/fieldTripSelInfo/fieldTripSelList", result);
        	}
			
		}
        onError(message) {
        	showWarning("Error","Plese report to the admin by the code'activeFieldTripCheck'");
        }
    });
}

checkNewFTActive(String tempfTStartTime, String tempfTEndTime, String tempfTUuid){
	//showWarning("tempfTStartTime",tempfTStartTime);
	//showWarning("tempfTEndTime",tempfTEndTime);
	String currentDate=getCurrentDate();
	DateFormat df=new SimpleDateFormat("yyyy-MM-dd");
	try{
		Date sdt=df.parse(tempfTStartTime);
		Date edt=df.parse(tempfTEndTime);
		Date cdt=df.parse(currentDate);
		if(cdt.compareTo(sdt)>=0 && cdt.compareTo(edt)<=0){
			//showWarning("ac","ac");
			selActFtAlert(tempfTUuid);
			//selectActiveFT(tempfTUuid);
		}
		else{
			//showWarning("af","af");
			activeFieldTripCheck("n");
		}
	}
	catch(Exception excption){
		showWarning("Exception","excption happened, please report to the admin by the code 'checkNewFTActive'");
		return;
	}
}

selActFtAlert(String tempNewFtUuid){
	showAlert("Active FieldTrip","Do you want to use the new created FieldTrip as the active FieldTrip?","selectActiveFT(\""+tempNewFtUuid+"\")","activeFieldTripCheck(\"n\")");
}

selectActiveFT(String tempFTId){
	if(tempFTId!=null){
		activeFieldTripId=tempFTId;
	}
	else{
		activeFieldTripId=getListItemValue();	
	}
	//showWarning("tempFTId",activeFieldTripId);
	if(activeFieldTripId!=null && !activeFieldTripId.equals("")){
		//showWarning("activeFieldTripId","activeFieldTripId");
		cancelTabGroup("fieldTripSel",false);
		activeFieldTrip.clear();
		activeFieldTrip.add(activeFieldTripId);
		showToast("active fieldTrip selected");
		createControlGroupView();
		showTabGroup("control");
	}
	else{
		showWarning("Deprecated data","This fieldTrip may not be using anymore, please select another proper one");
		return;
	}
}

createControlGroupView(){
	createSurveyControlPage();
	createOtherControlPage();
	//createFieldTripControlPage();
	createPersonControlPage();
	createLanguageControlPage();
	//createFileControlPage();
	createQueryControlPage();
}

createSurveyControlPage(){
	if(!hasView("control/survey_control/surveyList")){
		executeViewTask(new ViewTask() {
    	doTask() { 
    		style1 = "orientation";
	        style2 = "even";
	    	createContainer("control/survey_control/surveyButtonCtn", "orientation");
	    	createContainer("control/survey_control/surveyButtonChild1", "even", "control/survey_control/surveyButtonCtn");
	        createContainer("control/survey_control/surveyButtonChild2", "even", "control/survey_control/surveyButtonCtn");

	    	createContainer("control/survey_control/surveySearchCtn", "orientation");  	
			createContainer("control/survey_control/surveySearchChild1", "even", "control/survey_control/surveySearchCtn");
	        createContainer("control/survey_control/surveySearchChild2", "even", "control/survey_control/surveySearchCtn");
	        createContainer("control/survey_control/surveySearchChild3", "even", "control/survey_control/surveySearchCtn");

	        emrSssButtonDef = createViewDef().createButton().setLabel("Emr").setStyleCss("faims-blue");
	        newSssButtonDef = createViewDef().createButton().setLabel("New").setStyleCss("faims-blue");

	        createView("control/survey_control/EMR_Survey", emrSssButtonDef,"control/survey_control/surveyButtonChild1");
	        createView("control/survey_control/New_Survey", newSssButtonDef,"control/survey_control/surveyButtonChild2");

	        searchKeywordViewDef=createViewDef().createTextField().setLabel("keyword").setAnnotationEnabled(false);
	       	sssTypeViewDef=createViewDef().createDropDown().setLabel("Type").setAnnotationEnabled(false);
	       	searchButtonDef = createViewDef().createButton().setLabel("Search").setStyleCss("faims-blue");
	        sssListDef=createViewDef().createList().setLabel("Session").setAnnotationEnabled(false).setStyleCss("session-list");

	        createView("control/survey_control/survey_keyword", searchKeywordViewDef,"control/survey_control/surveySearchChild1");
	        createView("control/survey_control/survey_type", sssTypeViewDef,"control/survey_control/surveySearchChild2");
	        createView("control/survey_control/Survey_Search", searchButtonDef,"control/survey_control/surveySearchChild3");

			createView("control/survey_control/surveyList", sssListDef,"control/survey_control");

	        refreshTabgroupCSS("control");
	        onEvent("control/survey_control/New_Survey","click","preNewSss()");
	        onEvent("control/survey_control","show","loadSessionList(\"answer\")");
	        onEvent("control/survey_control/surveyList","click","loadSessionInfo(\"answer\")");
	        onEvent("control/survey_control/EMR_Survey","click","emrSssPrep()");
	        onEvent("control/survey_control/Survey_Search","click","entitySearch(\"session\",\"control/survey_control/survey_keyword\",\"control/survey_control/surveyList\",null, \"control/survey_control/survey_type\")");
			}
	    
		});
	}
}

createFieldTripControlPage(){
	if(!hasView("fieldTrip_control/fieldTripControl/fieldTripList")){
		executeViewTask(new ViewTask() {
    	doTask() { 
    		style1 = "orientation";
	        style2 = "even";

	        newFTButtonDef = createViewDef().createButton().setLabel("New").setStyleCss("faims-blue");

	        createView("fieldTrip_control/fieldTripControl/fieldTrip_New_bn", newFTButtonDef,"fieldTrip_control/fieldTripControl");

	        createContainer("fieldTrip_control/fieldTripControl/fieldTripSearchCtn", "orientation");  	
			createContainer("fieldTrip_control/fieldTripControl/fieldTripSearchChild1", "even", "fieldTrip_control/fieldTripControl/fieldTripSearchCtn");
	        createContainer("fieldTrip_control/fieldTripControl/fieldTripSearchChild2", "even", "fieldTrip_control/fieldTripControl/fieldTripSearchCtn");

	        searchKeywordViewDef=createViewDef().createTextField().setLabel("keyword").setAnnotationEnabled(false);
	       	searchButtonDef = createViewDef().createButton().setLabel("Search").setStyleCss("faims-blue");

	        fTListDef=createViewDef().createList().setLabel("FieldTrip").setAnnotationEnabled(false).setStyleCss("fieldTrip-list");

	        createView("fieldTrip_control/fieldTripControl/fieldTrip_Search_kw", searchKeywordViewDef,"fieldTrip_control/fieldTripControl/fieldTripSearchChild1");
	        createView("fieldTrip_control/fieldTripControl/fieldTrip_Search_bn", searchButtonDef,"fieldTrip_control/fieldTripControl/fieldTripSearchChild2");

			createView("fieldTrip_control/fieldTripControl/fieldTripList", fTListDef,"fieldTrip_control/fieldTripControl");

	        refreshTabgroupCSS("fieldTrip_control");

	        onEvent("fieldTrip_control/fieldTripControl/fieldTrip_New_bn","click","createFieldTripInfoPage(\"new\")");
	        onEvent("fieldTrip_control/fieldTripControl","show","loadFieldTripList(\"l\",\"fieldTrip_control/fieldTripControl/fieldTripList\")");
	        onEvent("fieldTrip_control/fieldTripControl/fieldTripList","click","loadFieldTripInfo()");
	        onEvent("fieldTrip_control/fieldTripControl/fieldTrip_Search_bn","click","entitySearch(\"fieldTrip\",\"fieldTrip_control/fieldTripControl/fieldTrip_Search_kw\",\"fieldTrip_control/fieldTripControl/fieldTripList\",null,null)");
			}
	    
		});
	}
}

createPersonControlPage(){
	if(!hasView("control/user_control/userList")){
		executeViewTask(new ViewTask() {
    	doTask() { 
    		style1 = "orientation";
	        style2 = "even";

	        newPsButtonDef = createViewDef().createButton().setLabel("New").setStyleCss("faims-blue");

	        createView("control/user_control/New_User", newPsButtonDef,"control/user_control");

	        createContainer("control/user_control/psSearchCtn", "orientation");  	
			createContainer("control/user_control/psSearchChild1", "even", "control/user_control/psSearchCtn");
	        createContainer("control/user_control/psSearchChild2", "even", "control/user_control/psSearchCtn");

	        searchKeywordViewDef=createViewDef().createTextField().setLabel("keyword").setAnnotationEnabled(false);
	       	searchButtonDef = createViewDef().createButton().setLabel("Search").setStyleCss("faims-blue");

	        pSListDef=createViewDef().createList().setLabel("Person").setAnnotationEnabled(false).setStyleCss("person-list");

	        createView("control/user_control/person_keyword", searchKeywordViewDef,"control/user_control/psSearchChild1");
	        createView("control/user_control/Person_Search", searchButtonDef,"control/user_control/psSearchChild2");

			createView("control/user_control/userList", pSListDef,"control/user_control");

	        refreshTabgroupCSS("control");

	        onEvent("control/user_control/New_User","click","createPersonRolePage()");
	        onEvent("control/user_control","show","loadPerson()");
	        onEvent("control/user_control/userList","click","loadPersonInfo(\"person\",null)");
	        onEvent("control/user_control/Person_Search","click","entitySearch(\"person\",\"control/user_control/person_keyword\",\"control/user_control/userList\",null,null)");

			}
	    
		});
	}
}

createLanguageControlPage(){
	if(!hasView("control/language_control/languageList")){
		executeViewTask(new ViewTask() {
    	doTask() { 
    		style1 = "orientation";
	        style2 = "even";

	        newLangButtonDef = createViewDef().createButton().setLabel("New").setStyleCss("faims-blue");

	        createView("control/language_control/New_Language", newLangButtonDef,"control/language_control");

	        createContainer("control/language_control/langSearchCtn", "orientation");  	
			createContainer("control/language_control/langSearchChild1", "even", "control/language_control/langSearchCtn");
	        createContainer("control/language_control/langSearchChild2", "even", "control/language_control/langSearchCtn");

	        searchKeywordViewDef=createViewDef().createTextField().setLabel("keyword").setAnnotationEnabled(false);
	       	searchButtonDef = createViewDef().createButton().setLabel("Search").setStyleCss("faims-blue");

	        langListDef=createViewDef().createList().setLabel("Language").setAnnotationEnabled(false).setStyleCss("language-list");

	        createView("control/language_control/language_keyword", searchKeywordViewDef,"control/language_control/langSearchChild1");
	        createView("control/language_control/Language_Search", searchButtonDef,"control/language_control/langSearchChild2");

			createView("control/language_control/languageList", langListDef,"control/language_control");

	        refreshTabgroupCSS("control");

	        onEvent("control/language_control/New_Language","click","newLanguage()");
	        onEvent("control/language_control","show","loadLanguage()");
			onEvent("control/language_control/languageList","click","loadLanguageInfo()");
			onEvent("control/language_control/Language_Search","click","entitySearch(\"language\",\"control/language_control/language_keyword\",\"control/language_control/languageList\",null,null)");
			}
	    
		});
	}
}

createFileControlPage(){
	if(!hasView("file_control/fileControlInfo/fileList")){
		executeViewTask(new ViewTask() {
    	doTask() { 
    		style1 = "orientation";
	        style2 = "even";

	        createContainer("file_control/fileControlInfo/fileSearchCtn", "orientation");  	
			createContainer("file_control/fileControlInfo/fileSearchChild1", "even", "file_control/fileControlInfo/fileSearchCtn");
	        createContainer("file_control/fileControlInfo/fileSearchChild2", "even", "file_control/fileControlInfo/fileSearchCtn");
	        createContainer("file_control/fileControlInfo/fileSearchChild3", "even", "file_control/fileControlInfo/fileSearchCtn");
			
			fileTypeViewDef=createViewDef().createDropDown().setLabel("Type").setAnnotationEnabled(false);
	        searchKeywordViewDef=createViewDef().createTextField().setLabel("keyword").setAnnotationEnabled(false);
	       	searchButtonDef = createViewDef().createButton().setLabel("Search").setStyleCss("faims-blue");

	        fileListDef=createViewDef().createList().setLabel("File").setAnnotationEnabled(false).setStyleCss("file-list");

	        createView("file_control/fileControlInfo/fileCategorySelect", fileTypeViewDef,"file_control/fileControlInfo/fileSearchChild1");
	        createView("file_control/fileControlInfo/file_keyword", searchKeywordViewDef,"file_control/fileControlInfo/fileSearchChild2");
	        createView("file_control/fileControlInfo/File_Search", searchButtonDef,"file_control/fileControlInfo/fileSearchChild3");

			createView("file_control/fileControlInfo/fileList", fileListDef,"file_control/fileControlInfo");

	        refreshTabgroupCSS("file_control");
	        onEvent("file_control/fileControlInfo","show","loadFile()");
	        onEvent("file_control/fileControlInfo/fileList","click","loadAnswerFileInfo(\"fileView\")");
	        onEvent("file_control/fileControlInfo/File_Search","click","entitySearch(\"file\",\"file_control/fileControlInfo/file_keyword\",\"file_control/fileControlInfo/fileList\",\"file_control/fileControlInfo/fileCategorySelect\",null)");

			}
	    
		});
	}
}

createOtherControlPage(){
	if(!hasView("control/other_control/fileControlBtn")){
		executeViewTask(new ViewTask() {
    	doTask() { 
	       	ftButtonDef = createViewDef().createButton().setLabel("FieldTrip").setStyleCss("faims-blue");
	       	fileButtonDef = createViewDef().createButton().setLabel("File").setStyleCss("faims-blue");

			createView("control/other_control/ftControlBtn", ftButtonDef,"control/other_control");
			createView("control/other_control/fileControlBtn", fileButtonDef,"control/other_control");

	        refreshTabgroupCSS("control");
	        onEvent("control/other_control/ftControlBtn","click","showFiledTripControl()");
	        onEvent("control/other_control/fileControlBtn","click","showFileControl()");

			}
	    
		});
	}
}

showFiledTripControl(){
	createFieldTripControlPage();
	showTabGroup("fieldTrip_control");
}

showFileControl(){
	createFileControlPage();
	showTabGroup("file_control");
}
/**********Temp function, to be remove for official version************/

createQueryControlPage(){
	if(!hasView("control/querytest/Submit")){
			executeViewTask(new ViewTask() {
	    	doTask() { 
				queryViewDef=createViewDef().createTextField().setLabel("query").setAnnotationEnabled(false);
				queryButtonDef = createViewDef().createButton().setLabel("Submit").setStyleCss("faims-blue");

				createView("control/querytest/query", queryViewDef,"control/querytest");
				createView("control/querytest/Submit", queryButtonDef,"control/querytest");
				refreshTabgroupCSS("control");
				onEvent("control/querytest/Submit","click","testQuery()");
			}
	    
		});
	}

}
testQuery(){
	query=getFieldValue("control/querytest/query");
	//fetchAll("SELECT sql FROM sqlite_master WHERE name='archentity';",
	fetchAll(query.toString()+";",
	new FetchCallback() {
        onFetch(result) {
			if (isNull(result)) {
				//code
				showWarning("no","no result");
			}
			else{
			for (re : result) {
				
				showWarning("yes",re.toString());
				//showWarning("me",re.toString());
				
			}		    
            //populateList("control/question_control/questionList", result);
        }
		}
        onError(message) {
        	Log.e("query error",message);
            showToast(message);
        }
    });
	
}

/**********Temp function end, to be remove for official version************/

/*** Session questionnaire list***/
createQuesnirList(){
	if(!hasView("questionnaireListAll/questionnaireListInfo/questionnaireListInDB")){
		removeAllViewsAndContainers("questionnaireListAll");
		executeViewTask(new ViewTask() {
    	doTask() { 	
	        style1 = "orientation";
	        style2 = "even";
	    	createContainer("questionnaireListAll/questionnaireListInfo/quesnirLsCt", "orientation");
	    	createContainer("questionnaireListAll/questionnaireListInfo/child1", "even", "questionnaireListAll/questionnaireListInfo/quesnirLsCt");
	        createContainer("questionnaireListAll/questionnaireListInfo/child2", "even", "questionnaireListAll/questionnaireListInfo/quesnirLsCt");

	        searchTextViewDef = createViewDef().createTextField().setLabel("Keyword").setInfoEnabled(true);
	        searchButtonDef = createViewDef().createButton().setLabel("Search").setStyleCss("faims-blue");
	        
	        quesnirListDef=createViewDef().createList().setLabel("Questionnaires").setStyleCss("allQuesnir-list");

	        createView("questionnaireListAll/questionnaireListInfo/quesnir_keyword", searchTextViewDef,"questionnaireListAll/questionnaireListInfo/child1");
	        createView("questionnaireListAll/questionnaireListInfo/quesnir_Search", searchButtonDef,"questionnaireListAll/questionnaireListInfo/child2");
	   
	        createView("questionnaireListAll/questionnaireListInfo/questionnaireListInDB", quesnirListDef,"questionnaireListAll/questionnaireListInfo");

	        refreshTabgroupCSS("questionnaireListAll");

	        onEvent("questionnaireListAll","show","loadAllQuesnir()");
	        onEvent("questionnaireListAll/questionnaireListInfo/questionnaireListInDB","click","loadQuesnirInfo()");
	        onEvent("questionnaireListAll/questionnaireListInfo/quesnir_Search","click","entitySearch(\"questionnaire\",\"questionnaireListAll/questionnaireListInfo/quesnir_keyword\",\"questionnaireListAll/questionnaireListInfo/questionnaireListInDB\",null,null)");
	    }
		});
	}
}

createQuesSel(){
	if(!hasView("questionnaireInfo/surveyQuesnirHidden/surveyQuestionnaireID")){
		removeAllViewsAndContainers("questionnaireInfo");
		executeViewTask(new ViewTask() {
	    doTask() {
	    	hideQuesnirId=createViewDef().createTextField().setLabel("currentQuesnirID").setReadOnly(true);
	    	idTextViewDef = createViewDef().createTextField().setLabel("Questionnaire label").setAttributeName("QuestionnaireID").setAttributeType("measure").setAnnotationEnabled(false).setReadOnly(true);
	    	nameTextViewDef=createViewDef().createTextField().setLabel("Questionnaire name").setAttributeName("QuestionnaireName").setAttributeType("measure").setAnnotationEnabled(false).setReadOnly(true);
	    	typeTextViewDef=createViewDef().createTextField().setLabel("Questionnaire type").setAnnotationEnabled(false).setReadOnly(true);
	    	descTextViewDef=createViewDef().createTextField().setLabel("Questionnaire description").setAttributeName("QuestionnaireDescription").setAttributeType("measure").setAnnotationEnabled(false).setReadOnly(true);
	    	createView("questionnaireInfo/surveyQuesnirHidden/currentQuesnirID",hideQuesnirId,"questionnaireInfo/surveyQuesnirHidden");
	    	createView("questionnaireInfo/surveyQuesnirHidden/surveyQuestionnaireID",idTextViewDef,"questionnaireInfo/surveyQuesnirHidden");
	        createView("questionnaireInfo/surveyQuesnirHidden/surveyQuestionnaireName",nameTextViewDef,"questionnaireInfo/surveyQuesnirHidden");
	        createView("questionnaireInfo/surveyQuesnirHidden/surveyQuestionnaireType",typeTextViewDef,"questionnaireInfo/surveyQuesnirHidden");
	        createView("questionnaireInfo/surveyQuesnirHidden/surveyQuestionnaireDescription", descTextViewDef,"questionnaireInfo/surveyQuesnirHidden");
	    		    	

	        quesSelListDef=createViewDef().createList().setLabel("Questions").setStyleCss("quesInQuesnir-list");

	        style1 = "orientation";
	        style2 = "even";
	        createContainer("questionnaireInfo/surveyQuestionnaire/quesSelCt", "orientation");
	    	createContainer("questionnaireInfo/surveyQuestionnaire/child1", "even", "questionnaireInfo/surveyQuestionnaire/quesSelCt");
	        createContainer("questionnaireInfo/surveyQuestionnaire/child2", "even", "questionnaireInfo/surveyQuestionnaire/quesSelCt");

	    	searchTextViewDef = createViewDef().createTextField().setLabel("Keyword").setInfoEnabled(true);
	        searchButtonDef = createViewDef().createButton().setLabel("Search").setStyleCss("faims-blue");

			createView("questionnaireInfo/surveyQuestionnaire/ques_keyword", searchTextViewDef,"questionnaireInfo/surveyQuestionnaire/child1");
	        createView("questionnaireInfo/surveyQuestionnaire/ques_Search", searchButtonDef,"questionnaireInfo/surveyQuestionnaire/child2");
	        createView("questionnaireInfo/surveyQuestionnaire/surveyQuestionInQuestionnaire", quesSelListDef,"questionnaireInfo/surveyQuestionnaire");
	    	 
	        refreshTabgroupCSS("questionnaireInfo");
	        //showTabGroup("fieldTrip");
	        onEvent("questionnaireInfo/surveyQuestionnaire/surveyQuestionInQuestionnaire","click","checkClickValidity(null)");
	        onEvent("questionnaireInfo/surveyQuestionnaire/ques_Search","click","searchQuesInCrtQuesnir()");
	   		}
		});
	}
}

/*** session ui ***/
createMainSessionPage(String typeflag){
	if(hasView("sessionForAnswer/sssAnsBasicInfo/sssType") && typeflag.equals("n")){
		removeView("sessionForAnswer/sssAnsBasicInfo/sssType");
	}

	if(!hasView("sessionForAnswer/sssHidden/sssID")){
		removeAllViewsAndContainers("sessionForAnswer");
		executeViewTask(new ViewTask() {
    	doTask() { 
    		//sssHidden page
    		sssIdViewDef= createViewDef().createTextField().setLabel("Session label").setAttributeName("SessionID").setAttributeType("measure").setAnnotationEnabled(true).setReadOnly(true);
    		sssStartTimeViewDef=createViewDef().createTextField().setLabel("Start time").setAttributeName("SessionStartTimestamp").setAttributeType("measure").setAnnotationEnabled(true).setReadOnly(true);
    		sssEndTimeViewDef=createViewDef().createTextField().setLabel("End time").setAttributeName("SessionEndTimestamp").setAttributeType("measure").setAnnotationEnabled(true).setReadOnly(true);
    		sssNameViewDef=createViewDef().createTextField().setLabel("Session name").setAttributeName("SessionName").setAttributeType("measure").setAnnotationEnabled(true);
    		createView("sessionForAnswer/sssHidden/sssID",sssIdViewDef,"sessionForAnswer/sssHidden"); 
    		createView("sessionForAnswer/sssHidden/sssStartTimetamp",sssStartTimeViewDef,"sessionForAnswer/sssHidden");
    		createView("sessionForAnswer/sssHidden/sssEndTimestamp",sssEndTimeViewDef,"sessionForAnswer/sssHidden");
    		createView("sessionForAnswer/sssHidden/sssName",sssNameViewDef,"sessionForAnswer/sssHidden");		
    		//sssAnsBasicInfo page   
    		
    		sssLocViewDef=createViewDef().createTextField().setLabel("GPS").setAttributeName("SessionLocation").setAttributeType("measure").setAnnotationEnabled(true).setReadOnly(true);
    		sssDescViewDef=createViewDef().createTextField().setLabel("Description").setAttributeName("SessionDescription").setAttributeType("measure").setAnnotationEnabled(true);

    		createView("sessionForAnswer/sssAnsBasicInfo/sssLocation",sssLocViewDef,"sessionForAnswer/sssAnsBasicInfo");	
    		createView("sessionForAnswer/sssAnsBasicInfo/sssDescription",sssDescViewDef,"sessionForAnswer/sssAnsBasicInfo");
    		
    		if(typeflag.equals("s")){
    			sssTypeViewDef=createViewDef().createTextField().setLabel("Type").setAnnotationEnabled(false).setReadOnly(true);
    			createView("sessionForAnswer/sssAnsBasicInfo/sssType",sssTypeViewDef,"sessionForAnswer/sssAnsBasicInfo");
    		} 
    		
    		//sssPersonInfo page
	        style1 = "orientation";
	        style2 = "even";
	    	createContainer("sessionForAnswer/sssPersonInfo/sssPsSelCt", "orientation");
	    	createContainer("sessionForAnswer/sssPersonInfo/sssPsSelCtchild1", "even", "sessionForAnswer/sssPersonInfo/sssPsSelCt");
	        createContainer("sessionForAnswer/sssPersonInfo/sssPsSelCtchild2", "even", "sessionForAnswer/sssPersonInfo/sssPsSelCt");

	    	createContainer("sessionForAnswer/sssPersonInfo/sssPsBtnCt", "orientation");  	
			createContainer("sessionForAnswer/sssPersonInfo/sssPsBtnCtchild1", "even", "sessionForAnswer/sssPersonInfo/sssPsBtnCt");
	        createContainer("sessionForAnswer/sssPersonInfo/sssPsBtnCtchild2", "even", "sessionForAnswer/sssPersonInfo/sssPsBtnCt");
			
		
	        psRoleListDef=createViewDef().createDropDown().setLabel("Role in session").setAnnotationEnabled(false);
	        psNameListDef=createViewDef().createDropDown().setLabel("Person name").setAnnotationEnabled(false);

	        addPsButtonDef = createViewDef().createButton().setLabel("Add").setStyleCss("faims-blue");
	        newPsButtonDef = createViewDef().createButton().setLabel("New").setStyleCss("faims-blue");
	        
	        psListDef=createViewDef().createList().setLabel("Session person list").setAnnotationEnabled(false).setStyleCss("sssSelPs-list");

	        createView("sessionForAnswer/sssPersonInfo/sssPersonRole", psRoleListDef,"sessionForAnswer/sssPersonInfo/sssPsSelCtchild1");
	        createView("sessionForAnswer/sssPersonInfo/sssPersonName", psNameListDef,"sessionForAnswer/sssPersonInfo/sssPsSelCtchild2");
	   
	        createView("sessionForAnswer/sssPersonInfo/Add_New_Person", newPsButtonDef,"sessionForAnswer/sssPersonInfo/sssPsBtnCtchild1");
			createView("sessionForAnswer/sssPersonInfo/Add_Person", addPsButtonDef,"sessionForAnswer/sssPersonInfo/sssPsBtnCtchild2");

			createView("sessionForAnswer/sssPersonInfo/sssPersonList", psListDef,"sessionForAnswer/sssPersonInfo");
			
			//sssAnsList page
			saveSssButtonDef = createViewDef().createButton().setLabel("Save Session").setStyleCss("faims-blue");
			newAnsButtonDef = createViewDef().createButton().setLabel("Choose Quesnir").setStyleCss("faims-blue");

			//ansSelListDef=createViewDef().createList().setLabel("Selectable Answers").setAnnotationEnabled(false).setStyleCss("session-file-list");
			ansListDef=createViewDef().createList().setLabel("Answers").setAnnotationEnabled(false).setStyleCss("sssAns-list");

			createView("sessionForAnswer/sssAnsList/Save_Session", saveSssButtonDef,"sessionForAnswer/sssAnsList");
	        createView("sessionForAnswer/sssAnsList/New_Answer_In_Session", newAnsButtonDef,"sessionForAnswer/sssAnsList");

	        //createView("sessionForAnswer/sssAnsList/sssAnsSelList", ansSelListDef,"sessionForAnswer/sssAnsList");
	        createView("sessionForAnswer/sssAnsList/sssAnswerList", ansListDef,"sessionForAnswer/sssAnsList");

	        refreshTabgroupCSS("sessionForAnswer");

	        onEvent("sessionForAnswer/sssAnsList/New_Answer_In_Session","click","checkNewAnsTime()");
			onEvent("sessionForAnswer/sssAnsList/Save_Session","click","saveSession(\"answer\")");
			onEvent("sessionForAnswer/sssPersonInfo/Add_Person","click","addPersonToSession()");
			onEvent("sessionForAnswer/sssPersonInfo/sssPersonList","click","deletePersonInSession()");
			onEvent("sessionForAnswer/sssPersonInfo/Add_New_Person","click","createPersonRolePage()");
			onEvent("sessionForAnswer/sssPersonInfo","show","refreshPsAndRole()");
			//onEvent("sessionForAnswer/sssAnsList/sssAnsSelList","click","addItemToTargetList(candidate_files_session,\"sessionFile\",null)");
			onEvent("sessionForAnswer/sssAnsList/sssAnswerList","click","checkDelOrView()");

			}
	    
		});
	}
	else if(!hasView("sessionForAnswer/sssAnsBasicInfo/sssType") && typeflag.equals("s")){
		sssTypeViewDef=createViewDef().createTextField().setLabel("Type").setAnnotationEnabled(false).setReadOnly(true);
    	createView("sessionForAnswer/sssAnsBasicInfo/sssType",sssTypeViewDef,"sessionForAnswer/sssAnsBasicInfo");
	}
}

refreshPsAndRole(){
	fetchAll(loadAllRoleQuery, new FetchCallback() {
    	onFetch(result) {
			if (!isNull(result)) {
				personRoleList.clear();
				personRoleList.addAll(result);
				populateDropDown("sessionForAnswer/sssPersonInfo/sssPersonRole", personRoleList);	
				fetchAll(loadAllPersonQuery,new FetchCallback() {
		        	onFetch(fetchResult) {
						if (!isNull(fetchResult)) {
							personList.clear();
							personList.addAll(fetchResult);
							populateDropDown("sessionForAnswer/sssPersonInfo/sssPersonName", personList);	
							
						}	
						else{
					    	showWarning("No person data","No person data is available, please contact the admin");
							return;
						}
		       	 }

		        	onError(message) {
		            	showToast(message);
		        	}
		    	});
			}	
			else{
		    	showWarning("No Role data","No role data is available, please contact the admin");
				return;
			}
   	    }

    	onError(message) {
        	showToast(message);
    	}
    });
}

checkDelOrView(){
	current_answer_id=null;
	current_answer_id=getListItemValue();

	if(isNull(current_answer_id)){
		showWarning("Error","Can't find this answer, please contact the admin");
		return;
	}
	showAlert("View File Info","Do you want to view answer info?","preLoadAnswerInfo(\""+current_answer_id+"\")","delAnsInSssAlert(\""+current_answer_id+"\")");
}

preLoadAnswerInfo(String tempAnswerId){
	checkAnsQuesType="select measure from latestNonDeletedAentValue where "+
		"AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesPropDefName') "+
		"AND uuid="+
		"(select measure from latestNonDeletedAentValue where "+
	        "AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesPropDefID')"+
	        "and uuid = (select uuid from latestNonDeletedArchEntIdentifiers "+
	        "where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesUuid') "+
	        "and measure=(select measure from latestNonDeletedAentValue where AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionID') and uuid='"+tempAnswerId+"')))";
	fetchOne(checkAnsQuesType,new FetchCallback() {
		onFetch(result) {
			if(!isNull(result)){
				switch(result.get(0)){
					case "LangList":
						loadLangIntroAnsInfo(tempAnswerId);
					break;
					case "ChooseOne":
						loadChoiceDateAnswer("ChooseOne",tempAnswerId);
					break;

					case "SelectMultiple":
						loadChoiceDateAnswer("SelectMultiple",tempAnswerId);
					break;

					case "Date":
						loadChoiceDateAnswer("Date",tempAnswerId);
					break;

					default:
						loadAnswerInfo();
					break;
				}
			}
			else{
				showWarning("Deprecated data","This answer may not be using anymore");
				return;
			}
		}	       
		onError(message) {
			showToast(message);
		}
	});
}

delAnsInSssAlert(String toDelId){
	showAlert("Delete File","Do you want to delete this answer from this session?","deleteItemFromTargetList(sss_answer_list,\"sessionFile\",\""+toDelId+"\")","stayInCurrentPage()");
}
checkNewAnsTime(){
	sssTime=getFieldValue("sessionForAnswer/sssHidden/sssStartTimetamp");
	sssDateTimeArray=sssTime.split("\\s+");
    sssDate=sssDateTimeArray[0];

	String crnDate=getCurrentDate();
	if(!(sssDate.equals(crnDate))){
		showAlert("alert", "You cannot add new answer to this session \n"+"Do you want to create a new session?", "preNewSss()", "stayInCurrentPage()");
	}	
	else{
		showQuestionnaireList();
	}
}

preNewSss(){
	if(isNull(activeFieldTrip)){
		showAlert("alert", "No active FieldTrip for this session\n"+"Do you want to continue create a new session?", "newSessionForAnswer(\"answer\",null)", "checkGoToFieldTrip()");
	}
	else{
		newSessionForAnswer("answer",null);
	}
}
checkGoToFieldTrip(){
	showAlert("alert", "Do you want to create a fieldTrip?","createFieldTripInfoPage(\"new\")", "stayInCurrentPage()");
}
/*** session variables ***/
sss_id=null;
sss_answer_list=new ArrayList();
sss_interviewer_list=new ArrayList();//for recording interviewer list when creating session
sssOriginInfo=new ArrayList();
sssNewInfo=new ArrayList();
original_sss_answer_list=new ArrayList();
sssAnsRelnOrigin=new ArrayList();
String sssLabel=null;//This is used for sssID interviewee changing
sssAnswerInterviewerOrigin=new LinkedHashSet();
sssAnswerInterviewerNew=new LinkedHashSet();//This is for generating sss label
String sssLabelOld=null;

Boolean introAns=false;//mark if a session is for introductory questionnaire answer collecting or not
ArrayList newPersonForIntro=new ArrayList(); 

sssPsInfoRelnOrigin=new ArrayList();
sssPsInfoRelnNew=new ArrayList();
sssPersonRoleNameListOrigin=new ArrayList();
sssPersonRoleandNameList=new ArrayList();//selected person role
personRoleList=new ArrayList();
personList=new ArrayList();
sssConsultantList=new LinkedHashSet();
sssInterviewerList=new LinkedHashSet();
sssConsultantIdList=new ArrayList();
String introPsMark=null;//use for check if an intro ps is deleted from his/her intro session
currentPosition=new ArrayList();

candidate_files_session=new ArrayList();

sssOldIntvReln=new ArrayList();
sssOldCoslReln=new ArrayList();
sssOldPsReln=new ArrayList();

quesRecordingType=new ArrayList();
/*** SEssion queries ***/
/*** usage: session list, session search, fieldTrip creation, fieldTrip update (current 4 usages)***/
loadAllSessionIDQuery="SELECT uuid,measure FROM latestNonDeletedArchEntIdentifiers " +
		"WHERE AttributeID "+
		"= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='SessionID') "+
		"GROUP BY uuid "+
		"Order by measure asc";

initSessionVar(){
	introAns=false;
	introPsMark=null;
	langIntro=false;
	sss_id=null;
	sssLabel=null;
	sssLabelOld=null;
	sss_answer_list.clear();
	sssOriginInfo.clear();
	sssNewInfo.clear();	
	original_sss_answer_list.clear();
	sssAnsRelnOrigin.clear();
	sss_interviewer_list.clear();
	sssConsultantList.clear();
	sssConsultantIdList.clear();
	sssInterviewerList.clear();
	sssPersonRoleandNameList.clear();
	sssOldPsReln.clear();
	sssOldCoslReln.clear();
	sssOldIntvReln.clear();
	quesRecordingType.clear();
	
	personRoleList.clear();
    personList.clear();
    sssPersonRoleandNameList.clear();
    /*
	emrSssInfo.clear();
	emrAnsInfo.clear();
	emrPsInfo.clear();
	emrIveExist=false;

	newLangInLangIntro=0;
	crntLangIntroId=null;
	langIntroAnsLabel=null;
	canLangList.clear();
	newTempLangList.clear();
	loopQuesOrder.clear();
	langIntro=false;
	*/
}



loadSessionList(String typeflag){
	fetchAll(loadAllSessionIDQuery, new FetchCallback() {
        onFetch(result) {
        	switch(typeflag){
        	case "session":
        		//populateList("sessionGroup/sessionInfo/sessionList", result);
        		break;
        	case "answer":
        		populateList("control/survey_control/surveyList", result);
        		loadSessionTypes();
        		setFieldValue("control/survey_control/survey_keyword","*");
        		break;
        	}
        }
        onError(message) {
            showToast(message);
        }
    });
}

loadSessionTypes(){
	loadAllQuesnirTypeQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
		"WHERE latestNonDeletedAentValue.AttributeID "+
		"= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='QuesnirTypeName') "+
		"GROUP BY uuid ORDER BY measure asc;";
	fetchAll(loadAllQuesnirTypeQuery, new FetchCallback() {
        onFetch(result) {
        	ArrayList sessionTypeList=new ArrayList();
        	tempType=new ArrayList();
        	tempType.add("All");
        	tempType.add("All");
        	sessionTypeList.add(tempType);
        	sessionTypeList.addAll(result);
        	populateDropDown("control/survey_control/survey_type",sessionTypeList);
        }
    });
}

checkSssQuesnirType(String typeflag){
	String checkAnsId=null;
	if((!isNull(original_sss_answer_list)) && (typeflag.equals("answer"))){		
		checkAnsId=original_sss_answer_list.get(0).get(0);

	checkAnsQuesnirTypeQuery="select uuid,measure from latestNonDeletedAentValue "+
		"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesnirTypeName') "+
		"and uuid=(select measure from latestNonDeletedAentValue "+
			"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionnaireType') "+
			"and uuid=(select measure from latestNonDeletedAentValue where uuid='"+checkAnsId+"' "+
				"and AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionnaireID')))";

	fetchAll(checkAnsQuesnirTypeQuery, new FetchCallback() {
        	onFetch(quesnirTypeResult) {
        		if(!isNull(quesnirTypeResult)){
        			String quesnirType=quesnirTypeResult.get(0).get(1);
					if(quesnirType.equals("Introductory") || quesnirType.equals("Sociolinguistic")){
						introAns=true;
					}
					else{
						introAns=false;
					}
        		}
        		else{
        			introAns=false;
        		}
				
       		 }
   		 });
	}

	else{
		introAns=false;
	}
}

takePoint() {
	currentPosition.clear();
    Object position = getGPSPosition();
    
    if (position != null ) {
        latitude = position.getLatitude();
        longitude = position.getLongitude();

	    String latitudeString=latitude.toString();
	    String longitudeString=longitude.toString();
	    String currentPositionLong="lat:"+latitudeString+"long:"+longitudeString;
	    String latitudeShort=latitudeString.substring(0,6);
	    String longitudeShort=longitudeString.substring(0,6);
	    currentPosition.clear();
	    currentPosition.add(currentPositionLong);
	    currentPosition.add(latitudeShort);
	    currentPosition.add(longitudeShort);
	    //return currentPosition;

    } else {
        showToast("GPS Not initialized");
    }
}

setItvrAuto(){
	String itvrId=null;
	for(role: personRoleList){
		if(role.get(1).equals("interviewer")){
			itvrId=role.get(0);
			break;
		}
	}
	if(itvrId==null){
		showWarning("No enough necessary data","No information of the role 'interviewer', please contact the admin for details");
		return;
	}

	checkPsInDbQuery="select uuid from latestNonDeletedAentValue where AttributeID=(select AttributeID from AttributeKey where AttributeName='PersonName') "+
			"and measure='"+username+"'";

	fetchOne(checkPsInDbQuery,new FetchCallback() {
		onFetch(result) {
			if (isNull(result) || result.isEmpty()) {
				saveNewItvrAuto(itvrId);
			}
			else{
				autoIntvr=new ArrayList();
				autoIntvr.add(itvrId+"_"+result.get(0));
				autoIntvr.add("interviewer"+"_"+username);
				sssPersonRoleandNameList.add(autoIntvr);
				populateList("sessionForAnswer/sssPersonInfo/sssPersonList",sssPersonRoleandNameList); 
			}

		}
		onError(message) {
			showToast(message);
		}
	});

}

saveNewItvrAuto(String itvrId){	
	//save the new interviewer
	iPsAttributes=createAttributeList(); 
	iPsAttributes.add(createEntityAttribute("PersonID", null, null, username+"_0000-00-00", null));
	iPsAttributes.add(createEntityAttribute("PersonName", null, null, username, null));
	iPsAttributes.add(createEntityAttribute("PersonDOB", null, null, "0000-00-00", null));
	iPsAttributes.add(createEntityAttribute("PersonRole", null, null, itvrId, null));
	iPsAttributes.add(createEntityAttribute("PersonPhotoDescription", null, null, "Temporary interviewer", null));
	iPsAttributes.add(createEntityAttribute("PersonIntroQuenirDesp", null, null, "Temporary interviewer", null));

	saveArchEnt(null, "Person", null, iPsAttributes, new SaveCallback() {
		onSave(iPsUuid,newRecord) {
			autoIntvr=new ArrayList();
			autoIntvr.add(itvrId+"_"+iPsUuid);
			autoIntvr.add("interviewer"+"_"+username);
			sssPersonRoleandNameList.add(autoIntvr);
			populateList("sessionForAnswer/sssPersonInfo/sssPersonList",sssPersonRoleandNameList); 
		}  
		onError(message){
			showToast("Failed setting interviewer");
		}
	});

}

newSessionForAnswer(String typeflag, ArrayList newAddedPerson){
	createMainSessionPage("n");
	initSessionVar();
	initEmrSssVars();
	initSocioLinguVar();

	if(typeflag.equals("answer")){
		introAns=false;
		introPsMark=null;
	}
	
	else{
		introAns=true;
		newPersonForIntro.clear();
		newPersonForIntro.add(newAddedPerson);
	}
	
	//showWarning("initSessionVar2","initSessionVar2");
	newTabGroup("sessionForAnswer");
	takePoint();

	String currentTime=getCurrentTime();

    String currentDate=getCurrentDate();
    setFieldValue("sessionForAnswer/sssHidden/sssStartTimetamp",currentTime);           

    if (!isNull(currentPosition)){
    	sssLabel="_"+currentPosition.get(1)+"_"+currentPosition.get(2)+"_"+currentDate;
    	setFieldValue("sessionForAnswer/sssAnsBasicInfo/sssLocation",currentPosition.get(0));
    }
    else{
    	sssLabel="_"+"unknownLat"+"_"+"unknownLong"+"_"+currentDate;
    	setFieldValue("sessionForAnswer/sssAnsBasicInfo/sssLocation","GPS not available");
    }
    //String tempSssLabelNew=username+sssLabel;

    populateList("sessionForAnswer/sssAnsList/sssAnswerList",sss_answer_list); 
    populateList("sessionForAnswer/sssPersonInfo/sssPersonList",sssPersonRoleandNameList);

	//showWarning("populateList","populateList");
    fetchAll(loadAllRoleQuery, new FetchCallback() {
    	onFetch(result) {
			if (!isNull(result)) {
				personRoleList.addAll(result);
				populateDropDown("sessionForAnswer/sssPersonInfo/sssPersonRole", personRoleList);	

				if(introAns){//if intro ans, add the current person to the list
					for (psRole:personRoleList){
						if(psRole.get(1).equals("consultant")){
							String cosId=psRole.get(0);
							introPsMark=cosId+"_"+newPersonForIntro.get(0).get(0);
							introPs=new ArrayList();
							introPs.add(introPsMark);
							introPs.add(psRole.get(1)+"_"+newPersonForIntro.get(0).get(1));
							sssPersonRoleandNameList.add(introPs);
							populateList("sessionForAnswer/sssPersonInfo/sssPersonList",sssPersonRoleandNameList); 
							break;
						}
						
					}
					
					//showWarning("psRole","psRole");
				}
				fetchAll(loadAllPersonQuery,new FetchCallback() {
		        	onFetch(fetchResult) {
						if (!isNull(fetchResult)) {
							personList.addAll(fetchResult);
							populateDropDown("sessionForAnswer/sssPersonInfo/sssPersonName", personList);	
							setItvrAuto();
						}	
						else{
					    	showWarning("No person data","No person data is available, please contact the admin");
							return;
						}
		       	 	}

		        	onError(message) {
		            	showToast(message);
		        	}
		    	});
			}	
			else{
		    	showWarning("No Role data","No role data is available, please contact the admin");
				return;
			}
   	    }

    	onError(message) {
        	showToast(message);
    	}
    });
}

checkRolesInSession(){
	psRoleSum=new LinkedHashSet();
	sssConsultantList.clear();
	sssInterviewerList.clear();

	for(person : sssPersonRoleandNameList) {
		String [] psInfo=person.get(1).split("_");
		if(psInfo[0].equals("consultant")){
			psRoleSum.add("consultant");
			sssConsultantList.add(psInfo[1]);
			String [] psInSssId=person.get(0).split("_");
			tempPs=new ArrayList();
			tempPs.add(psInSssId[1]);
			tempPs.add(psInfo[1]);
			sssConsultantIdList.add(tempPs);
		}
		else if(psInfo[0].equals("interviewer")){
			psRoleSum.add("interviewer");
			sssInterviewerList.add(psInfo[1]);
		}
	}
	return psRoleSum;
}

addPersonToSession(){
	String selectedRoleID=getFieldValue("sessionForAnswer/sssPersonInfo/sssPersonRole");
	String selectedPersonID=getFieldValue("sessionForAnswer/sssPersonInfo/sssPersonName");
	if((isNull(selectedRoleID))||(isNull(selectedPersonID))){
		showWarning("Invalid data","No person role or person is selected");
		return;
	}

	rolePerson=new ArrayList();
	String psRoleNameId=selectedRoleID+"_"+selectedPersonID;
	rolePerson.add(psRoleNameId);

	String selectedRoleName=null;
	String selectedPersonName=null;
	//check duplication
	for (existPs: sssPersonRoleandNameList){
		if (existPs.get(0).equals(psRoleNameId)){
			showWarning("Duplicate data","This person with this role is already in the list");
			return;
		}
	}

	for(role:personRoleList){
		if(role.get(0).equals(selectedRoleID)){
			selectedRoleName=role.get(1);
			break;
		}
	}
	for(person:personList){
		if(person.get(0).equals(selectedPersonID)){
			selectedPersonName=person.get(1);
			break;
		}

	}
	if((isNull(selectedRoleName))||(isNull(selectedPersonName))){
		showWarning("Invalid data","Invalid role data or person data\n"+"you might be using stale data, please contact the Admin");
		return;
	}
	rolePerson.add(selectedRoleName+"_"+selectedPersonName);
	
	if(selectedRoleName.equals("consultant")){
		checkPersonIntro(selectedPersonID,rolePerson);
	}
	else{
		sssPersonRoleandNameList.add(rolePerson);
		populateList("sessionForAnswer/sssPersonInfo/sssPersonList",sssPersonRoleandNameList);
	}
}

deletePersonInSession(){
	String toDelPerson=getListItemValue();
	if(introAns){
		if (toDelPerson.equals(introPsMark)){
			showWarning("Invalid operation","This person can not be deleted from this session");
			return;
		}
	}
	for(psInfo : sssPersonRoleandNameList){
		if(psInfo.get(0).equals(toDelPerson)){
			sssPersonRoleandNameList.remove(psInfo);
			break;
		}
	}
	populateList("sessionForAnswer/sssPersonInfo/sssPersonList",sssPersonRoleandNameList);
}

checkPersonIntro(String personID, ArrayList toAddPerson){
	checkPsIntrSssQuery="select uuid,measure from latestNonDeletedArchEntIdentifiers "+
			"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionID') "+
			"and uuid in ( select uuid from AentReln "+
				"where RelationshipID in(select RelationshipID from AentReln "+
					"where RelationshipID in (select RelationshipID from latestNonDeletedRelationship "+
						"where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Answer and Session' ) "+
						"and latestNonDeletedRelationship.Deleted IS NULL) "+
			"and uuid in (select uuid from latestNonDeletedAentValue "+
				"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionnaireID') "+
				"and latestNonDeletedAentValue.measure in(select uuid from latestNonDeletedAentValue "+
					"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionnaireType') "+
					"and measure=(select uuid from latestNonDeletedAentValue "+
						"where AttributeID= (select AttributeID from AttributeKey "+
							"where AttributeName='QuesnirTypeName') and measure = 'Introductory'))))) "+
			"and uuid in (select measure from latestNonDeletedArchEntIdentifiers "+
				"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionIDforPerson') "+
				"and uuid in (select uuid from latestNonDeletedAentValue "+
					"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionPersonRole') "+
					"and measure=(select uuid from latestNonDeletedAentValue "+
						"where AttributeID=(select AttributeID from AttributeKey where AttributeName='PersonRoleName') "+
						"and measure='consultant') "+
			"and uuid in (select uuid from latestNonDeletedAentValue "+
				"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionPersonName') "+
				"and measure ='"+personID+"')));";
	
	fetchAll(checkPsIntrSssQuery,new FetchCallback() {				        	
		onFetch(result) {					        	
			if(isNull(result)){
				String toAddPsIdInfo=toAddPerson.get(0);
				String toAddPsInfo=toAddPerson.get(1);

				showAlert("alert", "This person has not answered introductory questionnaire(s) \n"+"Please click \"Cancel\" to proceed to the introductory questionnaire(s)\n"+"or \"OK\" to skip the introductory questionnaire(s)", 
					"addPsToSssConfirm(\""+toAddPsIdInfo+"\", \""+toAddPsInfo+"\")", "addPersonIntro(\""+personID+"\")");
			}
			else
			{	
				sssPersonRoleandNameList.add(toAddPerson);
				populateList("sessionForAnswer/sssPersonInfo/sssPersonList",sssPersonRoleandNameList);
			}
        }
        onError(message) {
            showToast(message);     
        }
	});
}

addPsToSssConfirm(String toAddPersonID, String toAddPersonName){
	toAddPersonTemp=new ArrayList();
	toAddPersonTemp.clear();
	toAddPersonTemp.add(toAddPersonID);
	toAddPersonTemp.add(toAddPersonName);
	sssPersonRoleandNameList.add(toAddPersonTemp);
	populateList("sessionForAnswer/sssPersonInfo/sssPersonList",sssPersonRoleandNameList);
}

addPersonIntro(String toAddIntroPersonId){
	showAlert("alert", "Do you want to add introductory answer for this person?", "addPersonIntroAnswer(\""+toAddIntroPersonId+"\")", "stayInCurrentPage()");
}

addPersonIntroAnswer(String toAddIntroPersonId){
	loadPersonInfo("sss",toAddIntroPersonId);
}

autoSaveSession(String typeFlag){
	switch(typeFlag){
		case "head":
			saveSession("answer");
		break;
		case "tail":
			sssOriginInfo.clear();
			sssOriginInfo.addAll(sssNewInfo);
			original_sss_answer_list.clear();
			original_sss_answer_list.addAll(sss_answer_list);
			sssPersonRoleNameListOrigin.clear();
			sssPersonRoleNameListOrigin.addAll(sssPersonRoleandNameList);
		break;
		case "tailNew":
			sssOriginInfo.clear();
			sssOriginInfo.add(getFieldValue("sessionForAnswer/sssHidden/sssID"));

			original_sss_answer_list.clear();
			original_sss_answer_list.addAll(sss_answer_list);
			sssPersonRoleNameListOrigin.clear();
			sssPersonRoleNameListOrigin.addAll(sssPersonRoleandNameList);
		break;
		case "emr":
			sssOriginInfo.clear();
			sssOriginInfo.add(emrSssInfo.get("sssId"));
			original_sss_answer_list.clear();
			original_sss_answer_list.addAll(sss_answer_list);
		break;
	}
	
}

saveSession(String typeflag){
	if(isNull(sss_id)){//SAVING NEW SESSION
		if(isNull(sss_answer_list))
		{
			showWarning("Incomplete Data","Data can't be saved\n"+"Please make sure you have answer(s) in this session");
			return;
		}

	    //generate session label
		Hashtable psInfo=extractPsSum();
		String needInfo=checkRoleComplete(psInfo);
		//showWarning("needInfo1","needInfo1");
		if(needInfo!=null){
			showWarning("No "+ needInfo +" info","No "+needInfo+" selected, please add "+needInfo+" info");
			return;
		}
		//showWarning("needInfo","needInfo");
		ansConsultant=psInfo.get("consultant");
		interviwerPrefix=psInfo.get("interviewer");
		
		String tempSssLabel=interviwerPrefix+sssLabel;
		sssDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
		"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionID') "+
		"and (measure = '"+tempSssLabel+"' or measure like '"+tempSssLabel+"(%)')";

		fetchAll(sssDuplicateQuery,new FetchCallback() {
			onFetch(result) {
				if(!isNull(result)){
					tempSssLabel = nonDupLabelGen(result, tempSssLabel,"Session","SessionID",true);
				}
				//showWarning("tempSssLabel",tempSssLabel);
				setFieldValue("sessionForAnswer/sssHidden/sssID",tempSssLabel);

				saveTabGroup("sessionForAnswer", sss_id, null, null, new SaveCallback() {
				    onSave(uuid, newRecord) {
				    	sss_id = uuid;
				      	if (newRecord) {
							saveAnsInSession(sss_id,"newSss",psInfo);
							savePsInSession(sss_id);
							autoSaveSession("tailNew");
							showToast("New session contains answer(s) created");
							saveNewSssToFieldTrip(sss_id);
				      }
				    }
				    onError(message) {
				        showWarning("error on saveSession 1",message);
				    }  
					});
			}  
		});
	}
	else{
		//showWarning("update session","update session");
		updateSession();
		saveAnnotation("sessionForAnswer", sss_id);
	}
}

saveAnsInSession(String sessionId, String typeflag, Hashtable psInfo){
	//showWarning("saveAnsInSession","saveAnsInSession");
	if(psInfo == null || psInfo.isEmpty()){
		Hashtable psInfo=extractPsSum();
		String needInfo=checkRoleComplete(psInfo);
		if(needInfo!=null){
			showWarning("No "+ needInfo +" info","No "+needInfo+" selected, please add "+needInfo+" info");
			return;
		}
	}
	//if this is for saving new session, then we need to save the relns
	if(typeflag.equals("newSss")){
		for(answer:sss_answer_list){
			saveEntitiesToRel("Answer and Session",sessionId,answer.get(0));
		}
	}
	//else we just need to check the labels
    ansConsultant=psInfo.get("consultant");
	//below is updating answer label and file labels
	sssOrgnAnsLblList=extractOriginLbl(sss_answer_list);

	if(!isNull(sssOrgnAnsLblList)){
		for(ans : sssOrgnAnsLblList){
			//showWarning(ans.get(0),ans.get(1));
			ansLblMng(ans,ansConsultant);
		}// for(ans : sss_answer_list)
	}
	
}

savePsInSession(String sessionId){
	tempCostntID=null;
	tempIntverID=null;
	for (tempRoleID:personRoleList){
		if (tempRoleID.get(1).equals("consultant")){
			tempCostntID=tempRoleID.get(0);
		}
		else if(tempRoleID.get(1).equals("interviewer")){
			tempIntverID=tempRoleID.get(0);
		}
	}
	for(personInSss: sssPersonRoleandNameList){
		String psInfoId=personInSss.get(0);
		String [] psInfoIdSplit=psInfoId.split("_");
		String tempPsRoleID=psInfoIdSplit[0];
		String tempPsID=psInfoIdSplit[1];
		sssPsRoleAttributes= createAttributeList();
		sssPsRoleAttributes.add(createEntityAttribute("SessionIDforPerson", null, null, sessionId, null));
		sssPsRoleAttributes.add(createEntityAttribute("SessionPersonName", null, null, tempPsID, null));
		sssPsRoleAttributes.add(createEntityAttribute("SessionPersonRole", null, null, tempPsRoleID, null));
		saveArchEnt(null, "SessionPerson", null, sssPsRoleAttributes);
		//save consultant and interviewer and other roles in to a relationship
		//for the convenience of viewing data
		if(tempPsRoleID.equals(tempCostntID)){
			saveEntitiesToRel("Session and Consultant",sessionId,tempPsID);
		}
		else if(tempPsRoleID.equals(tempIntverID)){
			saveEntitiesToRel("Session and Interviewer",sessionId,tempPsID);
		}
		else{
			saveEntitiesToRel("Session and Person",sessionId,tempPsID);
		}	
	}
}

loadSessionInfo(String typeflag){
	sss_id=getListItemValue();
	if(isNull(sss_id)){
		showWarning("Invalid session","No session is selected or session is not available");
		return;
	}
	createMainSessionPage("s");

	showTabGroup("sessionForAnswer", sss_id, new FetchCallback() {
        onFetch(result) {
			sssOriginInfo.clear();
        	sssOriginInfo.add(getFieldValue("sessionForAnswer/sssHidden/sssID"));
        	if(!isNull(getFieldValue("sessionForAnswer/sssAnsBasicInfo/sssDescription"))){
        		sssOriginInfo.add(getFieldValue("sessionForAnswer/sssAnsBasicInfo/sssDescription"));
        	}
        	else{
        		sssOriginInfo.add("");
        	}
        	loadAnswerForSss(sss_id);
        	loadSssType(sss_id);
			loadPersonForSss(sss_id);
			showToast("Loaded session"+result.getId()); 
		}   
        onError(message) {
            showToast(message);
        }
	});
	loadSssReln(sss_id);
	//saveTabGroup("sessionForAnswer", sss_id, null, null, null, true);
}

loadSssReln(String sessionId){
		loadAnsSssRelnQuery="select RelationshipID, uuid from latestNonDeletedAentReln where uuid <> '"+sessionId+
		"' and RelationshipID in (select RelationshipID from latestNonDeletedAentReln where uuid='"+sessionId+
			"' and RelationshipID in(select RelationshipID from latestNonDeletedRelationship "+
				"where RelnTypeID= (select RelnTypeID from RelnType where RelnTypeName='Answer and Session')"+
				"and latestNonDeletedRelationship.Deleted IS NULL))";

		//Query out the reln id of person and person roles in a session
		loadSssPersonRelnQuery="select uuid from latestNonDeletedArchEntIdentifiers "+
		"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionIDforPerson') "+
		"and measure='"+sessionId+"' ";

		loadSssConslRelnQuery="select RelationshipID, uuid from latestNonDeletedAentReln where uuid <>'"+sessionId+"' "+
		"and RelationshipID in (select RelationshipID from latestNonDeletedAentReln where uuid='"+sessionId+
			"' and RelationshipID in (select RelationshipID from latestNonDeletedRelationship "+
				"where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Session and Consultant') "+
				"and latestNonDeletedRelationship.Deleted IS NULL))";

		loadSssIntvRelnQuery="select RelationshipID, uuid from latestNonDeletedAentReln where uuid <>'"+sessionId+"' "+
		"and RelationshipID in (select RelationshipID from latestNonDeletedAentReln where uuid='"+sessionId+
			"' and RelationshipID in (select RelationshipID from latestNonDeletedRelationship "+
				"where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Session and Interviewer') "+
				"and latestNonDeletedRelationship.Deleted IS NULL))";


		loadSssPsRelnQuery="select RelationshipID, uuid from latestNonDeletedAentReln where uuid <>'"+sessionId+"' "+
		"and RelationshipID in (select RelationshipID from latestNonDeletedAentReln where uuid='"+sessionId+
			"' and RelationshipID in (select RelationshipID from latestNonDeletedRelationship "+
				"where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Session and Person') "+
				"and latestNonDeletedRelationship.Deleted IS NULL))";
		
		fetchAll(loadAnsSssRelnQuery, new FetchCallback() {
	        onFetch(result) {
	        	sssAnsRelnOrigin.clear();
	        	sssAnsRelnOrigin.addAll(result);
	        }
	        onError(message) {
	            showToast(message);
	        }
	    });

		fetchAll(loadSssConslRelnQuery, new FetchCallback() {
	        onFetch(result) {
	        	sssOldCoslReln.clear();
	        	sssOldCoslReln.addAll(result);
	        }
	        onError(message) {
	            showToast(message);
	        }
	    });
	    fetchAll(loadSssIntvRelnQuery, new FetchCallback() {
	        onFetch(result) {
	        	sssOldIntvReln.clear();
	        	sssOldIntvReln.addAll(result);
	        }
	        onError(message) {
	            showToast(message);
	        }
	    });
	    fetchAll(loadSssPsRelnQuery, new FetchCallback() {
	        onFetch(result) {
	        	sssOldPsReln.clear();
	        	sssOldPsReln.addAll(result);
	        }
	        onError(message) {
	            showToast(message);
	        }
	    });
}

loadAnswerForSss(String sessionId){
	loadAnswerForSessionQuery="select uuid,measure from latestNonDeletedAentValue "+ 
		"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerLabel') "+
		"and uuid in "+
			"(select uuid from AentReln where RelationshipID in "+
		"(select RelationshipID from AEntReln where AEntReln.uuid='"+sessionId+"' "+
			"AND RelationshipID in "+
		"(select RelationshipID from latestNonDeletedRelationship where RelnTypeID="+
			"(select RelnTypeID from RelnType where RelnTypeName='Answer and Session') "+
		"and latestNonDeletedRelationship.Deleted IS NULL)))";

	fetchAll(loadAnswerForSessionQuery, new FetchCallback() {
        onFetch(answers) {
        	if(!isNull(answers)){
        		original_sss_answer_list.clear();
	        	sss_answer_list.clear();
	       		original_sss_answer_list.addAll(answers);
	       		sss_answer_list.addAll(answers);
	        	populateList("sessionForAnswer/sssAnsList/sssAnswerList",original_sss_answer_list);
	        	checkSssQuesnirType("answer");
        	}
        	else{
        		original_sss_answer_list.clear();
        		populateList("sessionForAnswer/sssAnsList/sssAnswerList",original_sss_answer_list);
        		showWarning("Out-of-date Data","Answers in this session may not be used anymore\n"+"Please contact the admin for further information");
        	}

        }
        onError(message) {
            showToast(message);
        }
    });
}

loadSssType(String sessionId){
	loadSessionTypeNamesQuery="select measure from latestNonDeletedAentValue "+
		"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesnirTypeName') "+
		"and uuid in "+
		"(select measure from latestNonDeletedAentValue "+
		"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionnaireType') "+
		"and uuid in (select measure from latestNonDeletedAentValue "+
		"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionnaireID') "+
		"and uuid in (select uuid from AentReln where RelationshipID in "+
		"(select RelationshipID from AEntReln where AEntReln.uuid='"+sessionId+"' "+
		"AND RelationshipID in (select RelationshipID from latestNonDeletedRelationship "+
		"where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Answer and Session') "+
		"and latestNonDeletedRelationship.Deleted IS NULL))) group by measure))";

	fetchAll(loadSessionTypeNamesQuery, new FetchCallback() {
        onFetch(result) {
        	//showWarning("result",result.size().toString());
        	if(isNull(result) || result.isEmpty() || result.size()<1){	
        		setFieldValue("sessionForAnswer/sssAnsBasicInfo/sssType","Type not available");
        	}

        	else{
        		//showWarning("not null","notnull");
        		StringBuilder sb=new StringBuilder();
        		for (re:result){
        			if (sb.length()>0)
        			{
        				sb.append(",");
        			}
        			sb.append(re.toString());
        		}
        		setFieldValue("sessionForAnswer/sssAnsBasicInfo/sssType",sb.toString());
        	}
        }
        onError(message) {
            showWarning("loading date error",message);
        }
    });
}

loadPersonForSss(String sessionId){
	//select t5.relnId, t5.personUuid, t5.persName, t6.personRoleUuid, t6.personRoleName from (select t1.personId as personUuid, t1.personName as persName, t2.psssId as relnId from (select pId.uuid as personId, pId.measure as personName from latestNonDeletedAentValue as pId where pId.AttributeID=(SELECT AttributeID from AttributeKey where AttributeName='PersonName') and pId.uuid in (select psName.measure from latestNonDeletedAentValue as psName, latestNonDeletedAentValue as psReln where psName.AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionPersonName') and psReln.AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionIDforPerson') and psReln.measure='1000011478038316786' and psName.uuid=psReln.uuid)) t1 inner join (select psName.uuid as psssId, psName.measure as psId from latestNonDeletedAentValue as psName, latestNonDeletedAentValue as psReln where psName.AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionPersonName') and psReln.AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionIDforPerson') and psReln.measure='1000011478038316786' and psName.uuid=psReln.uuid) t2 on t1.personId=t2.psId) t5 inner join (select t3.roleId as personRoleUuid, t3.roleName as personRoleName, t4.rsssId as relnId from (select rId.uuid as roleId, rId.measure as roleName from latestNonDeletedAentValue as rId where rId.AttributeID=(select AttributeID from AttributeKey where AttributeName='PersonRoleName') and rId.uuid in (select psRole.measure from latestNonDeletedAentValue as psRole, latestNonDeletedAentValue as psReln where psRole.AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionPersonRole') and psReln.AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionIDforPerson') and psReln.measure='1000011478038316786' and psRole.uuid=psReln.uuid))t3 inner join (select psRole.uuid as rsssId, psRole.measure as tempPsRoleID from latestNonDeletedAentValue as psRole, latestNonDeletedAentValue as psReln where psRole.AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionPersonRole') and psReln.AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionIDforPerson') and psReln.measure='1000011478038316786' and psRole.uuid=psReln.uuid)t4 on t3.roleId=t4.tempPsRoleID) t6 on t5.relnId =t6.relnId

	loadSssPersonRoleQuery="select t5.relnId, t6.personRoleUuid|| '_' || t5.personUuid as personRoleNameId, t6.personRoleName|| '_' || t5.persName as personRoleName "+
		"from (select t1.personId as personUuid, t1.personName as persName, t2.psssId as relnId from (select pId.uuid as personId, pId.measure as personName "+
		"from latestNonDeletedAentValue as pId where pId.AttributeID=(SELECT AttributeID from AttributeKey where AttributeName='PersonName') "+
		"and pId.uuid in (select psName.measure from latestNonDeletedAentValue as psName, latestNonDeletedAentValue as psReln "+
		"where psName.AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionPersonName') "+
		"and psReln.AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionIDforPerson') and psReln.measure='"+sessionId+"' "+
		"and psName.uuid=psReln.uuid and psName.uuid in (select uuid from latestNonDeletedArchEntIdentifiers where AttributeID=(select AttributeID from AttributeKey "+
		"where AttributeName='SessionIDforPerson')))) t1 inner join "+
		"(select psName.uuid as psssId, psName.measure as psId from latestNonDeletedAentValue as psName, latestNonDeletedAentValue as psReln "+
		"where psName.AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionPersonName') "+
		"and psReln.AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionIDforPerson') and psReln.measure='"+sessionId+"' "+
		"and psName.uuid=psReln.uuid) t2 on t1.personId=t2.psId) t5 "+
		"inner join "+
		"(select t3.roleId as personRoleUuid, t3.roleName as personRoleName, t4.rsssId as relnId from (select rId.uuid as roleId, rId.measure as roleName "+
		"from latestNonDeletedAentValue as rId where rId.AttributeID=(select AttributeID from AttributeKey where AttributeName='PersonRoleName') "+
		"and rId.uuid in (select psRole.measure from latestNonDeletedAentValue as psRole, latestNonDeletedAentValue as psReln "+
		"where psRole.AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionPersonRole') and psReln.AttributeID=(select AttributeID "+
		"from AttributeKey where AttributeName='SessionIDforPerson') and psReln.measure='"+sessionId+"' and psRole.uuid=psReln.uuid))t3 "+
		"inner join (select psRole.uuid as rsssId, psRole.measure as tempPsRoleID from latestNonDeletedAentValue as psRole, latestNonDeletedAentValue as psReln "+
		"where psRole.AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionPersonRole') and psReln.AttributeID=(select AttributeID "+
		"from AttributeKey where AttributeName='SessionIDforPerson') and psReln.measure='"+sessionId+"' "+
		"and psRole.uuid=psReln.uuid)t4 on t3.roleId=t4.tempPsRoleID) t6 on t5.relnId =t6.relnId";	

	sssPsInfoRelnOrigin.clear();
	sssPersonRoleandNameList.clear();
	sssPersonRoleNameListOrigin.clear();
	fetchAll(loadSssPersonRoleQuery, new FetchCallback() {
        onFetch(result) {
        	if(!isNull(result)){
        		for(ps: result){
        			psInfTriplePair=new ArrayList();
					psInfTriplePair.add(ps.get(0));
					psInfTriplePair.add(ps.get(1));	
        			sssPsInfoRelnOrigin.add(psInfTriplePair);
        			psRoleNamePair=new ArrayList();
					psRoleNamePair.add(ps.get(1));
					psRoleNamePair.add(ps.get(2));
					sssPersonRoleNameListOrigin.add(psRoleNamePair);
					sssPersonRoleandNameList.add(psRoleNamePair);
        		}
        		populateList("sessionForAnswer/sssPersonInfo/sssPersonList",sssPersonRoleandNameList);

        	}
        	else{
        		populateList("sessionForAnswer/sssPersonInfo/sssPersonList",sssPersonRoleandNameList);
        		showWarning("Out-of-date Data","Some person in this session may not be used anymore\n"+"Please contact the admin for further information");
        	}
        }
        onError(message) {
            showToast(message);
        }
    });	    
}

updateSession(){
	if(isNull(sss_answer_list)){
		showWarning("Incomplete Data","Please make sure that you have answer(s) in this session");
		return;
	}

	sssNewInfo.clear();
	sssNewInfo.add(getFieldValue("sessionForAnswer/sssHidden/sssID"));
	if(!isNull(getFieldValue("sessionForAnswer/sssAnsBasicInfo/sssDescription"))){
		sssNewInfo.add(getFieldValue("sessionForAnswer/sssAnsBasicInfo/sssDescription"));
	}
	else{
		sssNewInfo.add("");
	}

	Hashtable sssInfoChange=listChange(sssNewInfo,sssOriginInfo);
	Hashtable sssAnsChange=listChange(sss_answer_list,original_sss_answer_list);
	Hashtable sssPsChange=listChange(sssPersonRoleandNameList,sssPersonRoleNameListOrigin);

	//showWarning("compare done","compare done");
	if((sssInfoChange.containsKey("EQUAL")) && (sssAnsChange.containsKey("EQUAL")) && (sssPsChange.containsKey("EQUAL"))){
		showWarning("No change","No data changed");
		return;				
	}
	else if(sssPsChange.containsKey("EQUAL")){
		updateSssNoPsChange(sssInfoChange,sssAnsChange);
	}
	else if(!sssPsChange.containsKey("EQUAL")){
		//showWarning("updateSssPsChange","updateSssPsChange");
		updateSssPsChange(sssInfoChange,sssAnsChange,sssPsChange);
		showToast("Session info updated");
		//autoSaveSession("tail");

	}	
}

updateSssNoPsChange(Hashtable sssInfoChange,Hashtable sssAnsChange){
	Boolean sssInfoUpdated=false;
	if(!sssAnsChange.containsKey("EQUAL")){
		ansListChange(sssAnsChange);
		autoSaveSession("tail");
		sssInfoUpdated=true;
	}
	saveTabGroup("sessionForAnswer", sss_id, null, null, new SaveCallback() {
	    onSave(uuid, newRecord) {
	    	if(!sssInfoUpdated){
				autoSaveSession("tail");
	    	}
	        showToast("Session basic info changed");
	    }
	    onError(message) {
	        showWarning("error on updateSssNoPsChange1",message);
	    }  
	});
}

ansListChange(Hashtable sssAnsChange){
	if(sssAnsChange.containsKey("PUREADD")){
		//showWarning("PUREADD","PUREADD");
		sssNewAddedAns= sssAnsChange.get("PUREADD");
		for(answer:sssNewAddedAns){
			saveEntitiesToRel("Answer and Session",sss_id,answer.get(0));
			//showWarning(sss_id,"new added:"+answer.get(0));
		}//for(answer:sss_answer_list)
		//showWarning("saveEntitiesToRel","saveEntitiesToRel done");
	}
	else if (sssAnsChange.containsKey("PUREDELETE")){
		sssDelAns=sssAnsChange.get("PUREDELETE");
		for(ansDelete:sssDelAns){
			toDelAns=ansDelete.get(0);
			for (oldReln:sssAnsRelnOrigin){
				relnId=oldReln.get(0);
				ansId=oldReln.get(1);
				if (ansId.equals(toDelAns)){
					deleteRel(relnId);
				}
			}
		}
	}
	else{
		sssAddChange=sssAnsChange.get("ADD");
		sssDelChange=sssAnsChange.get("DELETE");

		for(ansDelete:sssDelChange){
			toDelAns=ansDelete.get(0);
			for (oldReln:sssAnsRelnOrigin){
				relnId=oldReln.get(0);
				ansId=oldReln.get(1);
				if (ansId.equals(toDelAns)){
					deleteRel(relnId);
				}
			}
		}
		
		for(answer:sssAddChange){
		    saveEntitiesToRel("Answer and Session",sss_id,answer.get(0));
		}//for(answer:sss_answer_list)
	}
}

updateSssPsChange(Hashtable sssInfoChange,Hashtable sssAnsChange,Hashtable sssPsChange){
	Hashtable psInfo=extractPsSum();
	String needInfo=checkRoleComplete(psInfo);
	if(needInfo!=null){
		showWarning("No "+ needInfo +" info","No "+needInfo+" selected, please add "+needInfo+" info");
		return;
	}
	ansConsultant=psInfo.get("consultant");
	interviwerPrefix=psInfo.get("interviewer");
	//showWarning("coin",ansConsultant+ansConsultant);
	//generate new sssLabel
	Boolean sssLabelChange=false;
    String oldSssLabel=getFieldValue("sessionForAnswer/sssHidden/sssID");
   // showWarning("oldSssLabel",oldSssLabel);
	String [] oldSssLabelSplit=oldSssLabel.split("_");
	String sssOldInv=oldSssLabelSplit[0];
	//showWarning("sssOldInv",sssOldInv);
	String newSssLabel=oldSssLabel;
	if(!sssOldInv.equals(interviwerPrefix)){
		oldSssLabelSplit[0]=interviwerPrefix;
		StringBuilder sb=new StringBuilder();
		for (sssLabelComp : oldSssLabelSplit){
			if (sb.length()>0)
				{sb.append("_");}
			sb.append(sssLabelComp);
		}
		newSssLabel=sb.toString();
		newSssLabel=extractOriginLbl(newSssLabel);
		sssLabelChange=true;
	}
	//change session label
	if(sssLabelChange){
		//showWarning("sessLabel","sessionLabelchanging");
		sssDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
		"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionID') "+
		"and uuid<>"+sss_id+" "+
		"and (measure = '"+newSssLabel+"' or measure like '"+newSssLabel+"(%)')";
		//showWarning("sssDuplicateQuery","sssDuplicateQuery");
		fetchAll(sssDuplicateQuery,new FetchCallback() {
			onFetch(result) {
				if(!isNull(result)){
					newSssLabel=nonDupLabelGen(result,newSssLabel, "Session","SessionID",true);
				}
				setFieldValue("sessionForAnswer/sssHidden/sssID",newSssLabel);
				//showWarning("sss_id",sss_id+newSssLabel);

				if(hasView("sessionForAnswer/sssHidden/sssID")){
					//showWarning("hasView","sessionForAnswer/sssHidden/sssID");
				}
				saveTabGroup("sessionForAnswer", sss_id, null, null, new SaveCallback() {
				    onSave(uuid, newRecord) {
				       // showWarning("Session basic info changed",sss_id);
				    }
				    onError(message) {
				        saveTabGroupFailSafe("sessionForAnswer", sss_id, 0);
				    }  
				});
				if(!(sssAnsChange.containsKey("EQUAL"))){//case0: answer list changed
    				ansListChange(sssAnsChange);
    				//showWarning("ansListChange done","ansListChange done");
    				autoSaveSession("tail");
	    		}
			}
			onError(message) {
		        showWarning("error on updateSssPsChange fetch query",message);
		    } 
		});
		//showWarning("sssLabelChange",sssLabelChange.toString());
	}//if sssLabelChange

	else{
		updateSssNoPsChange(sssInfoChange,sssAnsChange);
	}
	sssPsUpdate(sssPsChange);
	saveAnsInSession(sss_id,"dupLabel",psInfo);
}

sssPsUpdate(Hashtable sssPsChange){
	tempCostntID=null;
	tempIntverID=null;
	for (tempRoleID:personRoleList){
	   	if (tempRoleID.get(1).equals("consultant")){
    	  	tempCostntID=tempRoleID.get(0);
    	}
	    else if(tempRoleID.get(1).equals("interviewer")){
    	  	tempIntverID=tempRoleID.get(0);
    	}
	}

	//Case passed
	if (sssPsChange.containsKey("PUREADD")){
		sssNewAddedPs=sssPsChange.get("PUREADD");
		for(personInSss: sssNewAddedPs){
	  		String psInfoId=personInSss.get(0);
	  		String [] psInfoIdSplit=psInfoId.split("_");
	  		tempPsRoleID=psInfoIdSplit[0];
	  		tempPsID=psInfoIdSplit[1];
	  		sssPsRoleAttributes= createAttributeList();
	  		sssPsRoleAttributes.add(createEntityAttribute("SessionIDforPerson", null, null, sss_id, null));
	  		sssPsRoleAttributes.add(createEntityAttribute("SessionPersonName", null, null, tempPsID, null));
	  		sssPsRoleAttributes.add(createEntityAttribute("SessionPersonRole", null, null, tempPsRoleID, null));
	  		saveArchEnt(null, "SessionPerson", null, sssPsRoleAttributes);
	  		if(tempPsRoleID.equals(tempCostntID)){
	    	  	saveEntitiesToRel("Session and Consultant",sss_id,tempPsID);
	    	}
	    	else if(tempPsRoleID.equals(tempIntverID)){
	    	  	saveEntitiesToRel("Session and Interviewer",sss_id,tempPsID);
	    	}
	    	else{
	    	  	saveEntitiesToRel("Session and Person",sss_id,tempPsID);
	    	}	
	  	}
	}//if (sssPsChange.containsKey("PUREADD"))

	else if (sssPsChange.containsKey("PUREDELETE")){
		//showWarning("person PUREDELETE","person PUREDELETE");
		sssNewDelPs=sssPsChange.get("PUREDELETE");
		for(personInSss: sssNewDelPs){
	  		String toDelPsID=personInSss.get(0);
	  		String [] psInfoIdSplit=toDelPsID.split("_");
	  		tempPsRoleID=psInfoIdSplit[0];
	  		tempPsID=psInfoIdSplit[1];
	  		//delete person info and sessionPerson table
	  		for(oldPs: sssPsInfoRelnOrigin){
	  			if (toDelPsID.equals(oldPs.get(1))){
	  				String toDelPsRelnID=oldPs.get(0);
	  				//showWarning("toDelPsRelnID",toDelPsRelnID);
	  				deleteArchEnt(toDelPsRelnID);
	  				//deleteArchEnt(toDelPsRelnID);
	  			}
	  		}
	  		if(tempPsRoleID.equals(tempCostntID)){
	    	  	for(toDelConsul:sssOldCoslReln){
	    	  		String oldConsulID=toDelConsul.get(1);
	    	  		if(oldConsulID.equals(tempPsID)){
	    	  			deleteRel(toDelConsul.get(0));
	    	  		}
	    	  	}
	    	}
	    	else if(tempPsRoleID.equals(tempIntverID)){
	    	  	for(toDelConsul:sssOldIntvReln){
	    	  		String oldConsulID=toDelConsul.get(1);
	    	  		if(oldConsulID.equals(tempPsID)){
	    	  			deleteRel(toDelConsul.get(0));
	    	  		//	showWarning("toDelPsRelnID",toDelPsRelnID);
	    	  		}
	    	  	}
	    	}
	    	else{
	    	  	for(toDelConsul:sssOldPsReln){
	    	  		String oldConsulID=toDelConsul.get(1);
	    	  		if(oldConsulID.equals(tempPsID)){
	    	  			deleteRel(toDelConsul.get(0));
	    	  		//	showWarning("toDelPsRelnID",toDelPsRelnID);
	    	  		}
	    	  	}
	    	}	
	  	}
	}//else if (sssPsChange.containsKey("PUREDELETE"))

	else{
		//showWarning("DELETE","DELETE");
	  	sssToDelPs=sssPsChange.get("DELETE");
	  	for(personInSss: sssToDelPs){
	  		String toDelPsID=personInSss.get(0);
	  		String [] psInfoIdSplit=toDelPsID.split("_");
	  		tempPsRoleID=psInfoIdSplit[0];
	  		tempPsID=psInfoIdSplit[1];

	  		for(oldPs: sssPsInfoRelnOrigin){
	  			if (toDelPsID.equals(oldPs.get(1))){
	  				String toDelPsRelnID=oldPs.get(0);
	  				deleteArchEnt(toDelPsRelnID);
	  			}
	  		}

	  		if(tempPsRoleID.equals(tempCostntID)){
	    	  	for(toDelConsul:sssOldCoslReln){
	    	  		String oldConsulID=toDelConsul.get(1);
	    	  		if(oldConsulID.equals(tempPsID)){
	    	  			deleteRel(toDelConsul.get(0));
	    	  		}
	    	  	}
	    	}

	    	else if(tempPsRoleID.equals(tempIntverID)){
	    	  	for(toDelConsul:sssOldIntvReln){
	    	  		String oldConsulID=toDelConsul.get(1);
	    	  		if(oldConsulID.equals(tempPsID)){
	    	  			deleteRel(toDelConsul.get(0));
	    	  		}
	    	  	}
	    	}

	    	else{
	    	  	for(toDelConsul:sssOldPsReln){
	    	  		String oldConsulID=toDelConsul.get(1);
	    	  		if(oldConsulID.equals(tempPsID)){
	    	  			deleteRel(toDelConsul.get(0));
	    	  		}
	    	  	}
	    	}	
	  	}
		sssToAddPs=sssPsChange.get("ADD");
		//showWarning("ADD","ADD");
		for(personInSss: sssToAddPs){
	  		String psInfoId=personInSss.get(0);
	  		String [] psInfoIdSplit=psInfoId.split("_");
	  		tempPsRoleID=psInfoIdSplit[0];
	  		tempPsID=psInfoIdSplit[1];
	  		sssPsRoleAttributes= createAttributeList();
	  		sssPsRoleAttributes.add(createEntityAttribute("SessionIDforPerson", null, null, sss_id, null));
	  		sssPsRoleAttributes.add(createEntityAttribute("SessionPersonName", null, null, tempPsID, null));
	  		sssPsRoleAttributes.add(createEntityAttribute("SessionPersonRole", null, null, tempPsRoleID, null));
	  		saveArchEnt(null, "SessionPerson", null, sssPsRoleAttributes);
	  		if(tempPsRoleID.equals(tempCostntID)){
	    	  	saveEntitiesToRel("Session and Consultant",sss_id,tempPsID);
	    	}
	    	else if(tempPsRoleID.equals(tempIntverID)){
	    	  	saveEntitiesToRel("Session and Interviewer",sss_id,tempPsID);
	    	}
	    	else{
	    	  	saveEntitiesToRel("Session and Person",sss_id,tempPsID);
	    	}	
	  	}
		
	  	//showWarning("ADD+DELETE","ADD+DELETE");
	}//sssPsChange containsKey("ADD") and "DELETE"
}
/*** Common methods for session ***/

extractPsSum(){
	ansConsultant=null;
	interviwerPrefix=null;
	Hashtable extractedPsRole=new Hashtable();
	extractedPsRole.clear();

	psRoleInfo=checkRolesInSession();

	if(psRoleInfo.contains("consultant")){
		Iterator itConsultant=sssConsultantList.iterator();
	    firstConsultant=itConsultant.next();
	    ansConsultant=firstConsultant;

	    if(sssConsultantList.size()>1){
			ansConsultant=ansConsultant+"EtAl";
	    }
	    extractedPsRole.put("consultant",ansConsultant);
	}

	if(psRoleInfo.contains("interviewer")){
		Iterator inveIt=sssInterviewerList.iterator();
		interviwerPrefix=inveIt.next();
		if (sssInterviewerList.size()>1){
			interviwerPrefix=interviwerPrefix+"EtAl";
		}
		extractedPsRole.put("interviewer",interviwerPrefix);
	}
	return extractedPsRole;
}

ansLblMng(ArrayList ans, String ansConsultant){
	//showWarning("ansLblMng","ansLblMng");
	String ansLabel=ans.get(1);
	String [] ansLabelSplit=ansLabel.split("_");
	String ansOldPs=ansLabelSplit[2];
	//showWarning("2","2");
	if(!ansOldPs.equals(ansConsultant)){
		ansLabelSplit[2]=ansConsultant;
		StringBuilder sb=new StringBuilder();
		for (ansLabelComp : ansLabelSplit){
			if (sb.length()>0)
				{sb.append("_");}
			sb.append(ansLabelComp);
		}

		String newAnsLabelSss=sb.toString();
		//showWarning("3","3");
		ansDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
			"where AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerLabel') "+
			"and uuid <>"+ans.get(0)+" "+
			"and (measure ='"+newAnsLabelSss+"' or measure like '"+newAnsLabelSss+"(%)')";

		fetchAll(ansDuplicateQuery,new FetchCallback() {
			onFetch(result) {
				entityId=ans.get(0);
				//showWarning("entityId",entityId);
				if(!isNull(result)){
					newAnsLabelSss=nonDupLabelGen(result,newAnsLabelSss,"AnswerToQuestionnaire","AnswerLabel", true);
				}
			//	showWarning("newAnsLabelSss",newAnsLabelSss);
				attributes = createAttributeList();
				attributes.add(createEntityAttribute("AnswerLabel", null, null, newAnsLabelSss, null));
				//showWarning("newAnsLabelSss2",entityId+newAnsLabelSss);
				saveArchEnt(entityId, "AnswerToQuestionnaire", null, attributes, new SaveCallback() {
					onSave(answerUuid,newRecord) {
						//below is changing the filelabel
						//showWarning("saveArchEntansLblMng","saveArchEntansLblMng");
						saveFileLabelChange(entityId, newAnsLabelSss);
					}  
				});	
			}
		});

	}
}

saveFileLabelChange(String entityId, String newAnsLabelSss){
	loadFileForAnswerQuery="select uuid,measure from latestNonDeletedAentValue "+ 
		"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='FileID') "+
		"and uuid in "+
			"(select uuid from AentReln where RelationshipID in "+
		"(select RelationshipID from AEntReln where AEntReln.uuid="+entityId+" "+
			"AND RelationshipID in "+
		"(select RelationshipID from latestNonDeletedRelationship where RelnTypeID="+
			"(select RelnTypeID from RelnType where RelnTypeName='Answer and File') "+
		"and latestNonDeletedRelationship.Deleted IS NULL)))";
				//showWarning("5","5");
	fetchAll(loadFileForAnswerQuery, new FetchCallback() {
        onFetch(fileListForAns) {
        	//showWarning("answerFileFetchDone","answerFileFetchDone");
        	for (file: fileListForAns){
        		String fileEntityId=file.get(0);
        		String oldFileLabel=file.get(1);
        		String [] oldFileLabelSplit=oldFileLabel.split("_");
        		String oldFileLabelType=oldFileLabelSplit[oldFileLabelSplit.length-1];
        		//showWarning("oldFileLabelType",oldFileLabelType);
        		String newFileLabel=newAnsLabelSss+"_"+oldFileLabelType;
        		//showWarning("newFileLabel",newFileLabel);
        		attributesForFile = createAttributeList();
				attributesForFile.add(createEntityAttribute("FileID", null, null, newFileLabel, null));
				saveArchEnt(fileEntityId, "File", null, attributesForFile);

        	}
        	//showWarning("8","8");
        }

        onError(message) {
            showToast(message);
        }
    });

}
saveNewSssToFieldTrip(String newSssId){
	if(!isNull(activeFieldTrip)){
		saveEntitiesToRel("Session and FieldTrip",activeFieldTrip.get(0),newSssId);
		showToast("session is added to a fieldTrip");
	}	
}

checkRoleComplete(Hashtable roleList){
	//showWarning("checkRoleComplete","checkRoleComplete");
	if(roleList==null || roleList.isEmpty()){
		return "person";
	}
	else if(!roleList.containsKey("consultant")){
		return "consultant";
	}
	else if(!roleList.containsKey("interviewer")){
		//showWarning("return i","return isNull");
		return "interviewer";
	}
	//showWarning("null","null");
	return null;
}
/*** Quesnir list variables ***/
current_quesnir_id=null;
current_question_id=null;
current_quesnir_name=null;
current_question_content=null;
current_question_label=null;//label for generating answerID


questionnaire_list=new ArrayList();
ques_in_current_quesnir=new ArrayList();
queslabel_current_quesnir=new ArrayList();
survey_list=new ArrayList();

initQuesNirListVar(){
	current_quesnir_id=null;
	current_question_id=null;
	current_quesnir_name=null;
	current_question_content=null;
	current_question_label=null;
	
	ques_in_current_quesnir.clear();
	survey_list.clear();
	questionnaire_list.clear();
	queslabel_current_quesnir.clear();
	quesRecordingType.clear();
}

showQuestionnaireList(){
	sssRoleInfo=checkRolesInSession();
	if(!sssRoleInfo.contains("consultant")){
		showWarning("No consultant","No consultant selected, please add consultant");
		return;
	}
	else if(!sssRoleInfo.contains("interviewer")){
		showWarning("No interviewer","No interviewer selected, please add interviewer");
		return;
	}
	
	createQuesnirList();
	initQuesNirListVar();
	newTabGroup("questionnaireListAll");
}
/*** quesnir list queries***/
/***usage: quesnir listing (1 usage)***/
loadAllRegQuesnirQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
	"WHERE latestNonDeletedAentValue.AttributeID = "+
	"(SELECT AttributeID FROM AttributeKey WHERE AttributeName='QuestionnaireName') "+
	"AND latestNonDeletedAentValue.uuid IN "+
	"(SELECT uuid from latestNonDeletedAentValue WHERE latestNonDeletedAentValue.AttributeID= "+
		"(select AttributeID from AttributeKey where AttributeName='QuestionnaireType') "+
		"AND latestNonDeletedAentValue.measure NOT IN "+
		"(select uuid from latestNonDeletedAentValue where latestNonDeletedAentValue.AttributeID="+
			"(select AttributeID from AttributeKey where AttributeName='QuesnirTypeName') "+
			"and latestNonDeletedAentValue.measure = 'Introductory' "+ 
			"or latestNonDeletedAentValue.measure = 'Emergency' "+
			"or latestNonDeletedAentValue.measure = 'Sociolinguistic' "+
			")) GROUP BY uuid ORDER BY measure asc;";

/***usage: quesnir listing (1 usage)***/
loadAllIntrQuesnirQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
	"WHERE latestNonDeletedAentValue.AttributeID = "+
	"(SELECT AttributeID FROM AttributeKey WHERE AttributeName='QuestionnaireName') "+
	"AND latestNonDeletedAentValue.uuid IN "+
	"(SELECT uuid from latestNonDeletedAentValue WHERE latestNonDeletedAentValue.AttributeID= "+
		"(select AttributeID from AttributeKey where AttributeName='QuestionnaireType') "+
		"AND latestNonDeletedAentValue.measure IN "+
		"(select uuid from latestNonDeletedAentValue where latestNonDeletedAentValue.AttributeID="+
			"(select AttributeID from AttributeKey where AttributeName='QuesnirTypeName') "+
			"and latestNonDeletedAentValue.measure = 'Introductory' "+
			"or latestNonDeletedAentValue.measure = 'Sociolinguistic' "+
			")) GROUP BY uuid ORDER BY measure asc;";

loadAllQuesnir(){
	if(!introAns){
		fetchAll(loadAllRegQuesnirQuery,new FetchCallback() {
        	onFetch(result) {
				if (!isNull(result)) {
					populateList("questionnaireListAll/questionnaireListInfo/questionnaireListInDB", result);	
					setFieldValue("questionnaireListAll/questionnaireListInfo/quesnir_keyword","*");
				}	
				else{
			    	showWarning("No questionnaire","No questionnaire is available, please contact the admin");
					return;
				}
       	 	}

        	onError(message) {
            	showToast(message);
        	}
    	});
	}
	else{
		fetchAll(loadAllIntrQuesnirQuery,new FetchCallback() {
        	onFetch(result) {
				if (!isNull(result)) {
					populateList("questionnaireListAll/questionnaireListInfo/questionnaireListInDB", result);	
					setFieldValue("questionnaireListAll/questionnaireListInfo/quesnir_keyword","*");
				}	
				else{
			    	showWarning("No questionnaire","No questionnaire is available, please contact the admin");
					return;
				}
       	 }

        	onError(message) {
            	showToast(message);
        	}
    	});
	}
}

loadQuesnirInfo(){
	current_quesnir_id=getListItemValue();
	
	if(isNull(current_quesnir_id)){
		showWarning("No questionnaire selected","No questionnaire is selected, please select a questionnaire");
		return;
	}
	if(current_quesnir_id.equals("placeholder")){
		showWarning("No questionnaire available","No questionnaire available, please contact the admin");
		return;
	}
	else{
		createQuesSel();
		showTabGroup("questionnaireInfo", current_quesnir_id, new FetchCallback() {
        	onFetch(result) {
	        	setFieldValue("questionnaireInfo/surveyQuesnirHidden/currentQuesnirID",current_quesnir_id);
	        	refreshQuesnirInfo();
				current_quesnir_name=getFieldValue("questionnaireInfo/surveyQuesnirHidden/surveyQuestionnaireName");
				showToast("Loaded questionnaire"+result.getId());  

        	}
        	onError(message) {
            	showToast(message);
        	}
       
   	 	});
		
		
	}
}

refreshQuesnirInfo(){
	loadQuesnirTypeQuery="select measure from latestNonDeletedAentValue "+
		"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesnirTypeName') "+
		"and uuid=(select measure from latestNonDeletedAentValue where AttributeID="+
			"(select AttributeID from AttributeKey where AttributeName='QuestionnaireType') "+
			"and uuid='"+current_quesnir_id+"')";

	fetchOne(loadQuesnirTypeQuery,new FetchCallback() {
		onFetch(typeResult) {
			if (!isNull(typeResult)) {	
				setFieldValue("questionnaireInfo/surveyQuesnirHidden/surveyQuestionnaireType",typeResult.get(0));
				if(typeResult.get(0).equals("Sociolinguistic")){
					//showWarning("Sociolinguistic","Sociolinguistic");
					sclngstPrep();
				}
				else{
					regularQuesnirPrep();
				}
			}
		}	       
		onError(message) {
			showToast(message);
		}
	});
}

regularQuesnirPrep(){

	loadQuesContentandOrderQuery="select t1.quesId, t1.quesOrder || '-' || t2.quesContent as qOrderedContent from "+
        "(select quId.measure as quesId, qOrder.measure as quesOrder "+
        "from latestNonDeletedAentValue as quId, latestNonDeletedAentValue as qOrder "+
        "where qOrder.AttributeID=(SELECT AttributeID from AttributeKey where AttributeName='QuesOrderLocal') "+
        "and quId.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesID') "+
        "and quId.uuid=qOrder.uuid "+
        "and quId.measure in "+
            "(select quesInQuesnir.measure from latestNonDeletedAentValue as quesInQuesnir, latestNonDeletedAentValue as quesnir "+
            "where quesInQuesnir.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesID') "+
            "and quesnir.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesnirID') "+
            "and quesInQuesnir.uuid=quesnir.uuid and quesnir.measure='"+current_quesnir_id+"') "+
        "and qOrder.uuid in "+
            "(select uuid from latestNonDeletedArchEntIdentifiers where AttributeID = (select AttributeID from AttributeKey where AttributeName='QuesnirID') "+
            "and measure='"+current_quesnir_id+"')) t1 "+
    "inner join "+
        "(select qId.measure as quesId, qContent.measure as quesContent "+
        "from latestNonDeletedAentValue as qId, latestNonDeletedAentValue as qContent, latestNonDeletedAentValue as qLanguage "+
        "where qContent.AttributeID=(SELECT AttributeID from AttributeKey where AttributeName='QuesContent') "+
        "and qId.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionUuid') "+
        "and qLanguage.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesLangUuid') "+
        "and qId.uuid=qContent.uuid "+
        "and qId.uuid=qLanguage.uuid "+
        "and qLanguage.measure IN (select eng.uuid from latestNonDeletedAentValue as eng where eng.AttributeID=(select AttributeID from AttributeKey where AttributeName='LanguageName') "+
        "and eng.measure='English' and eng.uuid in (select uuid from latestNonDeletedArchEntIdentifiers where AttributeID=(select AttributeID from AttributeKey where AttributeName='LanguageID'))) "+
        "and qId.measure in "+
            "(select quesInQuesnir.measure from latestNonDeletedAentValue as quesInQuesnir, latestNonDeletedAentValue as quesnir "+
            "where quesInQuesnir.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesID') "+
            "and quesnir.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesnirID') "+
            "and quesInQuesnir.uuid=quesnir.uuid and quesnir.measure='"+current_quesnir_id+"') "+
        "and qId.uuid in "+
            "(select uuid from latestNonDeletedArchEntIdentifiers where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionUuid'))) t2 "+
    "on t1.quesId=t2.quesId group by t1.quesId "+
    "order by qOrderedContent asc";

	fetchAll(loadQuesContentandOrderQuery, new FetchCallback() {
	        onFetch(result) {
	            ques_in_current_quesnir.clear();
	            ques_in_current_quesnir.addAll(result);
	            populateList("questionnaireInfo/surveyQuestionnaire/surveyQuestionInQuestionnaire", ques_in_current_quesnir);
	        }
		});

	queslabel_quesnir_query="select uuid, measure from latestNonDeletedAentValue "+
		"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionID') "+
		"and uuid in (select measure from latestNonDeletedArchEntIdentifiers "+
		"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesUuid') "+
		"and measure in (select quesInQuesnir.measure from latestNonDeletedAentValue as quesInQuesnir, latestNonDeletedAentValue as quesnir "+
		"where quesInQuesnir.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesID') "+
		"and quesnir.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesnirID') "+
		"and quesInQuesnir.uuid=quesnir.uuid and quesnir.measure='"+current_quesnir_id+"'))";

	quesRecordingTypeQuery="select t2.quId, t1.prName from "+
		"(select pName.uuid as prId, pName.measure as prName from latestNonDeletedAentValue as pName "+
			"where pName.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesPropDefName'))t1 "+
		"inner join "+
		"(select qId.measure as quId, qProp.measure as qPropId "+
		"from latestNonDeletedArchEntIdentifiers as qId, latestNonDeletedAentValue as qProp "+
		"where qId.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesUuid') "+
		"and qProp.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesPropDefID') "+
		"and qId.uuid=qProp.uuid "+
		"and qId.measure in (select quesInQuesnir.measure from latestNonDeletedAentValue as quesInQuesnir, latestNonDeletedAentValue as quesnir "+
			"where quesInQuesnir.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesID') "+
			"and quesnir.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesnirID') "+
		"and quesInQuesnir.uuid=quesnir.uuid and quesnir.measure='"+current_quesnir_id+"')) t2 "+
		"on t1.prId=t2.qPropId";

	fetchAll(queslabel_quesnir_query, new FetchCallback() {
	    onFetch(result) {
	        queslabel_current_quesnir.clear();
	        queslabel_current_quesnir.addAll(result);
	    }
	});

	fetchAll(quesRecordingTypeQuery, new FetchCallback() {
	    onFetch(result) {
	        quesRecordingType.clear();
	        quesRecordingType.addAll(result);
	    }
	});

}

checkClickValidity(String tempQuesId){
	//showWarning("checkClickValidity","checkClickValidity");
	String tempQuesUuid=null;
	if(tempQuesId==null){
		tempQuesUuid=getListItemValue();
	}
	else
	{
		tempQuesUuid=tempQuesId;
	}
	if(loopQuesOrder!=null && !loopQuesOrder.isEmpty()){
		for(ques:loopQuesOrder){
			if(ques.get(0).equals(tempQuesUuid)){
			
				showAlert("Unselectable question", "You need to answer this question after answering the known language question \n"+"Do you still want to go to the entry question?", "checkLangIntroAnsInSss()", "stayInCurrentPage()");
				//showWarning("Unselectable question","Please start with the 'known languages' question for answering this question");
				return;
			}
		}
	}
	checkPersonAns(tempQuesUuid);
}

checkPersonAns(String tempQuesId){
	if(tempQuesId==null){
		tempQuesId=getListItemValue();
	}
	
	ArrayList consultantList=new ArrayList();
	for (i=0;i<sssConsultantIdList.size();i++){	
		consultantList.add(sssConsultantIdList.get(i).get(0));
	}
	String consultantListClause=buildQuerySetCondition(consultantList);

	loadPersonAnswerQuery="select measure from latestNonDeletedAentValue "+
		"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionID') "+
		"and uuid in (select uuid from AentReln where RelationshipID in (select RelationshipID from AEntReln where AEntReln.uuid in "+
			"(select uuid from latestNonDeletedAentValue "+
				"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionID') "+
				"and uuid in (select uuid from AentReln where RelationshipID "+
					"in (select RelationshipID from AEntReln where AEntReln.uuid IN "+consultantListClause+
						" AND RelationshipID in (select RelationshipID from latestNonDeletedRelationship "+
							"where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Session and Consultant') "+
							"and latestNonDeletedRelationship.Deleted IS NULL)))) "+
		"AND RelationshipID in (select RelationshipID from latestNonDeletedRelationship "+
			"where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Answer and Session') "+
			"and latestNonDeletedRelationship.Deleted IS NULL)))";
	fetchAll(loadPersonAnswerQuery,new FetchCallback() {
        onFetch(result) {
        	//showWarning("loadPersonAnswerQueryresult","loadPersonAnswerQueryresult");
        	Boolean rep=false;
        	if(!isNull(result)){	 
        		//showWarning("!isNull(tempAnsQues)","!isNull(tempAnsQues)");
        		for (ansQues :result){
        			//showWarning("ansQues",ansQues.get(0));
        			if((!isNull(ansQues.get(0))) && (ansQues.get(0).equals(tempQuesId))){
        				rep=true;
        				checkDuplicateAns(true, tempQuesId);
        				break;	
        			}
        		}
        		//showWarning("rep",rep.toString());
        		if(!rep){
        			//showWarning("loadAnswerFromQuesInQuesnir","rep.false");
        			loadAnswerFromQuesInQuesnir(tempQuesId);
        		}       		
			}
			else{
				//showWarning("loadAnswerFromQuesInQuesnir","nullresult");
				loadAnswerFromQuesInQuesnir(tempQuesId);
			}
        }
    });
}
checkDuplicateAns(Boolean dupOrNot, String tempQuesId){
	if(dupOrNot){
		showAlert("alert", "The consultant(s) already answered this question \n"+"Do you still want to continue?", "loadAnswerFromQuesInQuesnir(\""+tempQuesId+"\")", "stayInCurrentPage()");
	}
	else{
		loadAnswerFromQuesInQuesnir(tempQuesId);
	}
}

/*** Answer UI***/
createAnswerPage(){
	if(!hasView("survey/answerFile/Finish_New_Answer")){
		removeAllViewsAndContainers("survey");
		executeViewTask(new ViewTask() {
	    doTask() {
	  		//answerHidden page
	    	hideQuesnirId=createViewDef().createTextField().setLabel("Questionnaire id").setAttributeName("AnswerQuestionnaireID").setAttributeType("measure").setReadOnly(true);
	    	hideQuesId=createViewDef().createTextField().setLabel("Question id").setAttributeName("AnswerQuestionID").setAttributeType("measure").setReadOnly(true);
	    	ansLabelViewDef = createViewDef().createTextField().setLabel("Answer label").setAttributeName("AnswerLabel").setAttributeType("measure").setAnnotationEnabled(true).setReadOnly(true);
	    	ansStartTimeViewDef=createViewDef().createTextField().setLabel("Start timestamp").setAttributeName("AnswerStartTime").setAttributeType("measure").setAnnotationEnabled(true).setReadOnly(true);
	    	ansEndTimeViewDef=createViewDef().createTextField().setLabel("End timestamp").setAttributeName("AnswerEndTime").setAttributeType("measure").setAnnotationEnabled(true).setReadOnly(true);
	    	createView("survey/answerHidden/answerQuestionnaireID",hideQuesnirId,"survey/answerHidden");
	    	createView("survey/answerHidden/answerQuestionID",hideQuesId,"survey/answerHidden");
	    	createView("survey/answerHidden/answerLabel",ansLabelViewDef,"survey/answerHidden");
	        createView("survey/answerHidden/answerStartTimestamp",ansStartTimeViewDef,"survey/answerHidden");
	        createView("survey/answerHidden/answerEndTimestamp",ansEndTimeViewDef,"survey/answerHidden");
	    	//answerBasic page
	    	
	    	ansTextViewDef=createViewDef().createTextField().setLabel("Answer text").setAttributeName("AnswerText").setAttributeType("measure").setAnnotationEnabled(true);
			createView("survey/answerBasic/answerText",ansTextViewDef,"survey/answerBasic");
	    	//newAnsBtnDef = createViewDef().createButton().setLabel("Save Answer").setStyleCss("faims-blue");
	        //createView("survey/answerBasic/Finish_New_Answer",newAnsBtnDef,"survey/answerFile");
	        //answerFile page
	        
			newAnsBtnDef = createViewDef().createButton().setLabel("Save Answer").setStyleCss("faims-blue");
			fileCateDef = createViewDef().createDropDown().setLabel("File Category");
			newFileBtnDef = createViewDef().createButton().setLabel("New File").setStyleCss("faims-blue");
			fileListDef=createViewDef().createList().setLabel("Answer files").setStyleCss("ansFile-list");
			createView("survey/answerFile/Finish_New_Answer",newAnsBtnDef,"survey/answerFile");
	    	createView("survey/answerFile/file_Category",fileCateDef,"survey/answerFile");
	        createView("survey/answerFile/Add_New_File",newFileBtnDef,"survey/answerFile");
	        createView("survey/answerFile/answerFileList",fileListDef,"survey/answerFile");
	        
	        refreshTabgroupCSS("survey");
			/**Events for answer**/
			onEvent("survey/answerFile/Finish_New_Answer","click","saveNewAnswer(0)");
			onEvent("survey/answerFile/Add_New_File","click","newFile(\"answer\",null)");
			onEvent("survey/answerFile/answerFileList","click","viewOrDeleteFileReln()");
	   		}
			});
	}
}
createFreeTextPage(){
	if(!hasView("survey/answerBasic/Finish_New_Answer")){
		removeAllViewsAndContainers("survey");
		executeViewTask(new ViewTask() {
	    doTask() {
	  		//answerHidden page
	    	hideQuesnirId=createViewDef().createTextField().setLabel("Questionnaire id").setAttributeName("AnswerQuestionnaireID").setAttributeType("measure").setReadOnly(true);
	    	hideQuesId=createViewDef().createTextField().setLabel("Question id").setAttributeName("AnswerQuestionID").setAttributeType("measure").setReadOnly(true);
	    	ansLabelViewDef = createViewDef().createTextField().setLabel("Answer label").setAttributeName("AnswerLabel").setAttributeType("measure").setAnnotationEnabled(true).setReadOnly(true);
	    	ansStartTimeViewDef=createViewDef().createTextField().setLabel("Start timestamp").setAttributeName("AnswerStartTime").setAttributeType("measure").setAnnotationEnabled(true).setReadOnly(true);
	    	ansEndTimeViewDef=createViewDef().createTextField().setLabel("End timestamp").setAttributeName("AnswerEndTime").setAttributeType("measure").setAnnotationEnabled(true).setReadOnly(true);
	    	createView("survey/answerHidden/answerQuestionnaireID",hideQuesnirId,"survey/answerHidden");
	    	createView("survey/answerHidden/answerQuestionID",hideQuesId,"survey/answerHidden");
	    	createView("survey/answerHidden/answerLabel",ansLabelViewDef,"survey/answerHidden");
	        createView("survey/answerHidden/answerStartTimestamp",ansStartTimeViewDef,"survey/answerHidden");
	        createView("survey/answerHidden/answerEndTimestamp",ansEndTimeViewDef,"survey/answerHidden");
	    	//answerBasic page
	    	
	    	ansTextViewDef=createViewDef().createTextField().setLabel("Answer text").setAttributeName("AnswerText").setAttributeType("measure").setAnnotationEnabled(true);
			createView("survey/answerBasic/answerText",ansTextViewDef,"survey/answerBasic");
	    	newAnsBtnDef = createViewDef().createButton().setLabel("Save Answer").setStyleCss("faims-blue");
	        createView("survey/answerBasic/Finish_New_Answer",newAnsBtnDef,"survey/answerFile");
	        
	        refreshTabgroupCSS("survey");
			/**Events for answer**/
			onEvent("survey/answerBasic/Finish_New_Answer","click","saveNewAnswer(0)");
	   		}
			});
	}
}
createChkListPage(String tempQuesId){
	if(!hasView("survey/answerBasic/radioGrp")){
		removeAllViewsAndContainers("survey");
		executeViewTask(new ViewTask() {
	    doTask() {
	    	quesContentDef = createViewDef().createTextField().setReadOnly(true);
	    	ansSelDef=createViewDef().createRadioGroup();
	    	newNextBtnDef = createViewDef().createButton().setLabel("Next").setStyleCss("faims-blue");

			createView("survey/answerBasic/quesText",quesContentDef,"survey/answerBasic");
	        createView("survey/answerBasic/radioGrp",ansSelDef,"survey/answerBasic");
	        createView("survey/answerBasic/nextBtn",newNextBtnDef,"survey/answerBasic");

	        refreshTabgroupCSS("survey");
			/**Events for answer**/
			tempChoice=new ArrayList();
			tempChoice.add(new NameValuePair("Yes", "Y"));
			tempChoice.add(new NameValuePair("No", "N"));
			populateRadioGroup("survey/answerBasic/radioGrp",tempChoice);
			//showWarning("test-please ignore",tempQuesId);
			//onEvent("survey/answerBasic/nextBtn","click","nextQuestion(\""+tempQuesId+"\",ques_in_current_quesnir)");
	   		onEvent("survey/answerBasic/nextBtn","click","nextQuestion(\""+tempQuesId+"\", ques_in_current_quesnir, true)");
	   		}
		});
	}
}

/**Emergency session preparation**/
/*** Emergency session variables***/

emrSssInfo=new HashMap();
emrAnsInfo=new HashMap();
emrPsInfo=new ArrayList();
Boolean emrIveExist=false;
//Boolean emrSss=false;
initEmrSssVars(){
	emrSssInfo.clear();
    emrPsInfo.clear();
    emrIveExist=false;
    emrAnsInfo.clear();
}
emrSssPrep(){
	/***init sss vars***/
	initSessionVar();
	initEmrSssVars();
	emrSssPsLabelPrep();
	
	//showWarning("emrSssInfo.put(","emrSssInfo.put(");
	/***init ans vars***/

	initAnswerVar();
	/***basic info for answer***/
	emrAnsPrep();
	

	newFile("answer","emr");
	attachAudioToField("file/fileInfo/audioFileContent");
}

emrSssPsLabelPrep(){
		/***basic info for a session***/
	takePoint();
	currentDate=getCurrentDate();
	emrSssStartTime=getCurrentTime();
	emrSssName="EmrSss"+currentDate;
	emrSssPosition=null;
	emrSssCnsltntName="UnspecifiedConsultant"+emrSssStartTime.replaceAll("[^0-9]","");
	emrSssCnsltntId="0000000000000000010";
	emrSssIntvName=username+emrSssStartTime.replaceAll("[^0-9]","");
	emrSssIntvId=userid;
	emrSssLabel=null;
	checkPsInDbQuery="select uuid from latestNonDeletedAentValue where AttributeID=(select AttributeID from AttributeKey where AttributeName='PersonName') "+
			"and measure='"+username+"'";

	fetchOne(checkPsInDbQuery,new FetchCallback() {
		onFetch(result) {
			if (isNull(result) || result.isEmpty()) {	
				emrIveExist=false;
				emrSssPsInfoPrep(emrSssCnsltntId, emrSssCnsltntName, emrSssIntvId, emrSssIntvName);
			}
			else{
				emrIveExist=true;
				emrSssPsInfoPrep(emrSssCnsltntId, emrSssCnsltntName, result.get(0),username);
			}

			if (!isNull(currentPosition)){
				emrSssLabel=username+"_"+currentPosition.get(1)+"_"+currentPosition.get(2)+"_"+currentDate;
				emrSssPosition=currentPosition.get(0);
				emrSssInfo.put("sssLoc", emrSssPosition);
			//setFieldValue("sessionForAnswer/sssAnsBasicInfo/sssLocation",currentPosition.get(0));
			}
			else{
				emrSssLabel=username+"_"+"unknownLat"+"_"+"unknownLong"+"_"+currentDate;
				emrSssPosition="GPS not available";
				emrSssInfo.put("sssLoc", emrSssPosition);
			//setFieldValue("sessionForAnswer/sssAnsBasicInfo/sssLocation","GPS not available");
			}
			emrSssInfo.put("sssId", emrSssLabel);
		}
		onError(message) {
			showToast(message);
		}
	});
	
    
	
	emrSssInfo.put("sssName", emrSssName);
	emrSssInfo.put("sssSttTime", emrSssStartTime);

	emrAnsLabel="emergencyQuestion"+"_Answer_"+emrSssCnsltntName+currentDate;
	emrAnsStrtTime=emrSssStartTime;
	emrAnsInfo.put("start_time",emrAnsStrtTime);
	emrAnsInfo.put("label",emrAnsLabel);
}

emrSssPsInfoPrep(String tempEmrCnsId, String tempEmrCnsName, String tempEmrItvId, String tempEmrItvName){
	loadCnsltntRoleIdQuery="select uuid from latestNonDeletedAentValue "+
	"where AttributeID=(select AttributeID from AttributeKey where AttributeName='PersonRoleName') "+
	"and measure ='consultant'";

	loadItvwrRoleIdQuery="select uuid from latestNonDeletedAentValue "+
	"where AttributeID=(select AttributeID from AttributeKey where AttributeName='PersonRoleName') "+
	"and measure ='interviewer'";

	fetchOne(loadCnsltntRoleIdQuery,new FetchCallback() {
		onFetch(result) {
			if (!isNull(result)) {	
				//emrSssCnsltnt=result.get(0)+"_"+tempEmrCnsName;
				newPsInEmrSss=new ArrayList();
				newPsInEmrSss.add(result.get(0));
				newPsInEmrSss.add(tempEmrCnsId);
				newPsInEmrSss.add(tempEmrCnsName);
				emrPsInfo.add(newPsInEmrSss);
			}

			fetchOne(loadItvwrRoleIdQuery,new FetchCallback() {
				onFetch(result) {
					if (!isNull(result)) {	
						//emrSssItvwr=result.get(0)+"_"+tempEmrItvId+"_"+tempEmrItvName;
						newPsInEmrSss=new ArrayList();
						newPsInEmrSss.add(result.get(0));
						newPsInEmrSss.add(tempEmrItvId);
						newPsInEmrSss.add(tempEmrItvName);
						emrPsInfo.add(newPsInEmrSss);
					}
				}
				onError(message) {
					showToast(message);
				}
			});
		}
		onError(message) {
			showToast(message);
		}
	});   
}

emrAnsPrep(){
	emrQuesNirIDQuery="select uuid from latestNonDeletedAentValue "+
	"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionnaireType') "+
	"and measure =(select uuid from latestNonDeletedAentValue "+
		"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesnirTypeName') "+
		"and measure='Emergency')";

	emrQuesIDQuery="select qId.measure from latestNonDeletedAentValue as qId, latestNonDeletedAentValue as qProp "+
	"where qId.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesUuid') "+
	"and qProp.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesPropDefID') "+
	"and qId.uuid=qProp.uuid "+
	"and qProp.measure = (select qPropDef.uuid from latestNonDeletedAentValue as qPropDef "+
						"where qPropDef.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesPropDefName') and qPropDef.measure='EmergencyQuestion')";
	fetchOne(emrQuesNirIDQuery,new FetchCallback() {
		onFetch(emrQuesNirResult) {
			if (!isNull(emrQuesNirResult)) {	
				emrAnsInfo.put("quesnir_id",emrQuesNirResult.get(0));
				//showWarning("quesnir_id.put(","quesnir_id.put(");
			}
			else{
				emrAnsInfo.put("quesnir_id","0000000000000000000");
			}
		}
		onError(message) {
			showToast(message);
		}
	});   

	fetchOne(emrQuesIDQuery,new FetchCallback() {
		onFetch(emrQuesResult) {
			if (!isNull(emrQuesResult)) {
				emrAnsInfo.put("ques_id",emrQuesResult.get(0));
				//showWarning("ques_id.put(",emrQuesResult.get(0));
			}
			else{
				emrAnsInfo.put("ques_id","0000000000000000001");
			}
		}
		onError(message) {
			showToast(message);
		}
	});         					

}

saveEmrFile(String ref, String fileListViewRef, String tabGroupRef, String fileType){
	if(isNull(getFieldValue(fileListViewRef))){	
		showWarning("Warning","File not recorded");
		return;
	}
	else{
		saveTabGroup(tabGroupRef,current_answer_file_id, null, null, new SaveCallback() {
		onSave(uuid, newRecord) {
			current_answer_file_id = uuid;
			//showWarning("current_answer_file_id",current_answer_file_id);
			if (newRecord) {	
				//showWarning("newRecord","newRecord");	
				newFile=new ArrayList();
				newFile.add(current_answer_file_id);
				newFile.add(getFieldValue(ref));
				files_in_current_ques.add(newFile);
							
				//Adding new file and file type for changing fileID
				newFileType=new ArrayList();
				newFileType.add(current_answer_file_id);
				newFileType.add(fileType);
				file_and_fileType.add(newFileType);
				updateDupLabel(dupFileLblInfo,"File", "FileID");
				
				saveNewEmrAnswer();
				cancelTabGroup(tabGroupRef, true);
			}
		}
		onError(message) {
			showWarning("error",message);
		}  
		});
	}
}

saveNewEmrAnswer(){
	attributes = createAttributeList();	
	attributes.add(createEntityAttribute("AnswerQuestionnaireID", null, null, emrAnsInfo.get("quesnir_id"), null));
	attributes.add(createEntityAttribute("AnswerQuestionID", null, null, emrAnsInfo.get("ques_id"), null));
	attributes.add(createEntityAttribute("AnswerLabel", null, null, emrAnsInfo.get("label"), null));
	attributes.add(createEntityAttribute("AnswerStartTime", null, null, emrAnsInfo.get("start_time"), null));

	saveArchEnt(null, "AnswerToQuestionnaire", null, attributes, new SaveCallback(){
		onSave(uuid, newRecord){
			answer_id = uuid;
			//showWarning("answer_id 1",answer_id);
			current_answer_id=uuid;
			if (newRecord) {
					for(file : files_in_current_ques){
						//showWarning("file 1",file.get(0));
						saveEntitiesToRel("Answer and File",answer_id,file.get(0));		
					}
					
					newAnswer=new ArrayList();
					newAnswer.add(answer_id);
					newAnswer.add(emrAnsInfo.get("label"));
					sss_answer_list.add(newAnswer);
					
					updateDupLabel(dupAnsLblInfo,"AnswerToQuestionnaire","AnswerLabel");
					
					showToast("new emergency answer created");
					saveEmrSss();
				}
		}
		onError(message) {
			showWarning("error on saveNewEmrAnswer1",message);
		}  
	});
}

saveEmrSss(){
	sssDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
		"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionID') "+
		"and (measure = '"+ emrSssInfo.get("sssId")+"' or measure like '"+ emrSssInfo.get("sssId")+"(%)')";

	fetchAll(sssDuplicateQuery,new FetchCallback() {
		onFetch(dupResult) {
			if(!isNull(dupResult)){
				tempEmrSssLabel = nonDupLabelGen(dupResult,emrSssInfo.get("sssId"),"Session","SessionID", true);
				emrSssInfo.remove("sssId");
				emrSssInfo.put("sssId", tempEmrSssLabel);
				//showWarning("emrSssInfo.put(sssId",tempEmrSssLabel);
			}
			attributes = createAttributeList();

			attributes.add(createEntityAttribute("SessionID", null, null, emrSssInfo.get("sssId"), null));
			attributes.add(createEntityAttribute("SessionName", null, null, emrSssInfo.get("sssName"), null));
			attributes.add(createEntityAttribute("SessionStartTimestamp", null, null, emrSssInfo.get("sssSttTime"), null));
			attributes.add(createEntityAttribute("SessionLocation", null, null, emrSssInfo.get("sssLoc"), null));
			attributes.add(createEntityAttribute("SessionDescription", null, null, "Emergency session", null));

			saveArchEnt(null, "Session", null, attributes, new SaveCallback(){
				onSave(uuid, newRecord){
					sss_id = uuid;
					for(answer:sss_answer_list){
						saveEntitiesToRel("Answer and Session",sss_id,answer.get(0));
					}
					saveEmrPsInSss(sss_id);
					autoSaveSession("emr");
					showToast("New emergency session created");
					saveNewSssToFieldTrip(sss_id);
					showTab("control/survey_control");
				}
				onError(message) {
					showWarning("error on saveEmrSss",message);
				}  
			});
			//emrSssAttributes.add(createEntityAttribute("SessionID",null,null,emrSssLabel,null));
		}  
	});
}

saveEmrPsInSss(String sessionId){
	//save new consultant
	sssPersonRoleNameListOrigin.clear();
	psAttributes=createAttributeList(); 
	psAttributes.add(createEntityAttribute("PersonID", null, null, emrPsInfo.get(0).get(2)+"_0000-00-00", null));
	psAttributes.add(createEntityAttribute("PersonName", null, null, emrPsInfo.get(0).get(2), null));
	psAttributes.add(createEntityAttribute("PersonDOB", null, null, "0000-00-00", null));
	psAttributes.add(createEntityAttribute("PersonRole", null, null, emrPsInfo.get(0).get(0), null));
	psAttributes.add(createEntityAttribute("PersonPhotoDescription", null, null, "Emergency session person", null));
	psAttributes.add(createEntityAttribute("PersonIntroQuenirDesp", null, null, "Emergency session person", null));
	//showWarning("psAttributes", "1."+emrPsInfo.get(0).get(2)+"_0000-00-00\n"+"2."+emrPsInfo.get(0).get(2)+"\n"+"4."+ emrPsInfo.get(0).get(0)+"\n");
	saveArchEnt(null, "Person", null, psAttributes, new SaveCallback() {
		onSave(psUuid,newRecord) {
			newPsInEmrSss=new ArrayList();
			newPsInEmrSss.add(emrPsInfo.get(0).get(0));
			//showWarning("newPsInEmrSss","roleid:"+emrPsInfo.get(0).get(0));
			newPsInEmrSss.add(psUuid);
			//showWarning("newPsInEmrSss","psuuid:"+psUuid);
			newPsInEmrSss.add(emrPsInfo.get(0).get(2));
			//showWarning("newPsInEmrSss","psName:"+(emrPsInfo.get(0).get(2));
			emrPsInfo.set(0, newPsInEmrSss);
			//showWarning("emrPsInfo.set(0)","psUuid:"+psUuid);
			sssPsCnslAttributes= createAttributeList();
			sssPsCnslAttributes.add(createEntityAttribute("SessionIDforPerson", null, null, sessionId, null));
			sssPsCnslAttributes.add(createEntityAttribute("SessionPersonName", null, null, emrPsInfo.get(0).get(1), null));
			sssPsCnslAttributes.add(createEntityAttribute("SessionPersonRole", null, null, emrPsInfo.get(0).get(0), null));
			//showWarning("sssPsCnslAttributes",sessionId+":"+emrPsInfo.get(0).get(1)+":"+emrPsInfo.get(0).get(0));
			saveArchEnt(null, "SessionPerson", null, sssPsCnslAttributes);
			//showWarning("SessionPerson","SessionPerson");
			saveEntitiesToRel("Session and Consultant",sessionId,emrPsInfo.get(0).get(1));
			//showWarning("saveEntitiesToRel","saveEntitiesToRel");
			sssPersonRoleNameListOrigin.add(emrPsInfo.get(0).get(0)+"_"+emrPsInfo.get(0).get(1));

			if(!emrIveExist){
				iPsAttributes=createAttributeList(); 
				iPsAttributes.add(createEntityAttribute("PersonID", null, null, username+"_0000-00-00", null));
				iPsAttributes.add(createEntityAttribute("PersonName", null, null, username, null));
				iPsAttributes.add(createEntityAttribute("PersonDOB", null, null, "0000-00-00", null));
				iPsAttributes.add(createEntityAttribute("PersonRole", null, null, emrPsInfo.get(1).get(0), null));
				iPsAttributes.add(createEntityAttribute("PersonPhotoDescription", null, null, "Emergency session person", null));
				iPsAttributes.add(createEntityAttribute("PersonIntroQuenirDesp", null, null, "Emergency session person", null));
				//showWarning("iPsAttributes", "1."+username+"_0000-00-00\n"+"2."+username+"\n"+"4."+ emrPsInfo.get(1).get(0)+"\n");
				saveArchEnt(null, "Person", null, iPsAttributes, new SaveCallback() {
					onSave(iPsUuid,newRecord) {
						newIPsInEmrSss=new ArrayList();
						newIPsInEmrSss.add(emrPsInfo.get(1).get(0));
						newIPsInEmrSss.add(iPsUuid);
						newIPsInEmrSss.add(username);
						emrPsInfo.set(1, newIPsInEmrSss);
						//sssPersonRoleNameListOrigin.clear();
						sssPsRoleAttributes= createAttributeList();
						sssPsRoleAttributes.add(createEntityAttribute("SessionIDforPerson", null, null, sessionId, null));
						sssPsRoleAttributes.add(createEntityAttribute("SessionPersonName", null, null, emrPsInfo.get(1).get(1), null));
						sssPsRoleAttributes.add(createEntityAttribute("SessionPersonRole", null, null, emrPsInfo.get(1).get(0), null));
						saveArchEnt(null, "SessionPerson", null, sssPsRoleAttributes);
						saveEntitiesToRel("Session and Interviewer",sessionId,emrPsInfo.get(1).get(1));
						sssPersonRoleNameListOrigin.add(emrPsInfo.get(1).get(0)+"_"+emrPsInfo.get(1).get(1));
						emrIveExist=false;
					}  
				});
			}
			else{
				sssPsRoleAttributes= createAttributeList();
				sssPsRoleAttributes.add(createEntityAttribute("SessionIDforPerson", null, null, sessionId, null));
				sssPsRoleAttributes.add(createEntityAttribute("SessionPersonName", null, null, emrPsInfo.get(1).get(1), null));
				sssPsRoleAttributes.add(createEntityAttribute("SessionPersonRole", null, null, emrPsInfo.get(1).get(0), null));
				saveArchEnt(null, "SessionPerson", null, sssPsRoleAttributes);
				saveEntitiesToRel("Session and Interviewer",sessionId,emrPsInfo.get(1).get(1));
				sssPersonRoleNameListOrigin.add(emrPsInfo.get(1).get(0)+"_"+emrPsInfo.get(1).get(1));
			} 
		}
	});
	//check if the current interviwer exisits in the db
}

/*** Social linguistic session ***/
/*** Socio linguistic variables***/
loopQuesOrder=new ArrayList();
finLangAndQues=new ArrayList();
String langIntroQuesUuid=null;
String langIntroEndQuesUuid=null;
int newLangInLangIntro=0;
String crntLangIntroId=null;
String langIntroAnsLabel=null;
canLangList=new ArrayList();
newTempLangList=new ArrayList();
Boolean langIntro=false;

initSocioLinguVar(){
	loopQuesOrder.clear();
	finLangAndQues.clear();
	langIntroQuesUuid=null;
	langIntroEndQuesUuid=null;
	newLangInLangIntro=0;
	crntLangIntroId=null;
	langIntroAnsLabel=null;
	canLangList.clear();
	newTempLangList.clear();
	langIntro=false;
}

/*** Sociolingustic quesnir UI ***/
createLoopQuesList(){
	if(!hasView("langIntroQues/langIntroQuesInfo/loopQues")){
	removeAllViewsAndContainers("langIntroQues");
	executeViewTask(new ViewTask() {
    doTask() {
        quesSelListDef=createViewDef().createList().setLabel("Questions").setStyleCss("loopQues-list");
        createView("langIntroQues/langIntroQuesInfo/loopQues", quesSelListDef,"langIntroQues/langIntroQuesInfo");
        refreshTabgroupCSS("langIntroQues");
        onEvent("langIntroQues/langIntroQuesInfo/loopQues","click","checkAnsweredLangQues()");
   		}
		});
	}

}

createLangIntroPage(String tempQuesnirId,String tempQuesId, String typeflag, ArrayList tempLangDeg){
	fetchAll(loadAllLanguageQuery,new FetchCallback() {
		onFetch(result) {
			canLangList.clear();
			canLangList.addAll(result);
			newTempLangList.clear();
			int langCount=0;
			int langSize=canLangList.size();
			crntLangIntroId=null;
			langIntroAnsLabel=null;
			newLangInLangIntro=0;

			removeAllViewsAndContainers("langIntroAns");
			
			for(lang:canLangList){
				String langID=lang.get(0);
				String langName=lang.get(1);

				style1="orientation";
				style2="even";
				style3="large";

				executeViewTask(new ViewTask(){
					doTask(){
						createContainer("langIntroAns/langIntroAnsInfo/lang_c"+langCount, "orientation","langIntroAns/langIntroAnsInfo");
						createContainer("langIntroAns/langIntroAnsInfo/langName_c" + langCount, "even", "langIntroAns/langIntroAnsInfo/lang_c" + langCount);
						createContainer("langIntroAns/langIntroAnsInfo/degree_c" + langCount, "even", "langIntroAns/langIntroAnsInfo/lang_c" + langCount);
        				createContainer("langIntroAns/langIntroAnsInfo/quesInput_c" + langCount, "even", "langIntroAns/langIntroAnsInfo/lang_c" + langCount);

    					
  						createView("langIntroAns/langIntroAnsInfo/langc" + langCount, createViewDef().createCheckboxGroup().addChoice(langName, langID), "langIntroAns/langIntroAnsInfo/langName_c" + langCount);  
  						createView("langIntroAns/langIntroAnsInfo/dec" + langCount, createViewDef().createDropDown(), "langIntroAns/langIntroAnsInfo/degree_c" + langCount); 					
    					createView("langIntroAns/langIntroAnsInfo/quesc" + langCount, createViewDef().createButton().setLabel("Next").setStyleCss("faims-blue"), "langIntroAns/langIntroAnsInfo/quesInput_c" + langCount);
    					onEvent("langIntroAns/langIntroAnsInfo/quesc" + langCount,"click","startLoopQues(\""+langID+"\")");
        				
						if(langCount==langSize-1){
							createView("langIntroAns/langIntroAnsInfo/Finish_LangIntro", createViewDef().createButton().setLabel("Finish").setStyleCss("faims-blue"), "langIntroAns/langIntroAnsInfo");
							createView("langIntroAns/langIntroAnsInfo/new_langInIntro", createViewDef().createButton().setLabel("New Language").setStyleCss("faims-blue"), "langIntroAns/langIntroAnsInfo");	
							onEvent("langIntroAns/langIntroAnsInfo/new_langInIntro","click","reConstructLangIntro()");	
							onEvent("langIntroAns/langIntroAnsInfo/Finish_LangIntro","click","saveLangIntroQuesAnswer(null,\""+tempQuesnirId+"\",\""+tempQuesId+"\",null)");	
						}
						
					}
				});
				langCount++;
				
			}
			refreshTabgroupCSS("langIntroAns");
			tempChoice=new ArrayList();
			for(int i=1;i<=5;i++){
				tempChoice.add(new NameValuePair(i.toString(), i.toString()));
			}
			for(int i=0; i<langSize;i++){
				populateDropDown("langIntroAns/langIntroAnsInfo/dec"+i, tempChoice);
			}
			if(typeflag.equals("L")){
				showLangIntroAnsPage(tempLangDeg);
			}
		}  
	});
}

reConstructLangIntro(){
	if(hasView("langIntroAns/langIntroAnsInfo/Finish_LangIntro")){
		removeView("langIntroAns/langIntroAnsInfo/Finish_LangIntro");
		removeView("langIntroAns/langIntroAnsInfo/new_langInIntro");
	}
	tempChoice=new ArrayList();
	for(int i=1;i<=5;i++){
		tempChoice.add(new NameValuePair(i.toString(), i.toString()));
	}
	executeViewTask(new ViewTask(){
		doTask(){
			createContainer("langIntroAns/langIntroAnsInfo/newLang_c"+newLangInLangIntro, "orientation","langIntroAns/langIntroAnsInfo");
			createContainer("langIntroAns/langIntroAnsInfo/newlangCode_c" + newLangInLangIntro, "even", "langIntroAns/langIntroAnsInfo/newLang_c" + newLangInLangIntro);
			createContainer("langIntroAns/langIntroAnsInfo/newLangName_c" + newLangInLangIntro, "even", "langIntroAns/langIntroAnsInfo/newLang_c" + newLangInLangIntro);
			createContainer("langIntroAns/langIntroAnsInfo/newlangDeg_c" + newLangInLangIntro, "even", "langIntroAns/langIntroAnsInfo/newLang_c" + newLangInLangIntro);
			createContainer("langIntroAns/langIntroAnsInfo/newLangNex_c" + newLangInLangIntro, "even", "langIntroAns/langIntroAnsInfo/newLang_c" + newLangInLangIntro);

			if(newLangInLangIntro==0){
				createView("langIntroAns/langIntroAnsInfo/newLangCodec" + newLangInLangIntro, createViewDef().createTextField().setLabel("Language code"), "langIntroAns/langIntroAnsInfo/newlangCode_c" + newLangInLangIntro);  
				createView("langIntroAns/langIntroAnsInfo/newLangNamec" + newLangInLangIntro, createViewDef().createTextField().setLabel("Language name"), "langIntroAns/langIntroAnsInfo/newLangName_c" + newLangInLangIntro); 

			}
			else{
				createView("langIntroAns/langIntroAnsInfo/newLangCodec" + newLangInLangIntro, createViewDef().createTextField(), "langIntroAns/langIntroAnsInfo/newlangCode_c" + newLangInLangIntro);  
				createView("langIntroAns/langIntroAnsInfo/newLangNamec" + newLangInLangIntro, createViewDef().createTextField(), "langIntroAns/langIntroAnsInfo/newLangName_c" + newLangInLangIntro);
			}
				createView("langIntroAns/langIntroAnsInfo/degc" + newLangInLangIntro, createViewDef().createDropDown(), "langIntroAns/langIntroAnsInfo/newlangDeg_c" + newLangInLangIntro);
				createView("langIntroAns/langIntroAnsInfo/newLangNexc" + newLangInLangIntro, createViewDef().createButton().setLabel("Next").setStyleCss("faims-blue"), "langIntroAns/langIntroAnsInfo/newLangNex_c" + newLangInLangIntro);
				String langPosition=newLangInLangIntro.toString();
				onEvent("langIntroAns/langIntroAnsInfo/newLangNexc" + newLangInLangIntro,"click", "saveNewLangInSclnCheck(\""+langPosition+"\")");		
				populateDropDown("langIntroAns/langIntroAnsInfo/degc" + newLangInLangIntro, tempChoice);
				
				createView("langIntroAns/langIntroAnsInfo/Finish_LangIntro", createViewDef().createButton().setLabel("Finish").setStyleCss("faims-blue"), "langIntroAns/langIntroAnsInfo");
				createView("langIntroAns/langIntroAnsInfo/new_langInIntro", createViewDef().createButton().setLabel("New Language").setStyleCss("faims-blue"), "langIntroAns/langIntroAnsInfo");	
				onEvent("langIntroAns/langIntroAnsInfo/new_langInIntro","click","reConstructLangIntro()");		
				
		}
	});
	newLangInLangIntro++;
}

showLangIntroAnsPage(ArrayList langDegList){
	showTabGroup("langIntroAns");
	//step 4: analyze the answerText and map it to the ui

	for(lang: langDegList){
		//showWarning("lang",lang.get(0));
		for(int i=0;i<canLangList.size();i++){
			//showWarning("canlang",canLangList.get(i).get(0));
			setFieldValue("langIntroAns/langIntroAnsInfo/langc" + i, lang.get(0));
			//showWarning("langID",lang.get(0));
		}
	}
	for(int i=0;i<canLangList.size();i++){
		if(!isNull(getFieldValue("langIntroAns/langIntroAnsInfo/langc" + i))){
			String templangID=getFieldValue("langIntroAns/langIntroAnsInfo/langc" + i).get(0).getName();
			for(lang:langDegList){
				if(lang.get(0).equals(templangID)){
					setFieldValue("langIntroAns/langIntroAnsInfo/dec" + i,lang.get(1));
					//showWarning("langDeg",lang.get(1));
				}
			}
		}
	}

}

sclngstPrep(){
	langIntroQuesUuid=null;
	langIntroEndQuesUuid=null;
	sclngstPrepQues();
	sclngstPrepQuesReln();
	finLangAndQues.clear();
}

sclngstPrepQues(){
	loadQuesContentandOrderQuery="select t1.quesId, t1.quesOrder || '-' || t2.quesContent as qOrderedContent from "+
        "(select quId.measure as quesId, qOrder.measure as quesOrder "+
        "from latestNonDeletedAentValue as quId, latestNonDeletedAentValue as qOrder "+
        "where qOrder.AttributeID=(SELECT AttributeID from AttributeKey where AttributeName='QuesOrderLocal') "+
        "and quId.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesID') "+
        "and quId.uuid=qOrder.uuid "+
        "and quId.measure in "+
            "(select quesInQuesnir.measure from latestNonDeletedAentValue as quesInQuesnir, latestNonDeletedAentValue as quesnir "+
            "where quesInQuesnir.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesID') "+
            "and quesnir.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesnirID') "+
            "and quesInQuesnir.uuid=quesnir.uuid and quesnir.measure='"+current_quesnir_id+"') "+
        "and qOrder.uuid in "+
            "(select uuid from latestNonDeletedArchEntIdentifiers where AttributeID = (select AttributeID from AttributeKey where AttributeName='QuesnirID') "+
            "and measure='"+current_quesnir_id+"')) t1 "+
    "inner join "+
        "(select qId.measure as quesId, qContent.measure as quesContent "+
        "from latestNonDeletedAentValue as qId, latestNonDeletedAentValue as qContent, latestNonDeletedAentValue as qLanguage "+
        "where qContent.AttributeID=(SELECT AttributeID from AttributeKey where AttributeName='QuesContent') "+
        "and qId.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionUuid') "+
        "and qLanguage.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesLangUuid') "+
        "and qId.uuid=qContent.uuid "+
        "and qId.uuid=qLanguage.uuid "+
        "and qLanguage.measure IN (select eng.uuid from latestNonDeletedAentValue as eng where eng.AttributeID=(select AttributeID from AttributeKey where AttributeName='LanguageName') "+
        "and eng.measure='English' and eng.uuid in (select uuid from latestNonDeletedArchEntIdentifiers where AttributeID=(select AttributeID from AttributeKey where AttributeName='LanguageID'))) "+
        "and qId.measure in "+
            "(select quesInQuesnir.measure from latestNonDeletedAentValue as quesInQuesnir, latestNonDeletedAentValue as quesnir "+
            "where quesInQuesnir.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesID') "+
            "and quesnir.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesnirID') "+
            "and quesInQuesnir.uuid=quesnir.uuid and quesnir.measure='"+current_quesnir_id+"') "+
        "and qId.uuid in "+
            "(select uuid from latestNonDeletedArchEntIdentifiers where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionUuid'))) t2 "+
    "on t1.quesId=t2.quesId group by t1.quesId "+
    "order by qOrderedContent asc";

	fetchAll(loadQuesContentandOrderQuery, new FetchCallback() {
	    onFetch(result) {
	        ques_in_current_quesnir.clear();
	        ques_in_current_quesnir.addAll(result);
	        populateList("questionnaireInfo/surveyQuestionnaire/surveyQuestionInQuestionnaire", ques_in_current_quesnir);   
	        sclngstPrepQuesRecordingType(); 
	    }
	});
}

sclngstPrepQuesRecordingType(){
	quesRecordingTypeQuery="select t2.quId, t1.prName from "+
		"(select pName.uuid as prId, pName.measure as prName from latestNonDeletedAentValue as pName "+
			"where pName.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesPropDefName'))t1 "+
		"inner join "+
		"(select qId.measure as quId, qProp.measure as qPropId "+
		"from latestNonDeletedArchEntIdentifiers as qId, latestNonDeletedAentValue as qProp "+
		"where qId.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesUuid') "+
		"and qProp.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesPropDefID') "+
		"and qId.uuid=qProp.uuid "+
		"and qId.measure in (select quesInQuesnir.measure from latestNonDeletedAentValue as quesInQuesnir, latestNonDeletedAentValue as quesnir "+
			"where quesInQuesnir.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesID') "+
			"and quesnir.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesnirID') "+
		"and quesInQuesnir.uuid=quesnir.uuid and quesnir.measure='"+current_quesnir_id+"')) t2 "+
		"on t1.prId=t2.qPropId";
	String tempQuesStartId=null;
	String tempQuesEndId=null;
    loopQuesOrder.clear();
    fetchAll(quesRecordingTypeQuery, new FetchCallback() {
	    onFetch(result) {
	        quesRecordingType.clear();
	        quesRecordingType.addAll(result);
	        //find the starting point of the loop
	        for(quesRec: quesRecordingType){
	        	if (quesRec.get(1).equals("LangList")){
	        		tempQuesStartId=quesRec.get(0);
	        		langIntroQuesUuid=tempQuesStartId;
	        		//break;
	        	}
	        	else if(quesRec.get(1).equals("LangListEnd")){
	        		tempQuesEndId=quesRec.get(0);
	        		langIntroEndQuesUuid=tempQuesEndId;
	        	}
	        	if(tempQuesStartId!=null && tempQuesEndId!=null){
	        		break;
	        	}

	        }
	        //showWarning("quesRec",tempQuesStartId);
	        int tempStartingOrder=-1;
	        int tempEndingOrder=-1;
	        for(ques:ques_in_current_quesnir){
	        	if(tempQuesStartId!=null && ques.get(0).equals(tempQuesStartId)){
	        		//showWarning("ques.get(0)",ques.get(0));
	        		String [] quesSplit=ques.get(1).split("-");
	        		tempStartingOrder=Integer.parseInt(quesSplit[0]);
	        	}
	        	else if(tempQuesEndId!=null && ques.get(0).equals(tempQuesEndId)){
	        		String [] quesSplit=ques.get(1).split("-");
	        		tempEndingOrder=Integer.parseInt(quesSplit[0]);
	        	}
	        	if(tempStartingOrder!=-1 && tempEndingOrder!=-1){
	        		break;
	        	}
	        }
	        if(tempEndingOrder==-1){
	        	String [] quesSplit=ques_in_current_quesnir.get(ques_in_current_quesnir.size()-1).get(1).split("-");
	        	tempEndingOrder=Integer.parseInt(quesSplit[0]);
	        	tempEndingOrder++;
	        }

	        if(tempStartingOrder==-1){
	        	String [] quesSplit=ques_in_current_quesnir.get(ques_in_current_quesnir.size()-1).get(1).split("-");
	        	tempStartingOrder=Integer.parseInt(quesSplit[0]);
	        	tempStartingOrder++;
	        }
	        //showWarning("ques",tempStartingOrder.toString());
	        for(ques:ques_in_current_quesnir){
	        	String [] quesSplit=ques.get(1).split("-");
	        	int currentQuesOrder=Integer.parseInt(quesSplit[0]);
	        	if((currentQuesOrder>tempStartingOrder) && (currentQuesOrder<tempEndingOrder)){
	        		loopQuesOrder.add(ques);
	        	}
	        }
	    }
	});
}

sclngstPrepQuesReln(){
	quesnir_ques_reln_query="select uuid from latestNonDeletedArchEntIdentifiers "+
			"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesnirID') "+
			"and measure='"+current_quesnir_id+"' ";

	queslabel_quesnir_query="select uuid, measure from latestNonDeletedAentValue "+
	"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionID') "+
	"and uuid in (select measure from latestNonDeletedArchEntIdentifiers "+
	"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesUuid') "+
	"and measure in (select quesInQuesnir.measure from latestNonDeletedAentValue as quesInQuesnir, latestNonDeletedAentValue as quesnir "+
	"where quesInQuesnir.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesID') "+
	"and quesnir.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesnirID') "+
	"and quesInQuesnir.uuid=quesnir.uuid and quesnir.measure='"+current_quesnir_id+"'))";

	fetchAll(quesnir_ques_reln_query, new FetchCallback() {  
		onFetch(relnResult) {
			if(!isNull(relnResult)){
				//showWarning("relnResult","relnResult");
				quesListRelnOrigin=new ArrayList();
				quesListRelnOrigin.clear();
				quesListRelnOrigin.addAll(relnResult);
				}
			else{
				showWarning("Out-of-date Data","Some questions in this questionnaire may not be using anymore\n"+"Please contact the admin for further information");
			}
			
		}
	});
	fetchAll(queslabel_quesnir_query, new FetchCallback() {
	    onFetch(result) {
	        queslabel_current_quesnir.clear();
	        queslabel_current_quesnir.addAll(result);
	    }
	});
}


startLoopQues(String tempLangId){
	crntLangIntroId=tempLangId;
	createLoopQuesList();
	newTabGroup("langIntroQues");
	populateList("langIntroQues/langIntroQuesInfo/loopQues",loopQuesOrder);
}

checkAnsweredLangQues(){
	String toAnsQuesId=getListItemValue();
	Boolean rep=false;
	if(!isNull(finLangAndQues)){
		for(ques:finLangAndQues){
			if((ques.get(0).equals(crntLangIntroId))&& (ques.get(1).equals(toAnsQuesId))){
				rep=true;
				showAlert("Answered question","The consultant(s) already answered this question for this language\n"+"Do you still want to continue?","startNewLoopAns(\""+toAnsQuesId+"\")","stayInCurrentPage()");
				break;
			}
		}
		if(!rep){
			startNewLoopAns(toAnsQuesId);
		}
		
	}
	else{
		startNewLoopAns(toAnsQuesId);
	}
}

startNewLoopAns(String tempQuesId){
	String ques_id=null;
	if(tempQuesId==null){
		ques_id=getListItemValue();
	}
	else{
		ques_id=tempQuesId;
	}
	//showWarning("ques_id",ques_id);
	if(ques_id==null){
		showWarning("Invalid operation","Please select a question");
		return;
	}
	else{
		langIntro=true;
		//showWarning("langIntro",langIntro.toString());
		loadAnswerFromQuesInQuesnir(ques_id);
	}

}

saveLangIntro(String ref, String fileListViewRef, String tabGroupRef, String fileType){
	if(finLangAndQues.size()<1){//The first answer
		ArrayList tempInfo=new ArrayList();
		tempInfo.add(ref);
		tempInfo.add(fileListViewRef);
		tempInfo.add(tabGroupRef);
		tempInfo.add(fileType);
		if(!ansOrNot){
			saveNewLangIntroAns("s",hiddenAnsInfo.get("quesnir_id"),hiddenAnsInfo.get("ques_id"),crntLangIntroId,tempInfo);
		}
		else{
			String curntQuesId=getFieldValue("survey/answerHidden/answerQuestionID");
			String curntQuesnirId=getFieldValue("survey/answerHidden/answerQuestionnaireID");
			saveNewLangIntroAns("s",curntQuesnirId,curntQuesId,crntLangIntroId,tempInfo);
		}
	}
	else{
		saveFurtherFileAndAnswer(ref, fileListViewRef,tabGroupRef,fileType);
	}
}

saveFurtherFileAndAnswer(String ref, String fileListViewRef, String tabGroupRef, String fileType){
	if(!ansOrNot){// saving file->answer->session
		saveLangIntroFile(ref, fileListViewRef,tabGroupRef,fileType);
	}
	else{
		saveLangIntroAnswerWithoutFile();
	}
}

saveNewLangIntroAns(String typeflag, String tempQuesnirId, String tempQuesId, String tempLangId, ArrayList tempInfo){
	attributes = createAttributeList();
		
	attributes.add(createEntityAttribute("AnswerQuestionnaireID", null, null,tempQuesnirId, null));
	attributes.add(createEntityAttribute("AnswerQuestionID", null, null,langIntroQuesUuid, null));
	//showWarning("AnswerQuestionIDIntroAns",langIntroQuesUuid);
	attributes.add(createEntityAttribute("AnswerLabel", null, null,langIntroAnsLabel, null));
	attributes.add(createEntityAttribute("AnswerStartTime", null, null,getCurrentTime(), null));

	String ansText=null;
	ansText=getLangIntroAnsText();

	if(ansText==null){
		showWarning("Data error","unable to generate correct answer, please contact the admin");
		return;
	}
	//showWarning("ansText-saveNewLangIntroAns",ansText);
	attributes.add(createEntityAttribute("AnswerText", null, null, ansText, null));
	//showWarning("tempLangId",tempLangId);
	saveArchEnt(null, "AnswerToQuestionnaire", null, attributes, new SaveCallback(){
		onSave(uuid, newRecord){
			//showWarning("current_answer_id",current_answer_id);
			if (newRecord) {
					newAnswer=new ArrayList();
					newAnswer.add(uuid);
					newAnswer.add(langIntroAnsLabel);
					sss_answer_list.add(newAnswer);
					//showWarning("sss_answer_list and File","sss_answer_list");
					populateList("sessionForAnswer/sssAnsList/sssAnswerList",sss_answer_list);
					//autoSaveSession("head");
					//showWarning("populateList","populateList");
					updateDupLabel(dupAnsLblInfo,"AnswerToQuestionnaire","AnswerLabel");

					if(!isNull(tempInfo) && typeflag.equals("s")){
						saveFurtherFileAndAnswer(tempInfo.get(0),tempInfo.get(1),tempInfo.get(2),tempInfo.get(3));
					}

					else if(!typeflag.equals("s")){
						saveFurtherChoiceDateAns(typeflag);
					}
					else if(typeflag.equals("s") && tempInfo==null){
						//showWarning("saveLangIntroAnswerWithoutFile","saveLangIntroAnswerWithoutFile");
						saveLangIntroAnswerWithoutFile();
					}
				}
		}
		onError(message) {
			showWarning("error on saveNewLangIntroAns",message);
		}  
	});

}

getLangIntroAnsText(){
	selLang=getSelLangInIntro();
	createdNewLang=getNewTempLang();
	//showWarning("createdNewLang","createdNewLang");
	allLangList=new ArrayList();
	allLangList.clear();
	allLangList.addAll(selLang);
	allLangList.addAll(createdNewLang);

	String ansText=null;
	StringBuilder sb=new StringBuilder();

	for(lang: allLangList){
		if(sb.length()>0){
			sb.append("_");
		}
		sb.append(lang.get(0)+"-"+lang.get(1));
	}
	ansText=sb.toString();
	//showWarning("ansText",ansText);
	return ansText;
}

getSelLangInIntro(){
	//showWarning("getSelLangInIntro","getSelLangInIntro");
	returnLangVer=new ArrayList();
	returnLangVer.clear();
	for(int i=0;i<canLangList.size();i++){
		if(!isNull(getFieldValue("langIntroAns/langIntroAnsInfo/langc" + i))){
			//showWarning("!isNull","!isNull");
			tempLangVer=new ArrayList();
			tempLangVer.add(getFieldValue("langIntroAns/langIntroAnsInfo/langc" + i).get(0).getName());
			//showWarning("getFieldValue1","getFieldValue1");
			tempLangVer.add(getFieldValue("langIntroAns/langIntroAnsInfo/dec" + i));
			//showWarning("getFieldValue2","getFieldValue2");
			returnLangVer.add(tempLangVer);
			//showWarning("returnLangVer","returnLangVer");
		}
	}
	return returnLangVer;
}

getNewTempLang(){
	returnNewTempLang=new ArrayList();
	returnNewTempLang.clear();
	for(int i=0;i<newTempLangList.size();i++){
	//	showWarning("newTempLangList",newTempLangList.size().toString());
		String langPos=newTempLangList.get(i).get(0);
		String langCode=getFieldValue("langIntroAns/langIntroAnsInfo/newLangCodec" + langPos);
		String langName=getFieldValue("langIntroAns/langIntroAnsInfo/newLangNamec" + langPos);
		String langDeg=getFieldValue("langIntroAns/langIntroAnsInfo/degc" + langPos);
		//save changed languages
		if(!langName.equals(newTempLangList.get(i).get(2))){
			attributes = createAttributeList();
			attributes.add(createEntityAttribute("LanguageName", null, null, langName, null));
			saveArchEnt(newTempLangList.get(i).get(1), "Language", null, attributes);
			//showWarning("saveArchEnt",newTempLangList.get(i).get(1)+":"+langName);
		}
		if(!langCode.equals(newTempLangList.get(i).get(3))){
			attributes = createAttributeList();
			attributes.add(createEntityAttribute("LanguageID", null, null, langCode, null));
			saveArchEnt(newTempLangList.get(i).get(1), "Language", null, attributes);
			//showWarning("saveArchEnt",newTempLangList.get(i).get(1)+":"+langCode);
		}
		//save the returning arraylist
		tempNewLangArr=new ArrayList();
		tempNewLangArr.add(newTempLangList.get(i).get(1));//add the uuid of the language
		tempNewLangArr.add(langDeg);
		returnNewTempLang.add(tempNewLangArr);
	}
	//showWarning("fornewTempLangList","newTempLangList");
	return returnNewTempLang;
}

saveLangIntroFile(String ref, String fileListViewRef, String tabGroupRef, String fileType){
	//showWarning(ref, fileListViewRef+":"+tabGroupRef+":"+fileType);
	saveTabGroup(tabGroupRef,current_answer_file_id, null, null, new SaveCallback() {
		onSave(uuid, newRecord) {
			current_answer_file_id = uuid;
			//showWarning("current_answer_file_id",current_answer_file_id);
			if (newRecord) {	
				//showWarning("newRecord","newRecord");	
				newFile=new ArrayList();
				newFile.add(current_answer_file_id);
				newFile.add(getFieldValue(ref));
				files_in_current_ques.add(newFile);		
				//Adding new file and file type for changing fileID
				newFileType=new ArrayList();
				newFileType.add(current_answer_file_id);
				newFileType.add(fileType);
				file_and_fileType.add(newFileType);
				//showWarning("file_and_fileType","file_and_fileType");

				updateDupLabel(dupFileLblInfo,"File", "FileID");

				//showWarning("dupFileLblChange","dupFileLblChange");
				if(ansOrNot){
					populateList("survey/answerFile/answerFileList",files_in_current_ques);
					//showTab("survey/answerFile");
				}
				//showWarning("ansOrNot","ansOrNot");
				saveLangIntroAnswer();
				cancelTabGroup(tabGroupRef, true);
			}
		}
		onError(message) {
			showWarning("error on saveLangIntroFile",message);
		}  
	});
}

saveLangIntroAnswer(){
	if(!ansOrNot){
		saveLangIntroAnswerWithFile(0);
	}
	else{
		saveLangIntroAnswerWithoutFile();
	}
}

saveLangIntroAnswerWithFile(int loopCount){
	attributes = createAttributeList();	
	attributes.add(createEntityAttribute("AnswerQuestionnaireID", null, null, hiddenAnsInfo.get("quesnir_id"), null));
	attributes.add(createEntityAttribute("AnswerQuestionID", null, null, hiddenAnsInfo.get("ques_id"), null));
	attributes.add(createEntityAttribute("AnswerLabel", null, null, hiddenAnsInfo.get("label"), null));
	attributes.add(createEntityAttribute("AnswerStartTime", null, null, hiddenAnsInfo.get("start_time"), null));
	attributes.add(createEntityAttribute("AnswerText", null, null, crntLangIntroId, null));
	
	saveArchEnt(null, "AnswerToQuestionnaire", null, attributes, new SaveCallback(){
		onSave(uuid, newRecord){
			if (newRecord) {
				for(file : files_in_current_ques){
					saveEntitiesToRel("Answer and File",uuid,file.get(0));	
				}
				//showWarning("Answer and File","Answer and File");
				newAnswer=new ArrayList();
				newAnswer.add(uuid);
				newAnswer.add(hiddenAnsInfo.get("label"));
				sss_answer_list.add(newAnswer);
				//showWarning("4.sss_answer_list and File",hiddenAnsInfo.get("label"));
				populateList("sessionForAnswer/sssAnsList/sssAnswerList",sss_answer_list);
				//showWarning("5.populateList","populateList");
				autoSaveSession("head");
				//showWarning("populateList","populateList");
				
				//showWarning("sssdupAnsLblChange","dupAnsLblChange");
				saveDupAns();
				showToast("new answer created");
				tempLangAndQues=new ArrayList();
				tempLangAndQues.add(crntLangIntroId);
				tempLangAndQues.add(hiddenAnsInfo.get("ques_id"));
				finLangAndQues.add(tempLangAndQues);
				
				//showWarning("finLangAndQues()",finLangAndQues.size().toString());
				if(finLangAndQues.size()>1){
					saveLangIntroQuesAnswer("ans",hiddenAnsInfo.get("quesnir_id"),hiddenAnsInfo.get("ques_id"),crntLangIntroId);
				}
				//nextLangQuestion(hiddenAnsInfo.get("ques_id"),crntLangIntroId);
				checkAllLangIntroQues(crntLangIntroId);
			}
		}
		onError(message) {
			//showWarning("Error happened, re-saving",message+"\n"+"please report this to the admin\n"+"click ok to continue");
			if(loopCount<3){
				loopCount++;
				saveLangIntroAnswerWithFile(loopCount);
			}
			else{
				showWarning("Error happened, re-saving failed",message+"\n"+"please report this to the admin");
			}
			
		}  
	});
}

saveLangIntroAnswerWithoutFile(){
	String newAnsLabel=getFieldValue("survey/answerHidden/answerLabel");
	
	saveTabGroup("survey", null, null, null, new SaveCallback() {
		onSave(uuid, newRecord) {
			if (newRecord) {
				for(file : files_in_current_ques){
					saveEntitiesToRel("Answer and File",answer_id,file.get(0));		
				}
				
				newAnswer=new ArrayList();
				newAnswer.add(uuid);
				newAnswer.add(newAnsLabel);
				sss_answer_list.add(newAnswer);
				
				populateList("sessionForAnswer/sssAnsList/sssAnswerList",sss_answer_list);
				//if this is the second answer with a duplicate label
				//the other answer label will be changed with a suffix (1)
				autoSaveSession("head");
				saveDupAns();

				showToast("new answer created");
				String curntQuesId=getFieldValue("survey/answerHidden/answerQuestionID");
				String curntQuesnirId=getFieldValue("survey/answerHidden/answerQuestionnaireID");
				cancelTabGroup("survey", true);
				tempLangAndQues=new ArrayList();
				tempLangAndQues.add(crntLangIntroId);
				tempLangAndQues.add(curntQuesId);
				finLangAndQues.add(tempLangAndQues);

				if(finLangAndQues.size()>1){
					saveLangIntroQuesAnswer("ans",curntQuesnirId,curntQuesId,crntLangIntroId);
				}
				checkAllLangIntroQues(crntLangIntroId);

			}
		}
		onError(message) {
			showWarning("error on saveLangIntroAnswer",message);
		}  
	});
}

saveDupAns(){
	if(dupAnsLblChange && !isNull(dupAnsLblInfo)){
		dupAttributes = createAttributeList();
		dupAttributes.add(createEntityAttribute("AnswerLabel", null, null, dupAnsLblInfo.get(1), null));
		saveArchEnt(dupAnsLblInfo.get(0), "AnswerToQuestionnaire", null, dupAttributes);
		dupAnsLblChange=false;
		dupAnsLblInfo.clear();
	}
}

checkFinishAllQuesForLang(){
	//showWarning("checkFinishAllQuesForLang","checkFinishAllQuesForLang");
	Hashtable tempSearchMap=getAllAnsweredQuesIdForLang();
	//showWarning("tempSearchMap","tempSearchMap");
	Boolean closeOrNot=true;
	if(tempSearchMap==null || tempSearchMap.isEmpty()){
		showWarning("Something went wrong","Report this problem to the admin");
		return;
	}

	ArrayList tempAllQues=new ArrayList();
	for(tempQues: loopQuesOrder){
		tempAllQues.add(tempQues.get(0));
	}
	//showWarning("tempAllQues","tempAllQues");
	for(String key: tempSearchMap.keySet()){
		String unfinQues=checkUnfinishedQuesForLang(tempSearchMap.get(key),tempAllQues);
		if(unfinQues!=null){
			closeOrNot=false;
			//showWarning("closeOrNot","closeOrNot");
			checkIfGoToQues(key,unfinQues);
		}
		//showWarning("unfinQues","unfinQues");
	}
	if(closeOrNot){
		nextQuestion(langIntroEndQuesUuid,ques_in_current_quesnir,false);
		cancelTabGroup("langIntroAns",true);
	}
}

getAllAnsweredQuesIdForLang(){
	//showWarning("getAllAnsweredQuesIdForLang","getAllAnsweredQuesIdForLang");
	Hashtable tempSearchMap=new Hashtable();
	if(finLangAndQues==null || finLangAndQues.isEmpty()){
		return null;
	}
	//showWarning("finLangAndQues!null","finLangAndQues!null");
	for(item: finLangAndQues){
		String tempKey=item.get(0);
		String tempQuesId=item.get(1);
		//showWarning(tempKey,tempQuesId);
		if(!tempSearchMap.containsKey(tempKey)){
			//showWarning("!containsKey","!containsKey");
			ArrayList subSearchList=new ArrayList();
			subSearchList.add(item.get(1));
			//showWarning("!add","!add");
			tempSearchMap.put(tempKey,subSearchList);
			//showWarning("!put","!put");
		}
		else{
			//showWarning("containsKey","containsKey");
			ArrayList subSearchList=tempSearchMap.get(tempKey);
			//showWarning("subSearchListget","subSearchListget");
			if(subSearchList!=null && !subSearchList.isEmpty()){
				//showWarning("subSearchListnnull","subSearchListnnull");
				subSearchList.add(item.get(1));
				//showWarning("subSearchListadd","subSearchListadd");
				tempSearchMap.put(tempKey,subSearchList);
				//showWarning("subSearchListput","subSearchListput");
			}
			else{
				//showWarning("subSearchListNULL","subSearchListNULL");
				ArrayList newSubSearchList=new ArrayList();
				//showWarning("newSubSearchList","newSubSearchList");
				newSubSearchList.add(item.get(1));
				//showWarning("newSubSearchListget","newSubSearchListget");
				tempSearchMap.put(tempKey,newSubSearchList);
				//showWarning("newSubSearchListput","newSubSearchListput");
			}
		}
	}
	return tempSearchMap;
}

checkUnfinishedQuesForLang(ArrayList tempSearchList, ArrayList tempAllQues){
	//showWarning("checkUnfinishedQuesForLang","checkUnfinishedQuesForLang");
	String unFinQuesId=null;
	ArrayList tempSearchQues=new ArrayList();
	tempSearchQues.addAll(tempAllQues);
	tempSearchQues.removeAll(tempSearchList);
	if(tempSearchQues.size()>0){
		unFinQuesId=tempSearchQues.get(0);
	}
	return unFinQuesId;
}
//todo: stay in current page change to close current tab and go to the next question
checkIfGoToQues(String tempUnfinLangId,String tempQuesId){
	//showWarning("checkIfGoToQues","checkIfGoToQues");
	String tempQuesLabel=null;
	for(ques: loopQuesOrder){
		if(tempQuesId.equals(ques.get(0))){
			tempQuesLabel=ques.get(1);
			break;
		}
	}
	String tempLangLabel=null;

	for(lang: canLangList){
		if(tempUnfinLangId.equals(lang.get(0))){
			tempLangLabel=lang.get(1);
			break;
		}
	}
	//showWarning("tempLangLabel","tempLangLabel");
	if(tempQuesLabel==null || tempLangLabel==null){
		showWarning("Something went wrong","Please report to the admin the problem with the error code 'checkIfGoToQues'");
		return;
	}
	Boolean temp=false;
	showAlert("Unifinished question","The below question is not answered:\n"+tempQuesLabel+"\nfor language "+tempLangLabel+"\nDo you want to answer this question?","ansUnfinQues(\""+tempUnfinLangId+"\",\""+tempQuesId+"\")","askExitLangList(\""+tempQuesId+"\")");
}

ansUnfinQues(String tempLangId, String toAnsQuesId){
	startLoopQues(tempLangId);
	startNewLoopAns(toAnsQuesId);
}

askExitLangList(String toAnsQuesId){
	if(langIntroEndQuesUuid!=null){
		cancelTabGroup("langIntroAns",true);
		nextQuestion(langIntroEndQuesUuid,ques_in_current_quesnir,false);
	}
	else{
		cancelTabGroup("langIntroAns",true);
	}
	
}

saveLangIntroQuesAnswer(String typeflag, String tempQuesnirId, String tempQuesId, String tempLangId){
	if(typeflag!=null){
		if(sss_id!=null){//only need to append the current lang and degree to the existing answerText
			updateLangIntroQuesAnsText(tempQuesnirId);
			//checkFinishAllQuesForLang();
		}	
	}
	//change basic info of the lang intro answer
	else{//case passed
		String ansText=null;
		ansText=getLangIntroAnsText();
		if(ansText==null){
			showWarning("Application error","the answer is not correctly generated, please contact the admin");
			return;
		}
		//showWarning("ansText",ansText);
		if(sss_id==null){
			newLangIntroQuesAnsText(ansText,tempQuesnirId);
			//showWarning("newLangIntroQuesAnsText","newLangIntroQuesAnsText");
			checkFinishAllQuesForLang();
		}
		else{//case passed
			updateLangIntroQuesAnsText(ansText,tempQuesnirId);
			//showWarning("updateLangIntroQuesAnsText","updateLangIntroQuesAnsText");
			checkFinishAllQuesForLang();
		}
	}
}

updateLangIntroQuesAnsText(String tempQuesnirId){
	loadPsLangIntroQuery="select psAns.uuid, psAns.measure from latestNonDeletedAentValue as psAns, latestNonDeletedAentValue as ansQuesnir, latestNonDeletedAentValue as ansQues "+
		"where psAns.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerText') "+
		"and ansQuesnir.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionnaireID') "+
		"and ansQues.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionID') "+
		"and psAns.uuid=ansQuesnir.uuid "+
		"and ansQuesnir.uuid=ansQues.uuid "+
		"and ansQuesnir.measure='"+tempQuesnirId+"' "+
		"and ansQues.measure='"+langIntroQuesUuid+"' "+
		"and psAns.uuid in "+
		"(select uuid from AentReln where "+
		"uuid <>'"+sss_id+"' and "+
		"RelationshipID in "+
		"(select RelationshipID from AEntReln where AEntReln.uuid='"+sss_id+"' "+
			"AND RelationshipID in "+
		"(select RelationshipID from latestNonDeletedRelationship where RelnTypeID="+
			"(select RelnTypeID from RelnType where RelnTypeName='Answer and Session') "+
		"and latestNonDeletedRelationship.Deleted IS NULL)))";
	fetchOne(loadPsLangIntroQuery, new FetchCallback() {
        onFetch(result) {
        	//showWarning("onresult","loadPsLangIntroQuery");
        	if(!isNull(result)){
        		String oldAns=result.get(1);
        		String ansText=null;
        		ansText=getLangIntroAnsText();
        		if(ansText==null){
					showWarning("Application error","the answer is not correctly generated, please contact the admin");
					return;
				}

    			if(!oldAns.equals(ansText)){
    				//showWarning("!oldAns",oldAns+":"+ansText);
    				attributes = createAttributeList();
					attributes.add(createEntityAttribute("AnswerText", null, null, ansText, null));
					saveArchEnt(result.get(0), "AnswerToQuestionnaire", null, attributes);
    			}
        	}
        }

        onError(message) {
            showToast(message);
        }
    });
}

newLangIntroQuesAnsText(String ansText, String tempQuesnirId){
	attributes = createAttributeList();
		
	attributes.add(createEntityAttribute("AnswerQuestionnaireID", null, null,tempQuesnirId, null));
	attributes.add(createEntityAttribute("AnswerQuestionID", null, null,langIntroQuesUuid, null));
	attributes.add(createEntityAttribute("AnswerLabel", null, null,langIntroAnsLabel, null));
	attributes.add(createEntityAttribute("AnswerStartTime", null, null,getCurrentTime(), null));

	attributes.add(createEntityAttribute("AnswerText", null, null, ansText, null));
	saveArchEnt(null, "AnswerToQuestionnaire", null, attributes, new SaveCallback(){
		onSave(uuid, newRecord){
			//showWarning("saveArchEnt 1","saveArchEnt 1");
			answer_id = uuid;
			//showWarning("answer_id 1",answer_id);
			current_answer_id=answer_id;
			//showWarning("current_answer_id",current_answer_id);
			if (newRecord) {
					newAnswer=new ArrayList();
					newAnswer.add(answer_id);
					newAnswer.add(langIntroAnsLabel);
					sss_answer_list.add(newAnswer);
					//showWarning("sss_answer_list and File","sss_answer_list");
					populateList("sessionForAnswer/sssAnsList/sssAnswerList",sss_answer_list);

					updateDupLabel(dupAnsLblInfo,"AnswerToQuestionnaire","AnswerLabel");
					autoSaveSession("head");
				}
		}
		onError(message) {
			showWarning("error on saveLangIntroQuesAnswer typeFlag==null1",message);
		}  
	});
}

updateLangIntroQuesAnsText(String ansText, String tempQuesnirId){
	loadPsLangIntroQuery="select psAns.uuid, psAns.measure from latestNonDeletedAentValue as psAns, latestNonDeletedAentValue as ansQuesnir, latestNonDeletedAentValue as ansQues "+
		"where psAns.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerText') "+
		"and ansQuesnir.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionnaireID') "+
		"and ansQues.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionID') "+
		"and psAns.uuid=ansQuesnir.uuid "+
		"and ansQuesnir.uuid=ansQues.uuid "+
		"and ansQuesnir.measure='"+tempQuesnirId+"' "+
		"and ansQues.measure='"+langIntroQuesUuid+"' "+
		"and psAns.uuid in "+
		"(select uuid from AentReln where "+
		"uuid <>'"+sss_id+"' and "+
		"RelationshipID in "+
		"(select RelationshipID from AEntReln where AEntReln.uuid='"+sss_id+"' "+
			"AND RelationshipID in "+
		"(select RelationshipID from latestNonDeletedRelationship where RelnTypeID="+
			"(select RelnTypeID from RelnType where RelnTypeName='Answer and Session') "+
		"and latestNonDeletedRelationship.Deleted IS NULL)))";

	fetchOne(loadPsLangIntroQuery, new FetchCallback() {
	    onFetch(result) {
	    	if(!isNull(result)){
	    		//showWarning("!isNull","!isNull");
	    		String oldAns=result.get(1);
	    		//showWarning("!oldAns",oldAns);
	    		if(!oldAns.equals(ansText)){
	    			attributes = createAttributeList();
					attributes.add(createEntityAttribute("AnswerText", null, null, ansText, null));
					saveArchEnt(result.get(0), "AnswerToQuestionnaire", null, attributes);
					showToast("answer updated");
					//showWarning("saveArchEntattributes",result.get(0));
	    		}

	    	}
			else{
				attributes = createAttributeList();

				attributes.add(createEntityAttribute("AnswerQuestionnaireID", null, null,tempQuesnirId, null));
				attributes.add(createEntityAttribute("AnswerQuestionID", null, null,langIntroQuesUuid, null));
				attributes.add(createEntityAttribute("AnswerLabel", null, null,langIntroAnsLabel, null));
				attributes.add(createEntityAttribute("AnswerStartTime", null, null,getCurrentTime(), null));
			
				attributes.add(createEntityAttribute("AnswerText", null, null, ansText, null));
				saveArchEnt(null, "AnswerToQuestionnaire", null, attributes, new SaveCallback(){
					onSave(uuid, newRecord){
						//showWarning("saveArchEnt 1","saveArchEnt 1");
						answer_id = uuid;
						//showWarning("answer_id 1",answer_id);
						current_answer_id=answer_id;
						//showWarning("current_answer_id",current_answer_id);
						if (newRecord) {
								newAnswer=new ArrayList();
								newAnswer.add(uuid);
								newAnswer.add(langIntroAnsLabel);
								sss_answer_list.add(newAnswer);
								//showWarning("sss_answer_list and File","sss_answer_list");
								populateList("sessionForAnswer/sssAnsList/sssAnswerList",sss_answer_list);
								updateDupLabel(dupAnsLblInfo,"AnswerToQuestionnaire","AnswerLabel");
							}
							autoSaveSession("head");
					}
					onError(message) {
						showWarning("error on saveLangIntroQuesAnswer typeflag==null2",message);
					}  
				});
			}
	    }

	    onError(message) {
	        showToast(message);
	    }
	});
}

checkAllLangIntroQues(String tempCurntLangId){
	curntLangIntroQues=new ArrayList();
	curntLangIntroQues.clear();

	for(ques: finLangAndQues){
		if(ques.get(0).equals(tempCurntLangId)){
			curntLangIntroQues.add(ques.get(1));
		}
	}

	String unfinQuesId=null;
	int unfinQuesIdx=-1;
	for(int i=0;i<loopQuesOrder.size();i++){
		//showWarning("ques", loopQuesOrder.get(i).get(0));
		if(curntLangIntroQues.contains(loopQuesOrder.get(i).get(0))){
			continue;
		}
		else{
			unfinQuesId=loopQuesOrder.get(i).get(0);
			unfinQuesIdx=i;
			break;
		}
	}

	if(unfinQuesId==null || unfinQuesIdx==-1){
		cancelTabGroup("langIntroQues",true);
	}

	else{
		nextQuesId=loopQuesOrder.get(unfinQuesIdx).get(0);
		nextQuesContent=loopQuesOrder.get(unfinQuesIdx).get(1);
		showAlert("Next question","Do you want to go to the next unfinished question:\n"+nextQuesContent,"loadAnswerFromQuesInQuesnir(\""+nextQuesId+"\")","stayInCurrentPage()");
	}

}

checkLangIntroAnsInSss(){
	if(isNull(sss_answer_list)){
		loadAnswerFromQuesInQuesnir(langIntroQuesUuid);
	}
	else{
		ArrayList ansIdList=new ArrayList();
		for(ans: sss_answer_list){
			ansIdList.add(ans.get(0));
		}
		String ansIdCondition=buildQuerySetCondition(ansIdList);
		checkAllQuesForAnsQuery="select uuid, measure from latestNonDeletedAentValue "+
				"where AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionID') "+
				"and uuid IN "+ansIdCondition;

		fetchAll(checkAllQuesForAnsQuery,new FetchCallback() {
        	onFetch(result) {					        	
				if(!isNull(result)){
					for(int i=0;i<result.size();i++){
						if(result.get(i).get(1).equals(langIntroQuesUuid)){
							loadLangIntroAnsInfo(result.get(i).get(0));
							break;
						}
						else if(i==result.size()-1){
							loadAnswerFromQuesInQuesnir(langIntroQuesUuid);
						}
					}	
				}
	        }
	        onError(message) {
	        	showWarning("Data fetch error","Please manually select the 'unkonwn language' question for answering");
	        }
	    });
	}
}


loadLangIntroAnsInfo(String tempAnsId){
	//step1: query the quesnir, ques id and the answer text
	loadAnsInfoQuery="select ansQuesnir.measure, ansQues.measure, answer.measure, answer.uuid "+
	"from latestNonDeletedAentValue as ansQuesnir, latestNonDeletedAentValue as ansQues, latestNonDeletedAentValue as answer "+
	"where ansQuesnir.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionnaireID') "+
	"and ansQues.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionID') "+
	"and answer.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerText') "+
	"and ansQuesnir.uuid=ansQues.uuid "+
	"and ansQues.uuid=answer.uuid "+
	"and answer.uuid='"+tempAnsId+"'"; 

	fetchOne(loadAnsInfoQuery,new FetchCallback() {
		onFetch(ansInfoResult) {
			if (!isNull(ansInfoResult)) {
				//step 2: create the ui	
				//showWarning("not null result","notnull result");
				ArrayList langDegList=ansTextSplit("L", ansInfoResult.get(2), "_");
				createLangIntroPage(ansInfoResult.get(0),ansInfoResult.get(1), "L", langDegList);
				//step 3: prepare for possible changes
				current_quesnir_id=ansInfoResult.get(0);
				//showWarning("current_quesnir_id",current_quesnir_id);
				loadQuesnirNameQuery="select measure from latestNonDeletedAentValue where "+
				"AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionnaireName') "+
				"and uuid='"+current_quesnir_id+"'";
				fetchOne(loadQuesnirNameQuery,new FetchCallback() {
					onFetch(result) {
						if(!isNull(result)){
							current_quesnir_name=result.get(0);
							//showWarning("current_quesnir_name",current_quesnir_name);
						}
					}
					onError(message) {
						showToast(message);
					}
				});
				sclngChangePrep(ansInfoResult.get(0));
			}
		}
		onError(message) {
			showToast(message);
		}
	});

}

showLangIntroAnsPage(ArrayList langDegList){
	showTabGroup("langIntroAns");
	//step 4: analyze the answerText and map it to the ui

	for(lang: langDegList){
		//showWarning("lang",lang.get(0));
		for(int i=0;i<canLangList.size();i++){
			//showWarning("canlang",canLangList.get(i).get(0));
			setFieldValue("langIntroAns/langIntroAnsInfo/langc" + i, lang.get(0));
			//showWarning("langID",lang.get(0));
		}
	}
	for(int i=0;i<canLangList.size();i++){
		if(!isNull(getFieldValue("langIntroAns/langIntroAnsInfo/langc" + i))){
			String templangID=getFieldValue("langIntroAns/langIntroAnsInfo/langc" + i).get(0).getName();
			for(lang:langDegList){
				if(lang.get(0).equals(templangID)){
					setFieldValue("langIntroAns/langIntroAnsInfo/dec" + i,lang.get(1));
					//showWarning("langDeg",lang.get(1));
				}
			}
		}
	}

}

ansTextSplit(String typeFlag, String tempAnsText, String splitSymbol){
	String [] answerTextSplit=tempAnsText.split(splitSymbol);
	ArrayList returnArrayList=new ArrayList();
	returnArrayList.clear();
	if(typeFlag.equals("L")){
		for (int i=0;i<answerTextSplit.length; i++){
			String [] answerPartSplit=answerTextSplit[i].split("-");
			ArrayList answerPartInfo=new ArrayList();
			answerPartInfo.clear();
			answerPartInfo.add(answerPartSplit[0]);
			//showWarning("langid",answerPartSplit[0]);
			answerPartInfo.add(answerPartSplit[1]);
			//showWarning("langdeg",answerPartSplit[1]);
			returnArrayList.add(answerPartInfo);
		}
	}
	return returnArrayList;
}

sclngChangePrep(String crntQuesnirId){
	langIntroQuesUuid=null;
	quesPrep(crntQuesnirId);
	quesRelnPrep(crntQuesnirId);
	sssRoleInfo=checkRolesInSession();
}

quesPrep(String crntQuesnirId){
	loadQuesContentandOrderQuery="select t1.quesId, t1.quesOrder || '-' || t2.quesContent as qOrderedContent from "+
        "(select quId.measure as quesId, qOrder.measure as quesOrder "+
        "from latestNonDeletedAentValue as quId, latestNonDeletedAentValue as qOrder "+
        "where qOrder.AttributeID=(SELECT AttributeID from AttributeKey where AttributeName='QuesOrderLocal') "+
        "and quId.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesID') "+
        "and quId.uuid=qOrder.uuid "+
        "and quId.measure in "+
            "(select quesInQuesnir.measure from latestNonDeletedAentValue as quesInQuesnir, latestNonDeletedAentValue as quesnir "+
            "where quesInQuesnir.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesID') "+
            "and quesnir.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesnirID') "+
            "and quesInQuesnir.uuid=quesnir.uuid and quesnir.measure='"+crntQuesnirId+"') "+
        "and qOrder.uuid in "+
            "(select uuid from latestNonDeletedArchEntIdentifiers where AttributeID = (select AttributeID from AttributeKey where AttributeName='QuesnirID') "+
            "and measure='"+crntQuesnirId+"')) t1 "+
    "inner join "+
        "(select qId.measure as quesId, qContent.measure as quesContent "+
        "from latestNonDeletedAentValue as qId, latestNonDeletedAentValue as qContent, latestNonDeletedAentValue as qLanguage "+
        "where qContent.AttributeID=(SELECT AttributeID from AttributeKey where AttributeName='QuesContent') "+
        "and qId.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionUuid') "+
        "and qLanguage.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesLangUuid') "+
        "and qId.uuid=qContent.uuid "+
        "and qId.uuid=qLanguage.uuid "+
        "and qLanguage.measure IN (select eng.uuid from latestNonDeletedAentValue as eng where eng.AttributeID=(select AttributeID from AttributeKey where AttributeName='LanguageName') "+
        "and eng.measure='English' and eng.uuid in (select uuid from latestNonDeletedArchEntIdentifiers where AttributeID=(select AttributeID from AttributeKey where AttributeName='LanguageID'))) "+
        "and qId.measure in "+
            "(select quesInQuesnir.measure from latestNonDeletedAentValue as quesInQuesnir, latestNonDeletedAentValue as quesnir "+
            "where quesInQuesnir.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesID') "+
            "and quesnir.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesnirID') "+
            "and quesInQuesnir.uuid=quesnir.uuid and quesnir.measure='"+crntQuesnirId+"') "+
        "and qId.uuid in "+
            "(select uuid from latestNonDeletedArchEntIdentifiers where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionUuid'))) t2 "+
    "on t1.quesId=t2.quesId group by t1.quesId "+
    "order by qOrderedContent asc";


	fetchAll(loadQuesContentandOrderQuery, new FetchCallback() {
	    onFetch(result) {
	        ques_in_current_quesnir.clear();
	        ques_in_current_quesnir.addAll(result);
	        quesRecordingPrep(crntQuesnirId);
	    }
	});
}

quesRecordingPrep(String crntQuesnirId){
	quesRecordingTypeQuery="select t2.quId, t1.prName from "+
		"(select pName.uuid as prId, pName.measure as prName from latestNonDeletedAentValue as pName "+
			"where pName.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesPropDefName'))t1 "+
		"inner join "+
		"(select qId.measure as quId, qProp.measure as qPropId "+
		"from latestNonDeletedArchEntIdentifiers as qId, latestNonDeletedAentValue as qProp "+
		"where qId.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesUuid') "+
		"and qProp.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesPropDefID') "+
		"and qId.uuid=qProp.uuid "+
		"and qId.measure in (select quesInQuesnir.measure from latestNonDeletedAentValue as quesInQuesnir, latestNonDeletedAentValue as quesnir "+
			"where quesInQuesnir.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesID') "+
			"and quesnir.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesnirID') "+
		"and quesInQuesnir.uuid=quesnir.uuid and quesnir.measure='"+crntQuesnirId+"')) t2 "+
		"on t1.prId=t2.qPropId";

    String tempQuesStartId=null;
    String tempQuesEndId=null;
    loopQuesOrder.clear();
    fetchAll(quesRecordingTypeQuery, new FetchCallback() {
	    onFetch(result) {
	        quesRecordingType.clear();
	        quesRecordingType.addAll(result);
	        //find the starting point of the loop
	        for(quesRec: quesRecordingType){
	        	if (quesRec.get(1).equals("LangList")){
	        		tempQuesStartId=quesRec.get(0);
	        		langIntroQuesUuid=tempQuesStartId;
	        	}
	        	else if(quesRec.get(1).equals("LangListEnd")){
	        		tempQuesEndId=quesRec.get(0);
	        		langIntroEndQuesUuid=tempQuesEndId;
	        	}
	        	if(tempQuesStartId!=null && tempQuesEndId!=null){
	        		break;
	        	}
	        }
	        //showWarning("quesRec",tempQuesStartId);
	        int tempStartingOrder=-1;
	        int tempEndingOrder=-1;
	        for(ques:ques_in_current_quesnir){
	        	if(tempQuesStartId!=null && ques.get(0).equals(tempQuesStartId)){
	        		//showWarning("ques.get(0)",ques.get(0));
	        		String [] quesSplit=ques.get(1).split("-");
	        		tempStartingOrder=Integer.parseInt(quesSplit[0]);
	        	}
	        	else if(tempQuesEndId!=null && ques.get(0).equals(tempQuesEndId)){
	        		String [] quesSplit=ques.get(1).split("-");
	        		tempEndingOrder=Integer.parseInt(quesSplit[0]);
	        	}
	        	if(tempStartingOrder!=-1 && tempEndingOrder!=-1){
	        		break;
	        	}
	        }
	        if(tempEndingOrder==-1){
	        	String [] quesSplit=ques_in_current_quesnir.get(ques_in_current_quesnir.size()-1).get(1).split("-");
	        	tempEndingOrder=Integer.parseInt(quesSplit[0]);
	        	tempEndingOrder++;
	        }
	         if(tempStartingOrder==-1){
	        	String [] quesSplit=ques_in_current_quesnir.get(ques_in_current_quesnir.size()-1).get(1).split("-");
	        	tempStartingOrder=Integer.parseInt(quesSplit[0]);
	        	tempStartingOrder++;
	        }
	        //showWarning("ques",tempStartingOrder.toString());
	        for(ques:ques_in_current_quesnir){
	        	String [] quesSplit=ques.get(1).split("-");
	        	int currentQuesOrder=Integer.parseInt(quesSplit[0]);
	        	if((currentQuesOrder>tempStartingOrder) && (currentQuesOrder<tempEndingOrder)){
	        		loopQuesOrder.add(ques);
	        	}
	        }
	        answeredLangQuesPrep(loopQuesOrder);
	    }
	});
}

quesRelnPrep(String crntQuesnirId){
	quesnir_ques_reln_query="select uuid from latestNonDeletedArchEntIdentifiers "+
			"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesnirID') "+
			"and measure='"+crntQuesnirId+"' ";

	queslabel_quesnir_query="select uuid, measure from latestNonDeletedAentValue "+
	"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionID') "+
	"and uuid in (select measure from latestNonDeletedArchEntIdentifiers "+
	"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesUuid') "+
	"and measure in (select quesInQuesnir.measure from latestNonDeletedAentValue as quesInQuesnir, latestNonDeletedAentValue as quesnir "+
	"where quesInQuesnir.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesID') "+
	"and quesnir.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesnirID') "+
	"and quesInQuesnir.uuid=quesnir.uuid and quesnir.measure='"+crntQuesnirId+"'))";

	fetchAll(quesnir_ques_reln_query, new FetchCallback() {  
		onFetch(relnResult) {
			if(!isNull(relnResult)){
				//showWarning("relnResult","relnResult");
				quesListRelnOrigin=new ArrayList();
				quesListRelnOrigin.clear();
				quesListRelnOrigin.addAll(relnResult);
				}
			else{
				showWarning("Out-of-date Data","Some questions in this questionnaire may not be using anymore\n"+"Please contact the admin for further information");
			}
			
		}
	});

	fetchAll(queslabel_quesnir_query, new FetchCallback() {
	    onFetch(result) {
	        queslabel_current_quesnir.clear();
	        queslabel_current_quesnir.addAll(result);
	    }
	});
}
//summarize existing questions and the languages
answeredLangQuesPrep(ArrayList quesIdList){
	if(quesIdList==null || quesIdList.isEmpty()){
		finLangAndQues.clear();
		return;
	}
	finLangAndQues.clear();
	for(ques: quesIdList){
		String quesId=ques.get(0);
		loadQuesLangIdAnsQuery="select quesAns.uuid, quesAns.measure, quesId.measure "+
		"from latestNonDeletedAentValue as quesAns, latestNonDeletedAentValue as quesId "+
		"where quesAns.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerText') "+
		"and quesId.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionID') "+
		"and quesAns.uuid=quesId.uuid and quesId.measure='"+quesId+"' "+
		"and quesId.uuid in (select uuid from AentReln "+
			"where uuid<> '"+sss_id+"' and RelationshipID in "+
				"(select RelationshipID from AEntReln where AEntReln.uuid='"+sss_id+"') "+
				"and RelationshipID in "+
					"(select RelationshipID from latestNonDeletedRelationship "+
					"where RelnTypeID=(select RelnTypeID from RelnType "+
					"where RelnTypeName='Answer and Session') and latestNonDeletedRelationship.Deleted is null))";

		fetchAll(loadQuesLangIdAnsQuery, new FetchCallback() {
		    onFetch(quesLangResult) {
		        if(!isNull(quesLangResult)){
		        	for(quesLang:quesLangResult){
		        		tempQuesLang=new ArrayList();
		        		tempQuesLang.add(quesLang.get(1));
		        		tempQuesLang.add(quesLang.get(2));
		        		finLangAndQues.add(tempQuesLang);
		        	}
		        }
		    }
		});
	}
}

saveNewLangInSclnCheck(String langPos){
	Boolean langExist=false;
	String tempNewLangUuid=null;
	for(int i=0;i<newTempLangList.size();i++){
		//showWarning("tempLang",newTempLangList.get(i).get(0));
		if(newTempLangList.get(i).get(0).equals(langPos)){
			//showWarning("tempLang1",newTempLangList.get(i).get(0));
			tempNewLangUuid=newTempLangList.get(i).get(1);
			//showWarning("tempNewLangUuid","tempNewLangUuid");
			langExist=true;
			break;
		}
	}
	if(langExist && tempNewLangUuid!=null){
		//showWarning("startLoopQues","startLoopQues");
		startLoopQues(tempNewLangUuid);
	}
	else if(!langExist){
		saveNewLangInScln(langPos);
	}
	else{
		showWarning("error happened","please report this error to the admin");
	}
}

saveNewLangInScln(String langPos){
	//get the language code and language name
	String langCode=getFieldValue("langIntroAns/langIntroAnsInfo/newLangCodec" + langPos);
	String langName=getFieldValue("langIntroAns/langIntroAnsInfo/newLangNamec" + langPos);

	langAttributes=createAttributeList();
	langAttributes.add(createEntityAttribute("LanguageID", null, null,langCode, null));
	langAttributes.add(createEntityAttribute("LanguageName", null, null,langName, null));

	loadTempLangTypeIDQuery="select uuid from latestNonDeletedAentValue "+
	"where AttributeID=(select AttributeID from AttributeKey where AttributeName='LangTypeName') "+
	"and measure='New'";

	fetchOne(loadTempLangTypeIDQuery,new FetchCallback() {
		onFetch(result) {
			if(!isNull(result)){
				langAttributes.add(createEntityAttribute("LanguageTypeID", null, null,result.get(0), null));
			}
			saveArchEnt(null, "Language", null, langAttributes, new SaveCallback(){
				onSave(uuid, newRecord){
					//showWarning("saveArchEnt 1","saveArchEnt 1");
					tempNewLang=new ArrayList();
					tempNewLang.add(langPos);
					tempNewLang.add(uuid);
					tempNewLang.add(langName);
					tempNewLang.add(langCode);
					newTempLangList.add(tempNewLang);
					showToast("The new language is saved as 'new' type");
					startLoopQues(uuid);
					
				}
				onError(message) {
					showWarning("error on saveArchEnt Language",message);
				}  
			});
		}
		onError(message) {
			showToast(message);
		}
	});
	
}
/*** Answer variables ***/

answerInfoOriginal=new ArrayList();
answerInfoNew=new ArrayList();

ansFileOriginReln=new ArrayList();

ansLabelFstPart=null;//QuestionID+"Answer"
ansLabelMidPart=null;//consultant("EtAl")
ansLabelSndPart=null;//Date of interview

tempAnsLabel=null;//tempAnsLabel, for trigger of changing answer label


Boolean dupAnsLblChange=false;
dupAnsLblInfo=new ArrayList();
Boolean dupFileLblChange=false;
dupFileLblInfo=new ArrayList();

answer_id=null;//new answer_id

current_answer_file_id=null;
current_answer_id=null;

files_in_current_ques=new ArrayList();
files_origin=new ArrayList();
file_and_fileType=new ArrayList();//Keep track of file types, used for changing file labels

Boolean ansOrNot=true;//denoting if the answer has the answer ui page
hiddenAnsInfo=new HashMap();// holding the answer info when no answer ui

Boolean answerFile=false;//denoting whether user is viewing file from answer page
ArrayList choiceDateOriginInfo=new ArrayList();
ArrayList choiceDateNewInfo=new ArrayList();

initAnswerVar(){
	answerInfoOriginal.clear();
	answerInfoNew.clear();
	
	files_in_current_ques.clear();
	file_and_fileType.clear();
	files_origin.clear();
	
	answer_id=null;
	current_answer_file_id=null;
	current_answer_id=null;
	answerFile=true;
	ansLabelFstPart=null;
	ansLabelSndPart=null;
	ansLabelMidPart=null;
	tempAnsLabel=null;
	
	dupAnsLblChange=false;
	dupFileLblChange=false;
	dupAnsLblInfo.clear();
	dupFileLblInfo.clear();
	hiddenAnsInfo.clear();

	choiceDateOriginInfo.clear();
	choiceDateNewInfo.clear();
}

loadAnswerInfo(){
	initAnswerVar();

	current_answer_id=getListItemValue();

	if(isNull(current_answer_id)){
		showWarning("Error","Can't find this answer, please contact the admin");
		return;
	}
	else{

		loadFileAnsRelnQuery="select uuid,RelationshipID from AentReln "+
			"where uuid <>'"+current_answer_id+"' "+
			"and RelationshipID in "+
				"(select RelationshipID from AEntReln "+
				"where AEntReln.uuid='"+current_answer_id+"' "+
				"AND RelationshipID in "+
				"(select RelationshipID from latestNonDeletedRelationship "+
				"where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Answer and File') "+
				"and latestNonDeletedRelationship.Deleted IS NULL))";
		
		fetchAll(loadFileAnsRelnQuery, new FetchCallback() {
	        onFetch(result) {
	        	ansFileOriginReln.clear();
	        	ansFileOriginReln.addAll(result);
	        }

	        onError(message) {
	            showToast(message);
	        }
	    });
	
	loadFileForAnswerQuery="select uuid,measure from latestNonDeletedAentValue "+ 
			"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='FileID') "+
			"and uuid in "+
 			"(select uuid from AentReln where RelationshipID in "+
			"(select RelationshipID from AEntReln where AEntReln.uuid="+current_answer_id+" "+
 			"AND RelationshipID in "+
			"(select RelationshipID from latestNonDeletedRelationship where RelnTypeID="+
 			"(select RelnTypeID from RelnType where RelnTypeName='Answer and File') "+
			"and latestNonDeletedRelationship.Deleted IS NULL)))";		

	loadFileTypeQuery="select uuid,measure from latestNonDeletedAentValue "+ 
			"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='FileType') "+
			"and uuid in "+
 			"(select uuid from AentReln where RelationshipID in "+
			"(select RelationshipID from AEntReln where AEntReln.uuid="+current_answer_id+" "+
 			"AND RelationshipID in "+
			"(select RelationshipID from latestNonDeletedRelationship where RelnTypeID="+
 			"(select RelnTypeID from RelnType where RelnTypeName='Answer and File') "+
			"and latestNonDeletedRelationship.Deleted IS NULL)))";

	loadFileStartTimeQuery="select uuid,measure from latestNonDeletedAentValue "+ 
			"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='FileStartTime') "+
			"and uuid in "+
 			"(select uuid from AentReln where RelationshipID in "+
			"(select RelationshipID from AEntReln where AEntReln.uuid="+current_answer_id+" "+
 			"AND RelationshipID in "+
			"(select RelationshipID from latestNonDeletedRelationship where RelnTypeID="+
 			"(select RelnTypeID from RelnType where RelnTypeName='Answer and File') "+
			"and latestNonDeletedRelationship.Deleted IS NULL)))";

	loadFileEndTimeQuery="select uuid,measure from latestNonDeletedAentValue "+ 
			"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='FileEndTime') "+
			"and uuid in "+
 			"(select uuid from AentReln where RelationshipID in "+
			"(select RelationshipID from AEntReln where AEntReln.uuid="+current_answer_id+" "+
 			"AND RelationshipID in "+
			"(select RelationshipID from latestNonDeletedRelationship where RelnTypeID="+
 			"(select RelnTypeID from RelnType where RelnTypeName='Answer and File') "+
			"and latestNonDeletedRelationship.Deleted IS NULL)))";
	
	fetchAll(loadFileForAnswerQuery, new FetchCallback() {
        onFetch(result) {
        	files_in_current_ques.clear();
        	files_origin.clear();
        	files_in_current_ques.addAll(result);
        	files_origin.addAll(result);
        }

        onError(message) {
            showToast(message);
        }
    });

    fetchAll(loadFileTypeQuery, new FetchCallback() {
        onFetch(result) {
        	file_and_fileType.clear();     	
        	file_and_fileType.addAll(result);
        }
        onError(message) {
            showToast(message);
        }
    });
    
    createAnswerPage();
	showTabGroup("survey", current_answer_id, new FetchCallback() {
        onFetch(result) {
			answerInfoOriginal.clear();
        	populateList("survey/answerFile/answerFileList", files_in_current_ques);   	
        	populateDropDown("survey/answerFile/file_Category",categoryTypes);
        	answerInfoOriginal.add(getFieldValue("survey/answerHidden/answerLabel"));
        	answerInfoOriginal.add(getFieldValue("survey/answerBasic/answerText"));
        	answerInfoOriginal.add(getFieldValue("survey/answerHidden/answerStartTimestamp"));
            showToast("Loaded answer"+result.getId());            
        }
        onError(message) {
            showToast(message);
        }
    });
	}
}

startNewAnswer(String typeflag){
	//showWarning("startNewAnswer","startNewAnswer");
	initAnswerVar();
	//showWarning("initAnswerVar","initAnswerVar");
    String current_start_time=getCurrentTime();
    String currentDate=getCurrentDate();
   
    ansLabelFstPart=current_question_label+"_"+"Answer_";
    ansLabelSndPart="_"+currentDate;

    Iterator itConsultant=sssConsultantList.iterator();
    firstConsultant=itConsultant.next();
    ansLabelMidPart=firstConsultant;
   // showWarning("ansLabelMidPart",ansLabelMidPart);
    if(sssConsultantList.size()>1){
		ansLabelMidPart=ansLabelMidPart+"EtAl";
    }

    tempAnsLabel=ansLabelFstPart+ansLabelMidPart+ansLabelSndPart;
    //showWarning("tempAnsLabel",tempAnsLabel);
    switch(typeflag){
    	case "non":
    		startNewAnswerBasic(current_start_time);
    	break;
    	case "chk":
    		startNewAnswerChk();
    	break;
    	case "lan":
    		startNewAnswerLangIntro();
    	break;
    	case "lnd":
    		startNewAnswerLangEnd();
    	break;
    	case "cho":
    	//showWarning("cho","cho");
    		startChoiceAnswer(current_start_time, typeflag);
    	break;
    	case "sem":
    		startChoiceAnswer(current_start_time,typeflag);
    	break;
    	case "dat":
    		startChoiceAnswer(current_start_time,typeflag);
    	break;
    	default:
    		startNewAnswerFile(typeflag, current_start_time);
    	break;
	}
}

startNewAnswerBasic(String current_start_time){
	createFreeTextPage();
	//createAnswerPage();
	newTabGroup("survey");
	setFieldValue("survey/answerHidden/answerQuestionnaireID", current_quesnir_id);
	setFieldValue("survey/answerHidden/answerQuestionID", current_question_id);
	setFieldValue("survey/answerHidden/answerStartTimestamp", current_start_time);
	
	labelDeduplicate(tempAnsLabel,"AnswerLabel","survey/answerHidden/answerLabel","answer", dupAnsLblChange, dupAnsLblInfo);

	//populateList("survey/answerFile/answerFileList",files_in_current_ques);
	//populateDropDown("survey/answerFile/file_Category",categoryTypes);
	ansOrNot=true;
}

startNewAnswerChk(){
	String tempChkQues=getQuesLabel();

	if(tempChkQues!=null){
		createChkListPage(current_question_id);
		newTabGroup("survey");
		setFieldValue("survey/answerBasic/quesText", tempChkQues);
	}
}

startNewAnswerLangIntro(){
	createLangIntroPage(current_quesnir_id,current_question_id, "N",null);
		
	ansLabelDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
	"where AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerLabel') "+
	"and (measure = '"+tempAnsLabel+"' or measure like '"+tempAnsLabel+"(%)')";

	fetchAll(ansLabelDuplicateQuery,new FetchCallback() {
		onFetch(result) {
			if(!isNull(result)){
				tempAnsLabel=nonDupLabelGen(result,tempAnsLabel,null,null, false);
				if(result.size()==1){
					String newLabel=null;
					ArrayList tempLabels=extractLabelToList(tempAnsLabel);
					if(tempLabels !=null && !tempLabels.isEmpty()){
						tempAnsLabel=tempLabels.get(0);
						if(tempLabels.size()>1){
							newLabel=tempLabels.get(1);
							dupAnsLblChange=true;
							dupAnsLblInfo.add(result.get(0).get(0));
							dupAnsLblInfo.add(newLabel);
						}
					}
				}
			}
			langIntroAnsLabel=tempAnsLabel;
			newTabGroup("langIntroAns");
		}
	});
}

startNewAnswerFile(String typeflag, String current_start_time){
	hiddenAnsInfo.put("quesnir_id",current_quesnir_id);
	hiddenAnsInfo.put("ques_id",current_question_id);
	hiddenAnsInfo.put("start_time",current_start_time);
	ansLabelDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
	"where AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerLabel') "+
	"and (measure = '"+tempAnsLabel+"' or measure like '"+tempAnsLabel+"(%)')";

	fetchAll(ansLabelDuplicateQuery,new FetchCallback() {
		onFetch(result) {
			if(!isNull(result)){
				tempAnsLabel=nonDupLabelGen(result,tempAnsLabel,null,null, false);
				//showWarning("tempAnsLabelstartNewAnswerFile",tempAnsLabel);
				if(result.size()==1){
					String newLabel=null;
					ArrayList tempLabels=extractLabelToList(tempAnsLabel);
					if(tempLabels !=null && !tempLabels.isEmpty()){
						tempAnsLabel=tempLabels.get(0);
						if(tempLabels.size()>1){
							newLabel=tempLabels.get(1);
							dupAnsLblChange=true;
							dupAnsLblInfo.add(result.get(0).get(0));
							dupAnsLblInfo.add(newLabel);
						}
					}
				}
			}
			hiddenAnsInfo.put("label",tempAnsLabel);
			//showWarning("hiddenAnsInfotempAnsLabelstartNewAnswerFile",tempAnsLabel);
			switch(typeflag){
				case "aud":
					newFile("answer","Audio");
					attachAudioToField("file/fileInfo/audioFileContent");
				break;
				case "vid":
					newFile("answer","Video");
					attachVideoToField("file/fileInfo/videoFileContent");
				break;
				case "pho":
					newFile("answer","Photo");
					attachPictureToField("file/fileInfo/photoFileContent");
				break;

				case "fil":
					newFile("answer","Sketch");
					attachFileToField("file/fileInfo/sketchFileContent");
				break;
			}
			ansOrNot=false;
		}
	});
}

startChoiceAnswer(String current_start_time, String typeflag){
	hiddenAnsInfo.put("quesnir_id",current_quesnir_id);
	hiddenAnsInfo.put("ques_id",current_question_id);
	hiddenAnsInfo.put("start_time",current_start_time);
	//showWarning("hiddenAnsInfo","hiddenAnsInfo");
	ansLabelDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
		"where AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerLabel') "+
		"and (measure = '"+tempAnsLabel+"' or measure like '"+tempAnsLabel+"(%)')";
	fetchAll(ansLabelDuplicateQuery,new FetchCallback() {
		onFetch(result) {
			if(!isNull(result)){
				tempAnsLabel=nonDupLabelGen(result,tempAnsLabel,null,null, false);
				if(result.size()==1){
					String newLabel=null;
					ArrayList tempLabels=extractLabelToList(tempAnsLabel);
					if(tempLabels !=null && !tempLabels.isEmpty()){
						tempAnsLabel=tempLabels.get(0);
						if(tempLabels.size()>1){
							newLabel=tempLabels.get(1);
							dupAnsLblChange=true;
							dupAnsLblInfo.add(result.get(0).get(0));
							dupAnsLblInfo.add(newLabel);
						}
					}
				}
			}
			hiddenAnsInfo.put("label",tempAnsLabel);
			switch(typeflag){
				case "cho":
					startNewAnswerChooseOne();
				break;
				case "sem":
					startNewAnswerSelMul();
				break;
				case "dat":
					startNewAnswerDate();
				break;
			}
		}
	});
}

startNewAnswerLangEnd(){
	showWarning("Answer not needed","Answer for this question is not needed");
}


startNewAnswerChooseOne(){
	//showWarning("newAnswerChooseOne","newAnswerChooseOne");
	createChooseOneAnswerPage();
	newTabGroup("choiceAns");
	String tempQuesLabel=getQuesLabel();

	setFieldValue("choiceAns/choiceAnsInfo/ques",tempQuesLabel);
	/*
	loadAllQuesOptQuery="SELECT lang.uuid, lang.measure, opt.measure "+
        "from latestNonDeletedAentValue as lang, latestNonDeletedAentValue as opt, latestNonDeletedAentValue as ques "+
        "WHERE lang.AttributeID=(SELECT AttributeID from AttributeKey where AttributeName='QuesLangUuidOpt') "+
        "AND opt.AttributeID=(SELECT AttributeID from AttributeKey where AttributeName='QuesOptionText') "+
        "AND ques.AttributeID=(SELECT AttributeID from AttributeKey where AttributeName='QuesUuidOpt') "+
        "AND ques.measure='"+current_question_id+"' and ques.uuid=lang.uuid AND ques.uuid=opt.uuid "+
        "AND ques.uuid IN (SELECT uuid from latestNonDeletedArchEntIdentifiers "+
        "WHERE AttributeID=(SELECT AttributeID from AttributeKey where AttributeName='QuesUuidOpt'))";
	*/
    loadEngQuesOptQuery="SELECT opt.uuid, opt.measure "+
        "from latestNonDeletedAentValue as lang, latestNonDeletedAentValue as opt, latestNonDeletedAentValue as ques "+
        "WHERE lang.AttributeID=(SELECT AttributeID from AttributeKey where AttributeName='QuesLangUuidOpt') "+
        "AND opt.AttributeID=(SELECT AttributeID from AttributeKey where AttributeName='QuesOptionText') "+
        "AND ques.AttributeID=(SELECT AttributeID from AttributeKey where AttributeName='QuesUuidOpt') "+
        "AND lang.measure=(select eng.uuid from latestNonDeletedAentValue as eng where eng.AttributeID=(select AttributeID from AttributeKey where AttributeName='LanguageName') "+
        "and eng.measure='English' and eng.uuid in (select uuid from latestNonDeletedArchEntIdentifiers where AttributeID=(select AttributeID from AttributeKey where AttributeName='LanguageID'))) "+
        "AND ques.measure='"+current_question_id+"' and ques.uuid=lang.uuid AND ques.uuid=opt.uuid "+
        "AND ques.uuid IN (SELECT uuid from latestNonDeletedArchEntIdentifiers "+
        "WHERE AttributeID=(SELECT AttributeID from AttributeKey where AttributeName='QuesUuidOpt'))";

    fetchAll(loadEngQuesOptQuery,new FetchCallback() {
		onFetch(result) {
			if(!isNull(result)){
				populateRadioGroup("choiceAns/choiceAnsInfo/selRadio",result);
			}
			else{
				showWarning("Deprecated data","The options for this ques is not available");
			}
		}
	});
}



createChooseOneAnswerPage(){
	//showWarning("createChooseOneAnswerPage","createChooseOneAnswerPage");
	if(!hasView("choiceAns/choiceAnsInfo/ChooseOneButton")){
		removeAllViewsAndContainers("choiceAns");
		executeViewTask(new ViewTask() {
	    doTask() {
	    	quesContentDef = createViewDef().createTextField().setReadOnly(true);
	    	ansSelDef=createViewDef().createRadioGroup();
	    	nextBtnDef = createViewDef().createButton().setLabel("Finish").setStyleCss("faims-blue");
	        //showWarning("nextBtnDefcreateChooseOneAnswerPage","nextBtnDefcreateChooseOneAnswerPage");
			createView("choiceAns/choiceAnsInfo/ques",quesContentDef,"choiceAns/choiceAnsInfo");
			//showWarning("ques","ques");
	    	createView("choiceAns/choiceAnsInfo/selRadio",ansSelDef,"choiceAns/choiceAnsInfo");
	    	//showWarning("selRadio","selRadio");
	        createView("choiceAns/choiceAnsInfo/ChooseOneButton",nextBtnDef,"choiceAns/choiceAnsInfo");
	        //showWarning("ChooseOneButton","ChooseOneButton");
	        refreshTabgroupCSS("choiceAns");
			/**Events for answer**/
			onEvent("choiceAns/choiceAnsInfo/ChooseOneButton","click","saveNewChooseOneAnswer(0)");
			//showWarning("onEvent","ChooseOneButtononEvent");
   		}
		});
	}

}

saveNewChooseOneAnswer(int loopCount){
	String tempChooseOneAnswer=getFieldValue("choiceAns/choiceAnsInfo/selRadio");
	if(tempChooseOneAnswer==null|| tempChooseOneAnswer.equals("")){
		showWarning("No answer collected","This question is not answered, please select one option that applies");
		return;
	}

	if(!langIntro){
		if(current_answer_id==null){
			attributes = createAttributeList();
		
			attributes.add(createEntityAttribute("AnswerQuestionnaireID", null, null, hiddenAnsInfo.get("quesnir_id"), null));
			attributes.add(createEntityAttribute("AnswerQuestionID", null, null, hiddenAnsInfo.get("ques_id"), null));
			attributes.add(createEntityAttribute("AnswerLabel", null, null, hiddenAnsInfo.get("label"), null));
			attributes.add(createEntityAttribute("AnswerStartTime", null, null, hiddenAnsInfo.get("start_time"), null));
			attributes.add(createEntityAttribute("AnswerText", null, null,tempChooseOneAnswer, null));

			saveArchEnt(null, "AnswerToQuestionnaire", null, attributes, new SaveCallback(){
			onSave(uuid, newRecord){
				answer_id = uuid;
				current_answer_id=answer_id;
				if (newRecord) {
					opAfterNewAns(answer_id,hiddenAnsInfo.get("label"),hiddenAnsInfo.get("ques_id"));
					cancelTabGroup("choiceAns",true);
				}
			}
			onError(message) {
				if(loopCount<3){
					loopCount++;
					saveNewChooseOneAnswer(loopCount);
				}
				else{
					showWarning("Error happened, saving failed on Answer",message+"\n"+"please report this to the admin\n"+"click ok to continue");
				}
			}  
			});
		}
		else{//update answer info
			if(!tempChooseOneAnswer.equals(choiceDateOriginInfo.get(0))){

				attributes = createAttributeList();
				attributes.add(createEntityAttribute("AnswerText", null, null,tempChooseOneAnswer, null));

				saveArchEnt(current_answer_id, "AnswerToQuestionnaire", null, attributes, new SaveCallback(){
					onSave(uuid, newRecord){
						choiceDateOriginInfo.set(0,tempChooseOneAnswer);
						showToast("answer updated");
					}
					onError(message) {
						if(loopCount<3){
							loopCount++;
							saveNewChooseOneAnswer(loopCount);
						}
						else{
							showWarning("Error happened, updating failed on Answer",message+"\n"+"please report this to the admin\n"+"click ok to continue");
						}
					}  
				});
			}
		}
	}

	else if(langIntro){
		saveLangIntroChoiceDateAns("ch",hiddenAnsInfo.get("quesnir_id"),hiddenAnsInfo.get("ques_id"));
	}
	
}

saveLangIntroChoiceDateAns(String typeflag, String tempQuesnirId, String tempQuesId){
	if(finLangAndQues.size()<1){
		saveNewLangIntroAns(typeflag,tempQuesnirId,tempQuesId,crntLangIntroId,null);
	}
	else{
		saveFurtherChoiceDateAns(typeflag);
	}
}

saveFurtherChoiceDateAns(String typeflag){
	switch(typeflag){
		case "ch":
			saveNewChooseOneAnswerLangIntro(0);
		break;
		case "se":
			saveNewSelMulAnswerLangIntro(0);
		break;
		case "da":
			saveNewDateAnswerLangIntro(0);
		break;
	}
}

choiceDateAnsLangIntroCallBack(String tempUuid){
	newAnswer=new ArrayList();
	newAnswer.add(tempUuid);
	newAnswer.add(hiddenAnsInfo.get("label"));
	sss_answer_list.add(newAnswer);
	
	populateList("sessionForAnswer/sssAnsList/sssAnswerList",sss_answer_list);
	autoSaveSession("head");
	saveDupAns();
	showToast("new answer created");
	tempLangAndQues=new ArrayList();
	tempLangAndQues.add(crntLangIntroId);
	tempLangAndQues.add(hiddenAnsInfo.get("ques_id"));
	finLangAndQues.add(tempLangAndQues);
	if(finLangAndQues.size()>1){
		saveLangIntroQuesAnswer("ans",hiddenAnsInfo.get("quesnir_id"),hiddenAnsInfo.get("ques_id"),crntLangIntroId);
	}
	cancelTabGroup("choiceAns",true);
	checkAllLangIntroQues(crntLangIntroId);
}

saveNewChooseOneAnswerLangIntro(int loopCount){
	String tempChooseOneAnswer=getFieldValue("choiceAns/choiceAnsInfo/selRadio");
	if(tempChooseOneAnswer==null|| tempChooseOneAnswer.equals("")){
		showWarning("No answer collected","This question is not answered, please select one option that applies");
		return;
	}
	attributes = createAttributeList();
		
	attributes.add(createEntityAttribute("AnswerQuestionnaireID", null, null, hiddenAnsInfo.get("quesnir_id"), null));
	attributes.add(createEntityAttribute("AnswerQuestionID", null, null, hiddenAnsInfo.get("ques_id"), null));
	attributes.add(createEntityAttribute("AnswerLabel", null, null, hiddenAnsInfo.get("label"), null));
	attributes.add(createEntityAttribute("AnswerStartTime", null, null, hiddenAnsInfo.get("start_time"), null));
	attributes.add(createEntityAttribute("AnswerText", null, null,tempChooseOneAnswer, null));

	saveArchEnt(null, "AnswerToQuestionnaire", null, attributes, new SaveCallback(){
		onSave(uuid, newRecord){
			if (newRecord) {
				choiceDateAnsLangIntroCallBack(uuid);
			}
		}
		onError(message) {
			if(loopCount<3){
				loopCount++;
				saveNewChooseOneAnswerLangIntro(loopCount);
			}
			else{
				showWarning("Error happened, saving failed on Answer",message+"\n"+"please report this to the admin\n"+"click ok to continue");
			}
		}  
	});
}

saveNewSelMulAnswerLangIntro(int loopCount){
	
	selectedOpts=getFieldValue("choiceAns/choiceAnsInfo/selCheckBox");
	if(selectedOpts==null ||selectedOpts.isEmpty()){
		showWarning("No option selected","Please select at least one option that applies");
		return;
	}
	String tempAnsText=makeSelMulAnsText(selectedOpts);
	if(tempAnsText==null|| tempAnsText.equals("")){
		showWarning("No answer collected","This question is not answered, please select at least one option that applies");
		return;
	}
	if(!langIntro){
		attributes = createAttributeList();
		
		attributes.add(createEntityAttribute("AnswerQuestionnaireID", null, null, hiddenAnsInfo.get("quesnir_id"), null));
		attributes.add(createEntityAttribute("AnswerQuestionID", null, null, hiddenAnsInfo.get("ques_id"), null));
		attributes.add(createEntityAttribute("AnswerLabel", null, null, hiddenAnsInfo.get("label"), null));
		attributes.add(createEntityAttribute("AnswerStartTime", null, null, hiddenAnsInfo.get("start_time"), null));
		attributes.add(createEntityAttribute("AnswerText", null, null,tempAnsText, null));

		saveArchEnt(null, "AnswerToQuestionnaire", null, attributes, new SaveCallback(){
			onSave(uuid, newRecord){
				if (newRecord) {
					choiceDateAnsLangIntroCallBack(uuid);
				}
			}
			onError(message) {
				if(loopCount<3){
					loopCount++;
					saveNewSelMulAnswerLangIntro(loopCount);
				}
				else{
					showWarning("Error happened, saving failed on Answer",message+"\n"+"please report this to the admin\n"+"click ok to continue");
				}
			}  
		});
	}
	else{
		saveLangIntroChoiceDateAns("se",hiddenAnsInfo.get("quesnir_id"),hiddenAnsInfo.get("ques_id"));
	}
}

saveNewDateAnswerLangIntro(int loopCount){
	
	String tempAnsText=null;
	if(!isNull(getFieldValue("choiceAns/choiceAnsInfo/ansEn"))){
		tempAnsText=getFieldValue("choiceAns/choiceAnsInfo/ansEn");
		if(!dateValidation(tempAnsText)){
			showWarning("Invalid data","the entered date is not valid:\n"+"1.The format should be YYYY or YYYY/MM\n"+"2.MM should greater than 01 and less than 12");
			return;
		}
	}
	else{
		tempAnsText=getFieldValue("choiceAns/choiceAnsInfo/dateSel");
	}
	if(tempAnsText==null || tempAnsText.equals("")){
		showWarning("Incomplete data","the answer data is not collected");
		return;
	}
	if(!langIntro){
		attributes = createAttributeList();
		
		attributes.add(createEntityAttribute("AnswerQuestionnaireID", null, null, hiddenAnsInfo.get("quesnir_id"), null));
		attributes.add(createEntityAttribute("AnswerQuestionID", null, null, hiddenAnsInfo.get("ques_id"), null));
		attributes.add(createEntityAttribute("AnswerLabel", null, null, hiddenAnsInfo.get("label"), null));
		attributes.add(createEntityAttribute("AnswerStartTime", null, null, hiddenAnsInfo.get("start_time"), null));
		attributes.add(createEntityAttribute("AnswerText", null, null,tempAnsText, null));


		saveArchEnt(null, "AnswerToQuestionnaire", null, attributes, new SaveCallback(){
			onSave(uuid, newRecord){
				if (newRecord) {
					choiceDateAnsLangIntroCallBack(uuid);
				}
			}
			onError(message) {
				if(loopCount<3){
					loopCount++;
					saveNewDateAnswerLangIntro(loopCount);
				}
				else{
					showWarning("Error happened, saving failed on Answer",message+"\n"+"please report this to the admin\n"+"click ok to continue");
				}
			}  
		});
	}
	else{
		saveLangIntroChoiceDateAns("da",hiddenAnsInfo.get("quesnir_id"),hiddenAnsInfo.get("ques_id"));
	}
}


opAfterNewAns(String tempAnswerId, String tempAnswerLbl, String tempQuesId){
	newAnswer=new ArrayList();
	newAnswer.add(tempAnswerId);
	newAnswer.add(tempAnswerLbl);
	sss_answer_list.add(newAnswer);
	populateList("sessionForAnswer/sssAnsList/sssAnswerList",sss_answer_list);

	updateDupLabel(dupAnsLblInfo,"AnswerToQuestionnaire","AnswerLabel");
	showToast("new answer created");
	autoSaveSession("head");
	nextQuestion(tempQuesId,ques_in_current_quesnir,false);
}

startNewAnswerSelMul(){
	createSelMulAnswerPage();
	newTabGroup("choiceAns");
	String tempQuesLabel=getQuesLabel();

	setFieldValue("choiceAns/choiceAnsInfo/ques",tempQuesLabel);
	/*
	loadAllQuesOptQuery="SELECT lang.uuid, lang.measure, opt.measure "+
        "from latestNonDeletedAentValue as lang, latestNonDeletedAentValue as opt, latestNonDeletedAentValue as ques "+
        "WHERE lang.AttributeID=(SELECT AttributeID from AttributeKey where AttributeName='QuesLangUuidOpt') "+
        "AND opt.AttributeID=(SELECT AttributeID from AttributeKey where AttributeName='QuesOptionText') "+
        "AND ques.AttributeID=(SELECT AttributeID from AttributeKey where AttributeName='QuesUuidOpt') "+
        "AND ques.measure='"+current_question_id+"' and ques.uuid=lang.uuid AND ques.uuid=opt.uuid "+
        "AND ques.uuid IN (SELECT uuid from latestNonDeletedArchEntIdentifiers "+
        "WHERE AttributeID=(SELECT AttributeID from AttributeKey where AttributeName='QuesUuidOpt'))";
	*/
    loadEngQuesOptQuery="SELECT opt.uuid, opt.measure "+
        "from latestNonDeletedAentValue as lang, latestNonDeletedAentValue as opt, latestNonDeletedAentValue as ques "+
        "WHERE lang.AttributeID=(SELECT AttributeID from AttributeKey where AttributeName='QuesLangUuidOpt') "+
        "AND opt.AttributeID=(SELECT AttributeID from AttributeKey where AttributeName='QuesOptionText') "+
        "AND ques.AttributeID=(SELECT AttributeID from AttributeKey where AttributeName='QuesUuidOpt') "+
        "AND lang.measure=(select eng.uuid from latestNonDeletedAentValue as eng where eng.AttributeID=(select AttributeID from AttributeKey where AttributeName='LanguageName') "+
        "and eng.measure='English' and eng.uuid in (select uuid from latestNonDeletedArchEntIdentifiers where AttributeID=(select AttributeID from AttributeKey where AttributeName='LanguageID'))) "+
        "AND ques.measure='"+current_question_id+"' and ques.uuid=lang.uuid AND ques.uuid=opt.uuid "+
        "AND ques.uuid IN (SELECT uuid from latestNonDeletedArchEntIdentifiers "+
        "WHERE AttributeID=(SELECT AttributeID from AttributeKey where AttributeName='QuesUuidOpt'))";

    fetchAll(loadEngQuesOptQuery,new FetchCallback() {
		onFetch(result) {
			if(!isNull(result)){
				populateCheckBoxGroup("choiceAns/choiceAnsInfo/selCheckBox",result);
			}
			else{
				showWarning("Deprecated data","The options for this ques is not available");
			}
		}
	});
}

createSelMulAnswerPage(){
	if(!hasView("choiceAns/choiceAnsInfo/SelMulButton")){
		removeAllViewsAndContainers("choiceAns");
		executeViewTask(new ViewTask() {
	    doTask() {
	    	quesContentDef = createViewDef().createTextField().setReadOnly(true);
	    	ansSelDef=createViewDef().createCheckboxGroup();
	    	nextBtnDef = createViewDef().createButton().setLabel("Finish").setStyleCss("faims-blue");
	    	
			createView("choiceAns/choiceAnsInfo/ques",quesContentDef,"choiceAns/choiceAnsInfo");
	    	createView("choiceAns/choiceAnsInfo/selCheckBox",ansSelDef,"choiceAns/choiceAnsInfo");
	        createView("choiceAns/choiceAnsInfo/SelMulButton",nextBtnDef,"choiceAns/choiceAnsInfo");
	        refreshTabgroupCSS("choiceAns");
			/**Events for answer**/
			onEvent("choiceAns/choiceAnsInfo/SelMulButton","click","saveNewSelMulAnswer(0)");
   		}
		});
	}
}

saveNewSelMulAnswer(int loopCount){
	//selectedOpts is an arraylist of NameValuePair objects
	selectedOpts=getFieldValue("choiceAns/choiceAnsInfo/selCheckBox");
	if(selectedOpts==null ||selectedOpts.isEmpty()){
		showWarning("No option selected","Please select at least one option that applies");
		return;
	}
	String tempAnsText=makeSelMulAnsText(selectedOpts);
	if(tempAnsText==null|| tempAnsText.equals("")){
		showWarning("No answer collected","This question is not answered, please select at least one option that applies");
		return;
	}

	if(current_answer_id==null){
		attributes = createAttributeList();
	
		attributes.add(createEntityAttribute("AnswerQuestionnaireID", null, null, hiddenAnsInfo.get("quesnir_id"), null));
		attributes.add(createEntityAttribute("AnswerQuestionID", null, null, hiddenAnsInfo.get("ques_id"), null));
		attributes.add(createEntityAttribute("AnswerLabel", null, null, hiddenAnsInfo.get("label"), null));
		attributes.add(createEntityAttribute("AnswerStartTime", null, null, hiddenAnsInfo.get("start_time"), null));
		attributes.add(createEntityAttribute("AnswerText", null, null,tempAnsText, null));

		saveArchEnt(null, "AnswerToQuestionnaire", null, attributes, new SaveCallback(){
		onSave(uuid, newRecord){
			answer_id = uuid;
			current_answer_id=answer_id;
			if (newRecord) {
				opAfterNewAns(answer_id,hiddenAnsInfo.get("label"),hiddenAnsInfo.get("ques_id"));
				cancelTabGroup("choiceAns",true);
			}
		}
		onError(message) {
			if(loopCount<3){
				loopCount++;
				saveNewSelMulAnswer(loopCount);
			}
			else{
				showWarning("Error happened, saving failed on Answer",message+"\n"+"please report this to the admin\n"+"click ok to continue");
			}
		}  
		});
	}
	else{//update answer info
		if(!tempAnsText.equals(choiceDateOriginInfo.get(0))){

			attributes = createAttributeList();
			attributes.add(createEntityAttribute("AnswerText", null, null,tempAnsText, null));

			saveArchEnt(current_answer_id, "AnswerToQuestionnaire", null, attributes, new SaveCallback(){
				onSave(uuid, newRecord){
					choiceDateOriginInfo.set(0,tempAnsText);
					showToast("answer updated");
				}
				onError(message) {
					if(loopCount<3){
						loopCount++;
						saveNewSelMulAnswer(loopCount);
					}
					else{
						showWarning("Error happened, updating failed on Answer",message+"\n"+"please report this to the admin\n"+"click ok to continue");
					}
				}  
			});
		}
	}
}

makeSelMulAnsText(ArrayList selectedOpts){
	StringBuilder sb=new StringBuilder();

	for(tempx:selectedOpts){
		str=tempx.getName();
		if(sb.length()>1){
			sb.append(",");
		}
		sb.append(str);
	}
	return sb.toString();
}

startNewAnswerDate(){
	createDateAnswerPage();
	newTabGroup("choiceAns");
	String tempQuesLabel=getQuesLabel();

	setFieldValue("choiceAns/choiceAnsInfo/ques",tempQuesLabel);
}

createDateAnswerPage(){
	if(!hasView("choiceAns/choiceAnsInfo/dateSave")){
		removeAllViewsAndContainers("choiceAns");
		executeViewTask(new ViewTask() {
	    doTask() {
	    	quesContentDef = createViewDef().createTextField().setReadOnly(true);
	    	dateDef = createViewDef().createDatePicker().setLabel("Select Date");
	    	ansEnterDef = createViewDef().createTextField().setLabel("Enter answer if date is not available(YYYY or YYYY/MM)");
	    	nextBtnDef = createViewDef().createButton().setLabel("Finish").setStyleCss("faims-blue");
	    	
			createView("choiceAns/choiceAnsInfo/ques",quesContentDef,"choiceAns/choiceAnsInfo");
	    	createView("choiceAns/choiceAnsInfo/dateSel",dateDef,"choiceAns/choiceAnsInfo");
	    	createView("choiceAns/choiceAnsInfo/ansEn",ansEnterDef,"choiceAns/choiceAnsInfo");
	        createView("choiceAns/choiceAnsInfo/dateSave",nextBtnDef,"choiceAns/choiceAnsInfo");

	        refreshTabgroupCSS("choiceAns");
			/**Events for answer**/
			onEvent("choiceAns/choiceAnsInfo/dateSave","click","saveNewDateAnswer(0)");
   		}
		});
	}
}

saveNewDateAnswer(int loopCount){
	String tempAnsText=null;
	if(!isNull(getFieldValue("choiceAns/choiceAnsInfo/ansEn"))){
		tempAnsText=getFieldValue("choiceAns/choiceAnsInfo/ansEn");
		if(!dateValidation(tempAnsText)){
			showWarning("Invalid data","the entered date is not valid:\n"+"1.The format should be YYYY or YYYY/MM\n"+"2.MM should greater than 01 and less than 12");
			return;
		}
	}
	else{
		tempAnsText=getFieldValue("choiceAns/choiceAnsInfo/dateSel");
	}
	if(tempAnsText==null || tempAnsText.equals("")){
		showWarning("Incomplete data","the answer data is not collected");
		return;
	}

	if(current_answer_id==null){
		attributes = createAttributeList();
	
		attributes.add(createEntityAttribute("AnswerQuestionnaireID", null, null, hiddenAnsInfo.get("quesnir_id"), null));
		attributes.add(createEntityAttribute("AnswerQuestionID", null, null, hiddenAnsInfo.get("ques_id"), null));
		attributes.add(createEntityAttribute("AnswerLabel", null, null, hiddenAnsInfo.get("label"), null));
		attributes.add(createEntityAttribute("AnswerStartTime", null, null, hiddenAnsInfo.get("start_time"), null));
		attributes.add(createEntityAttribute("AnswerText", null, null,tempAnsText, null));

		saveArchEnt(null, "AnswerToQuestionnaire", null, attributes, new SaveCallback(){
		onSave(uuid, newRecord){
			answer_id = uuid;
			current_answer_id=answer_id;
			if (newRecord) {
				opAfterNewAns(answer_id,hiddenAnsInfo.get("label"),hiddenAnsInfo.get("ques_id"));
				cancelTabGroup("choiceAns",true);
			}
		}
		onError(message) {
			if(loopCount<3){
				loopCount++;
				saveNewDateAnswer(loopCount);
			}
			else{
				showWarning("Error happened, saving failed on Answer",message+"\n"+"please report this to the admin\n"+"click ok to continue");
			}
		}  
		});
	}
	else{//update answer info
		if(!tempAnsText.equals(choiceDateOriginInfo.get(0))){

			attributes = createAttributeList();
			attributes.add(createEntityAttribute("AnswerText", null, null,tempAnsText, null));

			saveArchEnt(current_answer_id, "AnswerToQuestionnaire", null, attributes, new SaveCallback(){
				onSave(uuid, newRecord){
					choiceDateOriginInfo.set(0,tempAnsText);
					showToast("answer updated");
				}
				onError(message) {
					if(loopCount<3){
						loopCount++;
						saveNewDateAnswer(loopCount);
					}
					else{
						showWarning("Error happened, updating failed on Answer",message+"\n"+"please report this to the admin\n"+"click ok to continue");
					}
				}  
			});
		}
	}
}


loadChoiceDateAnswer(String typeflag, String tempAnswerId){
	loadQuesContentByAnsIdQuery="select qId.measure, qContent.measure "+
        "from latestNonDeletedAentValue as qId, latestNonDeletedAentValue as qContent, latestNonDeletedAentValue as qLanguage "+
        "where qContent.AttributeID=(SELECT AttributeID from AttributeKey where AttributeName='QuesContent') "+
        "and qId.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionUuid') "+
        "and qLanguage.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesLangUuid') "+
        "and qId.uuid=qContent.uuid "+
        "and qId.uuid=qLanguage.uuid "+
        "and qLanguage.measure IN (select eng.uuid from latestNonDeletedAentValue as eng where eng.AttributeID=(select AttributeID from AttributeKey where AttributeName='LanguageName') "+
        "and eng.measure='English' and eng.uuid in (select uuid from latestNonDeletedArchEntIdentifiers where AttributeID=(select AttributeID from AttributeKey where AttributeName='LanguageID'))) "+
        "and qId.measure = "+
            "(select measure from latestNonDeletedAentValue where AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionID') and uuid='"+tempAnswerId+"') "+
        "and qId.uuid in "+
            "(select uuid from latestNonDeletedArchEntIdentifiers where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionUuid'))";

    loadAnsTextByAnsIdQuery="select ansText.measure "+
        "from latestNonDeletedAentValue as ansId, latestNonDeletedAentValue as ansText "+
        "where ansId.AttributeID=(SELECT AttributeID from AttributeKey where AttributeName='AnswerQuestionID') "+
        "and ansText.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerText') "+
        "and ansId.uuid=ansText.uuid "+
        "and ansId.measure = "+
            "(select measure from latestNonDeletedAentValue where AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionID') and uuid='"+tempAnswerId+"') "+
        "and ansId.uuid in "+
            "(select uuid from latestNonDeletedArchEntIdentifiers where AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionID'))";

    fetchOne(loadQuesContentByAnsIdQuery,new FetchCallback() {
		onFetch(result) {
			if(!isNull(result)){
				fetchOne(loadAnsTextByAnsIdQuery,new FetchCallback() {
					onFetch(ansTextresult) {
						if(!isNull(ansTextresult)){
							loadChoiceDateAnswerInfo(typeflag, result.get(0),result.get(1),ansTextresult.get(0));	
						}
						else{
							showWarning("Deprecated data","This answer may not be using anymore\n"+" please contact the admin for details");
						}
					 
					}  
				});
			}
			else{
				showWarning("Deprecated data","This question may not be using anymore\n"+" please contact the admin for details");
			}
		 
		}  
	});
}

loadChoiceDateAnswerInfo(String typeflag, String tempQuesId, String tempQuesLabel, String tempAnsText){
	switch(typeflag){
		case "ChooseOne":
			loadChooseOneAnsInfo(tempQuesId,tempQuesLabel,tempAnsText);
		break;

		case "SelectMultiple":
			loadMulAnsInfo(tempQuesId,tempQuesLabel,tempAnsText);
		break;

		case "Date":
			loadDateAnsInfo(tempQuesId,tempQuesLabel,tempAnsText);
		break;
	}
}

loadChooseOneAnsInfo(String tempQuesId, String tempQuesLabel, String tempAnsText){
	createChooseOneAnswerPage();
	showTabGroup("choiceAns");
	choiceDateOriginInfo.clear();
	choiceDateOriginInfo.add(tempAnsText);
	//showWarning("choiceDateOriginInfo",tempAnsText);
	loadEngQuesOptQuery="SELECT opt.uuid, opt.measure "+
        "from latestNonDeletedAentValue as lang, latestNonDeletedAentValue as opt, latestNonDeletedAentValue as ques "+
        "WHERE lang.AttributeID=(SELECT AttributeID from AttributeKey where AttributeName='QuesLangUuidOpt') "+
        "AND opt.AttributeID=(SELECT AttributeID from AttributeKey where AttributeName='QuesOptionText') "+
        "AND ques.AttributeID=(SELECT AttributeID from AttributeKey where AttributeName='QuesUuidOpt') "+
        "AND lang.measure=(select eng.uuid from latestNonDeletedAentValue as eng where eng.AttributeID=(select AttributeID from AttributeKey where AttributeName='LanguageName') "+
        "and eng.measure='English' and eng.uuid in (select uuid from latestNonDeletedArchEntIdentifiers where AttributeID=(select AttributeID from AttributeKey where AttributeName='LanguageID'))) "+
        "AND ques.measure='"+tempQuesId+"' and ques.uuid=lang.uuid AND ques.uuid=opt.uuid "+
        "AND ques.uuid IN (SELECT uuid from latestNonDeletedArchEntIdentifiers "+
        "WHERE AttributeID=(SELECT AttributeID from AttributeKey where AttributeName='QuesUuidOpt'))";

    fetchAll(loadEngQuesOptQuery,new FetchCallback() {
		onFetch(result) {
			if(!isNull(result)){
				populateRadioGroup("choiceAns/choiceAnsInfo/selRadio",result);
				setFieldValue("choiceAns/choiceAnsInfo/ques",tempQuesLabel);
				setFieldValue("choiceAns/choiceAnsInfo/selRadio",tempAnsText);
			}
			else{
				showWarning("Deprecated data","The options for this ques is not available");
			}
		}
	});
}

loadMulAnsInfo(String tempQuesId, String tempQuesLabel, String tempAnsText){
	createSelMulAnswerPage();
	showTabGroup("choiceAns");
	choiceDateOriginInfo.clear();
	choiceDateOriginInfo.add(tempAnsText);
	
	loadEngQuesOptQuery="SELECT opt.uuid, opt.measure "+
        "from latestNonDeletedAentValue as lang, latestNonDeletedAentValue as opt, latestNonDeletedAentValue as ques "+
        "WHERE lang.AttributeID=(SELECT AttributeID from AttributeKey where AttributeName='QuesLangUuidOpt') "+
        "AND opt.AttributeID=(SELECT AttributeID from AttributeKey where AttributeName='QuesOptionText') "+
        "AND ques.AttributeID=(SELECT AttributeID from AttributeKey where AttributeName='QuesUuidOpt') "+
        "AND lang.measure=(select eng.uuid from latestNonDeletedAentValue as eng where eng.AttributeID=(select AttributeID from AttributeKey where AttributeName='LanguageName') "+
        "and eng.measure='English' and eng.uuid in (select uuid from latestNonDeletedArchEntIdentifiers where AttributeID=(select AttributeID from AttributeKey where AttributeName='LanguageID'))) "+
        "AND ques.measure='"+tempQuesId+"' and ques.uuid=lang.uuid AND ques.uuid=opt.uuid "+
        "AND ques.uuid IN (SELECT uuid from latestNonDeletedArchEntIdentifiers "+
        "WHERE AttributeID=(SELECT AttributeID from AttributeKey where AttributeName='QuesUuidOpt'))";

    fetchAll(loadEngQuesOptQuery,new FetchCallback() {
		onFetch(result) {
			if(!isNull(result)){
				populateCheckBoxGroup("choiceAns/choiceAnsInfo/selCheckBox",result);
				setFieldValue("choiceAns/choiceAnsInfo/ques", tempQuesLabel);
				setMulAnsOpt(tempAnsText);
			}
			else{
				showWarning("Deprecated data","The options for this ques is not available");
			}
		}
	});
}

setMulAnsOpt(String tempAnsText){
	String [] ansSplit=tempAnsText.split(",");
	for(subAns: ansSplit){
		setFieldValue("choiceAns/choiceAnsInfo/selCheckBox", subAns);
	}

}

loadDateAnsInfo(String tempQuesId, String tempQuesLabel, String tempAnsText){
	createDateAnswerPage();
	showTabGroup("choiceAns");
	choiceDateOriginInfo.clear();
	choiceDateOriginInfo.add(tempAnsText);

	if(systemDateValidation(tempAnsText)){
		setFieldValue("choiceAns/choiceAnsInfo/dateSel",tempAnsText);
	}
	else{
		setFieldValue("choiceAns/choiceAnsInfo/ansEn",tempAnsText);
	}	
}

loadAnswerFromQuesInQuesnir(String ques_id){
	//showWarning("loadAnswerFromQuesInQuesnirques_id",ques_id);
	if(isNull(current_quesnir_name)){
		showWarning("No questionnaire name available","Can't get the questionnaire name, please contact the admin");
		return;
	}
	if(ques_id==null || ques_id.equals("null")){
		current_question_id=getListItemValue();
//		showWarning("current_question_idL",current_question_id);
	}
	else
	{
		current_question_id=ques_id;
	}
//	showWarning("loadAnswerFromQuesInQuesnircurrent_question_id",current_question_id);
	Boolean quesLabelRead=false;
	for(ques: ques_in_current_quesnir){
		if(ques.get(0).equals(current_question_id))
		{
			current_question_content=ques.get(1);
			break;
		}
	}
	//showWarning("current_question_content",current_question_content);
	if(isNull(current_question_content)){
		showWarning("No question content available","Can't get the question content, please contact the admin");
		return;
	}

	for(quesLabel: queslabel_current_quesnir){
		if(quesLabel.get(0).equals(current_question_id))
		{
			current_question_label=quesLabel.get(1);
			quesLabelRead=true;
			break;
		}
	}
	//showWarning("quesLabelRead",quesLabelRead.toString());

	if(quesLabelRead){
		//showWarning("ansTypeChecking","ansTypeCheckingenter");
		ansTypeChecking(current_question_id);
	}
	
	else{
		queslabel_quesnir_query="select uuid, measure from latestNonDeletedAentValue "+
			"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionID') "+
			"and uuid in (select measure from latestNonDeletedArchEntIdentifiers "+
			"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesUuid') "+
			"and measure in (select quesInQuesnir.measure from latestNonDeletedAentValue as quesInQuesnir, latestNonDeletedAentValue as quesnir "+
			"where quesInQuesnir.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesID') "+
			"and quesnir.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesnirID') "+
			"and quesInQuesnir.uuid=quesnir.uuid and quesnir.measure='"+current_quesnir_id+"'))";
			fetchAll(queslabel_quesnir_query, new FetchCallback() {
					onFetch(result) {
						//showWarning("queslabel_quesnir_query","queslabel_quesnir_query");
						if (!isNull(result)) {	
							//showWarning("!nullqueslabel_quesnir_query","queslabel_quesnir_query");
							queslabel_current_quesnir.clear();
							queslabel_current_quesnir.addAll(result);
							//showWarning("!queslabel_current_quesniraddall","queslabel_quesnir_query");
							for(quesLabel: queslabel_current_quesnir){
								if(quesLabel.get(0).equals(current_question_id))
								{
									current_question_label=quesLabel.get(1);
									quesLabelRead=true;
									break;
								}
							}
							//showWarning("!queslabel_current_quesnirquesLabelRead",quesLabelRead.toString());
							for(quesLabel: queslabel_current_quesnir){
								if(quesLabelRead){
									ansTypeChecking(current_question_id);
								}
								else{
									showWarning("The data is outdated","Please exit the module and retry");
								}
							}
						}
						else{
							showWarning("Something wrong with getting data","Please exit the module and retry");
								return;
						}
			      }
				onError(message) {
					showToast(message);
				}
		});

	}
}

ansTypeChecking(String ques_id){
	//showWarning("ansTypeChecking",ques_id);
	String answerType=null;
	String recordingType=null;
	for(ques: quesRecordingType){
		//showWarning("quesType",ques.get(0));
		if(ques.get(0).equals(ques_id)){
			recordingType=ques.get(1);
			//showWarning("quesTypename",recordingType);
			switch(recordingType){
				case "Audio":
					answerType="aud";
				break;

				case "Video":
					answerType="vid";
				break;

				case "Photo":
					answerType="pho";
				break;

				case "File":
					answerType="fil";
				break;

				case "FreeText":
					answerType="non";
				break;

				case "CheckList":
					answerType="chk";
				break;

				case "LangList":
					answerType="lan";
				break;

				case "LangListEnd":
					answerType="lnd";
				break;

				case "ChooseOne":
					answerType="cho";
				break;

				case "SelectMultiple":
					answerType="sem";
				break;

				case "Date":
					answerType="dat";
				break;

				default:
					answerType="non";
				break;
			}
			//showWarning("answerType",answerType);
			startNewAnswer(answerType);
			break;
		}
	}
}

saveNewAnswer(int loopCount){
	if(!langIntro){
		if(!ansOrNot){
			attributes = createAttributeList();
			
			attributes.add(createEntityAttribute("AnswerQuestionnaireID", null, null, hiddenAnsInfo.get("quesnir_id"), null));
			attributes.add(createEntityAttribute("AnswerQuestionID", null, null, hiddenAnsInfo.get("ques_id"), null));
			attributes.add(createEntityAttribute("AnswerLabel", null, null, hiddenAnsInfo.get("label"), null));
			attributes.add(createEntityAttribute("AnswerStartTime", null, null, hiddenAnsInfo.get("start_time"), null));

			saveArchEnt(null, "AnswerToQuestionnaire", null, attributes, new SaveCallback(){
				onSave(uuid, newRecord){
					//showWarning("saveArchEnt 1","saveArchEnt 1");
					answer_id = uuid;
					//showWarning("answer_id 1",answer_id);
					current_answer_id=answer_id;
					if (newRecord) {
						for(file : files_in_current_ques){
							saveEntitiesToRel("Answer and File",answer_id,file.get(0));		
						}
						//showWarning("answer_id newRecord","newRecord");
						newAnswer=new ArrayList();
						newAnswer.add(answer_id);
						//showWarning(".add(answer_id)",".add(answer_id)");
						newAnswer.add(hiddenAnsInfo.get("label"));
						//showWarning(".hiddenAnsInfo",".hiddenAnsInfo)");
						sss_answer_list.add(newAnswer);
						populateList("sessionForAnswer/sssAnsList/sssAnswerList",sss_answer_list);
						//showWarning("populateList","populateList");

						updateDupLabel(dupAnsLblInfo,"AnswerToQuestionnaire","AnswerLabel");
						showToast("new answer created");
						//cancelTabGroup("file", true);
						autoSaveSession("head");
						//showWarning("autoSaveSession 3","autoSaveSession 3");
						nextQuestion(hiddenAnsInfo.get("ques_id"),ques_in_current_quesnir,false);
					}
				}
				onError(message) {
					if(loopCount<3){
						loopCount++;
						saveNewAnswer(loopCount);
					}
					else{
						showWarning("Error happened, saving failed on Answer",message+"\n"+"please report this to the admin\n"+"click ok to continue");
					}
				}  
			});
		}
		else{
			if((files_in_current_ques==null || files_in_current_ques.isEmpty()) && isNull(getFieldValue("survey/answerBasic/answerText")) ){
				showWarning("Warning","Please input answer text or adding an answer file");
				return;
			}
			
			if(isNull(current_answer_id)){//create new answer
				String newAnsLabel=getFieldValue("survey/answerHidden/answerLabel");
				
				saveTabGroup("survey", answer_id, null, null, new SaveCallback() {
					onSave(uuid, newRecord) {
						answer_id = uuid;
						//showWarning("answer_id",answer_id);
						current_answer_id=answer_id;
						//showWarning("current_answer_id",current_answer_id);

						if (newRecord) {
							for(file : files_in_current_ques){
								saveEntitiesToRel("Answer and File",answer_id,file.get(0));		
							}
							
							newAnswer=new ArrayList();
							newAnswer.add(answer_id);
							newAnswer.add(newAnsLabel);
							sss_answer_list.add(newAnswer);
							
							populateList("sessionForAnswer/sssAnsList/sssAnswerList",sss_answer_list);
							//if this is the second answer with a duplicate label
							//the other answer label will be changed with a suffix (1)
							updateDupLabel(dupAnsLblInfo,"AnswerToQuestionnaire","AnswerLabel");
							showToast("new answer created");
							//String curntQuesId=getFieldValue("survey/answerHidden/answerQuestionID");
							cancelTabGroup("survey", true);
							//showWarning("cancelTabGroupNewAnswer","survey");
							//cancelTabGroup("answerToQuestion", true);
							autoSaveSession("head");
							nextQuestion(getFieldValue("survey/answerHidden/answerQuestionID"), ques_in_current_quesnir,false);
						}
					}
					onError(message) {
						showWarning("error on saveNewAnswer2",message);
					}  
				});
			}

			else{//this is changing answerInfo		
				answerInfoNew.clear();
				answerInfoNew.add(getFieldValue("survey/answerHidden/answerLabel"));
				answerInfoNew.add(getFieldValue("survey/answerBasic/answerText"));
				answerInfoNew.add(getFieldValue("survey/answerHidden/answerStartTimestamp"));
				Hashtable fileListChange=listChange(files_in_current_ques,files_origin);
				Hashtable answerBasicInfoChange=listChange(answerInfoNew,answerInfoOriginal);
				//case1: Nothing changed
				if((fileListChange.containsKey("EQUAL"))&&(answerBasicInfoChange.containsKey("EQUAL"))){
					showWarning("Answer Modification","No data is changed");
					saveAnnotation("survey", current_answer_id);
					return;
				}
				//case2: only fileList changed
				else if((!fileListChange.containsKey("EQUAL"))&&(answerBasicInfoChange.containsKey("EQUAL"))){
					ansFileRelnUpdate(fileListChange);
					saveAnnotation("survey", current_answer_id);
					showToast("file list changed");
						//cancelTabGroup("survey", true);
				}
				else{//case 3: both answer basic info and file list are changed
					saveTabGroup("survey", current_answer_id, null, null, new SaveCallback() {
						onSave(uuid, newRecord) {
							answer_id = uuid;	//not sure how it's working
							ansFileRelnUpdate(fileListChange);
							showToast("Answer Info Changed");		
						}
						onError(message) {
							showWarning("error on saveNewAnswer3 ",message);
						}  
					});
				}
			}
		}
	}
	else if(langIntro){
		if((files_in_current_ques==null || files_in_current_ques.isEmpty()) && isNull(getFieldValue("survey/answerBasic/answerText")) ){
			showWarning("Warning","Please input answer text or adding an answer file");
			return;
		}
		saveLangIntroFreeTextAns(getFieldValue("survey/answerHidden/answerQuestionnaireID"), getFieldValue("survey/answerHidden/answerQuestionID"));
	}
}

saveLangIntroFreeTextAns(String tempQuesnirId, String tempQuesId){
	if(!isNull(tempQuesnirId) && !isNull(tempQuesId)){
		if(finLangAndQues.size()<1){
			//showWarning("finLangAndQues","finLangAndQues");
			saveNewLangIntroAns("s",tempQuesnirId,tempQuesId,crntLangIntroId,null);
		}
		else{
			saveLangIntroAnswerWithoutFile();
		}
	}
}

ansFileRelnUpdate(Hashtable fileListChange){
	if(fileListChange.containsKey("PUREADD")){
		//case passed  
		fileToAdd=fileListChange.get("PUREADD");
		for(file : fileToAdd){
			//showWarning(current_answer_id,file.get(0));
			saveEntitiesToRel("Answer and File",current_answer_id,file.get(0));		
		}
	}
	//case passed  
	else if(fileListChange.containsKey("PUREDELETE")){
		fileToDelete=fileListChange.get("PUREDELETE");
		for(file : fileToDelete){
			for(fileReln: ansFileOriginReln){
				if(file.get(0).equals(fileReln.get(0))){
					deleteRel(fileReln.get(1));
				}
			}
		}
	}
	//this case is not stable
	else{
		fileToAdd=fileListChange.get("ADD");
		for(file : fileToAdd){
			saveEntitiesToRel("Answer and File",current_answer_id,file.get(0));
		}
		fileToDelete=fileListChange.get("DELETE");
		for(file : fileToDelete){
			for(fileReln: ansFileOriginReln){
				if(file.get(0).equals(fileReln.get(0))){
					deleteRel(fileReln.get(1));
				}
			}
		}
		
	}
}

viewOrDeleteFileReln(){
	select_file_id=getListItemValue();
	if(select_file_id==null || select_file_id.equals("")){
		showWarning("Invalid file","File not exist");
		return;
	}
	showAlert("View File Info","Do you want to view file info?","loadAnswerFileInfo(\"answer\")","deleteRelnAlert()");
}

deleteRelnAlert(){
	showAlert("Delete File","Do you want to delete this file from this answer?","deleteFileRelation()","returnToCurrentPage()");
}

deleteFileRelation(){		
	delete_file_id=getListItemValue();
	if(isNull(delete_file_id)){
		showWarning("Error","No file selected or file is not available,please contact the admin");
		return;
	}
	for(deleteFile:files_in_current_ques){
		if(deleteFile.get(0).equals(delete_file_id))
		{
			files_in_current_ques.remove(deleteFile);
			populateList("survey/answerFile/answerFileList",files_in_current_ques);
			break;
		}
	}
	for(fileToDelete:file_and_fileType){
		if(fileToDelete.get(0).equals(delete_file_id))
		{
			file_and_fileType.remove(deleteFile);
			break;
		}
	}
}
/*** File ***/
/*** File variables ***/
categoryTypes=new ArrayList();
categoryTypes.add(new NameValuePair("{Audio}", "Audio"));
categoryTypes.add(new NameValuePair("{Video}", "Video"));
categoryTypes.add(new NameValuePair("{Photo}", "Photo"));
categoryTypes.add(new NameValuePair("{Other}", "Other"));



String file_id=null;
//for checking if we need to rebuild the file ui
Boolean emrOrNot=false;
/*** File query ***/
/***2 usages, loadFile(), search file ***/

loadAllFileIDQuery="SELECT uuid,measure FROM latestNonDeletedArchEntIdentifiers " +
	"WHERE AttributeID "+
	"= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='FileID') "+
	"GROUP BY uuid ORDER BY measure asc;";

loadFile(){
	file_id=null;
	fileCategory=new ArrayList();
	fileCategory.add(new NameValuePair("{All}", "All"));
	fileCategory.add(new NameValuePair("{Audio}", "Audio"));
	fileCategory.add(new NameValuePair("{Video}", "Video"));
	fileCategory.add(new NameValuePair("{Photo}", "Photo"));
	fileCategory.add(new NameValuePair("{Other}", "Other"));
	populateDropDown("file_control/fileControlInfo/fileCategorySelect",fileCategory);
	setFieldValue("file_control/fileControlInfo/file_keyword","*");
	fetchAll(loadAllFileIDQuery, new FetchCallback() {
        onFetch(result) {
            populateList("file_control/fileControlInfo/fileList", result);
        }
        onError(message) {
            showToast(message);
        }
    });
}

loadAnswerFileInfo(String typeFlag){
	String view_file_id=null;
	if(typeFlag.equals("answer")){
		current_answer_file_id=getListItemValue();
		if(isNull(current_answer_file_id)){
			showWarning("No file chosen","No file is selected, or the file is not available");
			return;
		}
		answerFile=true;
		view_file_id=current_answer_file_id;
	}
	else{
		file_id=getListItemValue();
		if(isNull(file_id)){
			showWarning("No file chosen","No file is selected, or the file is not available");
			return;
		}
		answerFile=false;
		view_file_id=file_id;
	}
	//showWarning("answerfile",answerFile.toString());
	checkFileTypeQuery="select measure from latestNonDeletedAentValue where latestNonDeletedAentValue.uuid="+view_file_id+" "+
	"and latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeKey.AttributeName='FileType');";
	//showWarning("checkFileTypeQuery",checkFileTypeQuery);
	fetchAll(checkFileTypeQuery,new FetchCallback() {
        onFetch(result) {
			if (!isNull(result)) {
				//showWarning("fetchAll",result.getClass.getName());				
				String currentType=result.get(0).get(0);
				//showWarning("currentType",currentType);
				loadFileInfo(currentType,view_file_id);
			}
			else{
				showWarning("Data reading error","This file may not be used anymore");
			}	
        }

        onError(message) {
            showToast(message);
        }
    });	
}

loadFileInfo(String currentType, String view_file_id){
	answerFile=false;
	switch (currentType){
	case "Audio":		
		createFilePage("audio","attachAudioToField(\"file/fileInfo/audioFileContent\")",
			"saveFileFromAnswer(\"file/fileHidden/audioFileID\",\"file/fileInfo/audioFileContent\",\"file\",\"Audio\")");
		showTabGroup("file", view_file_id, new FetchCallback() {
	        onFetch(result) {						  
	            showToast("Loaded audio file"+result.getId());            
	        }
	        onError(message) {
	            showToast(message);
	        }
	    });
		break;
	case "Video":
		createFilePage("video","attachVideoToField(\"file/fileInfo/videoFileContent\")",
			"saveFileFromAnswer(\"file/fileHidden/videoFileID\",\"file/fileInfo/videoFileContent\",\"file\",\"Video\")");
		showTabGroup("file", view_file_id, new FetchCallback() {
	        onFetch(result) {						  
	            showToast("Loaded video file"+result.getId());            
	        }
	        onError(message) {
	            showToast(message);
	        }
	    });
		break;
	case "Photo":
		createFilePage("photo","attachPictureToField(\"file/fileInfo/photoFileContent\")",
			"saveFileFromAnswer(\"file/fileHidden/photoFileID\",\"file/fileInfo/photoFileContent\",\"file\",\"Photo\")");
		showTabGroup("file", view_file_id, new FetchCallback() {
	        onFetch(result) {						  
	            showToast("Loaded photo file"+result.getId());            
	        }
	        onError(message) {
	            showToast(message);
	        }
	    });
		break;
	case "Sketch":
		createFilePage("sketch","attachFileToField(\"file/fileInfo/sketchFileContent\")",
			"saveFileFromAnswer(\"file/fileHidden/sketchFileID\",\"file/fileInfo/sketchFileContent\",\"file\",\"Recording\")");
		showTabGroup("file", view_file_id, new FetchCallback() {
	        onFetch(result) {						  
	            showToast("Loaded sketch file"+result.getId());            
	        }
	        onError(message) {
	            showToast(message);
	        }
	    });
		break;
	}
}
/*** File dynamic ui ***/
createFilePage(String fileType, String attachFunc, String saveFunc){
	String uiNamePrefix=null;
	String uiLabelPrefix=null;
	switch(fileType){
		case "audio":
		uiNamePrefix="audio";
		uiLabelPrefix="Audio";
		break;

		case "video":
		uiNamePrefix="video";
		uiLabelPrefix="Video";
		break;

		case "photo":
		uiNamePrefix="photo";
		uiLabelPrefix="Photo";
		break;

		case "sketch":
		uiNamePrefix="sketch";
		uiLabelPrefix="Sketch";
		break;
	}
	//Generate ui
	if((emrOrNot)||(!emrOrNot && hasView("file/fileHidden/"+uiNamePrefix+"FileEmr"))){
		removeAllViewsAndContainers("file");
		createFilePageComponents(fileType, attachFunc, saveFunc, uiNamePrefix, uiLabelPrefix);
	}
	else if(!hasView("file/fileInfo/Save_New_"+uiLabelPrefix)) {
		removeAllViewsAndContainers("file");
		createFilePageComponents(fileType, attachFunc, saveFunc, uiNamePrefix, uiLabelPrefix);
	}
 	
}

createFilePageComponents(String fileType, String attachFunc, String saveFunc, String uiNamePrefix, String uiLabelPrefix){
	executeViewTask(new ViewTask() {
		doTask() { 
			//file hidden	
			idFileDef = createViewDef().createTextField().setLabel(uiLabelPrefix+" file label").setAttributeName("FileID").setAttributeType("measure").
			setAnnotationEnabled(true).setReadOnly(true);

			typeViewDef=createViewDef().createTextField().setLabel("File type").setAttributeName("FileType").setAttributeType("measure").
			setAnnotationEnabled(true).setReadOnly(true);

			creatorViewDef=createViewDef().createTextField().setLabel("Creator").setAttributeName("FileCreator").setAttributeType("measure").
			setAnnotationEnabled(true).setReadOnly(true);

			startTimeViewDef=createViewDef().createTextField().setLabel("Start time").setAttributeName("FileStartTime").setAttributeType("measure").
			setAnnotationEnabled(true).setReadOnly(true);

			endTimeViewDef=createViewDef().createTextField().setLabel("End time").setAttributeName("FileEndTime").setAttributeType("measure").
			setAnnotationEnabled(true).setReadOnly(true);

			if (fileType.equals("audio") || fileType.equals("sketch")){
				fileContentViewDef=createViewDef().createFileGroup(true).setLabel(uiLabelPrefix).setAttributeName("FileContent").setAttributeType("measure").setAnnotationEnabled(true);
			}
			else if(fileType.equals("video")){
				fileContentViewDef=createViewDef().createVideoGallery(true).setLabel("Video").setAttributeName("FileContent").setAttributeType("measure").setAnnotationEnabled(true);
			}
			else{
				fileContentViewDef=createViewDef().createCameraGallery(true).setLabel("Photo").setAttributeName("FileContent").setAttributeType("measure").setAnnotationEnabled(true);
			}
			nameViewDef=createViewDef().createTextField().setLabel(uiLabelPrefix+" file name").setAttributeName("FileName").setAttributeType("measure");


			createView("file/fileHidden/"+uiNamePrefix+"FileID", idFileDef,"file/fileHidden");
			createView("file/fileHidden/"+uiNamePrefix+"FileType", typeViewDef,"file/fileHidden");
			createView("file/fileHidden/"+uiNamePrefix+"FileCreator", creatorViewDef,"file/fileHidden");
			createView("file/fileHidden/"+uiNamePrefix+"FileStartTime", startTimeViewDef,"file/fileHidden");
			createView("file/fileHidden/"+uiNamePrefix+"FileEndTime", endTimeViewDef,"file/fileHidden");
			createView("file/fileHidden/"+uiNamePrefix+"FileName", nameViewDef,"file/fileHidden");

			if(emrOrNot){
				emrViewDef=createViewDef().createTextField();
				createView("file/fileHidden/"+uiNamePrefix+"FileEmr", emrViewDef,"file/fileHidden");
			}
			//non-hidden page
			newBtnViewDef=createViewDef().createButton().setLabel("New "+ uiLabelPrefix);

			pathTextViewDef=createViewDef().createTextField().setLabel(uiLabelPrefix+" file path").setAttributeName("FilePath").setAttributeType("measure").
			setAnnotationEnabled(true).setReadOnly(true);

			saveBtnViewDef=createViewDef().createButton().setLabel("Save "+ uiLabelPrefix);
			//createView("file/fileInfo/"+uiNamePrefix+"FileName", nameViewDef,"file/fileInfo");

			
			createView("file/fileInfo/"+uiNamePrefix+"FileContent", fileContentViewDef,"file/fileInfo");
			createView("file/fileInfo/Take_"+uiLabelPrefix+"_File", newBtnViewDef,"file/fileInfo");
			createView("file/fileInfo/"+uiNamePrefix+"FilePath", pathTextViewDef,"file/fileInfo");
			createView("file/fileInfo/Save_New_"+uiLabelPrefix, saveBtnViewDef,"file/fileInfo");

		    onEvent("file/fileInfo/Take_"+uiLabelPrefix+"_File","click",attachFunc);
			//onEvent("file/fileInfo/Save_New_"+uiLabelPrefix,"click","saveFileFromAnswer(\"file/fileInfo/"+uiNamePrefix+"FileName\",\"file/fileInfo/"+uiNamePrefix+"FileContent\",\"file\",uiLabelPrefix)");
			onEvent("file/fileInfo/Save_New_"+uiLabelPrefix,"click",saveFunc);
		}
	});
}

newFile(String typeFlag, String fileType){
	String fileCategory=null;
	String tempAnsID=null;
	emrOrNot=false;
	switch (typeFlag){
		case "answer":
		if(fileType==null){
			fileCategory=getFieldValue("survey/answerFile/file_Category");
			tempAnsID=getFieldValue("survey/answerHidden/answerLabel");
		}
		else if(!fileType.equals("emr")){
			fileCategory=fileType;
	        tempAnsID=hiddenAnsInfo.get("label");
		}
		else{
			fileCategory=fileType;
	        tempAnsID=emrAnsInfo.get("label");
		}
			answerFile=true;
			current_answer_file_id=null;	
			
			switch (fileCategory){
				case "Audio":		
					//Generate audio file creation ui pages
				 	//createAudioFilePage("new");
					createFilePage("audio","attachAudioToField(\"file/fileInfo/audioFileContent\")",
						"saveFileFromAnswer(\"file/fileHidden/audioFileID\",\"file/fileInfo/audioFileContent\",\"file\",\"Audio\")");
					newTabGroup("file");

					String tempAudioID=tempAnsID+"_Audio";
					labelDeduplicate(tempAudioID,"FileID","file/fileHidden/audioFileID","file", dupFileLblChange,dupFileLblInfo);

					setFieldValue("file/fileHidden/audioFileCreator",username);
					setFieldValue("file/fileHidden/audioFileType","Audio");
					setFieldValue("file/fileHidden/audioFileStartTime", getCurrentTime());
					//showWarning("audio","audio");
				break;
				case "Video":
					//createVideoPage("new");
					createFilePage("video","attachVideoToField(\"file/fileInfo/videoFileContent\")",
						"saveFileFromAnswer(\"file/fileHidden/videoFileID\",\"file/fileInfo/videoFileContent\",\"file\",\"Video\")");
					newTabGroup("file");
					String tempVideoID=tempAnsID+"_Video";
					labelDeduplicate(tempVideoID,"FileID","file/fileHidden/videoFileID","file",dupFileLblChange,dupFileLblInfo);
	
					setFieldValue("file/fileHidden/videoFileCreator",username);
					setFieldValue("file/fileHidden/videoFileType","Video");
					setFieldValue("file/fileHidden/videoFileStartTime", getCurrentTime());
				break;

				case "Photo":
					//createPhotoPage("new");
					createFilePage("photo","attachPictureToField(\"file/fileInfo/photoFileContent\")",
						"saveFileFromAnswer(\"file/fileHidden/photoFileID\",\"file/fileInfo/photoFileContent\",\"file\",\"Photo\")");
					newTabGroup("file");
					String tempPhotoID=tempAnsID+"_Photo";
					labelDeduplicate(tempPhotoID,"FileID","file/fileHidden/photoFileID","file",dupFileLblChange,dupFileLblInfo);

					setFieldValue("file/fileHidden/photoFileCreator",username);
					setFieldValue("file/fileHidden/photoFileType","Photo");
					setFieldValue("file/fileHidden/photoFileStartTime", getCurrentTime());
				
				break;
				case "Sketch":
					//createSketchPage("new");
					createFilePage("sketch","attachFileToField(\"file/fileInfo/sketchFileContent\")",
						"saveFileFromAnswer(\"file/fileHidden/sketchFileID\",\"file/fileInfo/sketchFileContent\",\"file\",\"Recording\")");
					newTabGroup("file");
					String tempSketchID=tempAnsID+"_Recording";
					labelDeduplicate(tempSketchID,"FileID","file/fileHidden/sketchFileID","file",dupFileLblChange,dupFileLblInfo);

					setFieldValue("file/fileHidden/sketchFileCreator",username);
					setFieldValue("file/fileHidden/sketchFileType","Recording");
					setFieldValue("file/fileHidden/sketchFileStartTime", getCurrentTime());
					
					break;
				case "emr":		
					//Generate audio file creation ui pages
				 	//createAudioFilePage("new");
					emrOrNot=true;
					createFilePage("audio","attachAudioToField(\"file/fileInfo/audioFileContent\")",
						"saveEmrFile(\"file/fileHidden/audioFileID\",\"file/fileInfo/audioFileContent\",\"file\",\"Audio\")");
					newTabGroup("file");

					String tempAudioID=tempAnsID+"_Audio";
					labelDeduplicate(tempAudioID,"FileID","file/fileHidden/audioFileID","file",dupFileLblChange,dupFileLblInfo);

					setFieldValue("file/fileHidden/audioFileCreator",username);
					setFieldValue("file/fileHidden/audioFileType","Audio");
					setFieldValue("file/fileHidden/audioFileStartTime", getCurrentTime());
				break;
				default:
					showWarning("Invalid category","Please select a valid file category");
				break;
			}
		break;
	}
}

saveFileFromAnswer(String ref, String fileListViewRef, String tabGroupRef, String fileType){
	if(isNull(getFieldValue(fileListViewRef))){	
		showWarning("Warning","File not recorded");
		return;
	}
	if(answerFile && !langIntro){
		saveTabGroup(tabGroupRef,current_answer_file_id, null, null, new SaveCallback() {
			onSave(uuid, newRecord) {
				current_answer_file_id = uuid;
				if (newRecord){	
					newFile=new ArrayList();
					newFile.add(current_answer_file_id);
					newFile.add(getFieldValue(ref));
					files_in_current_ques.add(newFile);
								
					//Adding new file and file type for changing fileID
					newFileType=new ArrayList();
					newFileType.add(current_answer_file_id);
					newFileType.add(fileType);
					file_and_fileType.add(newFileType);

					updateDupLabel(dupFileLblInfo,"File", "FileID");

					if(ansOrNot){
						populateList("survey/answerFile/answerFileList",files_in_current_ques);
					}	

					saveNewAnswer(0);
					cancelTabGroup(tabGroupRef, true);
					//showWarning("cancelTabGroupFile1",tabGroupRef);
				}
				else{
					for(changeFile:files_in_current_ques){
						if(changeFile.get(0).equals(current_answer_file_id)){
							newFile=new ArrayList();
							newFile.add(current_answer_file_id);
							newFile.add(getFieldValue(ref));
							files_in_current_ques.remove(changeFile);
							files_in_current_ques.add(newFile);
							populateList("survey/answerFile/answerFileList",files_in_current_ques);
							break;
						}
					}
					saveAnnotation("File", current_answer_file_id);
					showToast("file record changed");
					cancelTabGroup(tabGroupRef, true);
				}
			}
			onError(message) {
				showWarning("error",message);
			}  
		});
	}
	else if(langIntro){
		saveLangIntro(ref, fileListViewRef, tabGroupRef, fileType);
	}
	else if(!answerFile){
		if(!isNull(file_id)){
			saveAnnotation(tabGroupRef, file_id);
		}
	}
}

attachAudioToField(String ref) {
	recordAudio("setAudioToField(\""+ref+"\")");
}

setAudioToField(String ref) {
	String filePath = getLastAudioFilePath();
	List selectedFiles = null;
	selectedFiles = new ArrayList();
	selectedFiles.add(filePath);
	addFile(ref, filePath);  	
    setFieldValue(ref, _convertListToPairs(selectedFiles));
    setFieldValue("file/fileInfo/audioFilePath",filePath);
    setFieldValue("file/fileHidden/audioFileEndTime",getCurrentTime());
}


attachVideoToField(String ref) {
	if(!isNull(getFieldValue(ref))){
		showWarning("File exists","File exists, please Create New File");
		return;
	}
	openVideo("setVideoToField(\""+ref+"\")");
}


setVideoToField(String ref) {
	String filePath = getLastVideoFilePath();
	List selectedFiles = null;
    if (isNull(getFieldValue(ref))) {
    	selectedFiles = new ArrayList();
    	selectedFiles.add(filePath);
    	addVideo(ref, filePath);
    } else {
    	//selectedFiles = _convertPairsToList(getFieldValue(ref));
    	showWarning("File exists","File exists, please Create New File");
    }
    setFieldValue(ref, _convertListToPairs(selectedFiles));
    setFieldValue("file/fileInfo/videoFilePath",filePath);
    setFieldValue("file/fileHidden/videoFileEndTime",getCurrentTime());
}


attachPictureToField(String ref) {
	if(!isNull(getFieldValue(ref))){
		showWarning("File exists","File exists, please Create New File");
		return;
	}
	openCamera("setPictureToField(\""+ref+"\")");
}

/**
  */
setPictureToField(String ref) {
	String filePath = getLastPictureFilePath();
	List selectedFiles = null;
    if (isNull(getFieldValue(ref))) {
    	selectedFiles = new ArrayList();
    	selectedFiles.add(filePath);
    	addPicture(ref, filePath);
    } else {
    	//selectedFiles = _convertPairsToList(getFieldValue(ref));
    	showWarning("File exists","File exists, please Create New File");
    }
    setFieldValue(ref, _convertListToPairs(selectedFiles));
    setFieldValue("file/fileInfo/photoFilePath",filePath);
    setFieldValue("file/fileHidden/photoFileEndTime",getCurrentTime());
}


attachFileToField(String ref) {
	if(!isNull(getFieldValue(ref))){
		showWarning("File exists","File exists, please Create New File");
		return;
	}
	showFileBrowser("setFileToField(\""+ref+"\")");
}


setFileToField(String ref) {
	String filePath = getLastSelectedFilepath();
	List selectedFiles = null;
    if (isNull(getFieldValue(ref))) {
    	selectedFiles = new ArrayList();
    	selectedFiles.add(filePath);
    	addFile(ref, filePath);
    } else {
    	//selectedFiles = _convertPairsToList(getFieldValue(ref));
    	showWarning("File exists","File exists, please Create New File");
    }
    setFieldValue(ref, _convertListToPairs(selectedFiles));
    setFieldValue("file/fileInfo/sketchFilePath",filePath);
    setFieldValue("file/fileHidden/sketchFileEndTime",getCurrentTime());
}

/*** File functions end***/

/*** Language ***/
/*** Language UI ***/
createLanguageGroupPage(){
	if(!hasView("language/languageInfo/Finish_New_Language")){
		executeViewTask(new ViewTask() {
    	doTask() {

    		langIDViewDef=createViewDef().createTextField().setAttributeName("LanguageID").setAttributeType("measure").setLabel("Language code").setAnnotationEnabled(true).setStyleCss("required");
    		langNameViewDef=createViewDef().createTextField().setAttributeName("LanguageName").setAttributeType("measure").setLabel("Language name").setAnnotationEnabled(true).setStyleCss("required");
			langotherNameViewDef=createViewDef().createTextField().setAttributeName("LanguageOtherNames").setAttributeType("measure").setLabel("Language other name(s)").setAnnotationEnabled(true);
			langTypeViewDef=createViewDef().createDropDown().setLabel("Language type").setAnnotationEnabled(false);
	        
	       	finButtonDef = createViewDef().createButton().setLabel("Save").setStyleCss("faims-blue");

	        createView("language/languageInfo/languageID", langIDViewDef,"language/languageInfo/");
	        createView("language/languageInfo/languageName", langNameViewDef,"language/languageInfo/");
	        createView("language/languageInfo/languageOtherNames", langotherNameViewDef,"language/languageInfo/");
			createView("language/languageInfo/languageType", langTypeViewDef,"language/languageInfo/");
			createView("language/languageInfo/Finish_New_Language", finButtonDef,"language/languageInfo/");

	        refreshTabgroupCSS("language");

	        onEvent("language/languageInfo/Finish_New_Language","click","saveLanguage()");
			}
	    
		});
	}
}

/*** Language variables ***/
language_id=null;
originLangProp=new ArrayList();
newLangProp=new ArrayList();
candLangProp=new ArrayList();

/*** Language queries ***/
/***usage: scocialinguistic questionnaire answer, language * search, load language list ***/ 
loadAllLanguageQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
	"WHERE latestNonDeletedAentValue.AttributeID "+
	"= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='LanguageName') "+
	"and uuid in "+
	"(select uuid from latestNonDeletedArchEntIdentifiers "+
	"where AttributeID=(select AttributeID from AttributeKey where AttributeName='LanguageID')) "+
	"GROUP BY uuid ORDER BY measure asc";
/*** usage: language creation and update ***/
loadAllLangTypeQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
		"WHERE latestNonDeletedAentValue.AttributeID "+
		"= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='LangTypeName') "+
		"GROUP BY uuid ORDER BY measure asc;";

/*** Language events ***/

initializeLangVar(){
	language_id=null;
	candLangProp.clear();
	originLangProp.clear();
	newLangProp.clear();
}

newLanguage(){
	initializeLangVar();
	createLanguageGroupPage();
	newTabGroup("language");
	fetchAll(loadAllLangTypeQuery, new FetchCallback() {
		onFetch(result) {
			candLangProp.clear();
			candLangProp.addAll(result);
			populateDropDown("language/languageInfo/languageType", candLangProp);

		}
		onError(message) {
			showToast(message);
		}
	}); 
}

loadLanguage(){
	initializeLangVar();
	fetchAll(loadAllLanguageQuery, new FetchCallback() {
        onFetch(result) {
            populateList("control/language_control/languageList", result);
        }
        onError(message) {
            showToast(message);
        }
    });
}

loadLanguageInfo(){
	createLanguageGroupPage();
	language_id=getListItemValue();
	if(isNull(language_id)){
		showToast("No Language selected");
		return;
	}
	showTabGroup("language", language_id, new FetchCallback() {
        onFetch(result) {
            language=result;

            loadLangPropQuery="select lProp.measure from latestNonDeletedAentValue as lProp "+
            "where lProp.AttributeID=(select AttributeID from AttributeKey where AttributeName='LanguageTypeID') "+
            "and lProp.uuid='"+language_id+"'";
           	
           	fetchOne(loadLangPropQuery,new FetchCallback() {
				onFetch(propResult) {
					if(!isNull(propResult)){
						String tempProp=propResult.get(0);
						originLangProp.clear();
						originLangProp.addAll(propResult);
						newLangProp.clear();    

						fetchAll(loadAllLangTypeQuery, new FetchCallback() {
							onFetch(result) {
								candLangProp.clear();
								candLangProp.addAll(result);

								tempPropList=new ArrayList();
								tempPropList.addAll(result);

								for(int i=0;i<tempPropList.size();i++){
									if(tempPropList.get(i).get(0).equals(tempProp)){
										Collections.swap(tempPropList,0,i);
										break;
									}
								}
								populateDropDown("language/languageInfo/languageType", tempPropList);

							}
							onError(message) {
    							showToast(message);
  							}
						}); 
		        	}
		        	else{
						showWarning("Out-of-date data","The property of the language is not using anymore");
					}
   				 }
		   		onError(message) {
	            	showToast(message);
	        	}
			});
       		showToast("Loaded language"+language.getId());            
       	}
        onError(message) {
            showToast(message);
        }
    });
}


saveLanguage(){

	if(isNull(getFieldValue("language/languageInfo/languageName"))){
		showWarning("Validation Error", "You must fill in the Language Name before you can continue");
        return;
	}
	if(isNull(getFieldValue("language/languageInfo/languageID"))){
		showWarning("Validation Error", "You must fill in the Language ID before you can continue");
        return;
	}
	tempLangLabel=getFieldValue("language/languageInfo/languageID");
	langDuplicateQuery=null;
	if(language_id==null){
		langDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
				"where AttributeID=(select AttributeID from AttributeKey where AttributeName='LanguageID') "+
				"and measure ='"+tempLangLabel+"' or measure like '"+tempLangLabel+"(%)'";
	}
	
	else{
		langDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
				"where AttributeID=(select AttributeID from AttributeKey where AttributeName='LanguageID') "+
				"and uuid<>'"+language_id+"' "+
				"and measure ='"+tempLangLabel+"' or measure like '"+tempLangLabel+"(%)'";
	}

    fetchAll(langDuplicateQuery,new FetchCallback() {
		onFetch(result) {
			if(!isNull(result)){
				tempLangLabel=nonDupLabelGen(result,tempLangLabel,"Language","LanguageID", true);
				setFieldValue("language/languageInfo/languageID",tempLangLabel);
			}

			crntLangTypeId=getFieldValue("language/languageInfo/languageType");
			saveTabGroup("language", language_id, null, null, new SaveCallback() {
			    onSave(uuid, newRecord) {
			      language_id = uuid;
			      if (newRecord) {
			      	attributes=createAttributeList();
			    	attributes.add(createEntityAttribute("LanguageTypeID", null, null, crntLangTypeId, null));
			    	saveArchEnt(language_id, "Language", null, attributes);
					cancelTabGroup("language",true);
					showTab("control/language_control");
			        showToast("New record created");
			      }
				  else{
					showToast("Record changed");
				  }
			    }
			    onError(message) {
			        showWarning("error",message);
			    }  
			});
			if((language_id!=null) && (!isNull(originLangProp))){
				newLangProp.add(crntLangTypeId);
				Hashtable langPropChange=listChange(newLangProp,originLangProp);
				if(langPropChange.containsKey("ADD")){
					attributes=createAttributeList();
			    	attributes.add(createEntityAttribute("LanguageTypeID", null, null, crntLangTypeId, null));
			    	saveArchEnt(language_id, "Language", null, attributes);
			    	showToast("language type changed");
				}
			}
		}
	});
	
}

/*** FieldTrip ***/
/*** FieldTrip UI ***/
createFieldTripInfoPage(String typeflag){
	if(!hasView("fieldTrip/fieldTripBasicInfo/fieldTripID")){
		removeAllViewsAndContainers("fieldTrip");
		executeViewTask(new ViewTask() {
	    doTask() {
	    	
	    	//basic info page
	    	idTextViewDef = createViewDef().createTextField().setLabel("FieldTrip label").setAttributeName("FieldTripID").setAttributeType("measure").
	    	setAnnotationEnabled(true).setReadOnly(true);
	    	nameTextViewDef=createViewDef().createTextField().setLabel("FieldTrip name").setAttributeName("FieldTripName").setAttributeType("measure").
	    	setAnnotationEnabled(true);
	    	descTextViewDef=createViewDef().createTextField().setLabel("Description").setAttributeName("FieldTripDescription").setAttributeType("measure").
	    	setAnnotationEnabled(true);
	    	startDateDef = createViewDef().createDatePicker().setLabel("Start Date");
	    	endDateDef = createViewDef().createDatePicker().setLabel("End Date");
	    	quickSaveBtnDef=createViewDef().createButton().setLabel("Save").setStyleCss("faims-blue");
	    	createView("fieldTrip/fieldTripBasicInfo/fieldTripID", idTextViewDef,"fieldTrip/fieldTripBasicInfo");
	        createView("fieldTrip/fieldTripBasicInfo/fieldTripName", nameTextViewDef,"fieldTrip/fieldTripBasicInfo");
	        createView("fieldTrip/fieldTripBasicInfo/fieldTripDesc", descTextViewDef,"fieldTrip/fieldTripBasicInfo");
	        createView("fieldTrip/fieldTripBasicInfo/fieldTripStartDatePicker", startDateDef,"fieldTrip/fieldTripBasicInfo");
	        createView("fieldTrip/fieldTripBasicInfo/fieldTripEndDatePicker", endDateDef,"fieldTrip/fieldTripBasicInfo");
	        createView("fieldTrip/fieldTripBasicInfo/fieldTripQuickSave", quickSaveBtnDef,"fieldTrip/fieldTripBasicInfo");

	    	//session page
	        style1 = "orientation";
	        style2 = "even";
	    	createContainer("fieldTrip/fieldTripSession/field_session_ct", "orientation");
	    	createContainer("fieldTrip/fieldTripSession/child1", "even", "fieldTrip/fieldTripSession/field_session_ct");
	        createContainer("fieldTrip/fieldTripSession/child2", "even", "fieldTrip/fieldTripSession/field_session_ct");
	        
	        ftFileListDef=createViewDef().createList().setLabel("Session").setStyleCss("ft-sss-list");
	        ftSelFileListDef=createViewDef().createList().setLabel("Select session").setStyleCss("ft-sss-list");
	        ftSaveBtnDef=createViewDef().createButton().setLabel("Save").setStyleCss("faims-blue");
	        createView("fieldTrip/fieldTripSession/fieldTripFileList", ftFileListDef,"fieldTrip/fieldTripSession/child1");
	        createView("fieldTrip/fieldTripSession/fieldTripFileSelectionList", ftSelFileListDef,"fieldTrip/fieldTripSession/child2");
	        createView("fieldTrip/fieldTripSession/Finish_New_FieldTrip", ftSaveBtnDef,"fieldTrip/fieldTripSession");
	
	        //fieldTripBasicInfoHidden page
	        startdateViewDef = createViewDef().createTextField().setLabel("startdate").setAttributeName("FieldTripStartTime").setAttributeType("measure");
	        enddateViewDef = createViewDef().createTextField().setLabel("enddate").setAttributeName("FieldTripEndTime").setAttributeType("measure");
	        createView("fieldTrip/fieldTripBasicInfoHidden/fieldTripStartTimetamp", startdateViewDef,"fieldTrip/fieldTripBasicInfoHidden");
	        createView("fieldTrip/fieldTripBasicInfoHidden/fieldTripEndTimestamp", enddateViewDef,"fieldTrip/fieldTripBasicInfoHidden");

	        refreshTabgroupCSS("fieldTrip");

	        onEvent("fieldTrip/fieldTripSession/fieldTripFileSelectionList","click","addItemToTargetList(candidate_session_fieldTrip,\"fieldTripSession\",null)");
	        //No delete function for client
	        onEvent("fieldTrip/fieldTripSession/fieldTripFileList","click","deleteItemFromTargetList(selected_session_fieldTrip,\"fieldTripSession\",null)");
	        onEvent("fieldTrip/fieldTripSession/Finish_New_FieldTrip","click","saveFieldTrip()");
	        onEvent("fieldTrip/fieldTripBasicInfo/fieldTripQuickSave","click","saveFieldTrip()");
	        
	   		}
			});

		if(typeflag.equals("new")){
			startNewFieldTrip();
		}

	}
	else{
		//showTabGroup("fieldTrip");
		if(typeflag.equals("new")){
			startNewFieldTrip();
		}
	}
}

/*** FieldTrip variables ***/
fieldTrip_id=null;
selected_session_fieldTrip=new ArrayList();
candidate_session_fieldTrip=new ArrayList();
original_session_fieldTrip=new ArrayList();
originFTSssReln=new ArrayList();
fieldTripInfoOrigin=new ArrayList();
fieldTripInfoNew=new ArrayList();

initFieldTripVar(){
	fieldTrip_id=null;
	selected_session_fieldTrip.clear();
	candidate_session_fieldTrip.clear();
	original_session_fieldTrip.clear();
	originFTSssReln.clear();
	fieldTripInfoOrigin.clear();
	fieldTripInfoNew.clear();
}
/***2 usage: fieldTrip list, fieldTrip search ***/
loadAllFieldTripQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
		"WHERE latestNonDeletedAentValue.AttributeID "+
		"= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='FieldTripName') "+
		"GROUP BY uuid ORDER by uuid desc;";

loadFieldTripList(String typeflag, String popPath){
	fetchAll(loadAllFieldTripQuery, new FetchCallback() {
        onFetch(result) {
        	if(typeflag.equals("l")){
				populateList(popPath, result);
        	}
        	else{
        		populateDropDown(popPath,result);
        	}
            
        }

        onError(message) {
            showToast(message);
        }
    });
}

startNewFieldTrip(){
	initFieldTripVar();
	newTabGroup("fieldTrip");
	
	fetchAll(loadAllSessionIDQuery, new FetchCallback() {
        onFetch(result) {
        	candidate_session_fieldTrip.addAll(result);
            populateList("fieldTrip/fieldTripSession/fieldTripFileSelectionList", candidate_session_fieldTrip);
            populateList("fieldTrip/fieldTripSession/fieldTripFileList", selected_session_fieldTrip);
        }

        onError(message) {
            showToast(message);
        }
    });
}

saveFieldTrip(){
	//showWarning("saveFieldTrip","saveFieldTrip");
	String startDateToConvert=getFieldValue("fieldTrip/fieldTripBasicInfo/fieldTripStartDatePicker");
	//showWarning("startDateToConvert",startDateToConvert);
	String startDate=dateParser(startDateToConvert);
	//showWarning("startdate",startDate);
	String endDateToConvert=getFieldValue("fieldTrip/fieldTripBasicInfo/fieldTripEndDatePicker");
	String endDate=dateParser(endDateToConvert);
	//showWarning("endDate",endDate);
	if(isNull(fieldTrip_id)){//create new session
		//showWarning("new","new");
		saveNewFieldTrip(startDate,endDate);
	}
	else{//change session info
		updateFieldTrip(startDate,endDate);	
	}
}

saveNewFieldTrip(String startDate, String endDate){
	if(isNull(getFieldValue("fieldTrip/fieldTripBasicInfo/fieldTripName"))){
		showWarning("Incomplete Data","Please make sure that data is complete");
		return;
	}
	tempFtLabel=username+"_FieldTrip_"+startDate;
	ftDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
	"where AttributeID=(select AttributeID from AttributeKey where AttributeName='FieldTripID') "+
	"and measure = '"+tempFtLabel+"' or measure like '"+tempFtLabel+"(%)'";

	fetchAll(ftDuplicateQuery,new FetchCallback() {
		onFetch(result) {
			if(!isNull(result)){
				tempFtLabel = nonDupLabelGen(result, tempFtLabel,"FieldTrip","FieldTripID",true);
			}
			setFieldValue("fieldTrip/fieldTripBasicInfo/fieldTripID",tempFtLabel);
			setFieldValue("fieldTrip/fieldTripBasicInfoHidden/fieldTripStartTimetamp",startDate);
			setFieldValue("fieldTrip/fieldTripBasicInfoHidden/fieldTripEndTimestamp",endDate);
			if(timeValidation(startDate,endDate,"fieldTripTime")){
				saveTabGroup("fieldTrip", fieldTrip_id, null, null, new SaveCallback() {
				    onSave(uuid, newRecord) {
				    	fieldTrip_id = uuid;
				      	if (newRecord) {
				    	  for(session:selected_session_fieldTrip){
				    		  saveEntitiesToRel("Session and FieldTrip",fieldTrip_id,session.get(0));
				    	  }
				        showToast("New fieldtrip record created");
				        if(activeFieldTrip==null || activeFieldTrip.isEmpty()){
				        	checkNewFTActive(startDate,endDate,fieldTrip_id);  	
				        }
				        cancelTabGroup("fieldTrip",true);
				        
				        //showTab("control/other_control");
				        //activeFieldTripCheck("a");
				      }
				    }
				    onError(message) {
				        showWarning("saving error",message);
				    }  
				  });
			}
			else{
				showWarning("Invalid date","Start date should before end date");
				return;
			}
			
		}

		onError(message){
			showWarning("data fetch error",message);
		}
	});
}

updateFieldTrip(String startDate, String endDate){
	if(!isNull(activeFieldTrip) && fieldTrip_id.equals(activeFieldTrip.get(0))){
		String currentDate=getCurrentDate();
		if(!dateCompare(startDate,currentDate,endDate)){
			showWarning("Invalid operation","The fieldTrip you are updating is the active fieldTrip:\n"+"the start date must smaller than or equals to "+currentDate+" and\n"+"the end date must be greater than or equals to "+currentDate);
			return;
		}
	}
	tempFtLabel=username+"_FieldTrip_"+startDate;
			//showWarning("tempFtLabel",tempFtLabel);
	ftDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
		"where AttributeID=(select AttributeID from AttributeKey where AttributeName='FieldTripID') "+
		"and uuid<>"+fieldTrip_id+" "+
		"and measure = '"+tempFtLabel+"' or measure like '"+tempFtLabel+"(%)'";

	fetchAll(ftDuplicateQuery,new FetchCallback() {
		onFetch(result) {
			if(!isNull(result)){
				tempFtLabel = nonDupLabelGen(result, tempFtLabel,"FieldTrip","FieldTripID",true);
			}
			setFieldValue("fieldTrip/fieldTripBasicInfo/fieldTripID",tempFtLabel);

			fieldTripInfoNew.add(getFieldValue("fieldTrip/fieldTripBasicInfo/fieldTripID"));
			fieldTripInfoNew.add(getFieldValue("fieldTrip/fieldTripBasicInfo/fieldTripName"));
			fieldTripInfoNew.add(startDate);
			fieldTripInfoNew.add(endDate);
			if(!isNull(getFieldValue("fieldTrip/fieldTripBasicInfo/fieldTripDesc"))){
        		fieldTripInfoNew.add(getFieldValue("fieldTrip/fieldTripBasicInfo/fieldTripDesc")); 
        	}
        	else{
				fieldTripInfoNew.add("");
        	}

			Hashtable fieldTripInfoChange=listChange(fieldTripInfoNew,fieldTripInfoOrigin);
			Hashtable fieldTripSessionChange=listChange(selected_session_fieldTrip,original_session_fieldTrip);

			if(fieldTripInfoChange.containsKey("EQUAL") && fieldTripSessionChange.containsKey("EQUAL")){
				showWarning("No change","No data changed");
				return;
			}

			else if(fieldTripInfoChange.containsKey("EQUAL") && !fieldTripSessionChange.containsKey("EQUAL")){
				updateFieldTripSssList(fieldTripSessionChange);
				showToast("session in fieldTrip updated");
				cancelTabGroup("fieldTrip",true);
	        	//showTab("control/other_control");
			}

			else if(!fieldTripInfoChange.containsKey("EQUAL") && fieldTripSessionChange.containsKey("EQUAL")){
				updateFieldTripBasicInfo(startDate,endDate,false,null);
				showToast("FieldTrip basic info updated");
			}
			else{
				updateFieldTripBasicInfo(startDate,endDate,true,fieldTripSessionChange);
				showToast("FieldTrip data updated");
			}
		}
	});
}

updateFieldTripBasicInfo(String startDate, String endDate, Boolean sssListChange, Hashtable fieldTripSessionChange){
	setFieldValue("fieldTrip/fieldTripBasicInfoHidden/fieldTripStartTimetamp",startDate);
	setFieldValue("fieldTrip/fieldTripBasicInfoHidden/fieldTripEndTimestamp",endDate);
	if(timeValidation(startDate,endDate,"fieldTripTime")){
	saveTabGroup("fieldTrip", fieldTrip_id, null, null, new SaveCallback() {
	    onSave(uuid, newRecord) {
	    	if(sssListChange){
	    		if(fieldTripSessionChange!=null && !fieldTripSessionChange.isEmpty()){
	    			updateFieldTripSssList(fieldTripSessionChange);
	    		}	
	    	}
	        showToast("fieldTrip data changed");
	        if(activeFieldTrip==null || activeFieldTrip.isEmpty()){
	        	checkNewFTActive(startDate,endDate,fieldTrip_id);
	        }
	        //activeFieldTripCheck("a");
	        cancelTabGroup("fieldTrip",true);
	        //showTab("control/other_control");

	    }
	    onError(message) {
	        showWarning("error",message);
	    }  
	  });
	}
	else{
		showWarning("Invalid date","Start date should before end date");
		return;
	}
}

updateFieldTripSssList(Hashtable fieldTripSessionChange){
	if(fieldTripSessionChange.containsKey("PUREADD")){
		ArrayList toAddSession=fieldTripSessionChange.get("PUREADD");
		for(session:toAddSession){
			saveEntitiesToRel("Session and FieldTrip",fieldTrip_id,session.get(0));
		}
	}
	else if(fieldTripSessionChange.containsKey("PUREDELETE")){
		ArrayList toDeleteSession=fieldTripSessionChange.get("PUREDELETE");
		for(sssDelete:toDeleteSession){
			toDelSss=sssDelete.get(0);
			for (originReln:originFTSssReln){
				if(originReln.get(1).equals(toDelSss)){
					deleteRel(originReln.get(0));
				}
			}
		}
	}
	else{
		ArrayList toAddSession=fieldTripSessionChange.get("ADD");
		ArrayList toDeleteSession=fieldTripSessionChange.get("DELETE");
		for(sssDelete:toDeleteSession){
			toDelSss=sssDelete.get(0);
			for (originReln:originFTSssReln){
				if(originReln.get(1).equals(toDelSss)){
					deleteRel(originReln.get(0));
				}
			}
		}
		for(session:toAddSession){
			saveEntitiesToRel("Session and FieldTrip",fieldTrip_id,session.get(0));
		}
	}
}

loadFieldTripInfo(){
	if(!hasView("fieldTrip/fieldTripBasicInfo/fieldTripID")){
		createFieldTripInfoPage("change");
	}
	fieldTrip_id=getListItemValue();
	if(isNull(fieldTrip_id)){
		showWarning("Invalid fieldTrip","No fieldTrip is selected or fieldTrip is not available");
		return;
	}
		
	showTabGroup("fieldTrip", fieldTrip_id, new FetchCallback() {
        onFetch(result) {
        	String startTimeOrigin=getFieldValue("fieldTrip/fieldTripBasicInfoHidden/fieldTripStartTimetamp");
        	String endTimeOrigin=getFieldValue("fieldTrip/fieldTripBasicInfoHidden/fieldTripEndTimestamp");
        	fieldTripInfoOrigin.add(getFieldValue("fieldTrip/fieldTripBasicInfo/fieldTripID"));
        	fieldTripInfoOrigin.add(getFieldValue("fieldTrip/fieldTripBasicInfo/fieldTripName"));
        	fieldTripInfoOrigin.add(startTimeOrigin);
        	fieldTripInfoOrigin.add(endTimeOrigin); 
        	if(!isNull(getFieldValue("fieldTrip/fieldTripBasicInfo/fieldTripDesc"))){
        		fieldTripInfoOrigin.add(getFieldValue("fieldTrip/fieldTripBasicInfo/fieldTripDesc")); 
        	}
        	else{
				fieldTripInfoOrigin.add("");
        	}
        	String startTimeForPicker=dateParser(startTimeOrigin);
        	String endTimeForPicker=dateParser(endTimeOrigin);
        	setFieldValue("fieldTrip/fieldTripBasicInfo/fieldTripStartDatePicker",startTimeForPicker);
        	setFieldValue("fieldTrip/fieldTripBasicInfo/fieldTripEndDatePicker",endTimeForPicker);
        	
        	loadFTSssData();
        	
            showToast("Loaded fieldTrip"+result.getId());            
        }
        onError(message) {
            showToast(message);
        }
    });
}

loadFTSssData(){
	/*
	loadSessionForFieldTripQuery="select uuid,measure from latestNonDeletedAentValue "+ 
			"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionID') "+
			"and uuid in "+
			"(select uuid from latestNonDeletedAentReln where uuid <>'"+fieldTrip_id+"' "+
			"and RelationshipID in (select RelationshipID from latestNonDeletedAentReln where uuid='"+fieldTrip_id+
			"' and RelationshipID in (select RelationshipID from latestNonDeletedRelationship "+
				"where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Session and FieldTrip') "+
				"and latestNonDeletedRelationship.Deleted IS NULL)))";
	*/
	loadSessionForFieldTripQuery="select uuid,measure from latestNonDeletedAentValue "+ 
		"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionID') "+
		"and uuid in "+
			"(select uuid from AentReln where RelationshipID in "+
		"(select RelationshipID from AEntReln where AEntReln.uuid='"+fieldTrip_id+"' "+
			"AND RelationshipID in "+
		"(select RelationshipID from latestNonDeletedRelationship where RelnTypeID="+
			"(select RelnTypeID from RelnType where RelnTypeName='Session and FieldTrip') "+
		"and latestNonDeletedRelationship.Deleted IS NULL)))";

	loadFTSssRelnQuery="select RelationshipID,uuid from latestNonDeletedAentReln where uuid <>'"+fieldTrip_id+"' "+
		"and RelationshipID in (select RelationshipID from latestNonDeletedAentReln where uuid='"+fieldTrip_id+
			"' and RelationshipID in (select RelationshipID from latestNonDeletedRelationship "+
				"where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Session and FieldTrip') "+
				"and latestNonDeletedRelationship.Deleted IS NULL))";
	
	fetchAll(loadSessionForFieldTripQuery, new FetchCallback() {
        onFetch(result) {
        	selected_session_fieldTrip.clear();
        	selected_session_fieldTrip.addAll(result);
        	original_session_fieldTrip.clear();
        	original_session_fieldTrip.addAll(result);

        	fetchAll(loadAllSessionIDQuery, new FetchCallback() {
                onFetch(result) {
                	candidate_session_fieldTrip.clear();
                	candidate_session_fieldTrip.addAll(result);
                	candidate_session_fieldTrip.removeAll(selected_session_fieldTrip);
                	populateList("fieldTrip/fieldTripSession/fieldTripFileSelectionList", candidate_session_fieldTrip);
                    populateList("fieldTrip/fieldTripSession/fieldTripFileList", selected_session_fieldTrip);
                }
                onError(message) {
                    showToast(message);
                }
            });
        }

        onError(message) {
            showToast(message);
        }
    });	

    fetchAll(loadFTSssRelnQuery, new FetchCallback() {
        onFetch(result) {
        	originFTSssReln.clear();
        	originFTSssReln.addAll(result);
        }

        onError(message) {
            showToast(message);
        }
    });	
}

/*** Person ***/ 
/*** Person variables ***/
person_id=null;
personIntroSss=new ArrayList();
currentPersonInfo=new ArrayList();//for creating intro session for a new added person or existing person
originPersonInfo =new ArrayList();//for recording original loaded person info so that we can tell if a person's info has changed
changedPersonInfo=new ArrayList();//for recording newest edited person info so that we can tell if a person's info has been changed
role_list=new ArrayList();
savePersonWfProperty=new ArrayList();
role_id=null;

/*** Person queries ***/
/*** usage: create person, create session, session update (3 usages) ***/
loadAllRoleQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
		"WHERE latestNonDeletedAentValue.AttributeID =( SELECT AttributeID FROM AttributeKey WHERE AttributeName='PersonRoleName') "+
		"AND uuid in (SELECT uuid FROM latestNonDeletedAentValue "+
			"WHERE AttributeID= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='RoleDataOnClient') AND measure ='Yes') ORDER BY measure asc;";
/*** usage: list person, create session, session update (3 usages)***/
loadAllPersonQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
	"WHERE latestNonDeletedAentValue.AttributeID "+
	"= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='PersonName') "+
	"GROUP BY uuid "+
	"ORDER BY measure asc;";
/*** usage: list person, search person (2 usages)***/
loadAllPersonIDQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
		"WHERE latestNonDeletedAentValue.AttributeID "+
		"IN (SELECT AttributeID FROM AttributeKey WHERE AttributeName='PersonID') "+
		"GROUP BY uuid "+
		"ORDER BY measure asc;";
/*** Person UI ***/
createPersonRolePage(){
	if(!hasView("personRoleSelect/personRoleSelectInfo/SearchRole")){
		removeAllViewsAndContainers("personRoleSelect");
	
		executeViewTask(new ViewTask() {
    	doTask() { 	
	        style1 = "orientation";
	        style2 = "even";
	    	createContainer("personRoleSelect/personRoleSelectInfo/psRoleSelCtn", "orientation");
	    	createContainer("personRoleSelect/personRoleSelectInfo/child1", "even", "personRoleSelect/personRoleSelectInfo/psRoleSelCtn");
	        createContainer("personRoleSelect/personRoleSelectInfo/child2", "even", "personRoleSelect/personRoleSelectInfo/psRoleSelCtn");
		
			searchTextViewDef = createViewDef().createTextField().setLabel("Keyword");
			searchButtonDef = createViewDef().createButton().setLabel("Search").setStyleCss("faims-blue");
			psRoleListDef=createViewDef().createDropDown().setLabel("Role List");
			newPsBtnDef=createViewDef().createButton().setLabel("New Person").setStyleCss("faims-blue");
			createView("personRoleSelect/personRoleSelectInfo/keywordOfRole", searchTextViewDef,"personRoleSelect/personRoleSelectInfo/child1");
			createView("personRoleSelect/personRoleSelectInfo/SearchRole", searchButtonDef,"personRoleSelect/personRoleSelectInfo/child2");
			createView("personRoleSelect/personRoleSelectInfo/PersonRoleSelectList", psRoleListDef,"personRoleSelect/personRoleSelectInfo");
			createView("personRoleSelect/personRoleSelectInfo/CreateNewPerson", newPsBtnDef,"personRoleSelect/personRoleSelectInfo");
	        refreshTabgroupCSS("personRoleSelect");

	        onEvent("personRoleSelect/personRoleSelectInfo","show","loadRoles(\"newPerson\",\"personRoleSelect/personRoleSelectInfo/PersonRoleSelectList\")");
			onEvent("personRoleSelect/personRoleSelectInfo/CreateNewPerson","click","newPersonByRole()");
			onEvent("personRoleSelect/personRoleSelectInfo/SearchRole","click","searchPsRole()");
	        }
		});

	}
	showTabGroup("personRoleSelect");
}

searchPsRole(){
	String keywordOfEntity= getFieldValue("personRoleSelect/personRoleSelectInfo/keywordOfRole").trim();
	if((isNull(keywordOfEntity)) || (keywordOfEntity.equals("*"))){
		if(!isNull(role_list)){
			populateDropDown("personRoleSelect/personRoleSelectInfo/PersonRoleSelectList",role_list);
		}
		else{
			loadRoles("newPerson","personRoleSelect/personRoleSelectInfo/PersonRoleSelectList");
		}
		
	}
	else{
		searchPersonRoleQuery="select uuid, measure from latestNonDeletedAentValue where " +
					"latestNonDeletedAentValue.Measure like '%"+ keywordOfEntity +
					"%' and latestNonDeletedAentValue.AttributeID = "+
					"(select AttributeID from AttributeKey where AttributeName='PersonRoleName') "+
					"AND uuid in (SELECT uuid FROM latestNonDeletedAentValue "+
					"WHERE AttributeID= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='RoleDataOnClient') AND measure ='Yes') "+
					"ORDER BY measure asc;";

		fetchAll(searchPersonRoleQuery,new FetchCallback() {
			onFetch(result) {
				temp_role_list=new ArrayList();
				temp_role_list.addAll(result);
				populateDropDown("personRoleSelect/personRoleSelectInfo/PersonRoleSelectList", temp_role_list);
			}  
		});
	}
}

loadRoles(String typeFlag, String populateRef){
	fetchAll(loadAllRoleQuery,new FetchCallback() {
		onFetch(result) {
			role_list.clear();
			role_list.addAll(result);
			if(typeFlag.equals("newPerson")){
				populateDropDown(populateRef, role_list);
			}
			else{
				populateList(populateRef,role_list);
			}
		}  
	});
}

initPersonVar(){
	person_id=null;
	personIntroSss.clear();
	currentPersonInfo.clear();
	originPersonInfo.clear();
	changedPersonInfo.clear();
	savePersonWfProperty.clear();
	role_id=null;
}

loadPerson(){
	person_id=null;
	fetchAll(loadAllPersonIDQuery, new FetchCallback() {
        onFetch(result) {
            populateList("control/user_control/userList", result);
        }

        onError(message) {
            showToast(message);
        }
    });
}

loadPersonInfo(String typeflag, String toShowPsId){
	if(typeflag.equals("person")){
		person_id=getListItemValue();
	}
	else{
		person_id=toShowPsId;
	}
	if(isNull(person_id)){
		showToast("No Person selected");
		return;
	}
	createPersonPage();

	showTabGroup("person", person_id, new FetchCallback() {
        onFetch(result) {
      
        	String roleUuid=getFieldValue("person/personInfoHide/personRoleId");
            checkPersonRoleQuery="SELECT measure from latestNonDeletedAentValue "+
				"WHERE latestNonDeletedAentValue.uuid='"+roleUuid+"' "+
				"AND latestNonDeletedAentValue.AttributeID="+
				"(select AttributeID from AttributeKey where AttributeName='PersonRoleName');";

			checkRoleIntroQuery="SELECT measure from latestNonDeletedAentValue "+
				"WHERE latestNonDeletedAentValue.uuid='"+roleUuid+"' "+
				"AND latestNonDeletedAentValue.AttributeID="+
				"(select AttributeID from AttributeKey where AttributeName='RoleIntroAnsRequired');";

			checkRolePhotoQuery="SELECT measure from latestNonDeletedAentValue "+
				"WHERE latestNonDeletedAentValue.uuid='"+roleUuid+"' "+
				"AND latestNonDeletedAentValue.AttributeID="+
				"(select AttributeID from AttributeKey where AttributeName='RolePhotoRequired');";

        	fetchOne(checkPersonRoleQuery,new FetchCallback() {
				onFetch(result) {
					if(!isNull(result)){
						setFieldValue("person/personInfoHide/personRoleName",result.get(0));	
					}
					else{
						showWarning("Invalid role","This role may not be using anymore\n"+" please contact the admin for details");
					}
				 
				}  
			});

        	fetchOne(checkRoleIntroQuery,new FetchCallback() {
				onFetch(result) {
					if(!isNull(result)){
						savePersonWfProperty.clear();
						if(result.get(0).equals("Yes")){
							savePersonWfProperty.add("Y");
						}
						else{
							savePersonWfProperty.add("N");
						}
						fetchOne(checkRolePhotoQuery,new FetchCallback() {
							onFetch(result) {
								if(!isNull(result)){
									if(result.get(0).equals("Yes")){
										savePersonWfProperty.add("Y");
									}
									else{
										savePersonWfProperty.add("N");
									}
									
								}
								else{
									showWarning("Invalid role","This role may not be using anymore\n"+" please contact the admin for details");
								}
							 
							}  
						});
					}
					else{
						showWarning("Invalid role","This role may not be using anymore\n"+" please contact the admin for details");
					}
				 
				}  
			});
        	originPersonInfo.clear();
        	originPersonInfo.add(getFieldValue("person/personInfoHide/personID"));
        	originPersonInfo.add(getFieldValue("person/personInfo/personName"));
        	originPersonInfo.add(getFieldValue("person/personInfo/personOtherNames"));
        	originPersonInfo.add(getFieldValue("person/personInfo/personDOB"));
        	originPersonInfo.add(getFieldValue("person/personInfo/personPhoto"));
			originPersonInfo.add(getFieldValue("person/personInfo/personPhotoDesc"));
			originPersonInfo.add(getFieldValue("person/personInfo/personIntroDesc"));

           // person=result;
            showToast("Loaded person"+result.getId());            
        }
        onError(message) {
            showToast(message);
        }
    });
}

newPersonByRole(){
	initPersonVar();

	role_id=getFieldValue("personRoleSelect/personRoleSelectInfo/PersonRoleSelectList");
	//showWarning("role_id",role_id);
	roleInfo=new ArrayList();
	Hashtable propertyInfo=new Hashtable();

	String roleName=null;

	if(isNull(role_id)){
		showWarning("Invalid role","This role is invalid, please select another role for continue");
		return;
	}

	for(role : role_list){
		if(role.get(0).equals(role_id)){
			roleName=role.get(1);
			break;
		}
	}

	if(isNull(roleName)){
		showWarning("Invalid role","This role is invalid, please select another role for continue");
		return;
	}

	roleInfo.add(role_id);
	roleInfo.add(roleName);

	checkRoleIntroQuery="SELECT measure from latestNonDeletedAentValue WHERE "+
		"latestNonDeletedAentValue.AttributeID="+
		"(select AttributeID from AttributeKey where AttributeKey.AttributeName='RoleIntroAnsRequired') "+
		"AND latestNonDeletedAentValue.uuid='"+role_id+"';";

	checkRolePhotoQuery="SELECT measure from latestNonDeletedAentValue WHERE "+
		"latestNonDeletedAentValue.AttributeID="+
		"(select AttributeID from AttributeKey where AttributeKey.AttributeName='RolePhotoRequired') "+
		"AND latestNonDeletedAentValue.uuid='"+role_id+"';";

	fetchOne(checkRoleIntroQuery,new FetchCallback() {
		onFetch(result) {
			if(!isNull(result)){
				if(result.get(0).equals("Yes")){
					propertyInfo.put("I","Y");
				}
				else{
					propertyInfo.put("I","N");
				}
				fetchOne(checkRolePhotoQuery,new FetchCallback() {
					onFetch(result) {
						if(!isNull(result)){
							if(result.get(0).equals("Yes")){
								propertyInfo.put("P","Y");
							}
							else{
								propertyInfo.put("P","N");
							}
							newPersonWithIntro(roleInfo,propertyInfo);
						}
						else{
							showWarning("Invalid role","This role may not be using anymore\n"+" please contact the admin for details");
							return;
						}
					 
					}  
				});
			}
			else{
				showWarning("Invalid role","This role may not be using anymore\n"+" please contact the admin for details");
				return;
			}
		 
		}  
	});	
}


createPersonPage(){
	if(!hasView("person/personInfoHide/personID")){
		removeAllViewsAndContainers("person");
	
		executeViewTask(new ViewTask() {
    	doTask() { 	

    		//personInfoHide page
    		psRoleIdViewDef = createViewDef().createTextField().setLabel("psRole").setAttributeName("PersonRole").setAttributeType("measure");
    		createView("person/personInfoHide/personRoleId", psRoleIdViewDef,"person/personInfoHide");
    		
    		//personInfo page
    		personIDViewDef= createViewDef().createTextField().setLabel("Person label").setAttributeName("PersonID").setAttributeType("measure").setAnnotationEnabled(true).setReadOnly(true);  		
    		personNameViewDef=createViewDef().createTextField().setLabel("Person name").setAttributeName("PersonName").setAttributeType("measure").setAnnotationEnabled(true).setStyleCss("required");	
    		personOtherNamesViewDef=createViewDef().createTextField().setLabel("Person Other Names").setAttributeName("PersonOtherNames").setAttributeType("measure").setAnnotationEnabled(true);
    		personDOBViewDef=createViewDef().createTextField().setLabel("Person DOB").setAttributeName("PersonDOB").setAttributeType("measure").setAnnotationEnabled(true).setStyleCss("required");
    		personRoleViewDef=createViewDef().createTextField().setLabel("Person general role").setReadOnly(true);
   			personPhotoViewDef=createViewDef().createCameraGallery(true).setAttributeName("PersonPhoto").setAttributeType("measure").setAnnotationEnabled(true);
   			takePhotoViewDef=createViewDef().createButton().setLabel("Take Photo").setStyleCss("faims-blue");
    		psPhotoDescViewDef=createViewDef().createTextField().setLabel("Photo decription").setAttributeName("PersonPhotoDescription").setAttributeType("measure").setAnnotationEnabled(true);
    		takeIntroQuesnirViewDef=createViewDef().createButton().setLabel("Intro Questionnaire").setStyleCss("faims-blue");
    		introDescViewDef=createViewDef().createTextField().setLabel("Intro quesnir description").setAttributeName("PersonIntroQuenirDesp").setAttributeType("measure").setAnnotationEnabled(true);
	        finishNewPsViewDef=createViewDef().createButton().setLabel("Save Person").setStyleCss("faims-blue");
		
			createView("person/personInfoHide/personID", personIDViewDef,"person/personInfoHide");
			createView("person/personInfoHide/personRoleName", personRoleViewDef,"person/personInfoHide");
			createView("person/personInfo/personName", personNameViewDef,"person/personInfo");
			createView("person/personInfo/personDOB", personDOBViewDef,"person/personInfo");
			createView("person/personInfo/personOtherNames", personOtherNamesViewDef,"person/personInfo");
			
			createView("person/personInfo/personPhoto", personPhotoViewDef,"person/personInfo");
			createView("person/personInfo/Take_Photo", takePhotoViewDef,"person/personInfo");
			createView("person/personInfo/personPhotoDesc", psPhotoDescViewDef,"person/personInfo");
			createView("person/personInfo/Take_Intro_Quesnir", takeIntroQuesnirViewDef,"person/personInfo");
			createView("person/personInfo/personIntroDesc", introDescViewDef,"person/personInfo");
			createView("person/personInfo/Finish_New_Person", finishNewPsViewDef,"person/personInfo");

	        refreshTabgroupCSS("person");
	    
	        onEvent("person/personInfo/Finish_New_Person","click","savePersonCheck(\"save\")");
			onEvent("person/personInfo/Take_Intro_Quesnir","click","checkPersonIntroSession()");
			onEvent("person/personInfo/Take_Photo","click","attachPictureTo(\"person/personInfo/personPhoto\")");
	        }
		});

	}
}

newPersonWithIntro(ArrayList roleflag, Hashtable propertyFlag){
	createPersonPage();
	person_id=null;
	newTabGroup("person");
	setFieldValue("person/personInfoHide/personRoleId",roleflag.get(0));
	setFieldValue("person/personInfoHide/personRoleName",roleflag.get(1));
	savePersonWfProperty.clear();
	savePersonWfProperty.add(propertyFlag.get("I"));
	savePersonWfProperty.add(propertyFlag.get("P"));
}

savePersonCheck(String typeflag){
	if((isNull(getFieldValue("person/personInfo/personName"))) || (isNull(getFieldValue("person/personInfo/personDOB")))){
		showWarning("Validation Error", "You must fill in the Person Name and Person DOB before you can continue");
        return;
	}
	if(!timeValidation(getFieldValue("person/personInfo/personDOB"))){
		showWarning("Invalid DOB","1.Datetime format should be yyyy-MM-dd \n"+"2.The value for date should be valid");
		return;
	}
	if(savePersonWfProperty.get(1).equals("Y")){
		if((isNull(getFieldValue("person/personInfo/personPhoto"))) && (isNull(getFieldValue("person/personInfo/personPhotoDesc")))){
			showWarning("Validation Error", "You must either take person photo or write the reason of not taking photo");
    		return;
		}
	}
	//"save" click saving
	if(!typeflag.equals("intro")){
		if(savePersonWfProperty.get(0).equals("Y")){
			if(person_id==null && (isNull(getFieldValue("person/personInfo/personIntroDesc")))){
				showWarning("Validation Error", "You must either take person introductory questionnaire \n"+"or write the reason of not taking introductory questionnaire");
        		return;
			}
			else if(person_id==null){
				savePersonData(typeflag);
			}
			if(person_id!=null&&(isNull(getFieldValue("person/personInfo/personIntroDesc")))){
				checkPsIntrSssQuery="select uuid,measure from latestNonDeletedArchEntIdentifiers "+
					"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionID') "+
					"and uuid in ( select uuid from AentReln "+
						"where RelationshipID in(select RelationshipID from AentReln "+
							"where RelationshipID in (select RelationshipID from latestNonDeletedRelationship "+
								"where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Answer and Session' ) "+
								"and latestNonDeletedRelationship.Deleted IS NULL) "+
					"and uuid in (select uuid from latestNonDeletedAentValue "+
						"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionnaireID') "+
						"and latestNonDeletedAentValue.measure in(select uuid from latestNonDeletedAentValue "+
							"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionnaireType') "+
							"and measure=(select uuid from latestNonDeletedAentValue "+
								"where AttributeID= (select AttributeID from AttributeKey "+
									"where AttributeName='QuesnirTypeName') and measure = 'Introductory'))))) "+
					"and uuid in (select measure from latestNonDeletedArchEntIdentifiers "+
						"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionIDforPerson') "+
						"and uuid in (select uuid from latestNonDeletedAentValue "+
							"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionPersonRole') "+
							"and measure=(select uuid from latestNonDeletedAentValue "+
								"where AttributeID=(select AttributeID from AttributeKey where AttributeName='PersonRoleName') "+
								"and measure='consultant') "+
					"and uuid in (select uuid from latestNonDeletedAentValue "+
						"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionPersonName') "+
						"and measure ='"+person_id+"')));";
	
				fetchAll(checkPsIntrSssQuery,new FetchCallback() {
		        	onFetch(result) {					        	
						if(isNull(result)){
							showWarning("Validation Error", "You must either take person introductory questionnaire \n"+"or write the reason of not taking introductory questionnaire");
							return;
						}
						else{
							savePersonData(typeflag);
						}
			        }
			        onError(message) {
			            showToast(message);
			           
			        }
			    });
			}
			else{
				savePersonData(typeflag);
			}
			
		}
		else{
			savePersonData(typeflag);
		}
	}
	else{
		savePersonData(typeflag);
	}
}

nameCamCaseConverter(String originName){
	String camCase=null;
	String [] originNameSplit=originName.split("\\s+");
	StringBuffer sb=new StringBuffer();
	for (part : originNameSplit){
		if(part.length()>1){
			sb.append(Character.toUpperCase(part.charAt(0))).append(part.substring(1));
		}
		else{
			sb.append(Character.toUpperCase(part.charAt(0)));
		}
	}
	camCase=sb.toString().trim();
	return camCase;
}

savePersonData(String typeflag){
	String personNameOrigin=getFieldValue("person/personInfo/personName");
	String personNameCamCase=nameCamCaseConverter(personNameOrigin);
	String personLabel=personNameCamCase+"_"+getFieldValue("person/personInfo/personDOB");

	if(person_id!=null){
		changedPersonInfo.clear();
		changedPersonInfo.add(personLabel);
		changedPersonInfo.add(personNameOrigin);
		changedPersonInfo.add(getFieldValue("person/personInfo/personOtherNames"));
		changedPersonInfo.add(getFieldValue("person/personInfo/personDOB"));
		changedPersonInfo.add(getFieldValue("person/personInfo/personPhoto"));
		changedPersonInfo.add(getFieldValue("person/personInfo/personPhotoDesc"));
		changedPersonInfo.add(getFieldValue("person/personInfo/personIntroDesc"));

		Hashtable personInfoChange=listChange(changedPersonInfo,originPersonInfo);
		//NOTE THIS CASE IS NOT TESTED
		if((personInfoChange.containsKey("EQUAL"))&& (typeflag.equals("intro"))){
			newPersonIntro=new ArrayList();
      		newPersonIntro.add(person_id);
			newPersonIntro.add(personNameOrigin);
			saveAnnotation("person", person_id);
			newSessionForAnswer("intro",newPersonIntro);
			//TODO:  test for the new added return statement
			return;
		}
		
		else if((personInfoChange.containsKey("EQUAL"))&& (!typeflag.equals("intro"))){
			showWarning("No changes","All data are saved");
			saveAnnotation("person", person_id);
			return;
		}
	}
	psDuplicateQuery=null;
	if(person_id==null){
		psDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
				"where AttributeID=(select AttributeID from AttributeKey where AttributeName='PersonID') "+
				"and (measure = '"+personLabel+"' or measure like '"+personLabel+"(%)')";
	}
	else{
		psDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
				"where AttributeID=(select AttributeID from AttributeKey where AttributeName='PersonID') "+
				"and uuid<>"+person_id+" "+
				"and (measure = '"+personLabel+"' or measure like '"+personLabel+"(%)')";
	}

	fetchAll(psDuplicateQuery,new FetchCallback() {
		onFetch(result) {
			if(!isNull(result)){
				personLabel=nonDupLabelGen(result,personLabel,"Person","PersonID",true);
			}
			setFieldValue("person/personInfoHide/personID",personLabel);

			saveTabGroup("person", person_id, null, null, new SaveCallback() {
			    onSave(uuid, newRecord) {
			      person_id = uuid;
			      if(newRecord) {
			      	newPersonIntro=new ArrayList();
			      	newPersonIntro.add(person_id);
					newPersonIntro.add(personNameOrigin);

			      	if(typeflag.equals("intro")){
			      		originPersonInfo.clear();
			      		originPersonInfo.add(getFieldValue("person/personInfoHide/personID"));
			        	originPersonInfo.add(getFieldValue("person/personInfo/personName"));
			        	originPersonInfo.add(getFieldValue("person/personInfo/personOtherNames"));
			        	originPersonInfo.add(getFieldValue("person/personInfo/personDOB"));
			        	originPersonInfo.add(getFieldValue("person/personInfo/personPhoto"));
						originPersonInfo.add(getFieldValue("person/personInfo/personPhotoDesc"));
						originPersonInfo.add(getFieldValue("person/personInfo/personIntroDesc"));
						//showWarning("originPersonInfo","originPersonInfo");
						newSessionForAnswer("intro",newPersonIntro);
					}

					else{
			        	showToast("New record created");
			        	cancelTabGroup("person",true);
			     	    showTab("control/user_control");
			    	}
			      }
				  else{
					showToast("Record changed");	
					if(typeflag.equals("intro")){
						newPersonIntro=new ArrayList();
			      		newPersonIntro.add(person_id);
						newPersonIntro.add(personNameOrigin);
						newSessionForAnswer("intro",newPersonIntro);
					}
				  }
				  
			    }
			    onError(message) {
			        showWarning("Error",message);
			    }  
			});
		}
		onError(message){
			showWarning("Error",message);
		}

	});
}

//Get the intro session list for a person
checkPersonIntroSession(){
	if(person_id!=null){
		checkPsIntrSssQuery="select uuid,measure from latestNonDeletedArchEntIdentifiers "+
		"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionID') "+
		"and uuid in ( select uuid from AentReln "+
			"where RelationshipID in(select RelationshipID from AentReln "+
				"where RelationshipID in (select RelationshipID from latestNonDeletedRelationship "+
					"where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Answer and Session' ) "+
					"and latestNonDeletedRelationship.Deleted IS NULL) "+
		"and uuid in (select uuid from latestNonDeletedAentValue "+
			"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionnaireID') "+
			"and latestNonDeletedAentValue.measure in(select uuid from latestNonDeletedAentValue "+
				"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionnaireType') "+
				"and measure=(select uuid from latestNonDeletedAentValue "+
					"where AttributeID= (select AttributeID from AttributeKey "+
						"where AttributeName='QuesnirTypeName') and measure = 'Introductory'))))) "+
		"and uuid in (select measure from latestNonDeletedArchEntIdentifiers "+
			"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionIDforPerson') "+
			"and uuid in (select uuid from latestNonDeletedAentValue "+
				"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionPersonRole') "+
				"and measure=(select uuid from latestNonDeletedAentValue "+
					"where AttributeID=(select AttributeID from AttributeKey where AttributeName='PersonRoleName') "+
					"and measure='consultant') "+
		"and uuid in (select uuid from latestNonDeletedAentValue "+
			"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionPersonName') "+
			"and measure ='"+person_id+"')));";

		fetchAll(checkPsIntrSssQuery, new FetchCallback() {
	        onFetch(result) {
	        		if(!isNull(result)){
						personIntroSss.clear();
						personIntroSss.addAll(result);
						createPsInTroSssPage();
						showTabGroup("introSssList");
						populateList("introSssList/introSssInfo/intrSessionList",personIntroSss);
						currentPersonInfo.clear();
						currentPersonInfo.add(person_id);
						currentPersonInfo.add(getFieldValue("person/personInfo/personName"));
	        		}
	        		else{
	        			newPersonIntro=new ArrayList();
			      		newPersonIntro.add(person_id);
						newPersonIntro.add(getFieldValue("person/personInfo/personName"));
	        			newSessionForAnswer("intro",newPersonIntro);
	        		}
	        	}
	            
	        onError(message) {
	            showToast(message);
	        }
	    });
	}
	else{
		savePersonCheck("intro");
	}
}
/*** Person Intro Session ***/
/*** Person Intro Session UI ***/
createPsInTroSssPage(){
	if(!hasView("introSssList/introSssInfo/intrSessionList")){
		removeAllViewsAndContainers("introSssList");
		executeViewTask(new ViewTask() {
    	doTask() { 	
   			newIntroSssViewDef=createViewDef().createButton().setLabel("New Session").setStyleCss("faims-blue");
    
    		psIntroSssListDef=createViewDef().createList().setLabel("Session").setStyleCss("introSss-list");

			createView("introSssList/introSssInfo/new_intro_sss", newIntroSssViewDef,"introSssList/introSssInfo");
			createView("introSssList/introSssInfo/intrSessionList", psIntroSssListDef,"introSssList/introSssInfo");

	        refreshTabgroupCSS("introSssList");
	        onEvent("introSssList/introSssInfo/intrSessionList","click","loadSessionInfo(\"answer\")");
			onEvent("introSssList/introSssInfo/new_intro_sss","click","newSessionForAnswer(\"intro\",currentPersonInfo)");
	        }
		});

	}
}

/*** Commom methods ***/
/* 
** Getting the (\\d+) number suffix of a string
** inputString: the input string
*/
getNumSuffix(String inputString){
	String returnSuffix=null;
	Pattern numberPat = Pattern.compile("\\(\\d+\\)");
	Matcher numMatcher = numberPat.matcher(inputString);
	Boolean suffixFind=numMatcher.find();
	if(suffixFind){
		String [] patternSplit=inputString.split("\\(");
		Pattern numberPat2 = Pattern.compile("\\d+\\)");
		Matcher numMatcher2 = numberPat2.matcher(patternSplit[patternSplit.length-1]);
		if(numMatcher2.find()){
			returnSuffix="("+patternSplit[patternSplit.length-1];
		}
	}
	return returnSuffix;
}

/* 
** Generating a non-dup label
** dupList: the duplicate query result 
** tempLbl: the label to be checking for duplicate
** tableName: the table name for the label's update
** attriName: the attribute name for the label's update
** dataSaving: indicating if the old data should be updated to the database
*/
nonDupLabelGen(ArrayList dupList, String tempLbl, String tableName, String attriName, Boolean dataSaving){
	String rtnLbl=tempLbl;
	int sizeOfDup=0;
	Pattern numberPat = Pattern.compile("\\(\\d+\\)");
	sizeOfDup=dupList.size();

	if(sizeOfDup==0){
		return rtnLbl;
	}

	if(sizeOfDup==1){
		duplicateOldLabel=dupList.get(0).get(1);
		Matcher numMatcher = numberPat.matcher(duplicateOldLabel);

		String newLabel=null;
		if(numMatcher.find()){
			suffix=getNumSuffix(duplicateOldLabel);
			if(suffix!=null){
				if(!suffix.equals("(1)"))
					{
						int sLen=suffix.length();
						newLabel=duplicateOldLabel.substring(0,duplicateOldLabel.length()-sLen)+"(1)";
					}
			}
			else{
				newLabel=duplicateOldLabel+"(1)";
			}
		}
		else{
			newLabel=duplicateOldLabel+"(1)";

		}
		if(dataSaving){
			if(newLabel!=null){
				attributes = createAttributeList();
				attributes.add(createEntityAttribute(attriName, null, null, newLabel, null));
				entityId=dupList.get(0).get(0);
				saveArchEnt(entityId, tableName, null, attributes);
			}
		}
		rtnLbl=rtnLbl+"(2)";
		if(!dataSaving){
			if(newLabel!=null){
				rtnLbl=rtnLbl+"|"+newLabel;
			}
		}
	}

	else{
		int maxSuffix=0;
		for(temp: dupList){
			tempLabel=temp.get(1);
			Matcher numMatcher = numberPat.matcher(tempLabel);
			if(numMatcher.find()){
				tempSuffix=getNumSuffix(tempLabel);
				tempSuffixStr=null;
					if(tempSuffix!=null){
						int tempSuffixNum=Integer.parseInt(tempSuffix.replaceAll("[^0-9]", ""));
						if(tempSuffixNum>maxSuffix){
							maxSuffix=tempSuffixNum;
						}
				}
			}
		}
		maxSuffix=maxSuffix+1;
		rtnLbl=rtnLbl+"("+maxSuffix+")";
	}
	return rtnLbl;
}
/* 
** Generating a non-dup label before showTabGroup(ref)
** originLabel: the to-be-de-duplicate label
** fieldRef: the ref of field that the new label should be set
** tableName: the table name for the label's update
** attriName: the attribute name for the label's update
** tempUpdateList: temporarily store the old data in this list
** other args: not used 
*/
labelDeduplicate(String originLabel, String attriName, String fieldRef, String typeflag, Boolean dataUpdate, ArrayList tempUpdateList ){
	duplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
	"where AttributeID=(select AttributeID from AttributeKey where AttributeName='"+attriName+"') "+
	"and (measure = '"+originLabel+"' or measure like '"+originLabel+"(%)')";

	fetchAll(duplicateQuery,new FetchCallback() {
		onFetch(result) {			
			if(!isNull(result)){
				String tempLabel=nonDupLabelGen(result,originLabel, null, null, false);
				if(result.size()==1){
					String newLabel=null;
					ArrayList tempLabels=extractLabelToList(tempLabel);
					if(tempLabels !=null && !tempLabels.isEmpty()){
						originLabel=tempLabels.get(0);
						if(tempLabels.size()>1){
							newLabel=tempLabels.get(1);
							dataUpdate=true;
							tempUpdateList.add(result.get(0).get(0));
							tempUpdateList.add(newLabel);
						}
					}
				}
				else{
					originLabel=tempLabel;
				}
				setFieldValue(fieldRef,originLabel);
			}
			else{
				setFieldValue(fieldRef,originLabel);
			}		
		}
		
	});
}

/* 
** extract labels for new, old, or both entities when called nonDupLabelGen
** the split is based on the char '|'
*/
extractLabelForNewEntity(String inputString){
	String [] labelSplit=inputString.split("\\|"); 
	return labelSplit[0];	
}

extractLabelForUpdateEntity(String inputString){
	String [] labelSplit=inputString.split("\\|"); 
	if(labelSplit.length>1){
		return labelSplit[1];
	}
	return null;
}

extractLabelToList(String inputString){
	ArrayList rtnList=new ArrayList();
	rtnList.clear();

	String [] labelSplit=inputString.split("\\|"); 
	rtnList.add(labelSplit[0]);

	if(labelSplit.length>1){
		rtnList.add(labelSplit[1]);
	}
	return rtnList;
}

/*
** Basic arraylist difference checking 
** targetList: the updated list
** sourceList: the old list
*/

listChange(ArrayList targetList,ArrayList sourceList){
	Hashtable listChanges=new Hashtable();
	target_list=new ArrayList();
	source_list=new ArrayList();
	target_diff_on_source=new ArrayList();
	source_diff_on_target=new ArrayList();

	target_list.addAll(targetList);
	source_list.addAll(sourceList);

	target_list.removeAll(source_list);
	target_diff_on_source.addAll(target_list);//target - source

	target_list.clear();
	target_list.addAll(targetList);
	source_list.removeAll(target_list);
	source_diff_on_target.addAll(source_list);//source - target

	if((target_diff_on_source.isEmpty()) && (source_diff_on_target.isEmpty())){
		listChanges.put("EQUAL",targetList);//here can not put ("EQUAL",null)
	}
	else if((!target_diff_on_source.isEmpty()) && (source_diff_on_target.isEmpty())){
		listChanges.put("PUREADD",target_diff_on_source);
	}

	else if((target_diff_on_source.isEmpty()) && (!source_diff_on_target.isEmpty())){
		listChanges.put("PUREDELETE",source_diff_on_target);
	}

	else {
		listChanges.put("ADD",target_diff_on_source);
		listChanges.put("DELETE",source_diff_on_target);
	}
	return listChanges;
}

/*
** check if time is valid
** startDateTime: the start date time
** endDateTime: the end date time
** flag: indicating the cases, which brings different requirements on time validation
*/
timeValidation(String startDateTime, String endDateTime, String flag){
	switch(flag){
		case ("sessionTime"):
			DateFormat df=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			df.setLenient(false);
			try{
				Date sdt=df.parse(startDateTime);
				Date edt=df.parse(endDateTime);	
				if(sdt.getTime()>edt.getTime()){
					return false;
				}
				
			
				else{
					String [] startTime=startDateTime.split("\\s+");
					String [] endTime=endDateTime.split("\\s+");
					if(startTime[0].equals(endTime[0])){
						return true;
					}
					else{
						return false;
					}
				}
			}
			catch(Exception ex){
				Log.e("error", ex.getMessage().toString());
				return false;
			}
			break;
			
		case ("fieldTripTime"):
			DateFormat df=new SimpleDateFormat("yyyy-MM-dd");
			try{
				Date sdt=df.parse(startDateTime);
				Date edt=df.parse(endDateTime);
				if(sdt.getTime()>edt.getTime()){
					return false;
				}
			
				else{
					return true;
				}
			}
			catch(Exception excption){
				return false;
			}
			break;
		}
}

/*
** check if time is in valid format
** startDateTime: input date time
*/
timeValidation(String startDateTime){	
	String hyphenDateRegex="^\\d{4}[-]\\d{2}[-]\\d{2}$";
	Pattern hyphenDatePattern=Pattern.compile(hyphenDateRegex);
	Matcher hyphenDateMatcher=hyphenDatePattern.matcher(startDateTime);
	if (hyphenDateMatcher.find()){		
		DateFormat df=new SimpleDateFormat("yyyy-MM-dd");
		df.setLenient(false);
		Date sdt=null;
		try{
			sdt=df.parse(startDateTime);	
		}
		catch(Exception ex){
			return false;
		}
		return true;
	}
return false;
}

/*
** check if date is in valid format
** date: input string
*/
dateValidation(String dateStr){	

	String hyphenDateRegex="^\\d{4}[/]\\d{2}$";
	String hyphenDateRegex2="^\\d{4}$";

	Pattern hyphenDatePattern=Pattern.compile(hyphenDateRegex);
	Pattern hyphenDatePattern2=Pattern.compile(hyphenDateRegex2);

	Matcher hyphenDateMatcher=hyphenDatePattern.matcher(dateStr);
	Matcher hyphenDateMatcher2=hyphenDatePattern2.matcher(dateStr);

	if (hyphenDateMatcher.find()){		
		String [] dateSplit=dateStr.split("/");
		int month= Integer.parseInt(dateSplit[1]);
		if(month<1||month>12){
			return false;
		}
		return true;
	}
	else if(hyphenDateMatcher2.find()){
		return true;
	}

	return false;
}

systemDateValidation(String dateStr){
	String slashDateRegex="^\\d{2}[/]\\d{2}[/]\\d{4}$";
	Pattern slashDatePattern=Pattern.compile(slashDateRegex);
	Matcher slashDateMatcher=slashDatePattern.matcher(dateStr);
	if (slashDateMatcher.find()){
		return true;
	}
	return false;
}
/*
** get the current data through the system function of getCurrentTime()
** currentTime: YYYY-MM-DD HH:MM:SS
*/
getCurrentDate(){
	String currentTime=getCurrentTime();
    currentDateTimeArray=currentTime.toString().split("\\s+");
    String currentDate=currentDateTimeArray[0];
    return currentDate;
}

/*
** parsing date to different formats
** dd/mm/yyyy to yyyy-mm-dd
** yyyy-mm-dd to dd/mm/yy
*/
dateParser(String sourceDate){
	//convert dd/mm/yyyy to yyyy-mm-dd
	String slashDateRegex="^\\d{2}[/]\\d{2}[/]\\d{4}$";
	Pattern slashDatePattern=Pattern.compile(slashDateRegex);
	Matcher slashDateMatcher=slashDatePattern.matcher(sourceDate);
	if (slashDateMatcher.find()){
		String [] dateParts=sourceDate.split("/");
		String targetDate=dateParts[2]+"-"+dateParts[1]+"-"+dateParts[0];
		return targetDate;
	}
	
	String hyphenDateRegex="^\\d{4}[-]\\d{2}[-]\\d{2}$";
	Pattern hyphenDatePattern=Pattern.compile(hyphenDateRegex);
	Matcher hyphenDateMatcher=hyphenDatePattern.matcher(sourceDate);
	if (hyphenDateMatcher.find()){
		String [] hyphenDateParts=sourceDate.split("-");
		String targetDate=hyphenDateParts[2]+"/"+hyphenDateParts[1]+"/"+hyphenDateParts[0];
		return targetDate;
	}
	//convert yyyy-mm-dd to dd/mm/yy
}

/*
** checking if a date is within a valid range
** beginDate: starting date
** endDate: ending date
** middleDate: the date to be checked
*/
dateCompare(String beginDate, String middleDate, String endDate){
	DateFormat df=new SimpleDateFormat("yyyy-MM-dd");
	try{
		Date sdt=df.parse(beginDate);
		Date edt=df.parse(endDate);
		Date mdt=df.parse(middleDate);
		if((sdt.getTime()<=mdt.getTime()) && (mdt.getTime()<=edt.getTime())){
			return true;
		}
	
		else{
			return false;
		}
	}
	catch(Exception excption){
		return false;
	}
	return false;
}



/*
**stay in the current page
*/
stayInCurrentPage()
{
	return;
}

/* 
** extract the date in the label
*/
extractLabelDate(String label, String typeflag){
	switch(typeflag){
		case "sss":
			String [] labelArray=label.split("_");
			String tempDate=labelArray[labelArray.length-1];
			if(tempDate.contains("(")){
				tempDate=tempDate.substring(0,tempDate.indexOf("("));
			}
			return tempDate;
		break;
	}
	return null;
}

/*
** adding the element in one list to another
** sourceList: the source list of the element
** type_flage: deprecated
*/
addItemToTargetList(ArrayList sourceList, String type_flag, String intervieweeID){	
	if(isNull(intervieweeID))
	{
		itemId=getListItemValue();	
	}
	else
	{
		itemId=intervieweeID;
	}
	int idx_item=-1;
		
	if(isNull(itemId)){
		showToast("No Item selected");
		return;
	}
	if(itemId.equals("placeholder")){
		showToast("Invalid item");
		return;
	}
	else{		
		for (int i=0; i<sourceList.size();i++){
			if (sourceList.get(i).get(0).equals(itemId)) {
				idx_item=i;
				break;
			}
		}
		
		if (idx_item>=0) {
			switch (type_flag){
			case "sessionFile":
				sss_answer_list.add(sourceList.get(idx_item));
				candidate_files_session.remove(idx_item);
				populateList("sessionForAnswer/sssAnsList/sssAnswerList", sss_answer_list);
				//populateList("sessionForAnswer/sssAnsList/sssAnsSelList", candidate_files_session);
				
				break;
			
			case "fieldTripSession":
			
				String tempSssDate=extractLabelDate(sourceList.get(idx_item).get(1),"sss");
				String tempTripStartDate=dateParser(getFieldValue("fieldTrip/fieldTripBasicInfo/fieldTripStartDatePicker"));
				String tempTripEndDate=dateParser(getFieldValue("fieldTrip/fieldTripBasicInfo/fieldTripEndDatePicker"));
				Boolean addOrNot=dateCompare(tempTripStartDate,tempSssDate,tempTripEndDate);
				if(addOrNot){
					selected_session_fieldTrip.add(sourceList.get(idx_item));
					candidate_session_fieldTrip.remove(idx_item);
					populateList("fieldTrip/fieldTripSession/fieldTripFileList", selected_session_fieldTrip);
					populateList("fieldTrip/fieldTripSession/fieldTripFileSelectionList", candidate_session_fieldTrip);
				}
				else{
					showWarning("invalid date","This session is not taken in this fieldTrip date period");
				}
			
				break;
			
			}
		}
		else{
			showWarning("Item Not Found","Oops! Can't find this item, it could be not valid anymore, please contact the Admin");
		}
		
	}
}

/*
** deleting the element in one list to another
** targetList: the source list of the element
** type_flage: deprecated
*/
deleteItemFromTargetList(ArrayList targetList, String type_flag, String toDelId){
	if(type_flag.equals("sessionFile")){
		deleteItemId=toDelId;
	}
	else{
		deleteItemId=getListItemValue();
	}
	int idx_delete=-1;
	if(isNull(deleteItemId)){
		showToast("No Item selected");
		return;
	}
	if(deleteItemId.equals("placeholder")){
		showToast("Invalid item");
		return;
	}
	else{	
		
		for (int i=0; i<targetList.size();i++){
			if (targetList.get(i).get(0).equals(deleteItemId)) {
				idx_delete=i;
				break;
			}
		}
		
		if (idx_delete>=0) {
			switch (type_flag){
			case "sessionFile":
				candidate_files_session.add(targetList.get(idx_delete));
				sss_answer_list.remove(idx_delete);
				populateList("sessionForAnswer/sssAnsList/sssAnswerList", sss_answer_list);
				//populateList("sessionForAnswer/sssAnsList/sssAnsSelList", candidate_files_session);
				break;
			case "fieldTripSession":
				candidate_session_fieldTrip.add(targetList.get(idx_delete));
				selected_session_fieldTrip.remove(idx_delete);
				populateList("fieldTrip/fieldTripSession/fieldTripFileList", selected_session_fieldTrip);
				populateList("fieldTrip/fieldTripSession/fieldTripFileSelectionList", candidate_session_fieldTrip);
				break;
			}
		}
		else{
			showWarning("Item Not Found","Oops! Can't find this item, it could be not valid anymore, please contact the Admin");
		}
		
	}
}

/*
** generate an (x,y,z,) format IN condition for queries
*/
buildQuerySetCondition(ArrayList itemList){
	StringBuilder sb=new StringBuilder();
	sb.append("(");
	for (String s: itemList){
		String str="'"+s+"'";
		if(sb.length()>1){
			sb.append(",");
		}
		sb.append(str);
	}
	sb.append(")");
	return sb.toString();
}

/*
** update the old data in dupInfoList to the table of tableName of attribute attrName
*/
updateDupLabel(ArrayList dupInfoList, String tableName, String attrName){
	if(dupInfoList!=null && !dupInfoList.isEmpty()){
		dupAttributes = createAttributeList();
		dupAttributes.add(createEntityAttribute(attrName, null, null, dupInfoList.get(1), null));
		saveArchEnt(dupInfoList.get(0), tableName, null, dupAttributes);
		dupInfoList.clear();
	}
}

/*
** save entities to reln
*/
saveEntitiesToRel(String type, String entity1, String entity2) {
	if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(reln_id, newRecord) {
            addReln(entity1, reln_id, null);
            addReln(entity2, reln_id, null);
        }
        onError(message) {
        	saveEntitiesToRelFailSafe(type,entity1,entity2,0);
        }
    });
}

/*
** save entities to reln
** resaving up to 3 times
*/
saveEntitiesToRelFailSafe(String type, String entity1, String entity2, int loopCount) {
	if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(reln_id, newRecord) {
            addReln(entity1, reln_id, null);
            addReln(entity2, reln_id, null);
        }
        onError(message) {
        	if(loopCount<3){
        		loopCount++;
				saveEntitiesToRelFailSafe(type, entity1, entity2,loopCount);  		
        	}
        	else{
        		showWarning("Saving fail","Saving failed on" +type +"\n Plese try to save again if you can\n"+"and report the error to the admin");
        	}	
        }
    });
}

/*
** save tabGroup to reln
** resaving up to 3 times
*/
saveTabGroupFailSafe(String tableName, String entId, int loopCount){
	if(isNull(tableName) || isNull(entId)){
		return;
	}
	saveTabGroup("tableName", entId, null, null, new SaveCallback() {
	    onSave(uuid, newRecord) {

	    }
	    onError(message) {
	    	if(loopCount<3){
	    		loopCount++;
	    		saveTabGroupFailSafe(tableName,entId,loopCount);
	    	}
	    	else{
	    		showWarning("Saving fail","Error on saving tabgroup " +tableName+"\n Please report to error to the admin");
	    	}
	    }  
	});
}

/*
** next question for questionnaire answering
** not checking if a question is answered or not
*/
nextQuestion(String curntQuesId, ArrayList questionList, Boolean chkQues){
	//showWarning("nextQuestion","nextQuestion");
	int idxCrntQues=-1;
	String nextQuesContent=null;
	String nextQuesId=null;
	for(int i=0;i<questionList.size();i++){
		if(curntQuesId.equals(questionList.get(i).get(0))){
			idxCrntQues=i;
			break;
		}
	}
	
	if(idxCrntQues!=questionList.size()-1){
		nextQuesId=questionList.get(idxCrntQues+1).get(0);
		nextQuesContent=questionList.get(idxCrntQues+1).get(1);
		showAlert("Next question","Do you want to go to the next question:\n"+nextQuesContent,"checkPersonAns(\""+nextQuesId+"\")","stayInCurrentPage()");
		if(idxCrntQues==questionList.size()-2){
			showWarning("Reaching last question","Reminder: you are reaching the last question of this questionnaire");
		}
	}
	if(chkQues){
		cancelTabGroup("survey",true);
	}
}

/*
** extract the label without the (d+) suffix
** this function takes an arraylist as input
*/
extractOriginLbl(ArrayList inputList){
	extrList=new ArrayList();
	extrList.clear();
	Pattern numberPat = Pattern.compile("\\(\\d+\\)");
	for (input: inputList){
		tempLblId=input.get(0);
		tempLbl=input.get(1);
		Matcher numMatcher = numberPat.matcher(tempLbl);
		Boolean suffixFind=numMatcher.find();
		//if there's no number suffix of the current label, then it can be directly added to exrAnsList
		if(!suffixFind){
			extrList.add(input);
		}
		else{
			String [] patternSplit=tempLbl.split("\\(");
			Pattern numberPat2 = Pattern.compile("\\d+\\)");
			Matcher numMatcher2 = numberPat2.matcher(patternSplit[patternSplit.length-1]);
			if(numMatcher2.find()){
				StringBuilder sb=new StringBuilder();
				for (lbl : patternSplit){
					if (sb.length()>0)
						{sb.append("(");}
					sb.append(lbl);
				}
				String orgnSub=sb.toString();
				orgn=new ArrayList();
				orgn.add(tempLblId);
				orgn.add(orgnSub);
				extrList.add(orgn);
			}
			else{
				extrList.add(input);
			}

		}
	}
	return extrList;
}

/*
** extract the label without the (d+) suffix
** this function takes a string as input
*/
extractOriginLbl(String inputLabel){
	String rtnLabel=inputLabel;
	Pattern numberPat = Pattern.compile("\\(\\d+\\)");
	Matcher numMatcher = numberPat.matcher(inputLabel);
	if(numMatcher.find()){
		//session label has only this patter at the end of the string
		rtnLabel=rtnLabel.substring(0,rtnLabel.indexOf("("));
	}
	return rtnLabel;
}

/*
** saving annotation for a tabgroup
** use when no data is changed for a tabgroup
*/
saveAnnotation(String tabgroupRef, String entityUuid){
	saveTabGroup(tabgroupRef, entityUuid, null, null, new SaveCallback(){
		onSave(uuid, result){
			showToast("annotations updated");
		}
	});
}

getQuesLabel(){
	String returnQuesLabel=null;
	for(ques: ques_in_current_quesnir){
		if(ques.get(0).equals(current_question_id)){
			returnQuesLabel=ques.get(1);
			break;
		}
	}
	return returnQuesLabel;
}
/*
loadSessionListByQuesnirType(String typeflag, ArrayList typeIdList){
	String typeIds=buildQuerySetCondition(typeIdList);
	loadSessionByTypeQuery="select uuid,measure from latestNonDeletedAentValue where "+
	"latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionID') "+
	"and uuid in "+
	"(select uuid from AentReln where RelationshipID "+
	"in (select RelationshipID from AEntReln where AEntReln.uuid in "+
	"(select uuid from latestNonDeletedAentValue "+
	"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionnaireID') "+
	"and measure IN (select uuid from latestNonDeletedAentValue "+
	"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionnaireType') and "+
	"measure IN'"+typeIds+"')) "+
	"AND RelationshipID in (select RelationshipID from latestNonDeletedRelationship "+
	"where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Answer and Session') and latestNonDeletedRelationship.Deleted IS NULL)))";

	fetchAll(loadSessionByTypeQuery, new FetchCallback() {
        onFetch(result) {
        	populateList("control/survey_control/surveyList");
        }
        onError(message) {
            showToast(message);
        }
    });
}
*/

/*
** entity search for the control tabgroups
*/
entitySearch(String entityNameRef, String keywordRef, String listRef, String fileTypeRef, String sessionTypeRef){
	//showWarning(listRef,sessionTypeRef);
	String keywordOfEntity= getFieldValue(keywordRef).trim();
	if((isNull(keywordOfEntity)) || (keywordOfEntity.equals("*"))){
		switch (entityNameRef){
			case "survey":	
				answerSearch("*",listRef);
			break;
			
			case "person":
				personSearch("*",listRef);
			break;
				
			case "language":	
				languageSearch("*",listRef);
			break;
				
			case "session":	
				//String sessionType=getFieldValue(sessionTypeRef);
				sessionSearch("*",listRef,sessionTypeRef);
			break;
				
			case "questionnaire":
				quesnirSearch("*",listRef);
			break;

			case "fieldTrip":
				fieldTripSearch("*",listRef);
			break;

			case "file":
				String fileType=getFieldValue(fileTypeRef);
				switch (fileType){
					case "Audio":
						typedFileSearch("Audio", "*", listRef);
						break;
					case "Video":
						typedFileSearch("Video", "*", listRef);
						break;
					case "Photo":
						typedFileSearch("Photo", "*", listRef);
						break;
					case "Other":
						typedFileSearch("Other", "*", listRef);
						break;
					case "All":
						nonTypedFileSearch("*", listRef);
						break;
				}	
			break;
		}				
	}
	else{
		switch (entityNameRef){
			case "survey":	
				answerSearch(keywordOfEntity,listRef);
			break;
			
			case "person":
				personSearch(keywordOfEntity,listRef);
			break;
				
			case "language":	
				languageSearch(keywordOfEntity,listRef);
			break;
				
			case "session":	
				//String sessionType=getFieldValue(sessionTypeRef);
				sessionSearch(keywordOfEntity,listRef,sessionTypeRef);
			break;
				
			case "questionnaire":
				quesnirSearch(keywordOfEntity,listRef);
			break;

			case "fieldTrip":
				fieldTripSearch(keywordOfEntity,listRef);
			break;

			case "file":
				String fileType=getFieldValue(fileTypeRef);
				switch (fileType){
					case "Audio":
						typedFileSearch("Audio", keywordOfEntity, listRef);
						break;
					case "Video":
						typedFileSearch("Video", keywordOfEntity, listRef);
						break;
					case "Photo":
						typedFileSearch("Photo", keywordOfEntity, listRef);
						break;
					case "Other":
						typedFileSearch("Other", keywordOfEntity, listRef);
						break;
					case "All":
						nonTypedFileSearch(keywordOfEntity, listRef);
						break;
				}	
			break;
		}				
	}
}

answerSearch(String keyword, String listRef){
	if(keyword.equals("*")){
		loadAllSurveyQuery="SELECT uuid,measure FROM latestNonDeletedArchEntIdentifiers where AttributeID"+
			"=(select AttributeID from AttributeKey where AttributeName='AnswerLabel') GROUP BY uuid ORDER BY measure asc";
		fetchAll(loadAllSurveyQuery, new FetchCallback() {
			onFetch(result) {
				if(!isNull(result)){
					populateList(listRef, result);}
				else{
					showWarning("No result","No record");
				}
			}  
		});
	}
	else{
		searchSureyQuery="select uuid, measure from latestNonDeletedAentValue where " +
					"latestNonDeletedAentValue.Measure like '%"+ keyword +
					"%' and latestNonDeletedAentValue.AttributeID = "+
					"(select AttributeID from AttributeKey where AttributeName='AnswerLabel') ORDER BY measure asc";
		fetchAll(searchSureyQuery,new FetchCallback() {
			onFetch(result) {
				if(!isNull(result)){
					populateList(listRef, result);
				}
				else{
					showWarning("No result","No record matches the keyword");
				}
			}  
		});
	}
}

personSearch(String keyword, String listRef){
	if(keyword.equals("*")){
		fetchAll(loadAllPersonIDQuery,new FetchCallback() {
			onFetch(result) {
				if(!isNull(result)){
					populateList(listRef, result);
				}
				else{
					showWarning("No result","No record matches the keyword");
				}
			}  
		});
	}
	else{
		searchPersonQuery="select uuid, measure from latestNonDeletedAentValue where " +
					"latestNonDeletedAentValue.Measure like '%"+ keyword +
					"%' and latestNonDeletedAentValue.AttributeID = "+
					"(select AttributeID from AttributeKey where AttributeName='PersonID') ORDER BY measure asc";
		fetchAll(searchPersonQuery,new FetchCallback() {
			onFetch(result) {
				if(!isNull(result)){
					populateList(listRef, result);
				}
				else{
					showWarning("No result","No record matches the keyword");
				}
			}  
		});

	}
}

languageSearch(String keyword, String listRef){
	if(keyword.equals("*")){
		fetchAll(loadAllLanguageQuery,new FetchCallback() {
			onFetch(result) {
				if(!isNull(result)){
					populateList(listRef, result);
				}
				else{
					showWarning("No result","No record matches the keyword");
				}
			}  
		});
	}
	else{
		searchLangQuery="select uuid, measure from latestNonDeletedAentValue where " +
			"latestNonDeletedAentValue.Measure like '%"+ keyword +
			"%' and latestNonDeletedAentValue.AttributeID = "+
			"(select AttributeID from AttributeKey where AttributeName='LanguageName') ORDER BY measure asc";
		fetchAll(searchLangQuery,new FetchCallback() {
			onFetch(result) {
				if(!isNull(result)){
					populateList(listRef, result);
				}
				else{
					showWarning("No result","No record matches the keyword");
				}
			}  
		});
	}
}

sessionSearch(String keyword, String listRef, String sessionTypeRef){
	//showWarning(sessionTypeRef,sessionTypeRef);
	if(keyword.equals("*")){
		if(getFieldValue(sessionTypeRef).equals("All")){
			fetchAll(loadAllSessionIDQuery,new FetchCallback() {
				onFetch(result) {
					if(!isNull(result)){
						populateList(listRef, result);
					}
					else{
						showWarning("No result","No record matches the keyword");
					}
				}  
			});
		}
		else{
			String typeId= getFieldValue(sessionTypeRef);
			loadSessionByTypeQuery="select uuid,measure from latestNonDeletedAentValue where "+
				"latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionID') "+
				"and uuid in "+
				"(select uuid from AentReln where RelationshipID "+
				"in (select RelationshipID from AEntReln where AEntReln.uuid in "+
				"(select uuid from latestNonDeletedAentValue "+
				"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionnaireID') "+
				"and measure IN (select uuid from latestNonDeletedAentValue "+
				"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionnaireType') and "+
				"measure ='"+typeId+"')) "+
				"AND RelationshipID in (select RelationshipID from latestNonDeletedRelationship "+
				"where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Answer and Session') and latestNonDeletedRelationship.Deleted IS NULL))) "+
				"ORDER BY measure asc";

			fetchAll(loadSessionByTypeQuery,new FetchCallback() {
				onFetch(result) {
					if(!isNull(result)){
						populateList(listRef, result);
					}
					else{
						showWarning("No result","No record matches the keyword");
					}
				}  
			});
		}
		
	}
	else{
		if(getFieldValue(sessionTypeRef).equals("All")){
			searchSessionQuery="select uuid, measure from latestNonDeletedAentValue where " +
				"latestNonDeletedAentValue.Measure like '%"+ keyword +
				"%' and latestNonDeletedAentValue.AttributeID = "+
				"(select AttributeID from AttributeKey where AttributeName='SessionID') ORDER BY measure asc";
			fetchAll(searchSessionQuery, new FetchCallback() {
				onFetch(result) {
					if(!isNull(result)){
						populateList(listRef, result);}
					else{
						showWarning("No result","No record matches the keyword");
					}
				}  
			});
		}
		else{
			String typeId= getFieldValue(sessionTypeRef);
			loadSessionByTypeKeywordQuery="select uuid,measure from latestNonDeletedAentValue where "+
				"latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionID') "+
				"and latestNonDeletedAentValue.measure like '%"+keyword+"%' "+
				"and uuid in "+
				"(select uuid from AentReln where RelationshipID "+
				"in (select RelationshipID from AEntReln where AEntReln.uuid in "+
				"(select uuid from latestNonDeletedAentValue "+
				"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionnaireID') "+
				"and measure IN (select uuid from latestNonDeletedAentValue "+
				"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionnaireType') and "+
				"measure ='"+typeId+"')) "+
				"AND RelationshipID in (select RelationshipID from latestNonDeletedRelationship "+
				"where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Answer and Session') and latestNonDeletedRelationship.Deleted IS NULL))) "+
				"ORDER BY measure asc";
			fetchAll(loadSessionByTypeKeywordQuery, new FetchCallback() {
				onFetch(result) {
					if(!isNull(result)){
						populateList(listRef, result);}
					else{
						showWarning("No result","No record matches the keyword");
					}
				}  
			});
		}
		
		
	}
}

quesnirSearch(String keyword, String listRef){
	if(keyword.equals("*")){
		if(!introAns){
			fetchAll(loadAllRegQuesnirQuery,new FetchCallback() {
				onFetch(result) {
					if(!isNull(result)){
						populateList(listRef, result);
					}
					else{
						showWarning("No result","No record matches the keyword");
					}
				}  
			});
		}
		else{
			fetchAll(loadAllIntrQuesnirQuery,new FetchCallback() {
				onFetch(result) {
					if(!isNull(result)){
						populateList(listRef, result);
					}
					else{
						showWarning("No result","No record matches the keyword");
					}
				}  
			});
		}
	}
	else{
		if(!introAns){
			searchQuesnirQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
				"WHERE latestNonDeletedAentValue.AttributeID = "+
				"(SELECT AttributeID FROM AttributeKey WHERE AttributeName='QuestionnaireName') "+
				"AND latestNonDeletedAentValue.Measure like '%"+ keyword +"%'"+
				"AND latestNonDeletedAentValue.uuid IN "+
				"(SELECT uuid from latestNonDeletedAentValue WHERE latestNonDeletedAentValue.AttributeID= "+
					"(select AttributeID from AttributeKey where AttributeName='QuestionnaireType') "+
					"AND latestNonDeletedAentValue.measure NOT IN "+
					"(select uuid from latestNonDeletedAentValue where latestNonDeletedAentValue.AttributeID="+
						"(select AttributeID from AttributeKey where AttributeName='QuesnirTypeName') "+
						"and latestNonDeletedAentValue.measure = 'Introductory' "+ 
						"or latestNonDeletedAentValue.measure = 'Emergency' "+
						"or latestNonDeletedAentValue.measure = 'Sociolinguistic' "+
						")) GROUP BY uuid "+"ORDER BY measure asc";
		}
		else{
			searchQuesnirQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
				"WHERE latestNonDeletedAentValue.AttributeID = "+
				"(SELECT AttributeID FROM AttributeKey WHERE AttributeName='QuestionnaireName') "+
				"AND latestNonDeletedAentValue.Measure like '%"+ keyword +"%'"+
				"AND latestNonDeletedAentValue.uuid IN "+
				"(SELECT uuid from latestNonDeletedAentValue WHERE latestNonDeletedAentValue.AttributeID= "+
					"(select AttributeID from AttributeKey where AttributeName='QuestionnaireType') "+
					"AND latestNonDeletedAentValue.measure IN "+
					"(select uuid from latestNonDeletedAentValue where latestNonDeletedAentValue.AttributeID="+
						"(select AttributeID from AttributeKey where AttributeName='QuesnirTypeName') "+
						"and latestNonDeletedAentValue.measure = 'Introductory' "+
						"or latestNonDeletedAentValue.measure = 'Sociolinguistic' "+
						")) GROUP BY uuid "+"ORDER BY measure asc";
		}
				/*
		searchQuesnirQuery="select uuid, measure from latestNonDeletedAentValue where " +
			"latestNonDeletedAentValue.Measure like '%"+ keyword +
			"%' and latestNonDeletedAentValue.AttributeID = "+
			"(select AttributeID from AttributeKey where AttributeName='QuestionnaireName')";
			*/
		fetchAll(searchQuesnirQuery,new FetchCallback() {
			onFetch(result) {
				if(!isNull(result)){
					populateList(listRef, result);
				}
				else{
					showWarning("No result","No record matches the keyword");
				}
			}  
		});
	}
}

fieldTripSearch(String keyword, String listRef){
	if(keyword.equals("*")){
		fetchAll(loadAllFieldTripQuery,new FetchCallback() {
			onFetch(result) {
				if(!isNull(result)){
					populateList(listRef, result);
				}
				else{
					showWarning("No result","No record matches the keyword");
				}
			}  
		});
	}
	else{
		searchFTQuery="select uuid, measure from latestNonDeletedAentValue where " +
			"latestNonDeletedAentValue.Measure like '%"+ keyword +
			"%' and latestNonDeletedAentValue.AttributeID = "+
			"(select AttributeID from AttributeKey where AttributeName='FieldTripName') ORDER BY measure asc";
		fetchAll(searchFTQuery,new FetchCallback() {
			onFetch(result) {
				if(!isNull(result)){
					populateList(listRef, result);
				}
				else{
					showWarning("No result","No record matches the keyword");
				}
			}  
		});
	}
}

searchQuesInCrtQuesnir(){
	String quesKeyword=null;

	quesKeyword=getFieldValue("questionnaireInfo/surveyQuestionnaire/ques_keyword");
	quesKeyword.trim();

	if(!(isNull(quesKeyword) || quesKeyword.equals("*"))){
		Pattern quesSearch = Pattern.compile(quesKeyword);
		tempMatchQues=new ArrayList();
		tempMatchQues.clear();
		for(tempQues: ques_in_current_quesnir){
			String tempQuesCntnt= tempQues.get(1);
			Matcher quesSearchMatcher=quesSearch.matcher(tempQuesCntnt);
			if(quesSearchMatcher.find()){
				tempMatchQues.add(tempQues);
			}
		}
		populateList("questionnaireInfo/surveyQuestionnaire/surveyQuestionInQuestionnaire", tempMatchQues);
	}
	else{
		populateList("questionnaireInfo/surveyQuestionnaire/surveyQuestionInQuestionnaire", ques_in_current_quesnir);
	}	
}

typedFileSearch(String searchFileType,String keyword, String listRef){
	if(keyword.equals("*")){
		loadAllTypedFileQuery="SELECT file.uuid, file.measure FROM latestNonDeletedAentValue as file, latestNonDeletedAentValue as fileType "+
		"where file.AttributeID=(select AttributeID from AttributeKey where AttributeName='FileID') "+
		"and fileType.AttributeID=(select AttributeID from AttributeKey where AttributeName='FileType') "+
		"and file.uuid=fileType.uuid "+
		"and fileType.measure='"+searchFileType+"' "+"ORDER BY file.measure asc";
		fetchAll(loadAllTypedFileQuery,new FetchCallback() {
			onFetch(result) {
				if(!isNull(result)){
					populateList(listRef, result);
				}
				else{
					showWarning("No result","No record matches the keyword");
				}
			}  
		});
	}
	else{
		searchTypedFileQuery="SELECT file.uuid, file.measure FROM latestNonDeletedAentValue as file, latestNonDeletedAentValue as fileType "+
		"where file.AttributeID=(select AttributeID from AttributeKey where AttributeName='FileID') "+
		"and fileType.AttributeID=(select AttributeID from AttributeKey where AttributeName='FileType') "+
		"and file.uuid=fileType.uuid "+
		"and file.measure like '%"+keyword+"%' "+
		"and fileType.measure='"+searchFileType+"' "+"ORDER BY file.measure asc";
		fetchAll(searchTypedFileQuery,new FetchCallback() {
			onFetch(result) {
				if(!isNull(result)){
					populateList(listRef, result);
				}
				else{
					showWarning("No result","No record matches the keyword");
				}
			}  
		});
	}
}

nonTypedFileSearch(String keyword, String listRef){
	if(keyword.equals("*")){
		fetchAll(loadAllFileIDQuery,new FetchCallback() {
			onFetch(result) {
				if(!isNull(result)){
					populateList(listRef, result);
				}
				else{
					showWarning("No result","No record matches the keyword");
				}
			}  
		});
	}
	else{
		searchAllFileQuery="select uuid, measure from latestNonDeletedAentValue where " +
			"latestNonDeletedAentValue.Measure like '%"+ keyword +
			"%' and latestNonDeletedAentValue.AttributeID = "+
			"(select AttributeID from AttributeKey where AttributeName='FileID') ORDER BY measure asc";
		fetchAll(searchAllFileQuery,new FetchCallback() {
			onFetch(result) {
				if(!isNull(result)){
					populateList(listRef, result);
				}
				else{
					showWarning("No result","No record matches the keyword");
				}
			}  
		});
	}
}
