import java.util.concurrent.Callable;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import android.util.Log;
import java.io.File;
import java.lang.Character;
import java.lang.StringBuffer;

//import java.lang.*;
/*** 'Editable' - you can edit the code below based on the needs ***/
User user; // don't touch
String userid;

/***query***/
loadAllQuestionnaireQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
	"WHERE latestNonDeletedAentValue.AttributeID "+
	"= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='QuestionnaireName') "+
	"GROUP BY uuid;";

loadAllRegQuesnirQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
	"WHERE latestNonDeletedAentValue.AttributeID = "+
	"(SELECT AttributeID FROM AttributeKey WHERE AttributeName='QuestionnaireName') "+
	"AND latestNonDeletedAentValue.uuid IN "+
	"(SELECT uuid from latestNonDeletedAentValue WHERE latestNonDeletedAentValue.AttributeID= "+
		"(select AttributeID from AttributeKey where AttributeName='QuestionnaireType') "+
		"AND latestNonDeletedAentValue.measure <> "+
		"(select uuid from latestNonDeletedAentValue where latestNonDeletedAentValue.AttributeID="+
			"(select AttributeID from AttributeKey where AttributeName='QuesnirTypeName') "+
			"and latestNonDeletedAentValue.measure = 'Introductory')) GROUP BY uuid;";

loadAllIntrQuesnirQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
	"WHERE latestNonDeletedAentValue.AttributeID = "+
	"(SELECT AttributeID FROM AttributeKey WHERE AttributeName='QuestionnaireName') "+
	"AND latestNonDeletedAentValue.uuid IN "+
	"(SELECT uuid from latestNonDeletedAentValue WHERE latestNonDeletedAentValue.AttributeID= "+
		"(select AttributeID from AttributeKey where AttributeName='QuestionnaireType') "+
		"AND latestNonDeletedAentValue.measure = "+
		"(select uuid from latestNonDeletedAentValue where latestNonDeletedAentValue.AttributeID="+
			"(select AttributeID from AttributeKey where AttributeName='QuesnirTypeName') "+
			"and latestNonDeletedAentValue.measure = 'Introductory')) GROUP BY uuid;";

loadAllPersonQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
	"WHERE latestNonDeletedAentValue.AttributeID "+
	"= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='PersonName') "+
	"GROUP BY uuid;";

loadAllPersonIDQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
		"WHERE latestNonDeletedAentValue.AttributeID "+
		"IN (SELECT AttributeID FROM AttributeKey WHERE AttributeName='PersonID') "+
		"GROUP BY uuid;";

loadAllLanguageQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
	"WHERE latestNonDeletedAentValue.AttributeID "+
	"= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='LanguageName') "+
	"and uuid in "+
	"(select uuid from latestNonDeletedArchEntIdentifiers "+
	"where AttributeID=(select AttributeID from AttributeKey where AttributeName='LanguageID')) "+
	"GROUP BY uuid;";

loadAllSurveyQuery="select uuid,measure from "+
		"((select measure as quesnirid from latestNonDeletedAentValue where AttributeID = "+
			"(select AttributeID from AttributeKey where AttributeName='AnswerQuestionnaireID') group by measure) t1 "+
		"inner join "+
		"(select uuid, measure from latestNonDeletedAentValue where AttributeID= "+
			"(select AttributeID from AttributeKey where AttributeName='QuestionnaireName')) t2 "+
		"on t2.uuid=t1.quesnirid );";


loadAllFileQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
		"WHERE latestNonDeletedAentValue.AttributeID "+
		"= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='FileName') "+
		"GROUP BY uuid;";

loadAllFileIDQuery="SELECT uuid,measure FROM latestNonDeletedArchEntIdentifiers " +
		"WHERE AttributeID "+
		"= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='FileID') "+
		"GROUP BY uuid;";

loadAllSessionQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
		"WHERE latestNonDeletedAentValue.AttributeID "+
		"= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='SessionName') "+
		"GROUP BY uuid;";

loadAllSessionIDQuery="SELECT uuid,measure FROM latestNonDeletedArchEntIdentifiers " +
		"WHERE AttributeID "+
		"= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='SessionID') "+
		"GROUP BY uuid;";

loadAllFieldTripQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
		"WHERE latestNonDeletedAentValue.AttributeID "+
		"= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='FieldTripName') "+
		"GROUP BY uuid;";

loadAllAnswerQuery="SELECT uuid,measure FROM latestNonDeletedArchEntIdentifiers " +
		"WHERE AttributeID "+
		"= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='AnswerLabel') "+
		"GROUP BY uuid;";

loadAllIntroAnsQuery="select uuid,measure from latestNonDeletedArchEntIdentifiers "+
	"where AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerLabel') "+
	"and uuid in (select uuid from latestNonDeletedAentValue "+
	"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionnaireID') "+
	"and latestNonDeletedAentValue.measure in(select uuid from latestNonDeletedAentValue "+
		"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionnaireType') "+
		"and measure=(select uuid from latestNonDeletedAentValue "+
			"where AttributeID= (select AttributeID from AttributeKey where AttributeName='QuesnirTypeName') and measure = 'Introductory')))";

loadAllNonIntroAnsQuery="select uuid,measure from latestNonDeletedArchEntIdentifiers "+
	"where AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerLabel') "+
	"and uuid NOT IN (select uuid from latestNonDeletedAentValue "+
	"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionnaireID') "+
	"and latestNonDeletedAentValue.measure in(select uuid from latestNonDeletedAentValue "+
		"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionnaireType') "+
		"and measure=(select uuid from latestNonDeletedAentValue "+
			"where AttributeID= (select AttributeID from AttributeKey where AttributeName='QuesnirTypeName') and measure = 'Introductory')))";

loadAllAnsNotInSssQuery="select uuid,measure from latestNonDeletedArchEntIdentifiers "+
	"where AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerLabel') "+
	"and uuid NOT IN(select uuid from AentReln "+
		"where RelationshipID in (select RelationshipID from latestNonDeletedRelationship "+
			"where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Answer and Session') "+
			"and latestNonDeletedRelationship.Deleted IS NULL))";

loadAllIntroAnsNotInSssQuery="select uuid,measure from latestNonDeletedArchEntIdentifiers "+
"where AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerLabel') "+
"and uuid in (select uuid from latestNonDeletedAentValue "+
	"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionnaireID') "+
	"and latestNonDeletedAentValue.measure in(select uuid from latestNonDeletedAentValue "+
		"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionnaireType') "+
		"and measure=(select uuid from latestNonDeletedAentValue "+
			"where AttributeID= (select AttributeID from AttributeKey where AttributeName='QuesnirTypeName') and measure = 'Introductory'))) "+
"and uuid NOT IN(select uuid from AentReln "+
	"where RelationshipID in (select RelationshipID from latestNonDeletedRelationship "+
		"where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Answer and Session') "+
		"and latestNonDeletedRelationship.Deleted IS NULL))";

loadAllNonIntroAnsNotInSssQuery="select uuid,measure from latestNonDeletedArchEntIdentifiers "+
"where AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerLabel') "+
"and uuid NOT IN (select uuid from latestNonDeletedAentValue "+
	"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionnaireID') "+
	"and latestNonDeletedAentValue.measure in(select uuid from latestNonDeletedAentValue "+
		"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionnaireType') "+
		"and measure=(select uuid from latestNonDeletedAentValue "+
			"where AttributeID= (select AttributeID from AttributeKey where AttributeName='QuesnirTypeName') and measure = 'Introductory'))) "+
"and uuid NOT IN(select uuid from AentReln "+
	"where RelationshipID in (select RelationshipID from latestNonDeletedRelationship "+
		"where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Answer and Session') "+
		"and latestNonDeletedRelationship.Deleted IS NULL))";

loadAllRoleQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
		"WHERE latestNonDeletedAentValue.AttributeID =( SELECT AttributeID FROM AttributeKey WHERE AttributeName='PersonRoleName') "+
		"AND uuid in (SELECT uuid FROM latestNonDeletedAentValue "+
			"WHERE AttributeID= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='RoleDataOnClient') AND measure ='Yes');";

loadAllUserQuery="select userid, fname || ' ' || lname from user where userdeleted is null";


//loadFilesForAnswer="select uuid, measure from AentValue where AentValue.AttributeID =(select AttributeID from AttributeKey where AttributeKey.AttributeName='AnswerText') and AentValue.uuid in (select uuid from (SELECT uuid FROM AEntValue where AEntValue.AttributeID=(select AttributeKey.AttributeID from AttributeKey where AttributeKey.AttributeName='AnswerQuestionID') and AEntValue.freetext='1000011437080460685') t1 inner join (SELECT uuid FROM AEntValue where AEntValue.AttributeID=(select AttributeKey.AttributeID from AttributeKey where AttributeKey.AttributeName='AnswerQuestionnaireID') and AEntValue.freetext='1000011437080512135') t2 using(uuid))"
/***Enable data and file syncing***/
addActionBarItem("sync", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "Disable Sync";
    }
    actionOn() {
        setSyncEnabled(false);
        setFileSyncEnabled(false);
        showToast("Sync disabled.");
    }
    isActionOff() {
        isSyncEnabled();
    } 
    actionOffLabel() {
        "Enable Sync";
    }
    actionOff() {
        setSyncEnabled(true);
        setFileSyncEnabled(true);
        showToast("Sync enabled.");
    }
});

addActionBarItem("internal_gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{Internal_GPS_Enabled}";
    }
    actionOn() {
        stopGPS();
        showToast("{GPS_Disabled}");
    }
    isActionOff() {
        isInternalGPSOn();
    }
    actionOffLabel() {
        "{Internal_GPS_Disabled}";
    }
    actionOff() {
        if(isExternalGPSOn()) {
            stopGPS();
        }
        startInternalGPS();
        showToast("{GPS_Enabled}");
    }
});

startInternalGPS();
onSyncEvent("onSyncStart()", "onSyncSuccess()", "onSyncFailure()");


onSyncStart() {
    showToast("sync started");
}
 
onSyncSuccess() {
    showToast("sync success");
}
 
onSyncFailure() {
    showToast("sync failed");
}

/***Save relationships among entities***/
saveEntitiesToRel(String type, String entity1, String entity2) {
	
	 if (isNull(entity1) || isNull(entity2)) return;
	    saveRel(null, type, null, null, new SaveCallback() {
	        onSave(reln_id, newRecord) {
	            addReln(entity1, reln_id, null);
	            addReln(entity2, reln_id, null);
	        }
	        onError(message) {
	            //Log.e("saveEntitiesToHierRel", message);
	        	showWarning("error saveEntitiesToRel",message);
	        }
	    });
}

/***User***/
onEvent("user/usertab/users", "click", "login()");
onEvent("user/usertab/user_Search", "click", "userSearch()");
loadUsers() {
    fetchAll(loadAllUserQuery, new FetchCallback() {
        onFetch(result) {
            populateList("user/usertab/users", result);
        }
    });
}

loadUsers();

String username = "";
String device = "";

login() {
    fetchOne("select userid,fname,lname,email from user where userid='" + getListItemValue() + "';", new FetchCallback() {
        onFetch(result) {
            user = new User(result.get(0),result.get(1),result.get(2),result.get(3));
            setUser(user);
            username = result.get(1) + " " + result.get(2);
            userid=result.get(0);
            showTabGroup("control");
            activeFieldTripCheck();
        }
    });
}
//checking if there's any active fieldTrip
//Boolean tripActive=false;
activeFieldTrip=new ArrayList();
activeFieldTripCheck(){
	String currentDate=getCurrentDate();
	activeFieldTrip.clear();
	//search for fieldTrip that this date is in
	fieldTripSearchQuery="select uuid from latestNonDeletedAentValue "+
		"where AttributeID=(select AttributeID from AttributeKey where AttributeName='FieldTripStartTime') "+
		"and measure <='"+currentDate+"' and uuid in "+
		"(select uuid from latestNonDeletedAentValue where "+
		"AttributeID=(select AttributeID from AttributeKey where AttributeName='FieldTripEndTime') "+
		"and measure >='"+currentDate+"' and uuid in "+
		"(select uuid from latestNonDeletedAentValue where "+
		"AttributeID=(select AttributeID from AttributeKey where AttributeName='FieldTripID') "+
		"and measure like '"+username+"%'))";

	fetchOne(fieldTripSearchQuery, new FetchCallback() {
        onFetch(result) {
           if(!isNull(result)){
           		activeFieldTrip.addAll(result);
           }
        }
    });
}
userSearch(){
	String userKeyword=getFieldValue("user/usertab/user_keyword");
	if((isNull(userKeyword)) || userKeyword.equals("*")){
		 fetchAll(loadAllUserQuery, new FetchCallback() {
		        onFetch(result) {
		            populateList("user/usertab/users", result);
		        }
		    });
	}
	else{
		searchUserQuery="select userid, fname || ' ' || lname from user where userdeleted is null and fname like '%"
						+userKeyword+"%'or lname like '%"+userKeyword+"%'";
		fetchAll(searchUserQuery, new FetchCallback() {
	        onFetch(result) {
	            populateList("user/usertab/users", result);
	        }
	    });
	}
}
/***Survey Control***/
onEvent("control/survey_control/New_Survey","click","preNewSss()");
onEvent("control/survey_control/EMR_Survey","click","emrSssPrep()");
onEvent("control/survey_control","show","loadSessionList(\"answer\")");
onEvent("control/survey_control/surveyList","click","loadSessionInfo(\"answer\")");


/***variables for sessions when creating answer***/
sss_id=null;
sss_answer_list=new ArrayList();
sss_interviewer_list=new ArrayList();//for recording interviewer list when creating session
sssOriginInfo=new ArrayList();
sssNewInfo=new ArrayList();
original_sss_answer_list=new ArrayList();
sssAnsRelnOrigin=new ArrayList();
String sssLabel=null;//This is used for sssID interviewee changing
sssAnswerInterviewerOrigin=new LinkedHashSet();
sssAnswerInterviewerNew=new LinkedHashSet();//This is for generating sss label
String sssLabelOld=null;

Boolean introAns=false;//mark if a session is for introductory questionnaire answer collecting or not
ArrayList newPersonForIntro=new ArrayList(); 

sssPsInfoRelnOrigin=new ArrayList();
sssPsInfoRelnNew=new ArrayList();
sssPersonRoleNameListOrigin=new ArrayList();
sssPersonRoleandNameList=new ArrayList();//selected person role
personRoleList=new ArrayList();
personList=new ArrayList();
sssConsultantList=new LinkedHashSet();
sssInterviewerList=new LinkedHashSet();
sssConsultantIdList=new ArrayList();
String introPsMark=null;//use for check if an intro ps is deleted from his/her intro session
currentPosition=new ArrayList();

candidate_files_session=new ArrayList();

sssOldIntvReln=new ArrayList();
sssOldCoslReln=new ArrayList();
sssOldPsReln=new ArrayList();

quesRecordingType=new ArrayList();

//busyDialog=null;

/***session dynamic ui page generation***/
createMainSessionPage(){
	if(!hasView("sessionForAnswer/sssHidden/sssID")){
		removeAllViewsAndContainers("sessionForAnswer");
		executeViewTask(new ViewTask() {
    	doTask() { 
    		//sssHidden page
    		sssIdViewDef= createViewDef().createTextField().setLabel("Session label").setAttributeName("SessionID").setAttributeType("measure").setAnnotationEnabled(true).setReadOnly(true);
    		sssStartTimeViewDef=createViewDef().createTextField().setLabel("Start time").setAttributeName("SessionStartTimestamp").setAttributeType("measure").setAnnotationEnabled(true).setReadOnly(true);
    		sssEndTimeViewDef=createViewDef().createTextField().setLabel("End time").setAttributeName("SessionEndTimestamp").setAttributeType("measure").setAnnotationEnabled(true).setReadOnly(true);
    		sssNameViewDef=createViewDef().createTextField().setLabel("Session name").setAttributeName("SessionName").setAttributeType("measure").setAnnotationEnabled(true);
    		createView("sessionForAnswer/sssHidden/sssID",sssIdViewDef,"sessionForAnswer/sssHidden"); 
    		createView("sessionForAnswer/sssHidden/sssStartTimetamp",sssStartTimeViewDef,"sessionForAnswer/sssHidden");
    		createView("sessionForAnswer/sssHidden/sssEndTimestamp",sssEndTimeViewDef,"sessionForAnswer/sssHidden");
    		createView("sessionForAnswer/sssHidden/sssName",sssNameViewDef,"sessionForAnswer/sssHidden");		
    		//sssAnsBasicInfo page   
    		
    		sssLocViewDef=createViewDef().createTextField().setLabel("GPS").setAttributeName("SessionLocation").setAttributeType("measure").setAnnotationEnabled(true).setReadOnly(true);
    		sssDescViewDef=createViewDef().createTextField().setLabel("Description").setAttributeName("SessionDescription").setAttributeType("measure").setAnnotationEnabled(true);
    		  
    		
    		createView("sessionForAnswer/sssAnsBasicInfo/sssLocation",sssLocViewDef,"sessionForAnswer/sssAnsBasicInfo");	
    		createView("sessionForAnswer/sssAnsBasicInfo/sssDescription",sssDescViewDef,"sessionForAnswer/sssAnsBasicInfo");
    	
    		//sssPersonInfo page
	        style1 = "orientation";
	        style2 = "even";
	    	createContainer("sessionForAnswer/sssPersonInfo/sssPsSelCt", "orientation");
	    	createContainer("sessionForAnswer/sssPersonInfo/sssPsSelCtchild1", "even", "sessionForAnswer/sssPersonInfo/sssPsSelCt");
	        createContainer("sessionForAnswer/sssPersonInfo/sssPsSelCtchild2", "even", "sessionForAnswer/sssPersonInfo/sssPsSelCt");

	    	createContainer("sessionForAnswer/sssPersonInfo/sssPsBtnCt", "orientation");  	
			createContainer("sessionForAnswer/sssPersonInfo/sssPsBtnCtchild1", "even", "sessionForAnswer/sssPersonInfo/sssPsBtnCt");
	        createContainer("sessionForAnswer/sssPersonInfo/sssPsBtnCtchild2", "even", "sessionForAnswer/sssPersonInfo/sssPsBtnCt");
			
		
	        psRoleListDef=createViewDef().createDropDown().setLabel("Role in session").setAnnotationEnabled(false);
	        psNameListDef=createViewDef().createDropDown().setLabel("Person name").setAnnotationEnabled(false);

	        addPsButtonDef = createViewDef().createButton().setLabel("Add").setStyleCss("faims-blue");
	        newPsButtonDef = createViewDef().createButton().setLabel("New").setStyleCss("faims-blue");
	        
	        psListDef=createViewDef().createList().setLabel("Session person list").setAnnotationEnabled(false).setStyleCss("session-list");

	        createView("sessionForAnswer/sssPersonInfo/sssPersonRole", psRoleListDef,"sessionForAnswer/sssPersonInfo/sssPsSelCtchild1");
	        createView("sessionForAnswer/sssPersonInfo/sssPersonName", psNameListDef,"sessionForAnswer/sssPersonInfo/sssPsSelCtchild2");
	   
	        createView("sessionForAnswer/sssPersonInfo/Add_New_Person", newPsButtonDef,"sessionForAnswer/sssPersonInfo/sssPsBtnCtchild1");
			createView("sessionForAnswer/sssPersonInfo/Add_Person", addPsButtonDef,"sessionForAnswer/sssPersonInfo/sssPsBtnCtchild2");

			createView("sessionForAnswer/sssPersonInfo/sssPersonList", psListDef,"sessionForAnswer/sssPersonInfo");
			
			//sssAnsList page
			saveSssButtonDef = createViewDef().createButton().setLabel("Save Session").setStyleCss("faims-blue");
			newAnsButtonDef = createViewDef().createButton().setLabel("New Answer").setStyleCss("faims-blue");

			//ansSelListDef=createViewDef().createList().setLabel("Selectable Answers").setAnnotationEnabled(false).setStyleCss("session-file-list");
			ansListDef=createViewDef().createList().setLabel("Answers").setAnnotationEnabled(false).setStyleCss("session-file-list");

			createView("sessionForAnswer/sssAnsList/Save_Session", saveSssButtonDef,"sessionForAnswer/sssAnsList");
	        createView("sessionForAnswer/sssAnsList/New_Answer_In_Session", newAnsButtonDef,"sessionForAnswer/sssAnsList");

	        //createView("sessionForAnswer/sssAnsList/sssAnsSelList", ansSelListDef,"sessionForAnswer/sssAnsList");
	        createView("sessionForAnswer/sssAnsList/sssAnswerList", ansListDef,"sessionForAnswer/sssAnsList");

	        refreshTabgroupCSS("sessionForAnswer");

	        onEvent("sessionForAnswer/sssAnsList/New_Answer_In_Session","click","checkNewAnsTime()");
			onEvent("sessionForAnswer/sssAnsList/Save_Session","click","saveSession(\"answer\")");
			onEvent("sessionForAnswer/sssPersonInfo/Add_Person","click","addPersonToSession()");
			onEvent("sessionForAnswer/sssPersonInfo/sssPersonList","click","deletePersonInSession()");
			onEvent("sessionForAnswer/sssPersonInfo/Add_New_Person","click","createPersonRolePage()");
			onEvent("sessionForAnswer/sssPersonInfo","show","refreshPsAndRole()");
			//onEvent("sessionForAnswer/sssAnsList/sssAnsSelList","click","addItemToTargetList(candidate_files_session,\"sessionFile\",null)");
			onEvent("sessionForAnswer/sssAnsList/sssAnswerList","click","checkDelOrView()");

			}
	    
		});
	}
}

createQuesnirList(){
	if(!hasView("questionnaireListAll/questionnaireListInfo/questionnaireListInDB")){
		removeAllViewsAndContainers("questionnaireListAll");
		executeViewTask(new ViewTask() {
    	doTask() { 	
	        style1 = "orientation";
	        style2 = "even";
	    	createContainer("questionnaireListAll/questionnaireListInfo/quesnirLsCt", "orientation");
	    	createContainer("questionnaireListAll/questionnaireListInfo/child1", "even", "questionnaireListAll/questionnaireListInfo/quesnirLsCt");
	        createContainer("questionnaireListAll/questionnaireListInfo/child2", "even", "questionnaireListAll/questionnaireListInfo/quesnirLsCt");

	        searchTextViewDef = createViewDef().createTextField().setLabel("Keyword").setInfoEnabled(true);
	        searchButtonDef = createViewDef().createButton().setLabel("Search").setStyleCss("faims-blue");
	        
	        quesnirListDef=createViewDef().createList().setLabel("Questionnaires").setStyleCss("questionnaire-list");

	        createView("questionnaireListAll/questionnaireListInfo/quesnir_keyword", searchTextViewDef,"questionnaireListAll/questionnaireListInfo/child1");
	        createView("questionnaireListAll/questionnaireListInfo/quesnir_Search", searchButtonDef,"questionnaireListAll/questionnaireListInfo/child2");
	   
	        createView("questionnaireListAll/questionnaireListInfo/questionnaireListInDB", quesnirListDef,"questionnaireListAll/questionnaireListInfo");

	        refreshTabgroupCSS("questionnaireListAll");

	        onEvent("questionnaireListAll","show","loadAllQuesnir()");

	        onEvent("questionnaireListAll/questionnaireListInfo/questionnaireListInDB","click","loadQuesnirInfo()");
	            	}
		});
	}
}

createQuesSel(){
	if(!hasView("questionnaireInfo/surveyQuesnirHidden/surveyQuestionnaireID")){
		removeAllViewsAndContainers("questionnaireInfo");
		executeViewTask(new ViewTask() {
	    doTask() {
	    	hideQuesnirId=createViewDef().createTextField().setLabel("currentQuesnirID").setReadOnly(true);
	    	idTextViewDef = createViewDef().createTextField().setLabel("Questionnaire label").setAttributeName("QuestionnaireID").setAttributeType("measure").setAnnotationEnabled(false).setReadOnly(true);
	    	nameTextViewDef=createViewDef().createTextField().setLabel("Questionnaire name").setAttributeName("QuestionnaireName").setAttributeType("measure").setAnnotationEnabled(false).setReadOnly(true);
	    	typeTextViewDef=createViewDef().createTextField().setLabel("Questionnaire type").setAnnotationEnabled(false).setReadOnly(true);
	    	descTextViewDef=createViewDef().createTextField().setLabel("Questionnaire description").setAttributeName("QuestionnaireDescription").setAttributeType("measure").setAnnotationEnabled(false).setReadOnly(true);
	    	createView("questionnaireInfo/surveyQuesnirHidden/currentQuesnirID",hideQuesnirId,"questionnaireInfo/surveyQuesnirHidden");
	    	createView("questionnaireInfo/surveyQuesnirHidden/surveyQuestionnaireID",idTextViewDef,"questionnaireInfo/surveyQuesnirHidden");
	        createView("questionnaireInfo/surveyQuesnirHidden/surveyQuestionnaireName",nameTextViewDef,"questionnaireInfo/surveyQuesnirHidden");
	        createView("questionnaireInfo/surveyQuesnirHidden/surveyQuestionnaireType",typeTextViewDef,"questionnaireInfo/surveyQuesnirHidden");
	        createView("questionnaireInfo/surveyQuesnirHidden/surveyQuestionnaireDescription", descTextViewDef,"questionnaireInfo/surveyQuesnirHidden");
	    		    	

	        quesSelListDef=createViewDef().createList().setLabel("Questions").setStyleCss("questionQuestionnaire-list");

	        style1 = "orientation";
	        style2 = "even";
	        createContainer("questionnaireInfo/surveyQuestionnaire/quesSelCt", "orientation");
	    	createContainer("questionnaireInfo/surveyQuestionnaire/child1", "even", "questionnaireInfo/surveyQuestionnaire/quesSelCt");
	        createContainer("questionnaireInfo/surveyQuestionnaire/child2", "even", "questionnaireInfo/surveyQuestionnaire/quesSelCt");

	    	searchTextViewDef = createViewDef().createTextField().setLabel("Keyword").setInfoEnabled(true);
	        searchButtonDef = createViewDef().createButton().setLabel("Search").setStyleCss("faims-blue");

			createView("questionnaireInfo/surveyQuestionnaire/ques_keyword", searchTextViewDef,"questionnaireInfo/surveyQuestionnaire/child1");
	        createView("questionnaireInfo/surveyQuestionnaire/ques_Search", searchButtonDef,"questionnaireInfo/surveyQuestionnaire/child2");
	        createView("questionnaireInfo/surveyQuestionnaire/surveyQuestionInQuestionnaire", quesSelListDef,"questionnaireInfo/surveyQuestionnaire");
	    	 
	        refreshTabgroupCSS("questionnaireInfo");
	        //showTabGroup("fieldTrip");
	        onEvent("questionnaireInfo/surveyQuestionnaire/surveyQuestionInQuestionnaire","click","checkPersonAns(null)");
	        onEvent("questionnaireInfo/surveyQuestionnaire/ques_Search","click","searchQuesInCrtQuesnir()");
	   		}
			});
	}
}

/***session for answer***/


/**Functions for session**/
/***Starting from creating a session***/
checkNewAnsTime(){
	sssTime=getFieldValue("sessionForAnswer/sssHidden/sssStartTimetamp");
	sssDateTimeArray=sssTime.split("\\s+");
    sssDate=sssDateTimeArray[0];
   
    //crnTime=getCurrentTime();
    //crnDateArray=crnTime.toString().split("\\s+");
	//crnDate=crnDateArray[0];
	String crnDate=getCurrentDate();
	if(!(sssDate.equals(crnDate))){
		showAlert("alert", "You cannot add new answer to this session \n"+"Do you want to create a new session?", "preNewSss()", "stayInCurrentPage()");
	}	
	else{
		showQuestionnaireList();
	}
}
preNewSss(){
	if(isNull(activeFieldTrip)){
		showAlert("alert", "No active FieldTrip for this session\n"+"Do you want to continue create a new session?", "newSessionForAnswer(\"answer\",null)", "checkGoToFieldTrip()");
	}
	else{
		newSessionForAnswer("answer",null);
	}
}
checkGoToFieldTrip(){
	showAlert("alert", "Do you want to create a fieldTrip?","createFieldTripInfoPage(\"new\")", "stayInCurrentPage()");
}
newSessionForAnswer(String typeflag, ArrayList newAddedPerson){
	createMainSessionPage();
	if(typeflag.equals("answer")){
		introAns=false;
		introPsMark=null;
	}
	//TODO: WHEN INTRO SESSION, ADD PERSONROLE AND PERSON NAME TO LIST
	else{
		introAns=true;
		newPersonForIntro.clear();
		newPersonForIntro.add(newAddedPerson);
	}

	sss_id=null;
	sssLabel=null;
	sssLabelOld=null;
	sss_answer_list.clear();
	sssOriginInfo.clear();
	sssNewInfo.clear();	
	original_sss_answer_list.clear();
	sssAnsRelnOrigin.clear();
	sss_interviewer_list.clear();
	sssConsultantList.clear();
	sssConsultantIdList.clear();
	sssInterviewerList.clear();
	sssPersonRoleandNameList.clear();
	sssOldPsReln.clear();
	sssOldCoslReln.clear();
	sssOldIntvReln.clear();
	quesRecordingType.clear();
	takePoint();
	
	newTabGroup("sessionForAnswer");
	String currentTime=getCurrentTime();
    //currentDateTimeArray=currentTime.toString().split("\\s+");
    //String currentDate=currentDateTimeArray[0];
    String currentDate=getCurrentDate();
    setFieldValue("sessionForAnswer/sssHidden/sssStartTimetamp",currentTime);           

    if (!isNull(currentPosition)){
    	sssLabel="_"+currentPosition.get(1)+"_"+currentPosition.get(2)+"_"+currentDate;
    	setFieldValue("sessionForAnswer/sssAnsBasicInfo/sssLocation",currentPosition.get(0));
    }
    else{
    	sssLabel="_"+"unknownLat"+"_"+"unknownLong"+"_"+currentDate;
    	setFieldValue("sessionForAnswer/sssAnsBasicInfo/sssLocation","GPS not available");
    }
    String tempSssLabelNew=username+sssLabel;
    labelDeduplicate(tempSssLabelNew,"SessionID","sessionForAnswer/sssHidden/sssID",null);
    //setFieldValue("sessionForAnswer/sssAnsBasicInfo/sssID",username+sssLabel);
    
    populateList("sessionForAnswer/sssAnsList/sssAnswerList",sss_answer_list); 
    populateList("sessionForAnswer/sssPersonInfo/sssPersonList",sssPersonRoleandNameList);

    personRoleList.clear();
    personList.clear();
    sssPersonRoleandNameList.clear();

    fetchAll(loadAllRoleQuery, new FetchCallback() {
        	onFetch(result) {
				if (!isNull(result)) {
					personRoleList.addAll(result);
					populateDropDown("sessionForAnswer/sssPersonInfo/sssPersonRole", personRoleList);	
					if(introAns){//if intro ans, add the current person to the list
						for (psRole:personRoleList){
							if(psRole.get(1).equals("consultant")){
								String cosId=psRole.get(0);
								introPsMark=cosId+"_"+newPersonForIntro.get(0).get(0);
								introPs=new ArrayList();
								introPs.add(introPsMark);
								introPs.add(psRole.get(1)+"_"+newPersonForIntro.get(0).get(1));
								sssPersonRoleandNameList.add(introPs);
								populateList("sessionForAnswer/sssPersonInfo/sssPersonList",sssPersonRoleandNameList); 
								break;
							}
							
						}
					}
					fetchAll(loadAllPersonQuery,new FetchCallback() {
			        	onFetch(fetchResult) {
							if (!isNull(fetchResult)) {
								personList.addAll(fetchResult);
								populateDropDown("sessionForAnswer/sssPersonInfo/sssPersonName", personList);	
								
							}	
							else{
						    	showWarning("No person data","No person data is available, please contact the admin");
								return;
							}
			       	 }

			        	onError(message) {
			            	showToast(message);
			        	}
			    	});
				}	
				else{
			    	showWarning("No Role data","No role data is available, please contact the admin");
					return;
				}
       	    }

        	onError(message) {
            	showToast(message);
        	}
    });

	if(!introAns){
		//query exist answers and prepare for answer selection
		//loadAllNonIntroAnsNotInSssQuery
		fetchAll(loadAllNonIntroAnsNotInSssQuery, new FetchCallback() {
        onFetch(result) {
        	candidate_files_session.clear();
        	candidate_files_session.addAll(result);
            //populateList("sessionForAnswer/sssAnsList/sssAnsSelList", candidate_files_session);
        }

	        onError(message) {
	            showToast(message);
	        }
    	});

	}
	else{
		fetchAll(loadAllIntroAnsNotInSssQuery, new FetchCallback() {
        onFetch(result) {
        	candidate_files_session.clear();
        	candidate_files_session.addAll(result);
            //populateList("sessionForAnswer/sssAnsList/sssAnsSelList", candidate_files_session);
        }

	        onError(message) {
	            showToast(message);
	        }
    	});
	}
	
}

refreshPsAndRole(){
	fetchAll(loadAllRoleQuery, new FetchCallback() {
        	onFetch(result) {
				if (!isNull(result)) {
					personRoleList.clear();
					personRoleList.addAll(result);
					populateDropDown("sessionForAnswer/sssPersonInfo/sssPersonRole", personRoleList);	
					fetchAll(loadAllPersonQuery,new FetchCallback() {
			        	onFetch(fetchResult) {
							if (!isNull(fetchResult)) {
								personList.clear();
								personList.addAll(fetchResult);
								populateDropDown("sessionForAnswer/sssPersonInfo/sssPersonName", personList);	
								
							}	
							else{
						    	showWarning("No person data","No person data is available, please contact the admin");
								return;
							}
			       	 }

			        	onError(message) {
			            	showToast(message);
			        	}
			    	});
				}	
				else{
			    	showWarning("No Role data","No role data is available, please contact the admin");
					return;
				}
       	    }

        	onError(message) {
            	showToast(message);
        	}
    });
}
checkDelOrView(){
	current_answer_id=null;
	current_answer_id=getListItemValue();

	if(isNull(current_answer_id)){
		showWarning("Error","Can't find this answer, please contact the admin");
		return;
	}
	showAlert("View File Info","Do you want to view answer info?","loadAnswerInfo()","delAnsInSssAlert(\""+current_answer_id+"\")");
}

delAnsInSssAlert(String toDelId){
	showAlert("Delete File","Do you want to delete this answer from this session?","deleteItemFromTargetList(sss_answer_list,\"sessionFile\",\""+toDelId+"\")","returnToCurrentPage()");
}

addPersonToSession(){
	String selectedRoleID=getFieldValue("sessionForAnswer/sssPersonInfo/sssPersonRole");
	String selectedPersonID=getFieldValue("sessionForAnswer/sssPersonInfo/sssPersonName");
	if((isNull(selectedRoleID))||(isNull(selectedPersonID))){
		showWarning("Invalid data","Invalid role data or person data\n"+"you could be using stale data, please contact the Admin");
		return;
	}
	rolePerson=new ArrayList();
	String psRoleNameId=selectedRoleID+"_"+selectedPersonID;
	rolePerson.add(psRoleNameId);
	String selectedRoleName=null;
	String selectedPersonName=null;
	//check duplication
	for (existPs: sssPersonRoleandNameList){
		if (existPs.get(0).equals(psRoleNameId)){
			showWarning("Duplicate data","This person with this role is already in the list");
			return;
		}
	}

	for(role:personRoleList){
		if(role.get(0).equals(selectedRoleID)){
			selectedRoleName=role.get(1);
			break;
		}
	}
	for(person:personList){
		if(person.get(0).equals(selectedPersonID)){
			selectedPersonName=person.get(1);
			break;
		}

	}
	if((isNull(selectedRoleName))||(isNull(selectedPersonName))){
		showWarning("Invalid data","Invalid role data or person data\n"+"you might be using stale data, please contact the Admin");
		return;
	}
	rolePerson.add(selectedRoleName+"_"+selectedPersonName);

	
	if(selectedRoleName.equals("consultant")){
		checkPersonIntro(selectedPersonID,rolePerson);
	}
	else{
		sssPersonRoleandNameList.add(rolePerson);
		populateList("sessionForAnswer/sssPersonInfo/sssPersonList",sssPersonRoleandNameList);
	}
	

}

deletePersonInSession(){
	String toDelPerson=getListItemValue();
	if(introAns){
		if (toDelPerson.equals(introPsMark)){
			showWarning("Invalid operation","This person can not be deleted from this session");
			return;
		}
	}
	for(psInfo : sssPersonRoleandNameList){
		if(psInfo.get(0).equals(toDelPerson)){
			sssPersonRoleandNameList.remove(psInfo);
			break;
		}
	}
	populateList("sessionForAnswer/sssPersonInfo/sssPersonList",sssPersonRoleandNameList);
}

checkRolesInSession(){
	psRoleSum=new LinkedHashSet();
	psRoleSum.clear();
	sssConsultantList.clear();
	sssInterviewerList.clear();

	for(person : sssPersonRoleandNameList) {
		String [] psInfo=person.get(1).split("_");
		if(psInfo[0].equals("consultant")){
			psRoleSum.add("consultant");
			sssConsultantList.add(psInfo[1]);
			String [] psInSssId=person.get(0).split("_");
			tempPs=new ArrayList();
			tempPs.clear();
			tempPs.add(psInSssId[1]);
			tempPs.add(psInfo[1]);
			sssConsultantIdList.add(tempPs);
		}
		else if(psInfo[0].equals("interviewer")){
			psRoleSum.add("interviewer");
			sssInterviewerList.add(psInfo[1]);
		}
	}
	return psRoleSum;
}
showQuestionnaireList(){
	sssRoleInfo=checkRolesInSession();
	if(!sssRoleInfo.contains("consultant")){
		showWarning("No consultant","No consultant selected, please add consultant");
		return;
	}
	else{
		if(!sssRoleInfo.contains("interviewer")){
			showWarning("No interviewer","No interviewer selected, please add interviewer");
			return;
		}
	}

	current_quesnir_id=null;
	current_question_id=null;
	current_quesnir_name=null;
	current_question_content=null;
	current_answer_file_id=null;
	current_answer_id=null;
	current_question_label=null;
	
	ques_in_current_quesnir.clear();
	survey_list.clear();
	questionnaire_list.clear();
	queslabel_current_quesnir.clear();
	quesRecordingType.clear();
	
	createQuesnirList();
	newTabGroup("questionnaireListAll");
}

loadAllQuesnir(){
	if(!introAns){
		fetchAll(
		//loadAllQuestionnaireQuery,
		loadAllRegQuesnirQuery,
		new FetchCallback() {
        	onFetch(result) {
				if (!isNull(result)) {
					//questionnaire_list.addAll(result);
					populateList("questionnaireListAll/questionnaireListInfo/questionnaireListInDB", result);	
					setFieldValue("questionnaireListAll/questionnaireListInfo/quesnir_keyword","*");
				}	
				else{
			    	showWarning("No questionnaire","No questionnaire is available, please contact the admin");
					return;
				}
       	 }

        	onError(message) {
            	showToast(message);
        	}
    	});
	}
	else{
		fetchAll(
		loadAllIntrQuesnirQuery,
		new FetchCallback() {
        	onFetch(result) {
				if (!isNull(result)) {
					populateList("questionnaireListAll/questionnaireListInfo/questionnaireListInDB", result);	
					setFieldValue("questionnaireListAll/questionnaireListInfo/quesnir_keyword","*");
				}	
				else{
			    	showWarning("No questionnaire","No questionnaire is available, please contact the admin");
					return;
				}
       	 }

        	onError(message) {
            	showToast(message);
        	}
    	});
	}
}

loadQuesnirInfo(){
	current_quesnir_id=getListItemValue();
	
	if(isNull(current_quesnir_id)){
		showWarning("No questionnaire selected","No questionnaire is selected, please select a questionnaire");
		return;
	}
	if(current_quesnir_id.equals("placeholder")){
		showWarning("No questionnaire available","No questionnaire available, please contact the admin");
		return;
	}
	else{
		createQuesSel();
		showTabGroup("questionnaireInfo", current_quesnir_id, new FetchCallback() {
        	onFetch(result) {
	        	setFieldValue("questionnaireInfo/surveyQuesnirHidden/currentQuesnirID",current_quesnir_id);
	        	refreshQuesnirInfo();
				current_quesnir_name=getFieldValue("questionnaireInfo/surveyQuesnirHidden/surveyQuestionnaireName");
				showToast("Loaded questionnaire"+result.getId());  

        	}
        	onError(message) {
            	showToast(message);
        	}
       
   	 	});
		
		
	}
}

refreshQuesnirInfo(){
loadQuesnirTypeQuery="select measure from latestNonDeletedAentValue "+
	"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesnirTypeName') "+
	"and uuid=(select measure from latestNonDeletedAentValue where AttributeID="+
		"(select AttributeID from AttributeKey where AttributeName='QuestionnaireType') "+
		"and uuid='"+current_quesnir_id+"')";

fetchOne(loadQuesnirTypeQuery,new FetchCallback() {
		onFetch(typeResult) {
			if (!isNull(typeResult)) {	
				setFieldValue("questionnaireInfo/surveyQuesnirHidden/surveyQuestionnaireType",typeResult.get(0));
			}
		}	       
		onError(message) {
			showToast(message);
		}
	});

quesnir_ques_reln_query="select uuid from latestNonDeletedArchEntIdentifiers "+
		"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesnirID') "+
		"and measure='"+current_quesnir_id+"' ";

fetchAll(quesnir_ques_reln_query, new FetchCallback() {
	onFetch(relnResult) {
		if(!isNull(relnResult)){
			//showWarning("relnResult","relnResult");
			quesListRelnOrigin=new ArrayList();
			quesListRelnOrigin.clear();
			quesListRelnOrigin.addAll(relnResult);

			queslabel_current_quesnir.clear();
			ques_in_current_quesnir.clear();
			quesRecordingType.clear();
			for(reln:quesListRelnOrigin){
	    		String relnId=reln.get(0);
				loadQuesContentQuery="select qId.measure, qContent.measure "+
		            "from latestNonDeletedAentValue as qId, latestNonDeletedAentValue as qContent "+
                	"where qContent.AttributeID=(SELECT AttributeID FROM AttributeKey WHERE AttributeName='QuesContent') "+
                	"and qId.AttributeID=(SELECT AttributeID FROM AttributeKey WHERE AttributeName='QuestionUuid') "+
                	"and qId.uuid=qContent.uuid "+
                	"and qId.uuid in"+
						"(select uuid from latestNonDeletedArchEntIdentifiers "+
						"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionUuid')) "+
	                	"and qId.measure=(select measure from latestNonDeletedAentValue where AttributeID="+
	                			"(select AttributeID from AttributeKey where AttributeName='QuesID') "+
	                			"and uuid='"+relnId+"')";

				fetchOne(loadQuesContentQuery,new FetchCallback() {
					onFetch(quesResult) {
						if (!isNull(quesResult)) {			
							//showWarning("quesResult","quesResult");
			   				ques_in_current_quesnir.add(quesResult);
							populateList("questionnaireInfo/surveyQuestionnaire/surveyQuestionInQuestionnaire", ques_in_current_quesnir);

							loadQuesLabelQuery="select uuid,measure from latestNonDeletedAentValue "+
	                		"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionID') "+
	                		"and uuid=(select measure from latestNonDeletedAentValue where AttributeID="+
	                			"(select AttributeID from AttributeKey where AttributeName='QuesID') "+
	                			"and uuid='"+relnId+"')";

	                		quesRecordingTypeQuery="select measure from latestNonDeletedAentValue where "+
							"AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesPropDefName') "+
							"and uuid =(select measure from latestNonDeletedAentValue "+
							"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesPropDefID') "+
							"and uuid=(select uuid from latestNonDeletedArchEntIdentifiers "+
							"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesUuid') "+
							"and measure ='"+quesResult.get(0)+"'))";
							//showWarning("quesid",quesResult.get(0));
	        				fetchOne(loadQuesLabelQuery,new FetchCallback() {
									onFetch(labelResult) {
										if (!isNull(labelResult)) {	
											//showWarning("labelResult","labelResult");
											queslabel_current_quesnir.add(labelResult);
										}
									}
							       
									onError(message) {
										showToast(message);
									}
								});
	        				fetchOne(quesRecordingTypeQuery,new FetchCallback() {
									onFetch(recordingType) {
										if (!isNull(recordingType)) {	
											recording=new ArrayList();
											recording.add(quesResult.get(0));
											recording.add(recordingType.get(0));
											//showWarning("recordingType",recordingType.get(0));
											quesRecordingType.add(recording);
										}
									}
							       
									onError(message) {
										showToast(message);
									}
								});
							}
						else{
								showWarning("Out-of-date Data","Some questions may not be using anymore\n"+"Please contact the admin for further information");
							}
					}
								       
					onError(message) {
						showToast(message);
						}
					});	
				}
			}
		else{
			showWarning("Out-of-date Data","Some questions in this questionnaire may not be using anymore\n"+"Please contact the admin for further information");
		}
		
	}
});
}

searchQuesInCrtQuesnir(){
	String quesKeyword=null;

	quesKeyword=getFieldValue("questionnaireInfo/surveyQuestionnaire/ques_keyword");
	//for this search, we first check if the database updated, then search the result in the local arraylist
	//step 1: get the latest db record
	quesKeyword.trim();

	//refreshQuesnirInfo();
	//step 2: search in the local arraylist
	if(!(isNull(quesKeyword) || quesKeyword.equals("*"))){
		//showWarning("quesSearch","\\b*"+quesKeyword+"\\b*");
		Pattern quesSearch = Pattern.compile(quesKeyword);
		//showWarning("quesSearch","quesSearch");
		tempMatchQues=new ArrayList();
		tempMatchQues.clear();
		//showWarning("tempMatchQues","tempMatchQues");
		for(tempQues: ques_in_current_quesnir){
			String tempQuesCntnt= tempQues.get(1);
			Matcher quesSearchMatcher=quesSearch.matcher(tempQuesCntnt);
			if(quesSearchMatcher.find()){
				tempMatchQues.add(tempQues);
			}
		}
		populateList("questionnaireInfo/surveyQuestionnaire/surveyQuestionInQuestionnaire", tempMatchQues);
	}
	else{
		populateList("questionnaireInfo/surveyQuestionnaire/surveyQuestionInQuestionnaire", ques_in_current_quesnir);
	}	
}

checkPersonAns(String tempQuesId){
	if(tempQuesId==null){
		quesId=getListItemValue();
	}
	else
	{
		quesId=tempQuesId;
	}
	//showWarning("checkPersonAns",tempQuesId);
	//showWarning("quesId",quesId);
	ansedPs=new ArrayList();
	ansedPs.clear();
	tempAnsQues=new ArrayList();
	tempAnsQues.clear();
	String [] consultantList =new String [sssConsultantIdList.size()];
	for (i=0;i<sssConsultantIdList.size();i++){	
		consultantList[i]=sssConsultantIdList.get(i).get(0);
	}
	StringBuilder sb=new StringBuilder();
	sb.append("(");
	for (String s: consultantList){
		String str="'"+s+"'";
		if(sb.length()>1){
			sb.append(",");
		}
		sb.append(str);
	}
	sb.append(")");
	String consultantListClause=sb.toString();
	loadPersonAnswerQuery="select measure from latestNonDeletedAentValue "+
		"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionID') "+
		"and uuid in (select uuid from AentReln where RelationshipID in (select RelationshipID from AEntReln where AEntReln.uuid in "+
			"(select uuid from latestNonDeletedAentValue "+
				"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionID') "+
				"and uuid in (select uuid from AentReln where RelationshipID "+
					"in (select RelationshipID from AEntReln where AEntReln.uuid IN "+consultantListClause+
						" AND RelationshipID in (select RelationshipID from latestNonDeletedRelationship "+
							"where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Session and Consultant') "+
							"and latestNonDeletedRelationship.Deleted IS NULL)))) "+
		"AND RelationshipID in (select RelationshipID from latestNonDeletedRelationship "+
			"where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Answer and Session') "+
			"and latestNonDeletedRelationship.Deleted IS NULL)))";
			fetchAll(loadPersonAnswerQuery,new FetchCallback() {
		        onFetch(result) {
		        	Boolean rep=false;
		        	tempAnsQues.addAll(result);
		        	if(!isNull(tempAnsQues)){	 
		        		for (ansQues :tempAnsQues){
		        			if (ansQues.get(0).equals(quesId))
		        			{	
		        				rep=true;
		        				checkDuplicateAns(true, tempQuesId);
		        				break;
		        			}
		        		}
		        		if(!rep){
		        			loadAnswerFromQuesInQuesnir(tempQuesId);
		        		}       		
					}
					else{
						loadAnswerFromQuesInQuesnir(tempQuesId);
					}
		        }
		    });
}

checkDuplicateAns(Boolean dupOrNot, String tempQuesId){
	if(dupOrNot){
		//showWarning("checkDuplicateAns",tempQuesId);
		if(sssConsultantIdList.size()==1){
			showAlert("alert", sssConsultantIdList.get(0).get(1)+" has already answered this question \n"+"Do you still want to continue?", "loadAnswerFromQuesInQuesnir(\""+tempQuesId+"\")", "stayInCurrentPage()");
		}
		else{
			showAlert("alert", "Some consultants have already answered this question \n"+"Do you still want to continue?", "loadAnswerFromQuesInQuesnir(\""+tempQuesId+"\")", "stayInCurrentPage()");
		}
	}
	else{
		loadAnswerFromQuesInQuesnir(tempQuesId);
	}
}

checkPersonIntro(String personID, ArrayList toAddPerson){
	String person_id=personID;
	checkPsIntrSssQuery="select uuid,measure from latestNonDeletedArchEntIdentifiers "+
			"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionID') "+
			"and uuid in ( select uuid from AentReln "+
				"where RelationshipID in(select RelationshipID from AentReln "+
					"where RelationshipID in (select RelationshipID from latestNonDeletedRelationship "+
						"where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Answer and Session' ) "+
						"and latestNonDeletedRelationship.Deleted IS NULL) "+
			"and uuid in (select uuid from latestNonDeletedAentValue "+
				"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionnaireID') "+
				"and latestNonDeletedAentValue.measure in(select uuid from latestNonDeletedAentValue "+
					"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionnaireType') "+
					"and measure=(select uuid from latestNonDeletedAentValue "+
						"where AttributeID= (select AttributeID from AttributeKey "+
							"where AttributeName='QuesnirTypeName') and measure = 'Introductory'))))) "+
			"and uuid in (select measure from latestNonDeletedArchEntIdentifiers "+
				"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionIDforPerson') "+
				"and uuid in (select uuid from latestNonDeletedAentValue "+
					"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionPersonRole') "+
					"and measure=(select uuid from latestNonDeletedAentValue "+
						"where AttributeID=(select AttributeID from AttributeKey where AttributeName='PersonRoleName') "+
						"and measure='consultant') "+
			"and uuid in (select uuid from latestNonDeletedAentValue "+
				"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionPersonName') "+
				"and measure ='"+person_id+"')));";
	
	fetchAll(checkPsIntrSssQuery,new FetchCallback() {
						        	
		onFetch(result) {					        	
			if(isNull(result)){
				String toAddPsIdInfo=toAddPerson.get(0);
				String toAddPsInfo=toAddPerson.get(1);

				showAlert("alert", "This person has not answered introductory questionnaire \n"+"Do you still want to add this person?", 
					"addPsToSssConfirm(\""+toAddPsIdInfo+"\", \""+toAddPsInfo+"\")", "addPersonIntro(\""+person_id+"\")");
			}
			else
			{	
				sssPersonRoleandNameList.add(toAddPerson);
				populateList("sessionForAnswer/sssPersonInfo/sssPersonList",sssPersonRoleandNameList);

			}
		
        }

        onError(message) {
        	Log.e("error",message);
            showToast(message);
           
        }
	});

}

addPsToSssConfirm(String toAddPersonID, String toAddPersonName){
	toAddPersonTemp=new ArrayList();
	toAddPersonTemp.clear();
	toAddPersonTemp.add(toAddPersonID);
	toAddPersonTemp.add(toAddPersonName);
	sssPersonRoleandNameList.add(toAddPersonTemp);
	populateList("sessionForAnswer/sssPersonInfo/sssPersonList",sssPersonRoleandNameList);
}

addPersonIntro(String toAddIntroPersonId){
	showAlert("alert", "Do you want to add introductory answer for this person?", "addPersonIntroAnswer(\""+toAddIntroPersonId+"\")", "stayInCurrentPage()");
}

addPersonIntroAnswer(String toAddIntroPersonId){
	loadPersonInfo("sss",toAddIntroPersonId);
}
/***session position***/
takePoint() {
	currentPosition.clear();
    Object position = getGPSPosition();
    //showWarning("tempTest","position");

    if (position != null ) {
        latitude = position.getLatitude();
        //showWarning("latitude","latitude");
        longitude = position.getLongitude();
        //showWarning("longitude","longitude"); 
        //ArrayList currentPosition=new ArrayList();
	    String latitudeString=latitude.toString();
	    String longitudeString=longitude.toString();
	    String currentPositionLong="lat:"+latitudeString+"long:"+longitudeString;
	    String latitudeShort=latitudeString.substring(0,6);
	    String longitudeShort=longitudeString.substring(0,6);
	    currentPosition.clear();
	    currentPosition.add(currentPositionLong);
	    currentPosition.add(latitudeShort);
	    currentPosition.add(longitudeShort);
	    //return currentPosition;

    } else {
        showToast("GPS Not initialized");
        //return null;
    }
    //return null;
}

showSession(){
	showTabGroup("sessionGroup");
}
/**Emergency session preparation**/
emrSssInfo=new HashMap();
emrAnsInfo=new HashMap();
emrPsInfo=new ArrayList();
Boolean emrIveExist=false;
//Boolean emrSss=false;
emrSssPrep(){
	/***init sss vars***/
	sss_id=null;
	sssLabel=null;
	sssLabelOld=null;
	sss_answer_list.clear();
	sssOriginInfo.clear();
	sssNewInfo.clear();	
	original_sss_answer_list.clear();
	sssAnsRelnOrigin.clear();
	sss_interviewer_list.clear();
	sssConsultantList.clear();
	sssConsultantIdList.clear();
	sssInterviewerList.clear();
	sssPersonRoleandNameList.clear();
	sssOldPsReln.clear();
	sssOldCoslReln.clear();
	sssOldIntvReln.clear();
	quesRecordingType.clear();
	emrSssInfo.clear();
    emrPsInfo.clear();
    emrIveExist=false;
	/***basic info for a session***/
	takePoint();
	currentDate=getCurrentDate();
	emrSssStartTime=getCurrentTime();
	emrSssName="EmrSss"+currentDate;
	emrSssPosition=null;
	emrSssCnsltntName="UnspecilizedCnsltnt"+emrSssStartTime.replaceAll("[^0-9]","");
	emrSssCnsltntId="0000000000000000010";
	emrSssIntvName=username+emrSssStartTime.replaceAll("[^0-9]","");
	emrSssIntvId=userid;
	emrSssLabel=null;
	checkPsInDbQuery="select uuid from latestNonDeletedAentValue where AttributeID=(select AttributeID from AttributeKey where AttributeName='PersonName') "+
			"and measure='"+username+"'";
	fetchOne(checkPsInDbQuery,new FetchCallback() {
		onFetch(result) {
			if (isNull(result)) {	
				emrIveExist=true;
			}

			if (!isNull(currentPosition)){
				emrSssLabel=username+"_"+currentPosition.get(1)+"_"+currentPosition.get(2)+"_"+currentDate;
				emrSssPosition=currentPosition.get(0);
				emrSssInfo.put("sssLoc", emrSssPosition);
			//setFieldValue("sessionForAnswer/sssAnsBasicInfo/sssLocation",currentPosition.get(0));
			}
			else{
				emrSssLabel=username+"_"+"unknownLat"+"_"+"unknownLong"+"_"+currentDate;
				emrSssPosition="GPS not available";
				emrSssInfo.put("sssLoc", emrSssPosition);
			//setFieldValue("sessionForAnswer/sssAnsBasicInfo/sssLocation","GPS not available");
			}
			emrSssInfo.put("sssId", emrSssLabel);
		}
		onError(message) {
			showToast(message);
		}
	});
	
    
	loadCnsltntRoleIdQuery="select uuid from latestNonDeletedAentValue "+
	"where AttributeID=(select AttributeID from AttributeKey where AttributeName='PersonRoleName') "+
	"and measure ='consultant'";

	loadItvwrRoleIdQuery="select uuid from latestNonDeletedAentValue "+
	"where AttributeID=(select AttributeID from AttributeKey where AttributeName='PersonRoleName') "+
	"and measure ='interviewer'";

	fetchOne(loadCnsltntRoleIdQuery,new FetchCallback() {
		onFetch(result) {
			if (!isNull(result)) {	
				emrSssCnsltnt=result.get(0)+"_"+emrSssCnsltntName;
				newPsInEmrSss=new ArrayList();
				newPsInEmrSss.add(result.get(0));
				newPsInEmrSss.add(emrSssCnsltntId);
				newPsInEmrSss.add(emrSssCnsltntName);
				emrPsInfo.add(newPsInEmrSss);
				//showWarning("emrPsInfo.add(newPsInEmrSss);",result.get(0));
				//sssPersonRoleandNameList.add(emrSssCnsltnt);
			}
			fetchOne(loadItvwrRoleIdQuery,new FetchCallback() {
				onFetch(result) {
					if (!isNull(result)) {	
						emrSssItvwr=result.get(0)+"_"+emrSssIntvId+"_"+emrSssIntvName;
						newPsInEmrSss=new ArrayList();
						newPsInEmrSss.add(result.get(0));
						newPsInEmrSss.add(emrSssIntvId);
						newPsInEmrSss.add(emrSssIntvName);
						emrPsInfo.add(newPsInEmrSss);
						//showWarning("emrPsInfo.add(InewPsInEmrSss);",result.get(0));
						//sssPersonRoleandNameList.add(emrSssItvwr);
					}
				}
				onError(message) {
					showToast(message);
				}
			});
		}
		onError(message) {
			showToast(message);
		}
	});   
	

	

	emrSssInfo.put("sssName", emrSssName);
	emrSssInfo.put("sssSttTime", emrSssStartTime);
	
	//showWarning("emrSssInfo.put(","emrSssInfo.put(");
	/***init ans vars***/
	selected_answer_interviewer.clear();
	selected_answer_interviewee.clear();
	
	answerInfoOriginal.clear();
	answerInfoNew.clear();
	
	files_in_current_ques.clear();
	file_and_fileType.clear();
	files_origin.clear();
	
	answer_id=null;
	current_answer_file_id=null;
	current_answer_id=null;
	answerFile=true;
	ansLabelFstPart=null;
	ansLabelSndPart=null;
	ansLabelMidPart=null;
	tempAnsLabel=null;
	
	dupAnsLblChange=false;
	dupFileLblChange=false;
	dupAnsLblInfo.clear();
	dupFileLblInfo.clear();
	hiddenAnsInfo.clear();
	emrAnsInfo.clear();

	/***basic info for answer***/
	emrAnsLabel="emergencyQuestion"+"_Answer_"+emrSssCnsltntName+currentDate;
	emrAnsStrtTime=emrSssStartTime;
	/*
	emrAnsLabelDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
		"where AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerLabel') "+
		"and (measure = '"+emrAnsLabel+"' or measure like '"+emrAnsLabel+"(%)')";
	*/
	emrQuesNirIDQuery="select uuid from latestNonDeletedAentValue "+
	"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionnaireType') "+
	"and measure =(select uuid from latestNonDeletedAentValue "+
		"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesnirTypeName') "+
		"and measure='Emergency')";

	emrQuesIDQuery="select qId.measure from latestNonDeletedAentValue as qId, latestNonDeletedAentValue as qProp "+
	"where qId.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesUuid') "+
	"and qProp.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesPropDefID') "+
	"and qId.uuid=qProp.uuid "+
	"and qProp.measure = (select qPropDef.uuid from latestNonDeletedAentValue as qPropDef "+
						"where qPropDef.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesPropDefName') and qPropDef.measure='EmergencyQuestion')";
	fetchOne(emrQuesNirIDQuery,new FetchCallback() {
		onFetch(emrQuesNirResult) {
			if (!isNull(emrQuesNirResult)) {	
				emrAnsInfo.put("quesnir_id",emrQuesNirResult.get(0));
				//showWarning("quesnir_id.put(","quesnir_id.put(");
			}
			else{
				emrAnsInfo.put("quesnir_id","0000000000000000000");
			}
		}
		onError(message) {
			showToast(message);
		}
	});   

	fetchOne(emrQuesIDQuery,new FetchCallback() {
		onFetch(emrQuesResult) {
			if (!isNull(emrQuesResult)) {
				emrAnsInfo.put("ques_id",emrQuesResult.get(0));
				//showWarning("ques_id.put(",emrQuesResult.get(0));
			}
			else{
				emrAnsInfo.put("ques_id","0000000000000000001");
			}
		}
		onError(message) {
			showToast(message);
		}
	});         					

	emrAnsInfo.put("start_time",emrAnsStrtTime);
	emrAnsInfo.put("label",emrAnsLabel);
	newFile("answer","emr");
	attachAudioToField("file/fileInfo/audioFileContent");
}

saveEmrFile(String ref, String fileListViewRef, String tabGroupRef, String fileType){
	if(isNull(getFieldValue(fileListViewRef))){	
		showWarning("Warning","File not recorded");
		return;
	}
	else{
		saveTabGroup(tabGroupRef,current_answer_file_id, null, null, new SaveCallback() {
		onSave(uuid, newRecord) {
			current_answer_file_id = uuid;
			//showWarning("current_answer_file_id",current_answer_file_id);
			if (newRecord) {	
				//showWarning("newRecord","newRecord");	
				newFile=new ArrayList();
				newFile.add(current_answer_file_id);
				newFile.add(getFieldValue(ref));
				files_in_current_ques.add(newFile);
							
				//Adding new file and file type for changing fileID
				newFileType=new ArrayList();
				newFileType.add(current_answer_file_id);
				newFileType.add(fileType);
				file_and_fileType.add(newFileType);

				if(dupFileLblChange && !isNull(dupFileLblInfo)){
					newLabel=dupFileLblInfo.get(1);
					entityId=dupFileLblInfo.get(0);
					attributes = createAttributeList();
					attributes.add(createEntityAttribute("FileID", null, null, newLabel, null));
					saveArchEnt(entityId, "File", null, attributes);
					dupFileLblChange=false;
					dupFileLblInfo.clear();
				}	
				saveNewEmrAnswer();
				cancelTabGroup(tabGroupRef, true);
			}
		}
		onError(message) {
			showWarning("error",message);
		}  
		});
	}
}
saveNewEmrAnswer(){
	attributes = createAttributeList();	
	attributes.add(createEntityAttribute("AnswerQuestionnaireID", null, null, emrAnsInfo.get("quesnir_id"), null));
	attributes.add(createEntityAttribute("AnswerQuestionID", null, null, emrAnsInfo.get("ques_id"), null));
	attributes.add(createEntityAttribute("AnswerLabel", null, null, emrAnsInfo.get("label"), null));
	attributes.add(createEntityAttribute("AnswerStartTime", null, null, emrAnsInfo.get("start_time"), null));

	saveArchEnt(null, "AnswerToQuestionnaire", null, attributes, new SaveCallback(){
		onSave(uuid, newRecord){
			answer_id = uuid;
			//showWarning("answer_id 1",answer_id);
			current_answer_id=uuid;
			if (newRecord) {
					for(file : files_in_current_ques){
						//showWarning("file 1",file.get(0));
						saveEntitiesToRel("Answer and File",answer_id,file.get(0));		
					}
					
					newAnswer=new ArrayList();
					newAnswer.add(answer_id);
					newAnswer.add(emrAnsInfo.get("label"));
					sss_answer_list.add(newAnswer);
					
					if(dupAnsLblChange && !isNull(dupAnsLblInfo)){
						newLabel=dupAnsLblInfo.get(1);
						ansEntityId=dupAnsLblInfo.get(0);
						attributes = createAttributeList();
						attributes.add(createEntityAttribute("AnswerLabel", null, null, newLabel, null));
						saveArchEnt(ansEntityId, "AnswerToQuestionnaire", null, attributes);
						dupAnsLblChange=false;
						dupAnsLblInfo.clear();
					}
					
					showToast("new emergency answer created");
					saveEmrSss();
				}
		}
		onError(message) {
			showWarning("error on saveNewEmrAnswer1",message);
		}  
	});
}

saveEmrSss(){
	sssDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
		"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionID') "+
		"and (measure = '"+ emrSssInfo.get("sssId")+"' or measure like '"+ emrSssInfo.get("sssId")+"(%)')";
	fetchAll(sssDuplicateQuery,new FetchCallback() {
		onFetch(dupResult) {
			if(!isNull(dupResult)){
				tempEmrSssLabel = makeLabel(dupResult, emrSssInfo.get("sssId"),"Session","SessionID");
				emrSssInfo.remove("sssId");
				emrSssInfo.put("sssId", tempEmrSssLabel);
				//showWarning("emrSssInfo.put(sssId",tempEmrSssLabel);
			}
			attributes = createAttributeList();

			attributes.add(createEntityAttribute("SessionID", null, null, emrSssInfo.get("sssId"), null));
			attributes.add(createEntityAttribute("SessionName", null, null, emrSssInfo.get("sssName"), null));
			attributes.add(createEntityAttribute("SessionStartTimestamp", null, null, emrSssInfo.get("sssSttTime"), null));
			attributes.add(createEntityAttribute("SessionLocation", null, null, emrSssInfo.get("sssLoc"), null));
			attributes.add(createEntityAttribute("SessionDescription", null, null, "Emergency session", null));

			saveArchEnt(null, "Session", null, attributes, new SaveCallback(){
				onSave(uuid, newRecord){
					sss_id = uuid;
					for(answer:sss_answer_list){
						saveEntitiesToRel("Answer and Session",sss_id,answer.get(0));
					}
					saveEmrPsInSss(sss_id);
					autoSaveSession("emr");
					showToast("New emergency session created");
					saveNewSssToFieldTrip(sss_id);
				}
				onError(message) {
					showWarning("error on saveEmrSss",message);
				}  
			});
			//emrSssAttributes.add(createEntityAttribute("SessionID",null,null,emrSssLabel,null));
		}  
	});
}

saveEmrPsInSss(String sessionId){
	//save new consultant
	sssPersonRoleNameListOrigin.clear();
	psAttributes=createAttributeList(); 
	psAttributes.add(createEntityAttribute("PersonID", null, null, emrPsInfo.get(0).get(2)+"_0000-00-00", null));
	psAttributes.add(createEntityAttribute("PersonName", null, null, emrPsInfo.get(0).get(2), null));
	psAttributes.add(createEntityAttribute("PersonDOB", null, null, "0000-00-00", null));
	psAttributes.add(createEntityAttribute("PersonRole", null, null, emrPsInfo.get(0).get(0), null));
	psAttributes.add(createEntityAttribute("PersonPhotoDescription", null, null, "Emergency session person", null));
	psAttributes.add(createEntityAttribute("PersonIntroQuenirDesp", null, null, "Emergency session person", null));
	//showWarning("psAttributes", "1."+emrPsInfo.get(0).get(2)+"_0000-00-00\n"+"2."+emrPsInfo.get(0).get(2)+"\n"+"4."+ emrPsInfo.get(0).get(0)+"\n");
	saveArchEnt(null, "Person", null, psAttributes, new SaveCallback() {
		onSave(psUuid,newRecord) {
			newPsInEmrSss=new ArrayList();
			newPsInEmrSss.add(emrPsInfo.get(0).get(0));
			//showWarning("newPsInEmrSss","roleid:"+emrPsInfo.get(0).get(0));
			newPsInEmrSss.add(psUuid);
			//showWarning("newPsInEmrSss","psuuid:"+psUuid);
			newPsInEmrSss.add(emrPsInfo.get(0).get(2));
			//showWarning("newPsInEmrSss","psName:"+(emrPsInfo.get(0).get(2));
			emrPsInfo.set(0, newPsInEmrSss);
			//showWarning("emrPsInfo.set(0)","psUuid:"+psUuid);
			sssPsCnslAttributes= createAttributeList();
			sssPsCnslAttributes.add(createEntityAttribute("SessionIDforPerson", null, null, sessionId, null));
			sssPsCnslAttributes.add(createEntityAttribute("SessionPersonName", null, null, emrPsInfo.get(0).get(1), null));
			sssPsCnslAttributes.add(createEntityAttribute("SessionPersonRole", null, null, emrPsInfo.get(0).get(0), null));
			//showWarning("sssPsCnslAttributes",sessionId+":"+emrPsInfo.get(0).get(1)+":"+emrPsInfo.get(0).get(0));
			saveArchEnt(null, "SessionPerson", null, sssPsCnslAttributes);
			//showWarning("SessionPerson","SessionPerson");
			saveEntitiesToRel("Session and Consultant",sessionId,emrPsInfo.get(0).get(1));
			//showWarning("saveEntitiesToRel","saveEntitiesToRel");
			sssPersonRoleNameListOrigin.add(emrPsInfo.get(0).get(0)+"_"+emrPsInfo.get(0).get(1));
			//showWarning("sssPersonRoleNameListOrigin","sssPersonRoleNameListOrigin");

			//checkPsInDbQuery="select uuid from latestNonDeletedAentValue where AttributeID=(select AttributeID from AttributeKey where AttributeName='PersonName') "+
			//"and measure='"+username+"'";
			
			//fetchOne(checkPsInDbQuery,new FetchCallback() {
				//onFetch(result) {
			if(!emrIveExist){
				iPsAttributes=createAttributeList(); 
				iPsAttributes.add(createEntityAttribute("PersonID", null, null, username+"_0000-00-00", null));
				iPsAttributes.add(createEntityAttribute("PersonName", null, null, username, null));
				iPsAttributes.add(createEntityAttribute("PersonDOB", null, null, "0000-00-00", null));
				iPsAttributes.add(createEntityAttribute("PersonRole", null, null, emrPsInfo.get(1).get(0), null));
				iPsAttributes.add(createEntityAttribute("PersonPhotoDescription", null, null, "Emergency session person", null));
				iPsAttributes.add(createEntityAttribute("PersonIntroQuenirDesp", null, null, "Emergency session person", null));
				//showWarning("iPsAttributes", "1."+username+"_0000-00-00\n"+"2."+username+"\n"+"4."+ emrPsInfo.get(1).get(0)+"\n");
				saveArchEnt(null, "Person", null, iPsAttributes, new SaveCallback() {
					onSave(iPsUuid,newRecord) {
						newIPsInEmrSss=new ArrayList();
						newIPsInEmrSss.add(emrPsInfo.get(1).get(0));
						newIPsInEmrSss.add(iPsUuid);
						newIPsInEmrSss.add(username);
						emrPsInfo.set(1, newIPsInEmrSss);
						//sssPersonRoleNameListOrigin.clear();
						sssPsRoleAttributes= createAttributeList();
						sssPsRoleAttributes.add(createEntityAttribute("SessionIDforPerson", null, null, sessionId, null));
						sssPsRoleAttributes.add(createEntityAttribute("SessionPersonName", null, null, emrPsInfo.get(1).get(1), null));
						sssPsRoleAttributes.add(createEntityAttribute("SessionPersonRole", null, null, emrPsInfo.get(1).get(0), null));
						saveArchEnt(null, "SessionPerson", null, sssPsRoleAttributes);
						saveEntitiesToRel("Session and Interviewer",sessionId,emrPsInfo.get(1).get(1));
						sssPersonRoleNameListOrigin.add(emrPsInfo.get(1).get(0)+"_"+emrPsInfo.get(1).get(1));
						emrIveExist=false;
					}  
				});
			}
			else{
				newPsInEmrSss=new ArrayList();
				newPsInEmrSss.add(emrPsInfo.get(1).get(0));
				newPsInEmrSss.add(result.get(0));
				newPsInEmrSss.add(username);
				emrPsInfo.set(1, newPsInEmrSss);
				//sssPersonRoleNameListOrigin.clear();
				sssPsRoleAttributes= createAttributeList();
				sssPsRoleAttributes.add(createEntityAttribute("SessionIDforPerson", null, null, sessionId, null));
				sssPsRoleAttributes.add(createEntityAttribute("SessionPersonName", null, null, emrPsInfo.get(1).get(1), null));
				sssPsRoleAttributes.add(createEntityAttribute("SessionPersonRole", null, null, emrPsInfo.get(1).get(0), null));
				saveArchEnt(null, "SessionPerson", null, sssPsRoleAttributes);
				saveEntitiesToRel("Session and Interviewer",sessionId,emrPsInfo.get(1).get(1));
				sssPersonRoleNameListOrigin.add(emrPsInfo.get(1).get(0)+"_"+emrPsInfo.get(1).get(1));
			}
				//}
				
			//});   
		}
	});
	//check if the current interviwer exisits in the db
	
	
}
loadSessionList(String typeflag){
	fetchAll(loadAllSessionIDQuery, new FetchCallback() {
        onFetch(result) {
        	switch(typeflag){
        	case "session":
        		populateList("sessionGroup/sessionInfo/sessionList", result);
        		break;
        	case "answer":
        		populateList("control/survey_control/surveyList", result);
        		break;
        	}
            
        }

        onError(message) {
            showToast(message);
        }
    });
}
//TODO: DEAL WITH THE EMERGENCY SESSION READING BACK
loadSessionInfo(String typeFlag){
	switch (typeFlag){
	case "answer":
		sss_id=getListItemValue();
		if(isNull(sss_id)){
			showWarning("Invalid session","No session is selected or session is not available");
			return;
		}
		createMainSessionPage();
		loadAnswerForSessionQuery="select uuid,measure from latestNonDeletedAentValue "+ 
				"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerLabel') "+
				"and uuid in "+
	 			"(select uuid from AentReln where RelationshipID in "+
				"(select RelationshipID from AEntReln where AEntReln.uuid="+sss_id+" "+
	 			"AND RelationshipID in "+
				"(select RelationshipID from latestNonDeletedRelationship where RelnTypeID="+
	 			"(select RelnTypeID from RelnType where RelnTypeName='Answer and Session') "+
				"and latestNonDeletedRelationship.Deleted IS NULL)))";
	
		loadAnsSssRelnQuery="select RelationshipID, uuid from latestNonDeletedAentReln where uuid <> '"+sss_id+
		"' and RelationshipID in (select RelationshipID from latestNonDeletedAentReln where uuid='"+sss_id+
			"' and RelationshipID in(select RelationshipID from latestNonDeletedRelationship "+
				"where RelnTypeID= (select RelnTypeID from RelnType where RelnTypeName='Answer and Session')"+
				"and latestNonDeletedRelationship.Deleted IS NULL))";

		//Query out the reln id of person and person roles in a session
		loadSssPersonRelnQuery="select uuid from latestNonDeletedArchEntIdentifiers "+
		"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionIDforPerson') "+
		"and measure='"+sss_id+"' ";

		loadSssConslRelnQuery="select RelationshipID, uuid from latestNonDeletedAentReln where uuid <>'"+sss_id+"' "+
		"and RelationshipID in (select RelationshipID from latestNonDeletedAentReln where uuid='"+sss_id+
			"' and RelationshipID in (select RelationshipID from latestNonDeletedRelationship "+
				"where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Session and Consultant') "+
				"and latestNonDeletedRelationship.Deleted IS NULL))";

		loadSssIntvRelnQuery="select RelationshipID, uuid from latestNonDeletedAentReln where uuid <>'"+sss_id+"' "+
		"and RelationshipID in (select RelationshipID from latestNonDeletedAentReln where uuid='"+sss_id+
			"' and RelationshipID in (select RelationshipID from latestNonDeletedRelationship "+
				"where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Session and Interviewer') "+
				"and latestNonDeletedRelationship.Deleted IS NULL))";


		loadSssPsRelnQuery="select RelationshipID, uuid from latestNonDeletedAentReln where uuid <>'"+sss_id+"' "+
		"and RelationshipID in (select RelationshipID from latestNonDeletedAentReln where uuid='"+sss_id+
			"' and RelationshipID in (select RelationshipID from latestNonDeletedRelationship "+
				"where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Session and Person') "+
				"and latestNonDeletedRelationship.Deleted IS NULL))";
		
		fetchAll(loadAnsSssRelnQuery, new FetchCallback() {
	        onFetch(result) {
	        	sssAnsRelnOrigin.clear();
	        	sssAnsRelnOrigin.addAll(result);
	        }
	        onError(message) {
	            showToast(message);
	        }
	    });

		fetchAll(loadSssConslRelnQuery, new FetchCallback() {
	        onFetch(result) {
	        	sssOldCoslReln.clear();
	        	sssOldCoslReln.addAll(result);
	        }
	        onError(message) {
	            showToast(message);
	        }
	    });
	    fetchAll(loadSssIntvRelnQuery, new FetchCallback() {
	        onFetch(result) {
	        	sssOldIntvReln.clear();
	        	sssOldIntvReln.addAll(result);
	        }
	        onError(message) {
	            showToast(message);
	        }
	    });
	    fetchAll(loadSssPsRelnQuery, new FetchCallback() {
	        onFetch(result) {
	        	sssOldPsReln.clear();
	        	sssOldPsReln.addAll(result);
	        }
	        onError(message) {
	            showToast(message);
	        }
	    });
	    
		showTabGroup("sessionForAnswer", sss_id, new FetchCallback() {
	        onFetch(result) {
				sssOriginInfo.clear();
	        	sssLabelOld=getFieldValue("sessionForAnswer/sssHidden/sssID");
	        	sssOriginInfo.add(sssLabelOld);
	        	//sssOriginInfo.add(getFieldValue("sessionForAnswer/sssAnsBasicInfo/sssName"));
	        	//sssOriginInfo.add(getFieldValue("sessionForAnswer/sssHidden/sssStartTimetamp"));
	        	//sssOriginInfo.add(getFieldValue("sessionForAnswer/sssHidden/sssEndTimestamp"));  
	        	fetchAll(loadAnswerForSessionQuery, new FetchCallback() {
	                onFetch(answers) {
	                	original_sss_answer_list.clear();
	                	sss_answer_list.clear();
	               		original_sss_answer_list.addAll(answers);
	               		sss_answer_list.addAll(answers);
	                	populateList("sessionForAnswer/sssAnsList/sssAnswerList",original_sss_answer_list);
	                	checkSssQuesnirType("answer");
	                }

	                onError(message) {
	                    showToast(message);
	                }
	            });

				sssPersonRoleNameListOrigin.clear();
	            sssPersonRoleandNameList.clear();
	            sssPsInfoRelnOrigin.clear();
	            fetchAll(loadSssPersonRelnQuery, new FetchCallback() {
	                onFetch(sssPsReln) {
	                	if(!isNull(sssPsReln)){
	                	//sssPsInfoRelnOrigin.addAll(sssPsReln);
	                	sssPsRelnList=new ArrayList();
	                	sssPsRelnList.clear();
	                	sssPsRelnList.addAll(sssPsReln);
	                	for (psReln: sssPsRelnList){
	                		String psRelnId=psReln.get(0);

	                		loadSssPersonRoleQuery="select uuid,measure from latestNonDeletedAentValue "+
	                		"where AttributeID=(select AttributeID from AttributeKey where AttributeName='PersonRoleName') "+
	                		"and uuid=(select measure from latestNonDeletedAentValue where AttributeID="+
	                			"(select AttributeID from AttributeKey where AttributeName='SessionPersonRole') "+
	                			"and uuid='"+psRelnId+"')";
							
	            			fetchOne(loadSssPersonRoleQuery,new FetchCallback() {
								onFetch(sssPsRoleInfo) {
									if(!isNull(sssPsRoleInfo)){
										sssPsRoleInfoList=new ArrayList();
										sssPsRoleInfoList.clear();
										sssPsRoleInfoList.addAll(sssPsRoleInfo);
										String psRoleID=sssPsRoleInfoList.get(0);
										String psRoleName=sssPsRoleInfoList.get(1);

				            			loadSssPersonNameQuery="select uuid,measure from latestNonDeletedAentValue "+
				                		"where AttributeID=(select AttributeID from AttributeKey where AttributeName='PersonName') "+
				                		"and uuid=(select measure from latestNonDeletedAentValue where AttributeID="+
				                			"(select AttributeID from AttributeKey where AttributeName='SessionPersonName') "+
				                			"and uuid='"+psRelnId+"')";

										fetchOne(loadSssPersonNameQuery,new FetchCallback() {
											onFetch(sssPsNameInfo) {
												if(!isNull(sssPsNameInfo)){
													sssPsNameInfoList=new ArrayList();
													sssPsNameInfoList.clear();
													sssPsNameInfoList.addAll(sssPsNameInfo);
													String psNameID=sssPsNameInfoList.get(0);
													String psName=sssPsNameInfoList.get(1);
													psRoleNamePair=new ArrayList();
													psRoleNamePair.clear();
													psRoleNamePair.add(psRoleID+"_"+psNameID);
													psRoleNamePair.add(psRoleName+"_"+psName);
													psInfTriplePair=new ArrayList();
													psInfTriplePair.clear();
													psInfTriplePair.add(psRelnId);
													psInfTriplePair.add(psRoleID+"_"+psNameID);	
													sssPersonRoleNameListOrigin.add(psRoleNamePair);
													sssPersonRoleandNameList.add(psRoleNamePair);
													populateList("sessionForAnswer/sssPersonInfo/sssPersonList",sssPersonRoleandNameList);
													sssPsInfoRelnOrigin.add(psInfTriplePair);
												}
												else{
													populateList("sessionForAnswer/sssPersonInfo/sssPersonList",sssPersonRoleandNameList);
													showWarning("Out-of-date Data","Some person in this session may not be used anymore\n"+"Please contact the admin for further information");
												}
												
											    }  
										    });
								    }
								    else{
								    	populateList("sessionForAnswer/sssPersonInfo/sssPersonList",sssPersonRoleandNameList);
								    	showWarning("Out-of-date Data","Some person roles in this session may not be used anymore\n"+"Please contact the admin for further information");
								    }
								}  
							});
	                	}
	                  }

	                  else{
	                  	populateList("sessionForAnswer/sssPersonInfo/sssPersonList",sssPersonRoleandNameList);
	                  	showWarning("Out-of-date Data","This session may not be used anymore\n"+"Please contact the admin for further information");
	                  }
	                }

	                onError(message) {
	                    showToast(message);
	                }
	            });

				fetchAll(loadAllRoleQuery, new FetchCallback() {
		        	onFetch(result) {
						if (!isNull(result)) {
							personRoleList.clear();
							personRoleList.addAll(result);
							populateDropDown("sessionForAnswer/sssPersonInfo/sssPersonRole", personRoleList);	

							fetchAll(loadAllPersonQuery,new FetchCallback() {
					        	onFetch(fetchResult) {
									if (!isNull(fetchResult)) {
										personList.clear();
										personList.addAll(fetchResult);
										populateDropDown("sessionForAnswer/sssPersonInfo/sssPersonName", personList);	
										
									}	
									else{
								    	showWarning("No person data","No person data is available, please contact the admin");
										return;
									}
					       	 }

					        	onError(message) {
					            	showToast(message);
					        	}
					    	});
						}	
						else{
					    	showWarning("No Role data","No role data is available, please contact the admin");
							return;
						}
		       	    }

		        	onError(message) {
		            	showToast(message);
		        	}
		    	});

	        	
	            showToast("Loaded session"+result.getId());            
	        }
	        onError(message) {
	            showToast(message);
	        }
	    });
		//loadSessionInterviewer("answer");
		
		break;

	}
}

//check if a session is for intro quesnir or regular quesnir
checkSssQuesnirType(String typeflag){
		String checkAnsId=null;
		if((!isNull(original_sss_answer_list)) && (typeflag.equals("answer"))){		
			checkAnsId=original_sss_answer_list.get(0).get(0);
		//}

		checkAnsQuesnirTypeQuery="select uuid,measure from latestNonDeletedAentValue "+
			"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesnirTypeName') "+
			"and uuid=(select measure from latestNonDeletedAentValue "+
				"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionnaireType') "+
				"and uuid=(select measure from latestNonDeletedAentValue where uuid='"+checkAnsId+"' "+
					"and AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionnaireID')))";

		fetchAll(checkAnsQuesnirTypeQuery, new FetchCallback() {
	        	onFetch(quesnirTypeResult) {
	              String quesnirType=quesnirTypeResult.get(0).get(1);
	              if(quesnirType.equals("Introductory")){
	              	introAns=true;
	              	fetchAll(loadAllIntroAnsNotInSssQuery, new FetchCallback() {
	    	                onFetch(result) {
	    	                	candidate_files_session.clear();
	    	                	candidate_files_session.addAll(result);
	    	                	candidate_files_session.removeAll(original_sss_answer_list);
	    	                	//populateList("sessionForAnswer/sssAnsList/sssAnsSelList",candidate_files_session);
	    	                }
	    	                

	    	                onError(message) {
	    	                    showToast(message);
	    	                	}
	            			});
	              }
	              else{
	              	introAns=false;
	              	fetchAll(loadAllNonIntroAnsNotInSssQuery, new FetchCallback() {
	    	                onFetch(result) {
	    	                	candidate_files_session.clear();
	    	                	candidate_files_session.addAll(result);
	    	                	candidate_files_session.removeAll(original_sss_answer_list);
	    	                	//populateList("sessionForAnswer/sssAnsList/sssAnsSelList",candidate_files_session);
	    	                }
	    	                

	    	                onError(message) {
	    	                    showToast(message);
	    	                	}
	            			});
	              }
	       		 }
	   		 });
	}
	else{
		introAns=false;
      	fetchAll(loadAllNonIntroAnsNotInSssQuery, new FetchCallback() {
                onFetch(result) {
                	candidate_files_session.clear();
                	candidate_files_session.addAll(result);
                	candidate_files_session.removeAll(original_sss_answer_list);
                	//populateList("sessionForAnswer/sssAnsList/sssAnsSelList",candidate_files_session);
                }
                

                onError(message) {
                    showToast(message);
                	}
    			});
	}
}

loadSessionInterviewer(String typeflag){
	switch(typeflag){
	case "answer":
	tempAnsList=new ArrayList();
	sssAnswerInterviewerNew.clear();
	sssAnswerInterviewerOrigin.clear();
	
	loadAnswerUuidForSessionQuery="select uuid from latestNonDeletedAentValue "+ 
			"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerLabel') "+
			"and uuid in "+
 			"(select uuid from AentReln where RelationshipID in "+
			"(select RelationshipID from AEntReln where AEntReln.uuid="+sss_id+" "+
 			"AND RelationshipID in "+
			"(select RelationshipID from latestNonDeletedRelationship where RelnTypeID="+
 			"(select RelnTypeID from RelnType where RelnTypeName='Answer and Session') "+
			"and latestNonDeletedRelationship.Deleted IS NULL)))";
	
	fetchAll(loadAnswerUuidForSessionQuery, new FetchCallback() {
        onFetch(result) {
        	tempAnsList.clear();
        	tempAnsList.addAll(result);
        	//showWarning("tempAnsList",tempAnsList.size().toString());
        	if(!isNull(tempAnsList)){
        		for (ans:tempAnsList){
        			String tempAnsID=ans.get(0);
        			loadInterviewerForAnswerQuery="select uuid,measure from latestNonDeletedAentValue "+ 
            				"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='PersonName') "+
            				"and uuid in "+
            	 			"(select uuid from AentReln where RelationshipID in "+
            				"(select RelationshipID from AEntReln where AEntReln.uuid="+tempAnsID+" "+
            	 			"AND RelationshipID in "+
            				"(select RelationshipID from latestNonDeletedRelationship where RelnTypeID="+
            	 			"(select RelnTypeID from RelnType where RelnTypeName='Answer and Interviewer') "+
            				"and latestNonDeletedRelationship.Deleted IS NULL)))";
        			fetchAll(loadInterviewerForAnswerQuery, new FetchCallback() {
    	                onFetch(result) {
    	                	for(res:result){
    	                		newInterviewer=new ArrayList();
    	                		newInterviewer.add(tempAnsID);
    	                		newInterviewer.add(res.get(1));
    	                		sssAnswerInterviewerOrigin.add(newInterviewer);
    	                	}
    	                	
    	                	//sssAnswerInterviewerOrigin.addAll(result);
    	                }
    	                

    	                onError(message) {
    	                    showToast(message);
    	                	}
            			});
        		}
        	}
        	
        }

        onError(message) {
            showToast(message);
        }
    });
	break;
	}
}
//Boolean autoSssSave=false;
autoSaveSession(String typeFlag){
	switch(typeFlag){
		case "head":
			saveSession("answer");
		break;
		case "tail":
			sssOriginInfo.clear();
			sssOriginInfo.addAll(sssNewInfo);
			original_sss_answer_list.clear();
			original_sss_answer_list.addAll(sss_answer_list);
			sssPersonRoleNameListOrigin.clear();
			sssPersonRoleNameListOrigin.addAll(sssPersonRoleandNameList);
		break;
		case "tailNew":
			sssOriginInfo.clear();
			sssOriginInfo.add(getFieldValue("sessionForAnswer/sssHidden/sssID"));
			//sssOriginInfo.add(getFieldValue("sessionForAnswer/sssAnsBasicInfo/sssName"));
			//sssOriginInfo.add(getFieldValue("sessionForAnswer/sssHidden/sssStartTimetamp"));

			original_sss_answer_list.clear();
			original_sss_answer_list.addAll(sss_answer_list);
			sssPersonRoleNameListOrigin.clear();
			sssPersonRoleNameListOrigin.addAll(sssPersonRoleandNameList);
		break;
		case "emr":
			sssOriginInfo.clear();
			sssOriginInfo.add(emrSssInfo.get("sssId"));
			original_sss_answer_list.clear();
			original_sss_answer_list.addAll(sss_answer_list);
			//sssPersonRoleNameListOrigin.clear();
			//sssPersonRoleNameListOrigin.addAll(sssPersonRoleandNameList);
		break;
	}
	
}

extractPsSum(){
	ansConsultant=null;
	interviwerPrefix=null;
	Hashtable extractedPsRole=new Hashtable();
	extractedPsRole.clear();

	psRoleInfo=checkRolesInSession();
	//check answer label
	if(psRoleInfo.contains("consultant")){
		Iterator itConsultant=sssConsultantList.iterator();
	    firstConsultant=itConsultant.next();
	    ansConsultant=firstConsultant;

	    if(sssConsultantList.size()>1){
			ansConsultant=ansConsultant+"EtAl";
	    }

	    extractedPsRole.put("consultant",ansConsultant);
	}
	if(psRoleInfo.contains("interviewer")){
		Iterator inveIt=sssInterviewerList.iterator();
		interviwerPrefix=inveIt.next();
		if (sssInterviewerList.size()>1){
			interviwerPrefix=interviwerPrefix+"EtAl";
		}
		extractedPsRole.put("interviewer",interviwerPrefix);
	}
	return extractedPsRole;
}

getNumSuffix(String inputString){
	String returnSuffix=null;
	Pattern numberPat = Pattern.compile("\\(\\d+\\)");
	Matcher numMatcher = numberPat.matcher(inputString);
	Boolean suffixFind=numMatcher.find();
	if(suffixFind){
		String [] patternSplit=inputString.split("\\(");
		//showWarning("patternSplit",patternSplit.length.toString());
		Pattern numberPat2 = Pattern.compile("\\d+\\)");
		//showWarning("numberPat2","numberPat2");
		Matcher numMatcher2 = numberPat2.matcher(patternSplit[patternSplit.length-1]);
		//showWarning("numMatcher2",patternSplit[patternSplit.length-1]);
		if(numMatcher2.find()){
			returnSuffix="("+patternSplit[patternSplit.length-1];
		}
	}
	return returnSuffix;
	
}
//This is for getting the original answer label
extractOriginLbl(ArrayList inputList){
	extrList=new ArrayList();
	extrList.clear();
	//showWarning("extrAnsList","extrAnsList");
	Pattern numberPat = Pattern.compile("\\(\\d+\\)");
	//showWarning("numberPat","numberPat");
	for (input: inputList){
		tempLblId=input.get(0);
		//showWarning("tempAnsLblId",tempLblId);
		tempLbl=input.get(1);
		//showWarning("tempAnsLbl",tempLbl);
		Matcher numMatcher = numberPat.matcher(tempLbl);
		//showWarning("numMatcher","numMatcher");
		Boolean suffixFind=numMatcher.find();
		//showWarning("suffixFind",suffixFind.toString());
		//if there's no number suffix of the current label, then it can be directly added to exrAnsList
		if(!suffixFind){
			extrList.add(input);
			//showWarning("extrList3","add3");
		}
		else{
			//showWarning("else","else");
			String [] patternSplit=tempLbl.split("\\(");
			//showWarning("patternSplit",patternSplit.length.toString());
			Pattern numberPat2 = Pattern.compile("\\d+\\)");
			//showWarning("numberPat2","numberPat2");
			Matcher numMatcher2 = numberPat2.matcher(patternSplit[patternSplit.length-1]);
			//showWarning("numMatcher2",patternSplit[patternSplit.length-1]);
			if(numMatcher2.find()){
				StringBuilder sb=new StringBuilder();
				for (lbl : patternSplit){
					if (sb.length()>0)
						{sb.append("(");}
					sb.append(lbl);
				}
				String orgnSub=sb.toString();
				//showWarning("orgnSub",orgnSub);
				orgn=new ArrayList();
				orgn.add(tempLblId);
				orgn.add(orgnSub);
				extrList.add(orgn);
				//showWarning("extrList1","add1");
			}
			else{
				extrList.add(input);
				//showWarning("extrList2","add2");
			}

		}
	}
	return extrList;
}

extractOriginLbl(String inputLabel){
	String rtnLabel=inputLabel;
	Pattern numberPat = Pattern.compile("\\(\\d+\\)");
	Matcher numMatcher = numberPat.matcher(inputLabel);
	if(numMatcher.find()){
		//session label has only this patter at the end of the string
		rtnLabel=rtnLabel.substring(0,rtnLabel.indexOf("("));
	}
	return rtnLabel;
}

saveAnsInSession(String sessionId, String typeflag){
	Hashtable psInfo=extractPsSum();
	if(psInfo.isEmpty()){
		showWarning("No person info","No person in this session");
		return;
	}
	else if(!psInfo.containsKey("consultant")){
		showWarning("No consultant","No consultant selected, please add consultant");
		return;
	}
	else if(!psInfo.containsKey("interviewer")){
		showWarning("No interviewer","No interviewer selected, please add interviewer");
		return;
	}
	//if this is for saving new session, then we need to save the relns
	if(typeflag.equals("newSss")){
		for(answer:sss_answer_list){
			saveEntitiesToRel("Answer and Session",sessionId,answer.get(0));
		}
	}
	//else we just need to check the labels
    ansConsultant=psInfo.get("consultant");
	//below is updating answer label and file labels
	sssOrgnAnsLblList=extractOriginLbl(sss_answer_list);

	for(ans : sssOrgnAnsLblList){
		ansLblMng(ans,ansConsultant);
	}// for(ans : sss_answer_list)
}

ansLblMng(ArrayList ans, String ansConsultant){
	String ansLabel=ans.get(1);
	//showWarning("ansLabel",ansLabel);
	String [] ansLabelSplit=ansLabel.split("_");//split can't be done
	String ansOldPs=ansLabelSplit[2];
	//showWarning("2","2");
	if(!ansOldPs.equals(ansConsultant)){
		ansLabelSplit[2]=ansConsultant;
		StringBuilder sb=new StringBuilder();
		for (ansLabelComp : ansLabelSplit){
			if (sb.length()>0)
				{sb.append("_");}
			sb.append(ansLabelComp);
		}

		String newAnsLabelSss=sb.toString();
		//showWarning("3","3");

		//here we need to check if the new generated answer label is duplicate label or not
		tempAnsDuplicateList=new ArrayList();
		tempAnsDuplicateList.clear();
		int sizeOfAnsDup=0;

		ansDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
			"where AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerLabel') "+
			"and uuid <>"+ans.get(0)+" "+
			"and (measure ='"+newAnsLabelSss+"' or measure like '"+newAnsLabelSss+"(%)')";

		fetchAll(ansDuplicateQuery,new FetchCallback() {
			onFetch(result) {
				entityId=ans.get(0);
				if(!isNull(result)){
					tempAnsDuplicateList.addAll(result);
					sizeOfAnsDup=tempAnsDuplicateList.size();
					Pattern numberPat = Pattern.compile("\\(\\d+\\)");
					//dupOldAnsId=tempAnsDuplicateList.get(0).get(0);
					//the found ans is the the one we are updating itself
					if (sizeOfAnsDup==1){
						attributes = createAttributeList();
						duplicateOldLabel=tempAnsDuplicateList.get(0).get(1);
						Matcher numMatcher = numberPat.matcher(duplicateOldLabel);
						if(numMatcher.find()){
							//suffix=duplicateOldLabel.substring(duplicateOldLabel.indexOf("("),duplicateOldLabel.length());
							suffix=getNumSuffix(duplicateOldLabel);
							if(!suffix.equals("(1)"))
							{
								int sLen=suffix.length();
								newLabel=duplicateOldLabel.substring(0,duplicateOldLabel.length()-sLen)+"(1)";
								//newLabel=duplicateOldLabel.substring(0,duplicateOldLabel.indexOf("("))+"(1)";
								attributes.add(createEntityAttribute("AnswerLabel", null, null, newLabel, null));
								dupEntityId=tempAnsDuplicateList.get(0).get(0);
								saveArchEnt(dupEntityId, "AnswerToQuestionnaire", null, attributes);
							}
						}
						else{
							newLabel=duplicateOldLabel+"(1)";
							attributes.add(createEntityAttribute("AnswerLabel", null, null, newLabel, null));
							dupEntityId=tempAnsDuplicateList.get(0).get(0);
							saveArchEnt(dupEntityId, "AnswerToQuestionnaire", null, attributes);
						}
						newAnsLabelSss=newAnsLabelSss+"(2)";
					}
					else{
						//never get a new introduced duplicate label
						int maxSuffix=0;
						for (tempAns: tempAnsDuplicateList){
							tempLbl=tempAns.get(1);
							Matcher numMatcher = numberPat.matcher(tempLbl);
							if(numMatcher.find()){
								tempSuffix=getNumSuffix(tempLabel);
								tempSuffixStr=null;
									if(tempSuffix!=null){
										tempSuffixStr=tempSuffix.substring(tempSuffix.indexOf("(")+1, tempSuffix.length()-1);
										int tempSuffixNum=Integer.parseInt(tempSuffixStr);
										if(tempSuffixNum>maxSuffix){
											maxSuffix=tempSuffixNum;
										}
								}
								/*
								tempSuffixStr=tempLbl.substring(tempLbl.indexOf("(")+1, tempLbl.length()-1);
								int tempSuffixNum=Integer.parseInt(tempSuffixStr);
								if(tempSuffixNum>maxSuffix){
									maxSuffix=tempSuffixNum;
								}
								*/
							}

						}
						maxSuffix=maxSuffix+1;
						newAnsLabelSss=newAnsLabelSss+"("+maxSuffix+")";
						//showWarning("4","4");
					}
				}

				attributes = createAttributeList();
				attributes.add(createEntityAttribute("AnswerLabel", null, null, newAnsLabelSss, null));
				//showWarning("newAnsLabelSss2",entityId+newAnsLabelSss);
				saveArchEnt(entityId, "AnswerToQuestionnaire", null, attributes, new SaveCallback() {
					onSave(answerUuid,newRecord) {
						//below is changing the filelabel
						//showWarning("answerLabel change done",entityId+"answer label change done");
						loadFileForAnswerQuery="select uuid,measure from latestNonDeletedAentValue "+ 
						"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='FileID') "+
						"and uuid in "+
							"(select uuid from AentReln where RelationshipID in "+
						"(select RelationshipID from AEntReln where AEntReln.uuid="+entityId+" "+
							"AND RelationshipID in "+
						"(select RelationshipID from latestNonDeletedRelationship where RelnTypeID="+
							"(select RelnTypeID from RelnType where RelnTypeName='Answer and File') "+
						"and latestNonDeletedRelationship.Deleted IS NULL)))";
						//showWarning("5","5");
						fetchAll(loadFileForAnswerQuery, new FetchCallback() {
					        onFetch(result) {
					        	//showWarning("6","6");
					        	fileListForAns=new ArrayList();
					        	fileListForAns.clear();
					        	fileListForAns.addAll(result);
					        	//showWarning("7","7");
					        	//showWarning("answerFileFetchDone","answerFileFetchDone");
					        	for (file: fileListForAns){
					        		String fileEntityId=file.get(0);
					        		String oldFileLabel=file.get(1);
					        		String [] oldFileLabelSplit=oldFileLabel.split("_");
					        		String oldFileLabelType=oldFileLabelSplit[oldFileLabelSplit.length-1];
					        		//showWarning("oldFileLabelType",oldFileLabelType);
					        		String newFileLabel=newAnsLabelSss+"_"+oldFileLabelType;
					        		//showWarning("newFileLabel",newFileLabel);
					        		attributesForFile = createAttributeList();
									attributesForFile.add(createEntityAttribute("FileID", null, null, newFileLabel, null));
									saveArchEnt(fileEntityId, "File", null, attributesForFile);

					        	}
					        	//showWarning("8","8");
					        }

					        onError(message) {
					            showToast(message);
					        }
					    });
					}  
					});    //saveArchEnt(entityId, "AnswerToQuestionnaire"
				
				}
			});//fetch all anslabel duplicate check
	}//if(!ansOldPs.equals(ansConsultant))
}

savePsInSession(String sessionId){
	tempCostntID=null;
	tempIntverID=null;
	for (tempRoleID:personRoleList){
		if (tempRoleID.get(1).equals("consultant")){
			tempCostntID=tempRoleID.get(0);
		}
		else if(tempRoleID.get(1).equals("interviewer")){
			tempIntverID=tempRoleID.get(0);
		}
	}
	for(personInSss: sssPersonRoleandNameList){
			String psInfoId=personInSss.get(0);
			String [] psInfoIdSplit=psInfoId.split("_");
			String tempPsRoleID=psInfoIdSplit[0];
			String tempPsID=psInfoIdSplit[1];
			sssPsRoleAttributes= createAttributeList();
			sssPsRoleAttributes.add(createEntityAttribute("SessionIDforPerson", null, null, sessionId, null));
			sssPsRoleAttributes.add(createEntityAttribute("SessionPersonName", null, null, tempPsID, null));
			sssPsRoleAttributes.add(createEntityAttribute("SessionPersonRole", null, null, tempPsRoleID, null));
			saveArchEnt(null, "SessionPerson", null, sssPsRoleAttributes);
			//save consultant and interviewer and other roles in to a relationship
			//for the convenience of viewing data
			if(tempPsRoleID.equals(tempCostntID)){
				saveEntitiesToRel("Session and Consultant",sessionId,tempPsID);
			}
			else if(tempPsRoleID.equals(tempIntverID)){
				saveEntitiesToRel("Session and Interviewer",sessionId,tempPsID);
			}
			else{
				saveEntitiesToRel("Session and Person",sessionId,tempPsID);
			}	
	}
}

sssPsUpdate(Hashtable sssPsChange){
	tempCostntID=null;
	tempIntverID=null;
	for (tempRoleID:personRoleList){
	   	if (tempRoleID.get(1).equals("consultant")){
	    	  	tempCostntID=tempRoleID.get(0);
	    	}
	    else if(tempRoleID.get(1).equals("interviewer")){
	    	  	tempIntverID=tempRoleID.get(0);
	    	}
	}

	if (sssPsChange.containsKey("PUREADD")){
		sssNewAddedPs=sssPsChange.get("PUREADD");
		for(personInSss: sssNewAddedPs){
	  		String psInfoId=personInSss.get(0);
	  		String [] psInfoIdSplit=psInfoId.split("_");
	  		tempPsRoleID=psInfoIdSplit[0];
	  		tempPsID=psInfoIdSplit[1];
	  		sssPsRoleAttributes= createAttributeList();
	  		sssPsRoleAttributes.add(createEntityAttribute("SessionIDforPerson", null, null, sss_id, null));
	  		sssPsRoleAttributes.add(createEntityAttribute("SessionPersonName", null, null, tempPsID, null));
	  		sssPsRoleAttributes.add(createEntityAttribute("SessionPersonRole", null, null, tempPsRoleID, null));
	  		saveArchEnt(null, "SessionPerson", null, sssPsRoleAttributes);
	  		if(tempPsRoleID.equals(tempCostntID)){
	    	  	saveEntitiesToRel("Session and Consultant",sss_id,tempPsID);
	    	}
	    	else if(tempPsRoleID.equals(tempIntverID)){
	    	  	saveEntitiesToRel("Session and Interviewer",sss_id,tempPsID);
	    	}
	    	else{
	    	  	saveEntitiesToRel("Session and Person",sss_id,tempPsID);
	    	}	
	  	}
	}//if (sssPsChange.containsKey("PUREADD"))

	else if (sssPsChange.containsKey("PUREDELETE")){
		sssNewDelPs=sssPsChange.get("PUREDELETE");
		for(personInSss: sssNewDelPs){
	  		String toDelPsID=personInSss.get(0);
	  		String [] psInfoIdSplit=toDelPsID.split("_");
	  		tempPsRoleID=psInfoIdSplit[0];
	  		tempPsID=psInfoIdSplit[1];
	  		//delete person info and sessionPerson table
	  		for(oldPs: sssPsInfoRelnOrigin){
	  			if (toDelPsID.equals(oldPs.get(1))){
	  				String toDelPsRelnID=oldPs.get(0);
	  				//showWarning("toDelPsRelnID",toDelPsRelnID);
	  				deleteArchEnt(toDelPsRelnID);
	  				//deleteArchEnt(toDelPsRelnID);
	  			}
	  		}
	  		if(tempPsRoleID.equals(tempCostntID)){
	    	  	for(toDelConsul:sssOldCoslReln){
	    	  		String oldConsulID=toDelConsul.get(1);
	    	  		if(oldConsulID.equals(tempPsID)){
	    	  			deleteRel(toDelConsul.get(0));
	    	  		}
	    	  	}
	    	}
	    	else if(tempPsRoleID.equals(tempIntverID)){
	    	  	for(toDelConsul:sssOldIntvReln){
	    	  		String oldConsulID=toDelConsul.get(1);
	    	  		if(oldConsulID.equals(tempPsID)){
	    	  			deleteRel(toDelConsul.get(0));
	    	  		}
	    	  	}
	    	}
	    	else{
	    	  	for(toDelConsul:sssOldPsReln){
	    	  		String oldConsulID=toDelConsul.get(1);
	    	  		if(oldConsulID.equals(tempPsID)){
	    	  			deleteRel(toDelConsul.get(0));
	    	  		}
	    	  	}
	    	}	
	  	}
	}//else if (sssPsChange.containsKey("PUREDELETE"))

	else{
		//showWarning("DELETE","DELETE");
	  	sssToDelPs=sssPsChange.get("DELETE");
	  	for(personInSss: sssToDelPs){
	  		String toDelPsID=personInSss.get(0);
	  		String [] psInfoIdSplit=toDelPsID.split("_");
	  		tempPsRoleID=psInfoIdSplit[0];
	  		tempPsID=psInfoIdSplit[1];

	  		for(oldPs: sssPsInfoRelnOrigin){
	  			if (toDelPsID.equals(oldPs.get(1))){
	  				String toDelPsRelnID=oldPs.get(0);
	  				deleteArchEnt(toDelPsRelnID);
	  			}
	  		}

	  		if(tempPsRoleID.equals(tempCostntID)){
	    	  	for(toDelConsul:sssOldCoslReln){
	    	  		String oldConsulID=toDelConsul.get(1);
	    	  		if(oldConsulID.equals(tempPsID)){
	    	  			deleteRel(toDelConsul.get(0));
	    	  		}
	    	  	}
	    	}

	    	else if(tempPsRoleID.equals(tempIntverID)){
	    	  	for(toDelConsul:sssOldIntvReln){
	    	  		String oldConsulID=toDelConsul.get(1);
	    	  		if(oldConsulID.equals(tempPsID)){
	    	  			deleteRel(toDelConsul.get(0));
	    	  		}
	    	  	}
	    	}

	    	else{
	    	  	for(toDelConsul:sssOldPsReln){
	    	  		String oldConsulID=toDelConsul.get(1);
	    	  		if(oldConsulID.equals(tempPsID)){
	    	  			deleteRel(toDelConsul.get(0));
	    	  		}
	    	  	}
	    	}	
	  	}
		sssToAddPs=sssPsChange.get("ADD");
		//showWarning("ADD","ADD");
		for(personInSss: sssToAddPs){
	  		String psInfoId=personInSss.get(0);
	  		String [] psInfoIdSplit=psInfoId.split("_");
	  		tempPsRoleID=psInfoIdSplit[0];
	  		tempPsID=psInfoIdSplit[1];
	  		sssPsRoleAttributes= createAttributeList();
	  		sssPsRoleAttributes.add(createEntityAttribute("SessionIDforPerson", null, null, sss_id, null));
	  		sssPsRoleAttributes.add(createEntityAttribute("SessionPersonName", null, null, tempPsID, null));
	  		sssPsRoleAttributes.add(createEntityAttribute("SessionPersonRole", null, null, tempPsRoleID, null));
	  		saveArchEnt(null, "SessionPerson", null, sssPsRoleAttributes);
	  		if(tempPsRoleID.equals(tempCostntID)){
	    	  	saveEntitiesToRel("Session and Consultant",sss_id,tempPsID);
	    	}
	    	else if(tempPsRoleID.equals(tempIntverID)){
	    	  	saveEntitiesToRel("Session and Interviewer",sss_id,tempPsID);
	    	}
	    	else{
	    	  	saveEntitiesToRel("Session and Person",sss_id,tempPsID);
	    	}	
	  	}
		
	  	//showWarning("ADD+DELETE","ADD+DELETE");
	}//sssPsChange containsKey("ADD") and "DELETE"
}

ansListChange(Hashtable sssAnsChange){
	if(sssAnsChange.containsKey("PUREADD")){
		sssNewAddedAns= sssAnsChange.get("PUREADD");
		for(answer:sssNewAddedAns){
			saveEntitiesToRel("Answer and Session",sss_id,answer.get(0));
		}//for(answer:sss_answer_list)
	}
	else if (sssAnsChange.containsKey("PUREDELETE")){
		sssDelAns=sssAnsChange.get("PUREDELETE");
		for(ansDelete:sssDelAns){
			toDelAns=ansDelete.get(0);
			for (oldReln:sssAnsRelnOrigin){
				relnId=oldReln.get(0);
				ansId=oldReln.get(1);
				if (ansId.equals(toDelAns)){
					deleteRel(relnId);
				}
			}
		}
	}
	else{
		sssAddChange=sssAnsChange.get("ADD");
		sssDelChange=sssAnsChange.get("DELETE");

		for(ansDelete:sssDelChange){
			toDelAns=ansDelete.get(0);
			for (oldReln:sssAnsRelnOrigin){
				relnId=oldReln.get(0);
				ansId=oldReln.get(1);
				if (ansId.equals(toDelAns)){
					deleteRel(relnId);
				}
			}
		}
		
		for(answer:sssAddChange){
		    saveEntitiesToRel("Answer and Session",sss_id,answer.get(0));
		}//for(answer:sss_answer_list)
	}
}

updateSssNoPsChange(Hashtable sssInfoChange,Hashtable sssAnsChange,Hashtable sssPsChange){
	//case 1: sssInfoChanged only PASS
	if((!sssInfoChange.containsKey("EQUAL")) && (sssAnsChange.containsKey("EQUAL"))){
		saveTabGroup("sessionForAnswer", sss_id, null, null, new SaveCallback() {
		    onSave(uuid, newRecord) {
		    	autoSaveSession("tail");
		        showToast("Session basic info changed");
		    }
		    onError(message) {
		        showWarning("error on updateSssNoPsChange1",message);
		    }  
		  });
	}

	//case 2: sssAns changed only PASS
	else if((sssInfoChange.containsKey("EQUAL")) && (!sssAnsChange.containsKey("EQUAL"))){
		ansListChange(sssAnsChange);
		autoSaveSession("tail");
		showToast("Session answer data changed");
	}

	//case 3: both sssInfo and sssAns changed PASS
	else{
		saveTabGroup("sessionForAnswer", sss_id, null, null, new SaveCallback() {
		    onSave(uuid, newRecord) {
		    	ansListChange(sssAnsChange);
		    	autoSaveSession("tail");
		        showToast("Session data changed");

		    }
		    onError(message) {
		        showWarning("error on updateSssNoPsChange2",message);
		    }  
		  });
	}
}

//TODO: add this function to all session saving functions

generateSssEndTime(ArrayList sssTimeList){
	sssEndTime=null;
	if(!isNull(sssTimeList)){
		sssEndTimeList=new ArrayList();
		sssEndTimeList.clear();
		for(time : sssTimeList){
			sssEndTimeList.add(time.get(2));
		}
		sssEndTime=extractLatestTime(sssEndTimeList);
	}
	return sssEndTime;
}

updateSssPsChange(Hashtable sssInfoChange,Hashtable sssAnsChange,Hashtable sssPsChange){
	Hashtable psInfo=extractPsSum();
	if(psInfo.isEmpty()){
		showWarning("No person info","No person in this session");
		return;
	}
	else if(!psInfo.containsKey("consultant")){
		showWarning("No consultant","No consultant selected, please add consultant");
		return;
	}
	else if(!psInfo.containsKey("interviewer")){
		showWarning("No interviewer","No interviewer selected, please add interviewer");
		return;
	}
	ansConsultant=psInfo.get("consultant");
	interviwerPrefix=psInfo.get("interviewer");

	//generate new sssLabel
	Boolean sssLabelChange=false;
    String oldSssLabel=getFieldValue("sessionForAnswer/sssHidden/sssID");
	String [] oldSssLabelSplit=oldSssLabel.split("_");
	String sssOldInv=oldSssLabelSplit[0];
	//showWarning("sssOldInv",sssOldInv);
	String newSssLabel=oldSssLabel;
	if(!sssOldInv.equals(interviwerPrefix)){
		oldSssLabelSplit[0]=interviwerPrefix;
		StringBuilder sb=new StringBuilder();
		for (sssLabelComp : oldSssLabelSplit){
			if (sb.length()>0)
				{sb.append("_");}
			sb.append(sssLabelComp);
		}
		newSssLabel=sb.toString();
		newSssLabel=extractOriginLbl(newSssLabel);
		sssLabelChange=true;
	}
	//change session label
	if(sssLabelChange){
		sssDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
		"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionID') "+
		"and uuid<>"+sss_id+" "+
		"and (measure = '"+newSssLabel+"' or measure like '"+newSssLabel+"(%)')";
		//showWarning("sssDuplicateQuery","sssDuplicateQuery");
		fetchAll(sssDuplicateQuery,new FetchCallback() {
			onFetch(result) {
				if(!isNull(result)){
					newSssLabel=makeLabel(result,newSssLabel, "Session","SessionID");
					//showWarning("newSssLabel",newSssLabel);
					setFieldValue("sessionForAnswer/sssHidden/sssID",newSssLabel);
				}
				else{
					setFieldValue("sessionForAnswer/sssHidden/sssID",newSssLabel);
				}
				saveTabGroup("sessionForAnswer", sss_id, null, null, new SaveCallback() {
		    		onSave(uuid, newRecord) {
		    		if(!(sssAnsChange.containsKey("EQUAL"))){//case0: answer list changed
		    				ansListChange(sssAnsChange);
		    				autoSaveSession("tail");
		    			}
		    		
		    		}//onSave(uuid, newRecord)
		    		onError(message) {
				        showWarning("error on updateSssPsChange1",message);
				    }  
				});
			}
		});
		//showWarning("sssLabelChange",sssLabelChange.toString());
	}//if sssLabelChange

	else{
		if((sssInfoChange.containsKey("EQUAL")) && (!sssAnsChange.containsKey("EQUAL"))){
			ansListChange(sssAnsChange);
			autoSaveSession("tail");
		}
		//sssInfoChange
		else if(!sssInfoChange.containsKey("EQUAL")){	
			saveTabGroup("sessionForAnswer", sss_id, null, null, new SaveCallback() {
			    onSave(uuid, newRecord) {
			    	if(!sssAnsChange.containsKey("EQUAL")){
			    		ansListChange(sssAnsChange);
			    		autoSaveSession("tail");
			    	}
			    }
			    onError(message) {
			        showWarning("error on updateSssPsChange2",message);
			    }  
			  });
		}
			
	}
	sssPsUpdate(sssPsChange);
	saveAnsInSession(sss_id,"dupLabel");
}

changeSession(){
	if(isNull(sss_answer_list))
		{
			showWarning("Incomplete Data","Please make sure that you have answer(s) in this session");
			return;
		}
	sssNewInfo.clear();
	sssNewInfo.add(getFieldValue("sessionForAnswer/sssHidden/sssID"));
	//sssNewInfo.add(getFieldValue("sessionForAnswer/sssAnsBasicInfo/sssName"));
	//sssNewInfo.add(getFieldValue("sessionForAnswer/sssHidden/sssStartTimetamp"));

	Hashtable sssInfoChange=listChange(sssNewInfo,sssOriginInfo);
	Hashtable sssAnsChange=listChange(sss_answer_list,original_sss_answer_list);
	Hashtable sssPsChange=listChange(sssPersonRoleandNameList,sssPersonRoleNameListOrigin);
	//showWarning("listChange done","listChange check done");
	//case 0: nothing changed PASS
	if((sssInfoChange.containsKey("EQUAL")) && (sssAnsChange.containsKey("EQUAL")) && (sssPsChange.containsKey("EQUAL"))){
		showWarning("No change","No data changed");
		return;				
	}
	//when sssPsInfo does not change
	
	else if (sssPsChange.containsKey("EQUAL")){
		updateSssNoPsChange(sssInfoChange,sssAnsChange,sssPsChange);
	}

	//when sssPsInfo changed
	else{
		updateSssPsChange(sssInfoChange,sssAnsChange,sssPsChange);
		showToast("Session info updated");
		autoSaveSession("tail");

	}//when sssPsInfo changed

}

saveSession(String typeflag){
	switch(typeflag){
		case "answer":	
			if(isNull(sss_id)){//SAVING NEW SESSION
				if(isNull(sss_answer_list))
				{
					showWarning("Incomplete Data","Data can't be saved\n"+"Please make sure you have answer(s) in this session");
					return;
				}

			    //generate session label
				Hashtable psInfo=extractPsSum();
				if(psInfo.isEmpty()){
					showWarning("No person info","No person in this session");
					return;
				}
				else if(!psInfo.containsKey("consultant")){
					showWarning("No consultant","No consultant selected, please add consultant");
					return;
				}
				else if(!psInfo.containsKey("interviewer")){
					showWarning("No interviewer","No interviewer selected, please add interviewer");
					return;
				}
				ansConsultant=psInfo.get("consultant");
				interviwerPrefix=psInfo.get("interviewer");
				
				String tempSssLabel=interviwerPrefix+sssLabel;
				sssDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
				"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionID') "+
				"and (measure = '"+tempSssLabel+"' or measure like '"+tempSssLabel+"(%)')";

				fetchAll(sssDuplicateQuery,new FetchCallback() {
						onFetch(result) {
							if(!isNull(result)){
								tempSssLabel = makeLabel(result, tempSssLabel,"Session","SessionID");

								setFieldValue("sessionForAnswer/sssHidden/sssID",tempSssLabel);
							}
							else{
								setFieldValue("sessionForAnswer/sssHidden/sssID",tempSssLabel);
							}

							saveTabGroup("sessionForAnswer", sss_id, null, null, new SaveCallback() {
							    onSave(uuid, newRecord) {
							    	sss_id = uuid;
							      	if (newRecord) {
							      	  //saving answer list for this session
										saveAnsInSession(sss_id,"newSss");
										//showWarning("saveAnsInSession","saveAnsInSession");
										savePsInSession(sss_id);
										//showWarning("savePsInSession","savePsInSession");
										autoSaveSession("tailNew");
										showToast("New session contains answer(s) created");
										saveNewSssToFieldTrip(sss_id);
							      }
							    }
							    onError(message) {
							        showWarning("error on saveSession 1",message);
							    }  
							  });
						}  
					});
			}//if(isNull(sss_id))

			else{//Changing session Info
				changeSession();
			}//Changing session Info
		break;
	}
}

/***saving new session to active fieldTrip***/
saveNewSssToFieldTrip(String newSssId){
	if(!isNull(activeFieldTrip)){
		saveEntitiesToRel("Session and FieldTrip",activeFieldTrip.get(0),newSssId);
		showToast("session is added to a fieldTrip");
	}	
}

/**Variables for answer**/
selected_answer_interviewer=new ArrayList();
selected_answer_interviewee=new ArrayList();

answerInfoOriginal=new ArrayList();
answerInfoNew=new ArrayList();

ansFileOriginReln=new ArrayList();

ansLabelFstPart=null;//QuestionID+"Answer"
ansLabelMidPart=null;//Interviewee("EtAl")
ansLabelSndPart=null;//Date of interview

tempAnsLabel=null;//tempAnsLabel, for trigger of changing answer label
file_and_fileType=new ArrayList();//Keep track of file types, used for changing file labels
//when the second answer/file with a duplicated label is added, change the first record to have the suffix (1)
Boolean dupAnsLblChange=false;
dupAnsLblInfo=new ArrayList();
Boolean dupFileLblChange=false;
dupFileLblInfo=new ArrayList();
/***variables for answers***/
answer_id=null;//new answer_id

current_quesnir_id=null;
current_question_id=null;
current_quesnir_name=null;
current_question_content=null;
current_question_label=null;//label for generating answerID
current_answer_file_id=null;
current_answer_id=null;

questionnaire_list=new ArrayList();
ques_in_current_quesnir=new ArrayList();
queslabel_current_quesnir=new ArrayList();
survey_list=new ArrayList();

files_in_current_ques=new ArrayList();
files_origin=new ArrayList();

Boolean ansOrNot=true;//denoting if the answer has the answer ui page
hiddenAnsInfo=new HashMap();// holding the answer info when no answer ui
/**Answer dynamic ui generating**/
createAnswerPage(){
	if(!hasView("survey/answerHidden/answerLabel")){
		removeAllViewsAndContainers("survey");
		executeViewTask(new ViewTask() {
	    doTask() {
	  		//answerHidden page
	    	hideQuesnirId=createViewDef().createTextField().setLabel("Questionnaire id").setAttributeName("AnswerQuestionnaireID").setAttributeType("measure").setReadOnly(true);
	    	hideQuesId=createViewDef().createTextField().setLabel("Question id").setAttributeName("AnswerQuestionID").setAttributeType("measure").setReadOnly(true);
	    	ansLabelViewDef = createViewDef().createTextField().setLabel("Answer label").setAttributeName("AnswerLabel").setAttributeType("measure").setAnnotationEnabled(true).setReadOnly(true);
	    	ansStartTimeViewDef=createViewDef().createTextField().setLabel("Start timestamp").setAttributeName("AnswerStartTime").setAttributeType("measure").setAnnotationEnabled(true).setReadOnly(true);
	    	ansEndTimeViewDef=createViewDef().createTextField().setLabel("End timestamp").setAttributeName("AnswerEndTime").setAttributeType("measure").setAnnotationEnabled(true).setReadOnly(true);
	    	createView("survey/answerHidden/answerQuestionnaireID",hideQuesnirId,"survey/answerHidden");
	    	createView("survey/answerHidden/answerQuestionID",hideQuesId,"survey/answerHidden");
	    	createView("survey/answerHidden/answerLabel",ansLabelViewDef,"survey/answerHidden");
	        createView("survey/answerHidden/answerStartTimestamp",ansStartTimeViewDef,"survey/answerHidden");
	        createView("survey/answerHidden/answerEndTimestamp",ansEndTimeViewDef,"survey/answerHidden");
	    	//answerBasic page
	    	
	    	ansTextViewDef=createViewDef().createTextField().setLabel("Answer text").setAttributeName("AnswerText").setAttributeType("measure").setAnnotationEnabled(true);
			createView("survey/answerBasic/answerText",ansTextViewDef,"survey/answerBasic");
	    	
	        
	        //answerFile page
			newAnsBtnDef = createViewDef().createButton().setLabel("Save Answer").setStyleCss("faims-blue");
			fileCateDef = createViewDef().createDropDown().setLabel("File Category");
			newFileBtnDef = createViewDef().createButton().setLabel("New File").setStyleCss("faims-blue");
			fileListDef=createViewDef().createList().setLabel("Answer files").setStyleCss("answerFile-list");
			createView("survey/answerFile/Finish_New_Answer",newAnsBtnDef,"survey/answerFile");
	    	createView("survey/answerFile/file_Category",fileCateDef,"survey/answerFile");
	        createView("survey/answerFile/Add_New_File",newFileBtnDef,"survey/answerFile");
	        createView("survey/answerFile/answerFileList",fileListDef,"survey/answerFile");
	        refreshTabgroupCSS("survey");
			/**Events for answer**/
			onEvent("survey/answerFile/Finish_New_Answer","click","saveNewAnswer()");
			onEvent("survey/answerFile/Add_New_File","click","newFile(\"answer\",null)");
			onEvent("survey/answerFile/answerFileList","click","viewOrDeleteFileReln()");
	   		}
			});
	}
}

createChkListPage(String tempQuesId){
	if(!hasView("survey/answerBasic/radioGrp")){
		removeAllViewsAndContainers("survey");
		executeViewTask(new ViewTask() {
	    doTask() {
	    	quesContentDef = createViewDef().createTextField().setReadOnly(true);
	    	ansSelDef=createViewDef().createRadioGroup();
	    	newNextBtnDef = createViewDef().createButton().setLabel("Next").setStyleCss("faims-blue");

			createView("survey/answerBasic/quesText",quesContentDef,"survey/answerBasic");
	        createView("survey/answerBasic/radioGrp",ansSelDef,"survey/answerBasic");
	        createView("survey/answerBasic/nextBtn",newNextBtnDef,"survey/answerBasic");

	        refreshTabgroupCSS("survey");
			/**Events for answer**/
			tempChoice=new ArrayList();
			tempChoice.add(new NameValuePair("Yes", "Y"));
			tempChoice.add(new NameValuePair("No", "N"));
			populateRadioGroup("survey/answerBasic/radioGrp",tempChoice);
			onEvent("survey/answerBasic/nextBtn","click","nextQuestion(\""+tempQuesId+"\")");
	   		}
			});
	}
}

/**Functions for answer**/
loadAnswerInfo(){

	current_answer_id=null;
	current_answer_id=getListItemValue();

	if(isNull(current_answer_id)){
		showWarning("Error","Can't find this answer, please contact the admin");
		return;
	}
	else{
	loadFileAnsRelnQuery="select RelationshipID from AentReln where AentReln.uuid="+current_answer_id+" "+
				"and RelationshipID in "+
				"(select RelationshipID from latestNonDeletedRelationship where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Answer and File') "+
				"and latestNonDeletedRelationship.Deleted IS NULL)";
	
	fetchAll(loadFileAnsRelnQuery, new FetchCallback() {
        onFetch(result) {
        	ansFileOriginReln.clear();
        	ansFileOriginReln.addAll(result);
        }

        onError(message) {
            showToast(message);
        }
    });
	/*
	loadFileForAnswerQuery="select uuid,measure from latestNonDeletedAentValue "+ 
			"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='FileName') "+
			"and uuid in "+
 			"(select uuid from AentReln where RelationshipID in "+
			"(select RelationshipID from AEntReln where AEntReln.uuid="+current_answer_id+" "+
 			"AND RelationshipID in "+
			"(select RelationshipID from latestNonDeletedRelationship where RelnTypeID="+
 			"(select RelnTypeID from RelnType where RelnTypeName='Answer and File') "+
			"and latestNonDeletedRelationship.Deleted IS NULL)))";
	*/
	loadFileForAnswerQuery="select uuid,measure from latestNonDeletedAentValue "+ 
			"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='FileID') "+
			"and uuid in "+
 			"(select uuid from AentReln where RelationshipID in "+
			"(select RelationshipID from AEntReln where AEntReln.uuid="+current_answer_id+" "+
 			"AND RelationshipID in "+
			"(select RelationshipID from latestNonDeletedRelationship where RelnTypeID="+
 			"(select RelnTypeID from RelnType where RelnTypeName='Answer and File') "+
			"and latestNonDeletedRelationship.Deleted IS NULL)))";		

	loadFileTypeQuery="select uuid,measure from latestNonDeletedAentValue "+ 
			"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='FileType') "+
			"and uuid in "+
 			"(select uuid from AentReln where RelationshipID in "+
			"(select RelationshipID from AEntReln where AEntReln.uuid="+current_answer_id+" "+
 			"AND RelationshipID in "+
			"(select RelationshipID from latestNonDeletedRelationship where RelnTypeID="+
 			"(select RelnTypeID from RelnType where RelnTypeName='Answer and File') "+
			"and latestNonDeletedRelationship.Deleted IS NULL)))";

	loadFileStartTimeQuery="select uuid,measure from latestNonDeletedAentValue "+ 
			"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='FileStartTime') "+
			"and uuid in "+
 			"(select uuid from AentReln where RelationshipID in "+
			"(select RelationshipID from AEntReln where AEntReln.uuid="+current_answer_id+" "+
 			"AND RelationshipID in "+
			"(select RelationshipID from latestNonDeletedRelationship where RelnTypeID="+
 			"(select RelnTypeID from RelnType where RelnTypeName='Answer and File') "+
			"and latestNonDeletedRelationship.Deleted IS NULL)))";

	loadFileEndTimeQuery="select uuid,measure from latestNonDeletedAentValue "+ 
			"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='FileEndTime') "+
			"and uuid in "+
 			"(select uuid from AentReln where RelationshipID in "+
			"(select RelationshipID from AEntReln where AEntReln.uuid="+current_answer_id+" "+
 			"AND RelationshipID in "+
			"(select RelationshipID from latestNonDeletedRelationship where RelnTypeID="+
 			"(select RelnTypeID from RelnType where RelnTypeName='Answer and File') "+
			"and latestNonDeletedRelationship.Deleted IS NULL)))";
	
	fetchAll(loadFileForAnswerQuery, new FetchCallback() {
        onFetch(result) {
        	files_in_current_ques.clear();
        	files_origin.clear();
        	files_in_current_ques.addAll(result);
        	files_origin.addAll(result);
        }

        onError(message) {
            showToast(message);
        }
    });

    fetchAll(loadFileTypeQuery, new FetchCallback() {
        onFetch(result) {
        	file_and_fileType.clear();     	
        	file_and_fileType.addAll(result);
        }
        onError(message) {
            showToast(message);
        }
    });
    
    createAnswerPage();
	showTabGroup("survey", current_answer_id, new FetchCallback() {
        onFetch(result) {
			answerInfoOriginal.clear();
        	populateList("survey/answerFile/answerFileList", files_in_current_ques);   	
        	populateDropDown("survey/answerFile/file_Category",categoryTypes);
        	answerInfoOriginal.add(getFieldValue("survey/answerHidden/answerLabel"));
        	answerInfoOriginal.add(getFieldValue("survey/answerBasic/answerText"));
        	answerInfoOriginal.add(getFieldValue("survey/answerHidden/answerStartTimestamp"));
            showToast("Loaded answer"+result.getId());            
        }
        onError(message) {
            showToast(message);
        }
    });
	}
}

startNewAnswer(String typeflag){

	String current_start_time=getCurrentTime();
	
	//origin_selected_interviewer.clear();
	selected_answer_interviewer.clear();
	//candidate_answer_interviewer.clear();

	//origin_selected_interviewee.clear();
	selected_answer_interviewee.clear();
	//candidate_answer_interviewee.clear();
	
	answerInfoOriginal.clear();
	answerInfoNew.clear();
	
	files_in_current_ques.clear();
	file_and_fileType.clear();
	files_origin.clear();
	
	answer_id=null;
	current_answer_file_id=null;
	current_answer_id=null;
	answerFile=true;
	ansLabelFstPart=null;
	ansLabelSndPart=null;
	ansLabelMidPart=null;
	tempAnsLabel=null;
	
	dupAnsLblChange=false;
	dupFileLblChange=false;
	dupAnsLblInfo.clear();
	dupFileLblInfo.clear();
	hiddenAnsInfo.clear();

    //currentDateTimeArray=current_start_time.toString().split("\\s+");
    //String currentDate=currentDateTimeArray[0];
    String currentDate=getCurrentDate();
   
    ansLabelFstPart=current_question_label+"_"+"Answer_";
    ansLabelSndPart="_"+currentDate;

    Iterator itConsultant=sssConsultantList.iterator();
    firstConsultant=itConsultant.next();
    ansLabelMidPart=firstConsultant;

    if(sssConsultantList.size()>1){
		ansLabelMidPart=ansLabelMidPart+"EtAl";
    }
    tempAnsLabel=ansLabelFstPart+ansLabelMidPart+ansLabelSndPart;
    if(typeflag.equals("non")){
    	createAnswerPage();
		newTabGroup("survey");
		setFieldValue("survey/answerHidden/answerQuestionnaireID", current_quesnir_id);
		setFieldValue("survey/answerHidden/answerQuestionID", current_question_id);
		//setFieldValue("survey/answerHidden/answerChoice", "N/A");
		setFieldValue("survey/answerHidden/answerStartTimestamp", current_start_time);
		
		labelDeduplicate(tempAnsLabel,"AnswerLabel","survey/answerHidden/answerLabel","answer");
		//setFieldValue("survey/answerBasic/answerLabel", tempAnsLabel);
		populateList("survey/answerFile/answerFileList",files_in_current_ques);
		populateDropDown("survey/answerFile/file_Category",categoryTypes);
		ansOrNot=true;
    }
    else if(typeflag.equals("chk")){
    	String tempChkQues=null;
    	for(ques: ques_in_current_quesnir){
    		if(ques.get(0).equals(current_question_id)){
    			tempChkQues=ques.get(1);
    		}
    	}
    	if(tempChkQues!=null){
    		createChkListPage(current_question_id);
    		newTabGroup("survey");
    		setFieldValue("survey/answerBasic/quesText", tempChkQues);
    	}
    }	
    else{
    	hiddenAnsInfo.put("quesnir_id",current_quesnir_id);
		hiddenAnsInfo.put("ques_id",current_question_id);
		hiddenAnsInfo.put("start_time",current_start_time);
    	ansLabelDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
		"where AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerLabel') "+
		"and (measure = '"+tempAnsLabel+"' or measure like '"+tempAnsLabel+"(%)')";
		fetchAll(ansLabelDuplicateQuery,new FetchCallback() {
		onFetch(result) {
			if(!isNull(result)){
				tempAnsLabel=makeLabel(result,tempAnsLabel,"AnswerToQuestionnaire","AnswerLabel");
			}
			hiddenAnsInfo.put("label",tempAnsLabel);
			switch(typeflag){
				case "aud":
					newFile("answer","Audio");
					attachAudioToField("file/fileInfo/audioFileContent");
				break;
				case "vid":
					newFile("answer","Video");
					attachVideoToField("file/fileInfo/videoFileContent");
				break;
				case "pho":
					newFile("answer","Photo");
					attachPictureToField("file/fileInfo/photoFileContent");
				break;

				case "fil":
					newFile("answer","Sketch");
					attachFileToField("file/fileInfo/sketchFileContent");
				break;
			}
			
			ansOrNot=false;
		}
		});
    }
    
	
}



loadAnswerFromQuesInQuesnir(String ques_id){
	//showWarning("loadAnswerFromQuesInQuesnirques_id",ques_id);
	if(isNull(current_quesnir_name)){
		showWarning("No questionnaire name available","Can't get the questionnaire name, please contact the admin");
		return;
	}
	if(ques_id==null || ques_id.equals("null")){
		current_question_id=getListItemValue();
	}
	else
	{
		current_question_id=ques_id;
	}
	//showWarning("loadAnswerFromQuesInQuesnircurrent_question_id",current_question_id);
	Boolean quesLabelRead=false;
	for(ques: ques_in_current_quesnir){
		if(ques.get(0).equals(current_question_id))
		{
			current_question_content=ques.get(1);
			break;
		}
	}
	if(isNull(current_question_content)){
		showWarning("No question content available","Can't get the question content, please contact the admin");
		return;
	}
	for(quesLabel: queslabel_current_quesnir){
		if(quesLabel.get(0).equals(current_question_id))
		{
			current_question_label=quesLabel.get(1);
			quesLabelRead=true;
			break;
		}
	}
	

	if(quesLabelRead){
		ansTypeChecking(current_question_id);
	}
	
	else{
		queslabel_quesnir_query="select uuid,measure from latestNonDeletedAentValue "+ 
				"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionID') "+
				"and uuid in "+
	 			"(select uuid from AentReln where RelationshipID in "+
				"(select RelationshipID from AEntReln where AEntReln.uuid="+current_quesnir_id+" "+
	 			"AND RelationshipID in "+
				"(select RelationshipID from latestNonDeletedRelationship where RelnTypeID="+
	 			"(select RelnTypeID from RelnType where RelnTypeName='Questionnaire and Question') "+
				"and latestNonDeletedRelationship.Deleted IS NULL))) group by uuid";
			fetchAll(queslabel_quesnir_query,
        				new FetchCallback() {
        					onFetch(result) {
        						if (!isNull(result)) {	
        							queslabel_current_quesnir.clear();
        							queslabel_current_quesnir.addAll(result);

									for(quesLabel: queslabel_current_quesnir){
										if(quesLabel.get(0).equals(current_question_id))
										{
											current_question_label=quesLabel.get(1);
											quesLabelRead=true;
											break;
										}
									}

									if(quesLabelRead){
										ansTypeChecking(current_question_id);
									}
									else{
											showWarning("The data is outdated","Please exit the module and retry");
									}
        						}
        						else{
        							showWarning("Something wrong with getting data","Please exit the module and retry");
        							return;
        						}
        					}
        			       
        				onError(message) {
        					showToast(message);
        				}
        				});

	}
}

ansTypeChecking(String ques_id){
	String answerType=null;
	String recordingType=null;
	for(ques: quesRecordingType){
		if(ques.get(0).equals(ques_id)){
			recordingType=ques.get(1);
			switch(recordingType){
				case "Audio_Required":
					answerType="aud";
				break;
				case "Video_Required":
					answerType="vid";
				break;
				case "Photo_Required":
					answerType="pho";
				break;
				case "File_Required":
					answerType="fil";
				break;
				case "None":
					answerType="non";
				break;
				case "CheckList":
					answerType="chk";
				break;
				default:
					answerType="non";
				break;
			}
			startNewAnswer(answerType);
			break;
		}
	}
}
saveNewAnswer(){
	if(!ansOrNot){
		attributes = createAttributeList();
		
		attributes.add(createEntityAttribute("AnswerQuestionnaireID", null, null, hiddenAnsInfo.get("quesnir_id"), null));
		attributes.add(createEntityAttribute("AnswerQuestionID", null, null, hiddenAnsInfo.get("ques_id"), null));
		attributes.add(createEntityAttribute("AnswerLabel", null, null, hiddenAnsInfo.get("label"), null));
		attributes.add(createEntityAttribute("AnswerStartTime", null, null, hiddenAnsInfo.get("start_time"), null));

		saveArchEnt(null, "AnswerToQuestionnaire", null, attributes, new SaveCallback(){
			onSave(uuid, newRecord){
				//showWarning("saveArchEnt 1","saveArchEnt 1");
				answer_id = uuid;
				//showWarning("answer_id 1",answer_id);
				current_answer_id=answer_id;
				if (newRecord) {
						for(file : files_in_current_ques){
							//showWarning("file 1",file.get(0));
							saveEntitiesToRel("Answer and File",answer_id,file.get(0));		
						}
						
						newAnswer=new ArrayList();
						newAnswer.add(answer_id);
						newAnswer.add(hiddenAnsInfo.get("label"));
						sss_answer_list.add(newAnswer);
						populateList("sessionForAnswer/sssAnsList/sssAnswerList",sss_answer_list);
						//showWarning("populateList","populateList");
						//if this is the second answer with a duplicate label
						//the other answer label will be changed with a suffix (1)
						if(dupAnsLblChange && !isNull(dupAnsLblInfo)){
							newLabel=dupAnsLblInfo.get(1);
							showWarning("newLabel",newLabel);
							ansEntityId=dupAnsLblInfo.get(0);
							showWarning("ansEntityId",ansEntityId);
							attributes = createAttributeList();
							attributes.add(createEntityAttribute("AnswerLabel", null, null, newLabel, null));
							saveArchEnt(ansEntityId, "AnswerToQuestionnaire", null, attributes);
							showWarning("AnswerToQuestionnaire","AnswerToQuestionnaire");
							dupAnsLblChange=false;
							dupAnsLblInfo.clear();
						}
						showToast("new answer created");
						//cancelTabGroup("file", true);
						autoSaveSession("head");
						//showWarning("autoSaveSession 3","autoSaveSession 3");
						nextQuestion(hiddenAnsInfo.get("ques_id"));
					}
			}
			onError(message) {
				showWarning("error on saveNewAnswer1",message);
			}  
		});
	}
	else{
		if(isNull(getFieldValue("survey/answerBasic/answerText"))){
			if(isNull(files_in_current_ques)){
				showWarning("Warning","Please input answer text or adding an answer file");
				return;
			}
			else if((files_in_current_ques.size()==1) && files_in_current_ques.get(0).get(0).equals("0000")){
				showWarning("Warning","Please input answer text or adding an answer file");
				return;
			}
			
		}
		
		if(isNull(current_answer_id)){//create new answer
			String newAnsLabel=getFieldValue("survey/answerHidden/answerLabel");
			
			saveTabGroup("survey", answer_id, null, null, new SaveCallback() {
				onSave(uuid, newRecord) {
					answer_id = uuid;
					//showWarning("answer_id",answer_id);
					current_answer_id=answer_id;
					//showWarning("current_answer_id",current_answer_id);

					if (newRecord) {

						for(file : files_in_current_ques){
							saveEntitiesToRel("Answer and File",answer_id,file.get(0));		
						}
						
						newAnswer=new ArrayList();
						newAnswer.add(answer_id);
						newAnswer.add(newAnsLabel);
						sss_answer_list.add(newAnswer);
						
						populateList("sessionForAnswer/sssAnsList/sssAnswerList",sss_answer_list);
						//if this is the second answer with a duplicate label
						//the other answer label will be changed with a suffix (1)
						if(dupAnsLblChange && !isNull(dupAnsLblInfo)){
							newLabel=dupAnsLblInfo.get(1);
							ansEntityId=dupAnsLblInfo.get(0);
							attributes = createAttributeList();
							attributes.add(createEntityAttribute("AnswerLabel", null, null, newLabel, null));
							saveArchEnt(ansEntityId, "AnswerToQuestionnaire", null, attributes);
							dupAnsLblChange=false;
							dupAnsLblInfo.clear();
						}
						showToast("new answer created");
						String curntQuesId=getFieldValue("survey/answerHidden/answerQuestionID");
						cancelTabGroup("survey", true);
						//cancelTabGroup("answerToQuestion", true);
						autoSaveSession("head");
						//showWarning("autoSaveSession 1","autoSaveSession 1");
						nextQuestion(curntQuesId);
					}
				}
				onError(message) {
					showWarning("error on saveNewAnswer2",message);
				}  
				});
		}

		else{//this is changing answerInfo		
				//saveChangedAnswer();
			answerInfoNew.clear();
			answerInfoNew.add(getFieldValue("survey/answerHidden/answerLabel"));
			answerInfoNew.add(getFieldValue("survey/answerBasic/answerText"));
			answerInfoNew.add(getFieldValue("survey/answerHidden/answerStartTimestamp"));
			Hashtable fileListChange=listChange(files_in_current_ques,files_origin);
			Hashtable answerBasicInfoChange=listChange(answerInfoNew,answerInfoOriginal);
			//case1: Nothing changed
			if((fileListChange.containsKey("EQUAL"))&&(answerBasicInfoChange.containsKey("EQUAL"))){
					showWarning("Answer Modification","No data is changed");
					return;
				}
			//case2: only fileList changed
			else if((!fileListChange.containsKey("EQUAL"))&&(answerBasicInfoChange.containsKey("EQUAL"))){
					for(fileDelete:ansFileOriginReln){
						deleteRel(fileDelete.get(0));
					}
					
					for(file : files_in_current_ques){
						saveEntitiesToRel("Answer and File",current_answer_id,file.get(0));		
					}

					if(isNull(sss_id)){
						populateList("sessionForAnswer/sssAnsList/sssAnswerList",sss_answer_list);
					}
					
					showToast("file list changed");
					cancelTabGroup("survey", true);
				}
			else{//case 3: both answer basic info and file list are changed
					saveTabGroup("survey", current_answer_id, null, null, new SaveCallback() {
							onSave(uuid, newRecord) {
								answer_id = uuid;	//not sure how it's working

								for(fileDelete:ansFileOriginReln){
									deleteRel(fileDelete.get(0));
								}
								for(file : files_in_current_ques){
									saveEntitiesToRel("Answer and File",current_answer_id,file.get(0));		
								}
								
								showToast("Answer Info Changed");
								cancelTabGroup("survey", true);
								autoSaveSession("head");
								//showWarning("autoSaveSession 2","autoSaveSession 2");
								
						}
						onError(message) {
							showWarning("error on saveNewAnswer3 ",message);
						}  
						});
			}

		}
	}
}


nextQuestion(String curntQuesId){
	//showWarning("curntQuesId",curntQuesId);
	int idxCrntQues=-1;
	String nextQuesContent=null;
	String nextQuesId=null;
	for(int i=0;i<ques_in_current_quesnir.size();i++){
		if(curntQuesId.equals(ques_in_current_quesnir.get(i).get(0))){
			idxCrntQues=i;
			break;
		}
	}
	//showWarning("idxCrntQues",idxCrntQues.toString());
	if(idxCrntQues!=ques_in_current_quesnir.size()-1){
		nextQuesId=ques_in_current_quesnir.get(idxCrntQues+1).get(0);
		nextQuesContent=ques_in_current_quesnir.get(idxCrntQues+1).get(1);
		showAlert("Next question","Do you want to go to the next question:\n"+nextQuesContent,"checkPersonAns(\""+nextQuesId+"\")","stayInCurrentPage()");
	}
	else{
		if(hasView("survey/answerBasic/radioGrp")){
			cancelTabGroup("survey",true);
		}
	}
}

viewOrDeleteFileReln(){
	select_file_id=getListItemValue();
	if(isNull(select_file_id) || select_file_id.equals("0000")){
		showWarning("Invalid file","File not exist");
		return;
	}
	showAlert("View File Info","Do you want to view file info?","loadAnswerFileInfo(\"answer\")","deleteRelnAlert()");
}
deleteRelnAlert(){
	showAlert("Delete File","Do you want to delete this file from this answer?","deleteFileRelation()","returnToCurrentPage()");
}
deleteFileRelation(){		
	delete_file_id=getListItemValue();
	if(isNull(delete_file_id)){
		showWarning("Error","No file selected or file is not available,please contact the admin");
		return;
	}
	if(files_in_current_ques.size()==1){
		placeholder=new ArrayList();
		placeholder.add("0000");
		placeholder.add("No-file-placeholder");
		files_in_current_ques.add(placeholder);
	}
	for(deleteFile:files_in_current_ques){
		if(deleteFile.get(0).equals(delete_file_id))
		{
			files_in_current_ques.remove(deleteFile);
			populateList("survey/answerFile/answerFileList",files_in_current_ques);
			break;
		}
	}
	for(fileToDelete:file_and_fileType){
		if(fileToDelete.get(0).equals(delete_file_id))
		{
			file_and_fileType.remove(deleteFile);
			break;
		}
	}
}

Boolean answerFile=false;//flag of whether user is viewing file from answer page

loadAnswerFileInfo(String typeFlag){
	String view_file_id=null;
	if(typeFlag.equals("answer")){
		current_answer_file_id=getListItemValue();
		if(isNull(current_answer_file_id)){
			showWarning("No file chosen","No file is selected, or the file is not available");
			return;
		}
		answerFile=true;
		view_file_id=current_answer_file_id;
	}
	else{
		file_id=getListItemValue();
		if(isNull(file_id)){
			showWarning("No file chosen","No file is selected, or the file is not available");
			return;
		}
		answerFile=false;
		view_file_id=file_id;
	}
	//showWarning("answerfile",answerFile.toString());
	checkFileTypeQuery="select measure from latestNonDeletedAentValue where latestNonDeletedAentValue.uuid="+view_file_id+" "+
	"and latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeKey.AttributeName='FileType');";
	//showWarning("checkFileTypeQuery",checkFileTypeQuery);
	fetchAll(checkFileTypeQuery,
			new FetchCallback() {
		        onFetch(result) {
					if (!isNull(result)) {
						//showWarning("fetchAll",result.getClass.getName());				
						String currentType=result.get(0).get(0);
						//showWarning("fetchAll",currentType);
						switch (currentType){
						case "Audio":		
							createFilePage("audio","attachAudioToField(\"file/fileInfo/audioFileContent\")",
								"saveFileFromAnswer(\"file/fileHidden/audioFileID\",\"file/fileInfo/audioFileContent\",\"file\",\"Audio\")");
							showTabGroup("file", view_file_id, new FetchCallback() {
						        onFetch(result) {						  
						            showToast("Loaded audio file"+result.getId());            
						        }
						        onError(message) {
						            showToast(message);
						        }
						    });
							break;
						case "Video":
							createFilePage("video","attachVideoToField(\"file/fileInfo/videoFileContent\")",
								"saveFileFromAnswer(\"file/fileHidden/videoFileID\",\"file/fileInfo/videoFileContent\",\"file\",\"Video\")");
							showTabGroup("file", view_file_id, new FetchCallback() {
						        onFetch(result) {						  
						            showToast("Loaded video file"+result.getId());            
						        }
						        onError(message) {
						            showToast(message);
						        }
						    });
							break;
						case "Photo":
							createFilePage("photo","attachPictureToField(\"file/fileInfo/photoFileContent\")",
								"saveFileFromAnswer(\"file/fileHidden/photoFileID\",\"file/fileInfo/photoFileContent\",\"file\",\"Photo\")");
							showTabGroup("file", view_file_id, new FetchCallback() {
						        onFetch(result) {						  
						            showToast("Loaded photo file"+result.getId());            
						        }
						        onError(message) {
						            showToast(message);
						        }
						    });
							break;
						case "Sketch":
							createFilePage("sketch","attachFileToField(\"file/fileInfo/sketchFileContent\")",
								"saveFileFromAnswer(\"file/fileHidden/sketchFileID\",\"file/fileInfo/sketchFileContent\",\"file\",\"Recording\")");
							showTabGroup("file", view_file_id, new FetchCallback() {
						        onFetch(result) {						  
						            showToast("Loaded sketch file"+result.getId());            
						        }
						        onError(message) {
						            showToast(message);
						        }
						    });
							break;
						}
					}
					
		        }

		        onError(message) {
		            showToast(message);
		        }
		    });
	
}
/**Variables for files**/
categoryTypes=new ArrayList();
categoryTypes.add(new NameValuePair("{Audio}", "Audio"));
categoryTypes.add(new NameValuePair("{Video}", "Video"));
categoryTypes.add(new NameValuePair("{Photo}", "Photo"));
categoryTypes.add(new NameValuePair("{Other}", "Other"));
/**file dynamic ui creation **/
createFilePage(String fileType, String attachFunc, String saveFunc){
	String uiNamePrefix=null;
	String uiLabelPrefix=null;
	switch(fileType){
		case "audio":
		uiNamePrefix="audio";
		uiLabelPrefix="Audio";
		break;

		case "video":
		uiNamePrefix="video";
		uiLabelPrefix="Video";
		break;

		case "photo":
		uiNamePrefix="photo";
		uiLabelPrefix="Photo";
		break;

		case "sketch":
		uiNamePrefix="sketch";
		uiLabelPrefix="Sketch";
		break;
	}
	//Generate ui
	if(!hasView("file/fileHidden/"+uiNamePrefix+"FileID")){
		removeAllViewsAndContainers("file");
	 	executeViewTask(new ViewTask() {
			doTask() { 

				//file hidden	
		 	
				idFileDef = createViewDef().createTextField().setLabel(uiLabelPrefix+" file label").setAttributeName("FileID").setAttributeType("measure").
				setAnnotationEnabled(true).setReadOnly(true);

				typeViewDef=createViewDef().createTextField().setLabel("File type").setAttributeName("FileType").setAttributeType("measure").
				setAnnotationEnabled(true).setReadOnly(true);

				creatorViewDef=createViewDef().createTextField().setLabel("Creator").setAttributeName("FileCreator").setAttributeType("measure").
				setAnnotationEnabled(true).setReadOnly(true);

				startTimeViewDef=createViewDef().createTextField().setLabel("Start time").setAttributeName("FileStartTime").setAttributeType("measure").
				setAnnotationEnabled(true).setReadOnly(true);

				endTimeViewDef=createViewDef().createTextField().setLabel("End time").setAttributeName("FileEndTime").setAttributeType("measure").
				setAnnotationEnabled(true).setReadOnly(true);

				if (fileType.equals("audio") || fileType.equals("sketch")){
					fileContentViewDef=createViewDef().createFileGroup(true).setLabel(uiLabelPrefix).setAttributeName("FileContent").setAttributeType("measure").setAnnotationEnabled(true);
				}
				else if(fileType.equals("video")){
					fileContentViewDef=createViewDef().createVideoGallery(true).setLabel("Video").setAttributeName("FileContent").setAttributeType("measure").setAnnotationEnabled(true);
				}
				else{
					fileContentViewDef=createViewDef().createCameraGallery(true).setLabel("Photo").setAttributeName("FileContent").setAttributeType("measure").setAnnotationEnabled(true);
				}
				nameViewDef=createViewDef().createTextField().setLabel(uiLabelPrefix+" file name").setAttributeName("FileName").setAttributeType("measure");

				createView("file/fileHidden/"+uiNamePrefix+"FileID", idFileDef,"file/fileHidden");
				createView("file/fileHidden/"+uiNamePrefix+"FileType", typeViewDef,"file/fileHidden");
				createView("file/fileHidden/"+uiNamePrefix+"FileCreator", creatorViewDef,"file/fileHidden");
				createView("file/fileHidden/"+uiNamePrefix+"FileStartTime", startTimeViewDef,"file/fileHidden");
				createView("file/fileHidden/"+uiNamePrefix+"FileEndTime", endTimeViewDef,"file/fileHidden");
				createView("file/fileHidden/"+uiNamePrefix+"FileName", nameViewDef,"file/fileHidden");

				//non-hidden page
				newBtnViewDef=createViewDef().createButton().setLabel("New "+ uiLabelPrefix);

				pathTextViewDef=createViewDef().createTextField().setLabel(uiLabelPrefix+" file path").setAttributeName("FilePath").setAttributeType("measure").
				setAnnotationEnabled(true).setReadOnly(true);

				saveBtnViewDef=createViewDef().createButton().setLabel("Save "+ uiLabelPrefix);
				//createView("file/fileInfo/"+uiNamePrefix+"FileName", nameViewDef,"file/fileInfo");

				
				createView("file/fileInfo/"+uiNamePrefix+"FileContent", fileContentViewDef,"file/fileInfo");
				createView("file/fileInfo/Take_"+uiLabelPrefix+"_File", newBtnViewDef,"file/fileInfo");
				createView("file/fileInfo/"+uiNamePrefix+"FilePath", pathTextViewDef,"file/fileInfo");
				createView("file/fileInfo/Save_New_"+uiLabelPrefix, saveBtnViewDef,"file/fileInfo");

			    onEvent("file/fileInfo/Take_"+uiLabelPrefix+"_File","click",attachFunc);
				//onEvent("file/fileInfo/Save_New_"+uiLabelPrefix,"click","saveFileFromAnswer(\"file/fileInfo/"+uiNamePrefix+"FileName\",\"file/fileInfo/"+uiNamePrefix+"FileContent\",\"file\",uiLabelPrefix)");
				onEvent("file/fileInfo/Save_New_"+uiLabelPrefix,"click",saveFunc);
				}
		});

	}
}
/**File functions**/
newFile(String typeFlag, String fileType){
	String fileCategory=null;
	String tempAnsID=null;
	switch (typeFlag){
		case "answer":
		if(fileType==null){
			fileCategory=getFieldValue("survey/answerFile/file_Category");
			tempAnsID=getFieldValue("survey/answerHidden/answerLabel");
		}
		else if(!fileType.equals("emr")){
			fileCategory=fileType;
	        tempAnsID=hiddenAnsInfo.get("label");
		}
		else{
			fileCategory=fileType;
	        tempAnsID=emrAnsInfo.get("label");
		}
			answerFile=true;
			current_answer_file_id=null;	
			
			switch (fileCategory){
				case "Audio":		
					//Generate audio file creation ui pages
				 	//createAudioFilePage("new");
					createFilePage("audio","attachAudioToField(\"file/fileInfo/audioFileContent\")",
						"saveFileFromAnswer(\"file/fileHidden/audioFileID\",\"file/fileInfo/audioFileContent\",\"file\",\"Audio\")");
					newTabGroup("file");

					String tempAudioID=tempAnsID+"_Audio";
					labelDeduplicate(tempAudioID,"FileID","file/fileHidden/audioFileID","file");

					setFieldValue("file/fileHidden/audioFileCreator",username);
					setFieldValue("file/fileHidden/audioFileType","Audio");
					setFieldValue("file/fileHidden/audioFileStartTime", getCurrentTime());
				break;
				case "Video":
					//createVideoPage("new");
					createFilePage("video","attachVideoToField(\"file/fileInfo/videoFileContent\")",
						"saveFileFromAnswer(\"file/fileHidden/videoFileID\",\"file/fileInfo/videoFileContent\",\"file\",\"Video\")");
					newTabGroup("file");
					String tempVideoID=tempAnsID+"_Video";
					labelDeduplicate(tempVideoID,"FileID","file/fileHidden/videoFileID","file");
	
					setFieldValue("file/fileHidden/videoFileCreator",username);
					setFieldValue("file/fileHidden/videoFileType","Video");
					setFieldValue("file/fileHidden/videoFileStartTime", getCurrentTime());
				break;

				case "Photo":
					//createPhotoPage("new");
					createFilePage("photo","attachPictureToField(\"file/fileInfo/photoFileContent\")",
						"saveFileFromAnswer(\"file/fileHidden/photoFileID\",\"file/fileInfo/photoFileContent\",\"file\",\"Photo\")");
					newTabGroup("file");
					String tempPhotoID=tempAnsID+"_Photo";
					labelDeduplicate(tempPhotoID,"FileID","file/fileHidden/photoFileID","file");

					setFieldValue("file/fileHidden/photoFileCreator",username);
					setFieldValue("file/fileHidden/photoFileType","Photo");
					setFieldValue("file/fileHidden/photoFileStartTime", getCurrentTime());
				
				break;
				case "Other":
					//createSketchPage("new");
					createFilePage("sketch","attachFileToField(\"file/fileInfo/sketchFileContent\")",
						"saveFileFromAnswer(\"file/fileHidden/sketchFileID\",\"file/fileInfo/sketchFileContent\",\"file\",\"Recording\")");
					newTabGroup("file");
					String tempSketchID=tempAnsID+"_Recording";
					labelDeduplicate(tempSketchID,"FileID","file/fileHidden/sketchFileID","file");

					setFieldValue("file/fileHidden/sketchFileCreator",username);
					setFieldValue("file/fileHidden/sketchFileType","Recording");
					setFieldValue("file/fileHidden/sketchFileStartTime", getCurrentTime());
					
					break;
				case "emr":		
					//Generate audio file creation ui pages
				 	//createAudioFilePage("new");
					createFilePage("audio","attachAudioToField(\"file/fileInfo/audioFileContent\")",
						"saveEmrFile(\"file/fileHidden/audioFileID\",\"file/fileInfo/audioFileContent\",\"file\",\"Audio\")");
					newTabGroup("file");

					String tempAudioID=tempAnsID+"_Audio";
					labelDeduplicate(tempAudioID,"FileID","file/fileHidden/audioFileID","file");

					setFieldValue("file/fileHidden/audioFileCreator",username);
					setFieldValue("file/fileHidden/audioFileType","Audio");
					setFieldValue("file/fileHidden/audioFileStartTime", getCurrentTime());
				break;
				default:
					showWarning("Invalid category","Please select a valid file category");
				break;
			}
		break;
	}
}

saveFileFromAnswer(String ref, String fileListViewRef, String tabGroupRef, String fileType){
	if(isNull(getFieldValue(fileListViewRef))){	
		showWarning("Warning","File not recorded");
		return;
	}
	else{
		if(answerFile){
		//busyDialog = showBusy("saving data", "please wait");
		saveTabGroup(tabGroupRef,current_answer_file_id, null, null, new SaveCallback() {
			onSave(uuid, newRecord) {
				current_answer_file_id = uuid;
				//showWarning("current_answer_file_id",current_answer_file_id);
				if (newRecord) {	
					//showWarning("newRecord","newRecord");	
					newFile=new ArrayList();
					newFile.add(current_answer_file_id);
					newFile.add(getFieldValue(ref));
					files_in_current_ques.add(newFile);
					for(file:files_in_current_ques){
						if(file.get(0).equals("0000")){
							files_in_current_ques.remove(file);
							break;
						}
					}
								
					//Adding new file and file type for changing fileID
					newFileType=new ArrayList();
					newFileType.add(current_answer_file_id);
					newFileType.add(fileType);
					file_and_fileType.add(newFileType);

					if(dupFileLblChange && !isNull(dupFileLblInfo)){
						newLabel=dupFileLblInfo.get(1);
						entityId=dupFileLblInfo.get(0);
						attributes = createAttributeList();
						attributes.add(createEntityAttribute("FileID", null, null, newLabel, null));
						saveArchEnt(entityId, "File", null, attributes);
						dupFileLblChange=false;
						dupFileLblInfo.clear();
					}	
					if(ansOrNot){
						populateList("survey/answerFile/answerFileList",files_in_current_ques);
						showTab("survey/answerFile");
					}	
					//else{
						//we need to save the answer info here
					saveNewAnswer();

					//}	
					//showToast("New file record for answer created");

					cancelTabGroup(tabGroupRef, true);
					//busyDialog.dismiss();
					//showWarning("SAVE FILE DONE","SAVE FILE DONE");
					
				}
				else{
					for(changeFile:files_in_current_ques){
						if(changeFile.get(0).equals(current_answer_file_id)){
							newFile=new ArrayList();
							newFile.add(current_answer_file_id);
							newFile.add(getFieldValue(ref));
							files_in_current_ques.remove(changeFile);
							files_in_current_ques.add(newFile);
							populateList("survey/answerFile/answerFileList",files_in_current_ques);
							break;
						}
					}
					showToast("file record for answer changed");
					cancelTabGroup(tabGroupRef, true);
					showTab("survey/answerFile");
				}
			}
			onError(message) {
				showWarning("error",message);
			}  
			});
		}
		else{
			saveTabGroup(tabGroupRef,file_id, null, null, new SaveCallback() {
				onSave(uuid, newRecord) {
					file_id = uuid;
					if (newRecord) {				
						showToast("New file record created");
					}
					else{
						showToast("file record changed");
					}
				}
				onError(message) {
					showWarning("error",message);
				}  
				});
		}
	}
}

returnToCurrentPage(){
	return;
}

attachAudioToField(String ref) {
	/*
	if(!isNull(getFieldValue(ref))){
		showWarning("File exists","File exists, please Create New File");
		return;
	}
	*/
	recordAudio("setAudioToField(\""+ref+"\")");
	//recordAudio("checkAudioStop(\""+ref+"\")");
}

setAudioToField(String ref) {
	String filePath = getLastAudioFilePath();
	List selectedFiles = null;
    //if (isNull(getFieldValue(ref))) {
    	selectedFiles = new ArrayList();
    	selectedFiles.add(filePath);
    	addFile(ref, filePath);  	
    //} else {
    	//selectedFiles = _convertPairsToList(getFieldValue(ref));
    //	showWarning("File exists","File exists, please Create New File");
    //}
    setFieldValue(ref, _convertListToPairs(selectedFiles));
    setFieldValue("file/fileInfo/audioFilePath",filePath);
    setFieldValue("file/fileHidden/audioFileEndTime",getCurrentTime());
}


attachVideoToField(String ref) {
	if(!isNull(getFieldValue(ref))){
		showWarning("File exists","File exists, please Create New File");
		return;
	}
	openVideo("setVideoToField(\""+ref+"\")");
}


setVideoToField(String ref) {
	String filePath = getLastVideoFilePath();
	List selectedFiles = null;
    if (isNull(getFieldValue(ref))) {
    	selectedFiles = new ArrayList();
    	selectedFiles.add(filePath);
    	addVideo(ref, filePath);
    } else {
    	//selectedFiles = _convertPairsToList(getFieldValue(ref));
    	showWarning("File exists","File exists, please Create New File");
    }
    setFieldValue(ref, _convertListToPairs(selectedFiles));
    setFieldValue("file/fileInfo/videoFilePath",filePath);
    setFieldValue("file/fileHidden/videoFileEndTime",getCurrentTime());
}


attachPictureToField(String ref) {
	if(!isNull(getFieldValue(ref))){
		showWarning("File exists","File exists, please Create New File");
		return;
	}
	openCamera("setPictureToField(\""+ref+"\")");
}

/**
  */
setPictureToField(String ref) {
	String filePath = getLastPictureFilePath();
	List selectedFiles = null;
    if (isNull(getFieldValue(ref))) {
    	selectedFiles = new ArrayList();
    	selectedFiles.add(filePath);
    	addPicture(ref, filePath);
    } else {
    	//selectedFiles = _convertPairsToList(getFieldValue(ref));
    	showWarning("File exists","File exists, please Create New File");
    }
    setFieldValue(ref, _convertListToPairs(selectedFiles));
    setFieldValue("file/fileInfo/photoFilePath",filePath);
    setFieldValue("file/fileHidden/photoFileEndTime",getCurrentTime());
}


attachFileToField(String ref) {
	if(!isNull(getFieldValue(ref))){
		showWarning("File exists","File exists, please Create New File");
		return;
	}
	showFileBrowser("setFileToField(\""+ref+"\")");
}


setFileToField(String ref) {
	String filePath = getLastSelectedFilepath();
	List selectedFiles = null;
    if (isNull(getFieldValue(ref))) {
    	selectedFiles = new ArrayList();
    	selectedFiles.add(filePath);
    	addFile(ref, filePath);
    } else {
    	//selectedFiles = _convertPairsToList(getFieldValue(ref));
    	showWarning("File exists","File exists, please Create New File");
    }
    setFieldValue(ref, _convertListToPairs(selectedFiles));
    setFieldValue("file/fileInfo/sketchFilePath",filePath);
    setFieldValue("file/fileHidden/sketchFileEndTime",getCurrentTime());
}

/**common methods**/
addItemToTargetList(ArrayList sourceList, String type_flag, String intervieweeID){	
	if(isNull(intervieweeID))
	{
		itemId=getListItemValue();	
	}
	else
	{
		itemId=intervieweeID;
	}
	int idx_item=-1;
		
	if(isNull(itemId)){
		showToast("No Item selected");
		return;
	}
	if(itemId.equals("placeholder")){
		showToast("Invalid item");
		return;
	}
	else{	
		
		
		for (int i=0; i<sourceList.size();i++){
			if (sourceList.get(i).get(0).equals(itemId)) {
				idx_item=i;
				break;
			}
		}
		
		if (idx_item>=0) {
			switch (type_flag){
			case "sessionFile":
				sss_answer_list.add(sourceList.get(idx_item));
				candidate_files_session.remove(idx_item);
				//loadSessionInterviewer("session");
				populateList("sessionForAnswer/sssAnsList/sssAnswerList", sss_answer_list);
				//populateList("sessionForAnswer/sssAnsList/sssAnsSelList", candidate_files_session);
				
				break;
			
			case "fieldTripSession":

				//String tempSssLabel=sourceList.get(idx_item).get(1);
			
				String tempSssDate=extractLabelDate(sourceList.get(idx_item).get(1),"sss");
				String tempTripStartDate=dateParser(getFieldValue("fieldTrip/fieldTripBasicInfo/fieldTripStartDatePicker"));
				String tempTripEndDate=dateParser(getFieldValue("fieldTrip/fieldTripBasicInfo/fieldTripEndDatePicker"));
				Boolean addOrNot=dateCompare(tempTripStartDate,tempSssDate,tempTripEndDate);
				if(addOrNot){
					selected_session_fieldTrip.add(sourceList.get(idx_item));
					candidate_session_fieldTrip.remove(idx_item);
					populateList("fieldTrip/fieldTripSession/fieldTripFileList", selected_session_fieldTrip);
					populateList("fieldTrip/fieldTripSession/fieldTripFileSelectionList", candidate_session_fieldTrip);
				}
				else{
					showWarning("invalid date","This session is not taken in this fieldTrip date period");
				}
			
				break;
			
			}
		}
		else{
			showWarning("Item Not Found","Oops! Can't find this item, it could be not valid anymore, please contact the Admin");
		}
		
	}
}


deleteItemFromTargetList(ArrayList targetList, String type_flag, String toDelId){
	if(type_flag.equals("sessionFile")){
		deleteItemId=toDelId;
	}
	else{
		deleteItemId=getListItemValue();
	}
	int idx_delete=-1;
	if(isNull(deleteItemId)){
		showToast("No Item selected");
		return;
	}
	if(deleteItemId.equals("placeholder")){
		showToast("Invalid item");
		return;
	}
	else{	
		
		for (int i=0; i<targetList.size();i++){
			if (targetList.get(i).get(0).equals(deleteItemId)) {
				idx_delete=i;
				break;
			}
		}
		
		if (idx_delete>=0) {
			switch (type_flag){
			case "sessionFile":
				candidate_files_session.add(targetList.get(idx_delete));
				sss_answer_list.remove(idx_delete);
				populateList("sessionForAnswer/sssAnsList/sssAnswerList", sss_answer_list);
				//populateList("sessionForAnswer/sssAnsList/sssAnsSelList", candidate_files_session);
				break;
			case "fieldTripSession":
				candidate_session_fieldTrip.add(targetList.get(idx_delete));
				selected_session_fieldTrip.remove(idx_delete);
				populateList("fieldTrip/fieldTripSession/fieldTripFileList", selected_session_fieldTrip);
				populateList("fieldTrip/fieldTripSession/fieldTripFileSelectionList", candidate_session_fieldTrip);
				break;
			}
		}
		else{
			showWarning("Item Not Found","Oops! Can't find this item, it could be not valid anymore, please contact the Admin");
		}
		
	}
}

extractLabelDate(String label, String typeflag){
	switch(typeflag){
		case "sss":
			String [] labelArray=label.split("_");
			String tempDate=labelArray[labelArray.length-1];
			if(tempDate.contains("(")){
				tempDate=tempDate.substring(0,tempDate.indexOf("("));
			}
			return tempDate;
		break;
	}
	return null;
}
stayInCurrentPage()
{
	return;
}
//measure whether two arraylists are identical, if not, recording what kinds of operation have been done
listChange(ArrayList targetList,ArrayList sourceList){
	Hashtable listChanges=new Hashtable();
	target_list=new ArrayList();
	source_list=new ArrayList();
	target_diff_on_source=new ArrayList();
	source_diff_on_target=new ArrayList();
	listChanges.clear();
	target_list.clear();
	source_list.clear();
	target_diff_on_source.clear();
	source_diff_on_target.clear();
	target_list.addAll(targetList);
	source_list.addAll(sourceList);
	target_list.removeAll(source_list);
	target_diff_on_source.addAll(target_list);//target - source
	target_list.clear();
	target_list.addAll(targetList);
	source_list.removeAll(target_list);
	source_diff_on_target.addAll(source_list);//source - target
	if((target_diff_on_source.isEmpty()) && (source_diff_on_target.isEmpty())){
		listChanges.put("EQUAL",targetList);//here can not put ("EQUAL",null)
	}
	else if((!target_diff_on_source.isEmpty()) && (source_diff_on_target.isEmpty())){
		listChanges.put("PUREADD",target_diff_on_source);

	}
	else if((target_diff_on_source.isEmpty()) && (!source_diff_on_target.isEmpty())){
		listChanges.put("PUREDELETE",source_diff_on_target);
	}
	else {
		listChanges.put("ADD",target_diff_on_source);
		listChanges.put("DELETE",source_diff_on_target);
	}
	return listChanges;
}

timeValidation(String startDateTime, String endDateTime, String flag){
	switch(flag){
	case ("sessionTime"):
		DateFormat df=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		df.setLenient(false);
		try{
			
			Date sdt=df.parse(startDateTime);
			Date edt=df.parse(endDateTime);	
			if(sdt.getTime()>edt.getTime()){
				//showWarning("std<edt","sdt<edt");
					return false;
					}
			
		
			else{
				String [] startTime=startDateTime.split("\\s+");
				String [] endTime=endDateTime.split("\\s+");
				if(startTime[0].equals(endTime[0])){
					return true;
				}
				else{
					//showWarning("std!=etd","std!=etd");
					return false;
				}
			}
		}
		catch(Exception ex){
			Log.e("error", ex.getMessage().toString());
			//String message = getStackTrace(excption);
			//exception.printStackTrace();
			return false;
		}
		break;
		
	case ("fieldTripTime"):
		DateFormat df=new SimpleDateFormat("yyyy-MM-dd");
	try{
		Date sdt=df.parse(startDateTime);
		Date edt=df.parse(endDateTime);
		if(sdt.getTime()>edt.getTime()){
			return false;
		}
	
		else{
			return true;
		}
	}
	catch(Exception excption){
		//exception.printStackTrace();
		return false;
	}
		break;
	}
}


dateParser(String sourceDate){
	//convert dd/mm/yyyy to yyyy-mm-dd
	String slashDateRegex="^\\d{2}[/]\\d{2}[/]\\d{4}$";
	Pattern slashDatePattern=Pattern.compile(slashDateRegex);
	Matcher slashDateMatcher=slashDatePattern.matcher(sourceDate);
	if (slashDateMatcher.find()){
		String [] dateParts=sourceDate.split("/");
		String targetDate=dateParts[2]+"-"+dateParts[1]+"-"+dateParts[0];
		return targetDate;
	}
	
	String hyphenDateRegex="^\\d{4}[-]\\d{2}[-]\\d{2}$";
	Pattern hyphenDatePattern=Pattern.compile(hyphenDateRegex);
	Matcher hyphenDateMatcher=hyphenDatePattern.matcher(sourceDate);
	if (hyphenDateMatcher.find()){
		String [] hyphenDateParts=sourceDate.split("-");
		String targetDate=hyphenDateParts[2]+"/"+hyphenDateParts[1]+"/"+hyphenDateParts[0];
		return targetDate;
	}
	//convert yyyy-mm-dd to dd/mm/yy
}

dateCompare(String beginDate, String middleDate, String endDate){
	DateFormat df=new SimpleDateFormat("yyyy-MM-dd");
	try{
		Date sdt=df.parse(beginDate);
		Date edt=df.parse(endDate);
		Date mdt=df.parse(middleDate);
		if((sdt.getTime()<=mdt.getTime()) && (mdt.getTime()<=edt.getTime())){
			return true;
		}
	
		else{
			return false;
		}
	}
	catch(Exception excption){
		//exception.printStackTrace();
		return false;
	}
	return false;
}

extractLatestTime(ArrayList timeList){
	Collections.sort(timeList);
	return timeList.get(timeList.size()-1);
}

labelDeduplicate(String originLabel, String attriName, String fieldRef, String typeflag){
	//Here we can't use regexp, so we use naive LIKE condition
	tempDuplicateList=new ArrayList();
	tempDuplicateList.clear();
	int sizeOfDup=0;
	duplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
	"where AttributeID=(select AttributeID from AttributeKey where AttributeName='"+attriName+"') "+
	"and (measure = '"+originLabel+"' or measure like '"+originLabel+"(%)')";

	fetchAll(duplicateQuery,new FetchCallback() {
		onFetch(result) {
			if(!isNull(result)){
				tempDuplicateList.addAll(result);
				sizeOfDup=tempDuplicateList.size();
				Pattern numberPat = Pattern.compile("\\(\\d+\\)");
				if(sizeOfDup==1){
					attributes = createAttributeList();
					duplicateOldLabel=tempDuplicateList.get(0).get(1);
					Matcher numMatcher = numberPat.matcher(duplicateOldLabel);
					if(numMatcher.find()){
						suffix=getNumSuffix(duplicateOldLabel);
						//suffix=duplicateOldLabel.substring(duplicateOldLabel.indexOf("("),duplicateOldLabel.length());
						if(suffix!=null){
							if(!suffix.equals("(1)"))
							{
								//newLabel=duplicateOldLabel.substring(0,duplicateOldLabel.indexOf("("))+"(1)";
								int sLen=suffix.length();
								newLabel=duplicateOldLabel.substring(0,duplicateOldLabel.length()-sLen)+"(1)";
							}
						}
						else{
							newLabel=duplicateOldLabel+"(1)";
						}
					}
					else{
						newLabel=duplicateOldLabel+"(1)";
					}
					
					entityId=tempDuplicateList.get(0).get(0);
					switch(typeflag){
						case "answer":
						dupAnsLblChange=true;
						dupAnsLblInfo.add(entityId);
						dupAnsLblInfo.add(newLabel);
						break;

						case "file":
						dupFileLblChange=true;
						//showWarning("dupFileLblChange","dupFileLblChange");
						dupFileLblInfo.add(entityId);
						dupFileLblInfo.add(newLabel);
						break;

					}
					originLabel=originLabel+"(2)";
		            setFieldValue(fieldRef,originLabel);
						//saveArchEnt(entityId, tableName, null, attributes);
				}
					//}
					else{
					//showWarning("size>1","size>1");
						int maxSuffix=0;
						//showWarning("maxSuffix",maxSuffix.toString());
						for(temp: tempDuplicateList){
							tempLabel=temp.get(1);
							//showWarning("tempLabel",tempLabel);
							Matcher numMatcher = numberPat.matcher(tempLabel);
							//showWarning("numMatcher","numMatcher");
							if(numMatcher.find()){
								//showWarning("find","find");
								tempSuffix=getNumSuffix(tempLabel);
								tempSuffixStr=null;
									if(tempSuffix!=null){
										tempSuffixStr=tempSuffix.substring(tempSuffix.indexOf("(")+1, tempSuffix.length()-1);
										int tempSuffixNum=Integer.parseInt(tempSuffixStr);
										if(tempSuffixNum>maxSuffix){
										maxSuffix=tempSuffixNum;
									}
								}
							}
						}
						maxSuffix=maxSuffix+1;
						originLabel=originLabel+"("+maxSuffix+")";
						setFieldValue(fieldRef,originLabel);
						
					}
					
				}
				else{
					setFieldValue(fieldRef,originLabel);
				}
				
			}
	});
}

makeLabel(ArrayList result, String tempLbl, String tableName, String attriName){
	String rtnLbl=tempLbl;
	tempDuplicateList=new ArrayList();
	tempDuplicateList.clear();
	tempDuplicateList.addAll(result);
	int sizeOfDup=0;
	Pattern numberPat = Pattern.compile("\\(\\d+\\)");
	sizeOfDup=tempDuplicateList.size();
	if(sizeOfDup==1){
		attributes = createAttributeList();
		duplicateOldLabel=tempDuplicateList.get(0).get(1);
		Matcher numMatcher = numberPat.matcher(duplicateOldLabel);

		if(numMatcher.find()){
			suffix=getNumSuffix(duplicateOldLabel);
			//suffix=duplicateOldLabel.substring(duplicateOldLabel.indexOf("("),duplicateOldLabel.length());
			if(suffix!=null){
				if(!suffix.equals("(1)"))
					{
						int sLen=suffix.length();
						newLabel=duplicateOldLabel.substring(0,duplicateOldLabel.length()-sLen)+"(1)";
						//newLabel=duplicateOldLabel.substring(0,duplicateOldLabel.indexOf("("))+"(1)";
						attributes.add(createEntityAttribute(attriName, null, null, newLabel, null));
						entityId=tempDuplicateList.get(0).get(0);
						saveArchEnt(entityId, tableName, null, attributes);
					}
			}
			else{
				newLabel=duplicateOldLabel+"(1)";
				attributes.add(createEntityAttribute(attriName, null, null, newLabel, null));
				entityId=tempDuplicateList.get(0).get(0);
				saveArchEnt(entityId, tableName, null, attributes);
			}
			
		}
		else{
			newLabel=duplicateOldLabel+"(1)";
			attributes.add(createEntityAttribute(attriName, null, null, newLabel, null));
			entityId=tempDuplicateList.get(0).get(0);
			saveArchEnt(entityId, tableName, null, attributes);
		}
		rtnLbl=rtnLbl+"(2)";
	}
	else{
		int maxSuffix=0;
		for(temp: tempDuplicateList){
			tempLabel=temp.get(1);
			Matcher numMatcher = numberPat.matcher(tempLabel);
			if(numMatcher.find()){
				tempSuffix=getNumSuffix(tempLabel);
				tempSuffixStr=null;
					if(tempSuffix!=null){
						tempSuffixStr=tempSuffix.substring(tempSuffix.indexOf("(")+1, tempSuffix.length()-1);
						int tempSuffixNum=Integer.parseInt(tempSuffixStr);
						if(tempSuffixNum>maxSuffix){
							maxSuffix=tempSuffixNum;
						}
				}
				//tempSuffixStr=tempLabel.substring(tempLabel.indexOf("(")+1, tempLabel.length()-1);
				//int tempSuffixNum=Integer.parseInt(tempSuffixStr);
				//if(tempSuffixNum>maxSuffix){
				//	maxSuffix=tempSuffixNum;
				//}
			}
		}
		maxSuffix=maxSuffix+1;
		rtnLbl=rtnLbl+"("+maxSuffix+")";
	}
	return rtnLbl;
}

getCurrentDate(){
	String currentTime=getCurrentTime();
    currentDateTimeArray=currentTime.toString().split("\\s+");
    String currentDate=currentDateTimeArray[0];
    return currentDate;
}

/*******Person********/
personIntroSss=new ArrayList();
currentPersonInfo=new ArrayList();//for creating intro session for a new added person or existing person
originPersonInfo =new ArrayList();//for recording original loaded person info so that we can tell if a person's info has changed
changedPersonInfo=new ArrayList();//for recording newest edited person info so that we can tell if a person's info has been changed
role_list=new ArrayList();
savePersonWfProperty=new ArrayList();
role_id=null;
person_id=null;

/**person dynamic ui generation**/
createPersonRolePage(){
	if(!hasView("personRoleSelect/personRoleSelectInfo/SearchRole")){
		removeAllViewsAndContainers("personRoleSelect");
	
		executeViewTask(new ViewTask() {
    	doTask() { 	
	        style1 = "orientation";
	        style2 = "even";
	    	createContainer("personRoleSelect/personRoleSelectInfo/psRoleSelCtn", "orientation");
	    	createContainer("personRoleSelect/personRoleSelectInfo/child1", "even", "personRoleSelect/personRoleSelectInfo/psRoleSelCtn");
	        createContainer("personRoleSelect/personRoleSelectInfo/child2", "even", "personRoleSelect/personRoleSelectInfo/psRoleSelCtn");
		
			searchTextViewDef = createViewDef().createTextField().setLabel("Keyword");
			searchButtonDef = createViewDef().createButton().setLabel("Search").setStyleCss("faims-blue");
			psRoleListDef=createViewDef().createDropDown().setLabel("Role List");
			newPsBtnDef=createViewDef().createButton().setLabel("New Person").setStyleCss("faims-blue");
			createView("personRoleSelect/personRoleSelectInfo/keywordOfRole", searchTextViewDef,"personRoleSelect/personRoleSelectInfo/child1");
			createView("personRoleSelect/personRoleSelectInfo/SearchRole", searchButtonDef,"personRoleSelect/personRoleSelectInfo/child2");
			createView("personRoleSelect/personRoleSelectInfo/PersonRoleSelectList", psRoleListDef,"personRoleSelect/personRoleSelectInfo");
			createView("personRoleSelect/personRoleSelectInfo/CreateNewPerson", newPsBtnDef,"personRoleSelect/personRoleSelectInfo");
	        refreshTabgroupCSS("personRoleSelect");
	        onEvent("personRoleSelect/personRoleSelectInfo","show","loadRoles(\"newPerson\",\"personRoleSelect/personRoleSelectInfo/PersonRoleSelectList\")");
			onEvent("personRoleSelect/personRoleSelectInfo/CreateNewPerson","click","newPersonByRole()");
	        }
		});

	}
	showTabGroup("personRoleSelect");
}

createPersonPage(){
	if(!hasView("person/personInfoHide/personID")){
		removeAllViewsAndContainers("person");
	
		executeViewTask(new ViewTask() {
    	doTask() { 	

    		//personInfoHide page
    		psRoleIdViewDef = createViewDef().createTextField().setLabel("psRole").setAttributeName("PersonRole").setAttributeType("measure");
    		createView("person/personInfoHide/personRoleId", psRoleIdViewDef,"person/personInfoHide");
    		
    		//personInfo page
    		personIDViewDef= createViewDef().createTextField().setLabel("Person label").setAttributeName("PersonID").setAttributeType("measure").setAnnotationEnabled(true).setReadOnly(true);
    		
    		personNameViewDef=createViewDef().createTextField().setLabel("Person name").setAttributeName("PersonName").setAttributeType("measure").setAnnotationEnabled(true).setStyleCss("required");
  			
    		personOtherNamesViewDef=createViewDef().createTextField().setLabel("Person Other Names").setAttributeName("PersonOtherNames").setAttributeType("measure").setAnnotationEnabled(true);
   
    		personDOBViewDef=createViewDef().createTextField().setLabel("Person DOB").setAttributeName("PersonDOB").setAttributeType("measure").setAnnotationEnabled(true);
    	
    		personRoleViewDef=createViewDef().createTextField().setLabel("Person general role").setReadOnly(true);
   		
   			personPhotoViewDef=createViewDef().createCameraGallery(true).setAttributeName("PersonPhoto").setAttributeType("measure").setAnnotationEnabled(true);
   		
   			takePhotoViewDef=createViewDef().createButton().setLabel("Take Photo").setStyleCss("faims-blue");
    
    		psPhotoDescViewDef=createViewDef().createTextField().setLabel("Photo decription").setAttributeName("PersonPhotoDescription").setAttributeType("measure").setAnnotationEnabled(true);

    		takeIntroQuesnirViewDef=createViewDef().createButton().setLabel("Intro Questionnaire").setStyleCss("faims-blue");

    		introDescViewDef=createViewDef().createTextField().setLabel("Intro quesnir description").setAttributeName("PersonIntroQuenirDesp").setAttributeType("measure").setAnnotationEnabled(true);

	        finishNewPsViewDef=createViewDef().createButton().setLabel("Save Person").setStyleCss("faims-blue");

		
			createView("person/personInfoHide/personID", personIDViewDef,"person/personInfoHide");
			createView("person/personInfoHide/personRoleName", personRoleViewDef,"person/personInfoHide");

			createView("person/personInfo/personName", personNameViewDef,"person/personInfo");
			createView("person/personInfo/personOtherNames", personOtherNamesViewDef,"person/personInfo");
			createView("person/personInfo/personDOB", personDOBViewDef,"person/personInfo");
			createView("person/personInfo/personPhoto", personPhotoViewDef,"person/personInfo");
			createView("person/personInfo/Take_Photo", takePhotoViewDef,"person/personInfo");
			createView("person/personInfo/personPhotoDesc", psPhotoDescViewDef,"person/personInfo");
			createView("person/personInfo/Take_Intro_Quesnir", takeIntroQuesnirViewDef,"person/personInfo");
			createView("person/personInfo/personIntroDesc", introDescViewDef,"person/personInfo");
			createView("person/personInfo/Finish_New_Person", finishNewPsViewDef,"person/personInfo");

	        refreshTabgroupCSS("person");

	        onEvent("person/personInfo/Finish_New_Person","click","saveNewPerson(\"save\")");
			onEvent("person/personInfo/Take_Intro_Quesnir","click","checkPersonIntroSession()");
			onEvent("person/personInfo/Take_Photo","click","attachPictureTo(\"person/personInfo/personPhoto\")");
	        }
		});

	}
}
onEvent("control/user_control/New_User","click","createPersonRolePage()");
onEvent("control/user_control","show","loadPerson()");
onEvent("control/user_control/userList","click","loadPersonInfo(\"person\",null)");
onEvent("introSssList/introSssInfo/intrSessionList","click","loadSessionInfo(\"answer\")");
onEvent("introSssList/introSssInfo/new_intro_sss","click","newSessionForAnswer(\"intro\",currentPersonInfo)");

loadRoles(String typeFlag, String populateRef){
	fetchAll(loadAllRoleQuery,new FetchCallback() {
				onFetch(result) {
					role_list.clear();
					role_list.addAll(result);
					if(typeFlag.equals("newPerson")){
						populateDropDown(populateRef, role_list);
					}
					else{
						populateList(populateRef,role_list);
					}
					
				}  
		});

}

newPersonByRole(){
	role_id=getFieldValue("personRoleSelect/personRoleSelectInfo/PersonRoleSelectList");
	roleInfo=new ArrayList();
	roleInfo.clear();
	propertyInfo=new ArrayList();
	propertyInfo.clear();
	String roleName=null;
	if(isNull(role_id)){
		showWarning("Invalid role","This role is invalid, please select another role for continue");
		return;
	}
	for(role : role_list){
		if(role.get(0).equals(role_id)){
			roleName=role.get(1);
			break;
		}
	}
	if(isNull(roleName)){
		showWarning("Invalid role","This role is invalid, please select another role for continue");
		return;
	}
	roleInfo.add(role_id);
	roleInfo.add(roleName);
	checkRoleIntroQuery="SELECT measure from latestNonDeletedAentValue WHERE "+
	"latestNonDeletedAentValue.AttributeID="+
	"(select AttributeID from AttributeKey where AttributeKey.AttributeName='RoleIntroAnsRequired') "+
	"AND latestNonDeletedAentValue.uuid='"+role_id+"';";

	checkRolePhotoQuery="SELECT measure from latestNonDeletedAentValue WHERE "+
	"latestNonDeletedAentValue.AttributeID="+
	"(select AttributeID from AttributeKey where AttributeKey.AttributeName='RolePhotoRequired') "+
	"AND latestNonDeletedAentValue.uuid='"+role_id+"';";

	fetchOne(checkRoleIntroQuery,new FetchCallback() {
				onFetch(result) {
					if(!isNull(result)){
						if(result.get(0).equals("Yes")){
							propertyInfo.add("Y");
							fetchOne(checkRolePhotoQuery,new FetchCallback() {
								onFetch(result) {
									if(!isNull(result)){
										if(result.get(0).equals("Yes")){
											propertyInfo.add("Y");
											newPersonWithIntro(roleInfo,propertyInfo);
										}
										else{
											propertyInfo.add("N");
											newPersonWithIntro(roleInfo,propertyInfo);
										}
									}
									else{
										showWarning("Invalid role","This role may not be using anymore\n"+" please contact the admin for details");
										return;
									}
								 
								}  
						});
						}
						else{
							propertyInfo.add("N");
							fetchOne(checkRolePhotoQuery,new FetchCallback() {
								onFetch(result) {
									if(!isNull(result)){
										if(result.get(0).equals("Yes")){
											propertyInfo.add("Y");
											newPersonWithIntro(roleInfo,propertyInfo);
										}
										else{
											propertyInfo.add("N");
											newPersonWithIntro(roleInfo,propertyInfo);
										}
									}
									else{
										showWarning("Invalid role","This role may not be using anymore\n"+" please contact the admin for details");
										return;
									}
								 
								}  
						});
						}
					}

					else{
						showWarning("Invalid role","This role may not be using anymore\n"+" please contact the admin for details");
										return;
					}
				 
				}  
		});

}

newPersonWithIntro(ArrayList roleflag, ArrayList propertyFlag){
	createPersonPage();
	person_id=null;
	newTabGroup("person");
	onEvent("person", "show", "showTab(\"person/personInfo\");");  
	setFieldValue("person/personInfoHide/personRoleId",roleflag.get(0));
	setFieldValue("person/personInfoHide/personRoleName",roleflag.get(1));
	savePersonWfProperty.clear();
	savePersonWfProperty.addAll(propertyFlag);
}

loadPerson(){
	person_id=null;
	fetchAll(loadAllPersonIDQuery, new FetchCallback() {
        onFetch(result) {
            populateList("control/user_control/userList", result);
        }

        onError(message) {
            showToast(message);
        }
    });
}
loadPersonInfo(String typeflag, String toShowPsId){
if(typeflag.equals("person")){
	person_id=getListItemValue();
}
else{
	person_id=toShowPsId;
}
	if(isNull(person_id)){
		showToast("No Person selected");
		return;
	}
	createPersonPage();
	showTabGroup("person", person_id, new FetchCallback() {
        onFetch(result) {
      
        	String roleUuid=getFieldValue("person/personInfoHide/personRoleId");
            checkPersonRoleQuery="SELECT measure from latestNonDeletedAentValue "+
											"WHERE latestNonDeletedAentValue.uuid='"+roleUuid+"' "+
											"AND latestNonDeletedAentValue.AttributeID="+
											"(select AttributeID from AttributeKey where AttributeName='PersonRoleName');";

			checkRoleIntroQuery="SELECT measure from latestNonDeletedAentValue "+
								"WHERE latestNonDeletedAentValue.uuid='"+roleUuid+"' "+
								"AND latestNonDeletedAentValue.AttributeID="+
								"(select AttributeID from AttributeKey where AttributeName='RoleIntroAnsRequired');";

			checkRolePhotoQuery="SELECT measure from latestNonDeletedAentValue "+
								"WHERE latestNonDeletedAentValue.uuid='"+roleUuid+"' "+
								"AND latestNonDeletedAentValue.AttributeID="+
								"(select AttributeID from AttributeKey where AttributeName='RolePhotoRequired');";

        	fetchOne(checkPersonRoleQuery,new FetchCallback() {
								onFetch(result) {
									if(!isNull(result)){
										setFieldValue("person/personInfoHide/personRoleName",result.get(0));
										
									}
									else{
										showWarning("Invalid role","This role may not be using anymore\n"+" please contact the admin for details");
									}
								 
								}  
						});

        	fetchOne(checkRoleIntroQuery,new FetchCallback() {
								onFetch(result) {
									if(!isNull(result)){
										savePersonWfProperty.clear();
										if(result.get(0).equals("Yes")){
											savePersonWfProperty.add("Y");
										}
										else{
											savePersonWfProperty.add("N");
										}
										fetchOne(checkRolePhotoQuery,new FetchCallback() {
											onFetch(result) {
												if(!isNull(result)){
													if(result.get(0).equals("Yes")){
														savePersonWfProperty.add("Y");
													}
													else{
														savePersonWfProperty.add("N");
													}
													
												}
												else{
													showWarning("Invalid role","This role may not be using anymore\n"+" please contact the admin for details");
												}
											 
											}  
										});
									}
									else{
										showWarning("Invalid role","This role may not be using anymore\n"+" please contact the admin for details");
									}
								 
								}  
						});
        	originPersonInfo.clear();
        	originPersonInfo.add(getFieldValue("person/personInfoHide/personID"));
        	originPersonInfo.add(getFieldValue("person/personInfo/personName"));
        	originPersonInfo.add(getFieldValue("person/personInfo/personOtherNames"));
        	originPersonInfo.add(getFieldValue("person/personInfo/personDOB"));
        	originPersonInfo.add(getFieldValue("person/personInfo/personPhoto"));
			originPersonInfo.add(getFieldValue("person/personInfo/personPhotoDesc"));
			originPersonInfo.add(getFieldValue("person/personInfo/personIntroDesc"));

            person=result;
            showToast("Loaded person"+person.getId());            
        }
        onError(message) {
            showToast(message);
        }
    });
}
timeValidation(String startDateTime){	
	String hyphenDateRegex="^\\d{4}[-]\\d{2}[-]\\d{2}$";
	Pattern hyphenDatePattern=Pattern.compile(hyphenDateRegex);
	Matcher hyphenDateMatcher=hyphenDatePattern.matcher(startDateTime);
	if (hyphenDateMatcher.find()){		
			DateFormat df=new SimpleDateFormat("yyyy-MM-dd");
			df.setLenient(false);
			Date sdt=null;
			try{
				sdt=df.parse(startDateTime);	
			}
			catch(Exception ex){
				//Log.e("error", ex.getMessage().toString());
				//showWarning("ex","ex");
				return false;
			}
		return true;
	}
return false;
}

nameCamCaseConverter(String originName){
	String camCase=null;
	String [] originNameSplit=originName.split("\\s+");
	//showWarning("originNameSplit",originNameSplit[0]);
	StringBuffer sb=new StringBuffer();
	//showWarning("StringBuffer","originNameSplit[0]");
	for (part : originNameSplit){
		if(part.length()>1){
			sb.append(Character.toUpperCase(part.charAt(0))).append(part.substring(1));
		}
		else{
			sb.append(Character.toUpperCase(part.charAt(0)));
		}
	}
	camCase=sb.toString().trim();
	return camCase;
	//showWarning("camCase",camCase);
}
saveNewPerson(String typeflag){

	if((isNull(getFieldValue("person/personInfo/personName")))|| (isNull(getFieldValue("person/personInfo/personDOB")))){
		showWarning("Validation Error", "You must fill in the Person Name and Person DOB before you can continue");
        return;
	}

	if((savePersonWfProperty.get(1).equals("Y"))&&(savePersonWfProperty.get(0).equals("N"))){
			if((isNull(getFieldValue("person/personInfo/personPhoto")))&& (isNull(getFieldValue("person/personInfo/personPhotoDesc")))){
				showWarning("Validation Error", "You must either take person photo or write the reason of not taking photo");
        		return;
			}

	}
	if(!typeflag.equals("intro"))//normal saving
	{
		if((savePersonWfProperty.get(1).equals("Y"))&&(savePersonWfProperty.get(0).equals("Y"))){
			if((isNull(getFieldValue("person/personInfo/personPhoto"))) && (isNull(getFieldValue("person/personInfo/personPhotoDesc")))){
				showWarning("Saving Error", "You must either take person photo or write the reason of not taking photo");
        		return;
			}
			if((isNull(person_id)) && (isNull(getFieldValue("person/personInfo/personIntroDesc")))){
				showWarning("Validation Error", "You must either take person introductory questionnaire \n"+"or write the reason of not taking introductory questionnaire");
        		return;
			}
			if((!isNull(person_id))&&(isNull(getFieldValue("person/personInfo/personIntroDesc")))){
				checkPsIntrSssQuery="select uuid,measure from latestNonDeletedArchEntIdentifiers "+
					"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionID') "+
					"and uuid in ( select uuid from AentReln "+
						"where RelationshipID in(select RelationshipID from AentReln "+
							"where RelationshipID in (select RelationshipID from latestNonDeletedRelationship "+
								"where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Answer and Session' ) "+
								"and latestNonDeletedRelationship.Deleted IS NULL) "+
					"and uuid in (select uuid from latestNonDeletedAentValue "+
						"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionnaireID') "+
						"and latestNonDeletedAentValue.measure in(select uuid from latestNonDeletedAentValue "+
							"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionnaireType') "+
							"and measure=(select uuid from latestNonDeletedAentValue "+
								"where AttributeID= (select AttributeID from AttributeKey "+
									"where AttributeName='QuesnirTypeName') and measure = 'Introductory'))))) "+
					"and uuid in (select measure from latestNonDeletedArchEntIdentifiers "+
						"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionIDforPerson') "+
						"and uuid in (select uuid from latestNonDeletedAentValue "+
							"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionPersonRole') "+
							"and measure=(select uuid from latestNonDeletedAentValue "+
								"where AttributeID=(select AttributeID from AttributeKey where AttributeName='PersonRoleName') "+
								"and measure='consultant') "+
					"and uuid in (select uuid from latestNonDeletedAentValue "+
						"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionPersonName') "+
						"and measure ='"+person_id+"')));";
	
				fetchAll(checkPsIntrSssQuery,new FetchCallback() {
						        	onFetch(result) {					        	
									if(isNull(result)){
										showWarning("Validation Error", "You must either take person introductory questionnaire \n"+"or write the reason of not taking introductory questionnaire");
        								return;
									}
								
						        }
						        onError(message) {
						        	Log.e("error",message);
						            showToast(message);
						           
						        }
						    });
			}

		}
	}
    
	String personNameOrigin=getFieldValue("person/personInfo/personName");
	String personNameCamCase=nameCamCaseConverter(personNameOrigin);
	String personLabel=personNameCamCase+"_"+getFieldValue("person/personInfo/personDOB");
	//setFieldValue("person/personInfo/personID", personLabel);
	String personDOB=getFieldValue("person/personInfo/personDOB");
	changedPersonInfo.clear();
	changedPersonInfo.add(personLabel);
	changedPersonInfo.add(personNameOrigin);
	changedPersonInfo.add(getFieldValue("person/personInfo/personOtherNames"));
	changedPersonInfo.add(personDOB);
	changedPersonInfo.add(getFieldValue("person/personInfo/personPhoto"));
	changedPersonInfo.add(getFieldValue("person/personInfo/personPhotoDesc"));
	changedPersonInfo.add(getFieldValue("person/personInfo/personIntroDesc"));

	if(timeValidation(personDOB)){

		Hashtable personInfoChange=listChange(changedPersonInfo,originPersonInfo);

		if((personInfoChange.containsKey("EQUAL"))&& (typeflag.equals("intro"))){
				newPersonIntro=new ArrayList();
	      		newPersonIntro.add(person_id);
				newPersonIntro.add(personNameOrigin);
				newSessionForAnswer("intro",newPersonIntro);
		}
		
		else if((personInfoChange.containsKey("EQUAL"))&& (!typeflag.equals("intro"))){
			showWarning("No changes","All data are saved");
			return;
		}

		else{
			tempDuplicateList=new ArrayList();
			tempDuplicateList.clear();
			int sizeOfDup=0;
			if(person_id==null){
				psDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
						"where AttributeID=(select AttributeID from AttributeKey where AttributeName='PersonID') "+
						"and (measure = '"+personLabel+"' or measure like '"+personLabel+"(%)')";
			}
			else{
				psDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
						"where AttributeID=(select AttributeID from AttributeKey where AttributeName='PersonID') "+
						"and uuid<>"+person_id+" "+
						"and (measure = '"+personLabel+"' or measure like '"+personLabel+"(%)')";
			}
			fetchAll(psDuplicateQuery,new FetchCallback() {
						onFetch(result) {
							if(!isNull(result)){
								tempDuplicateList.addAll(result);
								sizeOfDup=tempDuplicateList.size();
								Pattern numberPat = Pattern.compile("\\(\\d+\\)");
								if(sizeOfDup==1){
									attributes = createAttributeList();
									duplicateOldLabel=tempDuplicateList.get(0).get(1);
									//suffix=duplicateOldLabel.substring(duplicateOldLabel.length()-3);
									Matcher numMatcher = numberPat.matcher(duplicateOldLabel);
									if(numMatcher.find()){
										//suffix=duplicateOldLabel.substring(duplicateOldLabel.indexOf("("),duplicateOldLabel.length());
										suffix=getNumSuffix(duplicateOldLabel);
										if(!suffix.equals("(1)"))
										{
											int sLen=suffix.length();
											newLabel=duplicateOldLabel.substring(0,duplicateOldLabel.length()-sLen)+"(1)";
											//newLabel=duplicateOldLabel.substring(0,duplicateOldLabel.indexOf("("))+"(1)";
											attributes.add(createEntityAttribute("PersonID", null, null, newLabel, null));
											entityId=tempDuplicateList.get(0).get(0);
											saveArchEnt(entityId, "Person", null, attributes);
										}
									}
									else{
										newLabel=duplicateOldLabel+"(1)";
										attributes.add(createEntityAttribute("PersonID", null, null, newLabel, null));
										entityId=tempDuplicateList.get(0).get(0);
										saveArchEnt(entityId, "Person", null, attributes);
									}
									personLabel=personLabel+"(2)";
						            setFieldValue("person/personInfoHide/personID",personLabel);
								}
								else{
									int maxSuffix=0;
									for(temp: tempDuplicateList){
										tempLabel=temp.get(1);
										Matcher numMatcher = numberPat.matcher(tempLabel);
										if(numMatcher.find()){
											tempSuffix=getNumSuffix(tempLabel);
											tempSuffixStr=null;
											if(tempSuffix!=null){
												tempSuffixStr=tempSuffix.substring(tempSuffix.indexOf("(")+1, tempSuffix.length()-1);
												int tempSuffixNum=Integer.parseInt(tempSuffixStr);
												if(tempSuffixNum>maxSuffix){
													maxSuffix=tempSuffixNum;
												}
											}
										}
										/*
										if(numMatcher.find()){
											tempSuffixStr=tempLabel.substring(tempLabel.indexOf("(")+1, tempLabel.length()-1);
											int tempSuffixNum=Integer.parseInt(tempSuffixStr);
											if(tempSuffixNum>maxSuffix){
												maxSuffix=tempSuffixNum;
											}
										}
										*/
									}
									maxSuffix=maxSuffix+1;
									personLabel=personLabel+"("+maxSuffix+")";
									setFieldValue("person/personInfoHide/personID",personLabel);
								}
								
							}
							else{
								setFieldValue("person/personInfoHide/personID", personLabel);
							}

						saveTabGroup("person", person_id, null, null, new SaveCallback() {
					    onSave(uuid, newRecord) {
					      person_id = uuid;
					      if (newRecord) {
					      	newPersonIntro=new ArrayList();
					      	newPersonIntro.add(person_id);
							newPersonIntro.add(personNameOrigin);

					      	if(typeflag.equals("intro")){
								newSessionForAnswer("intro",newPersonIntro);
							}
							else{
					        	showToast("New record created");
					        	cancelTabGroup("person",true);
					     	    showTab("control/user_control");
					    	}
					      }
						  else{
							showToast("Record changed");	
							if(typeflag.equals("intro")){
								newPersonIntro=new ArrayList();
					      		newPersonIntro.add(person_id);
								newPersonIntro.add(personNameOrigin);
								newSessionForAnswer("intro",newPersonIntro);
							}
						  }
						  
					    }
					    onError(message) {
					        showWarning("error",message);
					    }  
					  	});
					}
				});
		}
		}
		else{
			showWarning("Invalid DOB","1.Datetime format should be yyyy-MM-dd \n"+"2.The value for date should be valid");
						return;
		}

}

//Get the intro session list for a person
checkPersonIntroSession(){

checkPsIntrSssQuery="select uuid,measure from latestNonDeletedArchEntIdentifiers "+
	"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionID') "+
	"and uuid in ( select uuid from AentReln "+
		"where RelationshipID in(select RelationshipID from AentReln "+
			"where RelationshipID in (select RelationshipID from latestNonDeletedRelationship "+
				"where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Answer and Session' ) "+
				"and latestNonDeletedRelationship.Deleted IS NULL) "+
	"and uuid in (select uuid from latestNonDeletedAentValue "+
		"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionnaireID') "+
		"and latestNonDeletedAentValue.measure in(select uuid from latestNonDeletedAentValue "+
			"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionnaireType') "+
			"and measure=(select uuid from latestNonDeletedAentValue "+
				"where AttributeID= (select AttributeID from AttributeKey "+
					"where AttributeName='QuesnirTypeName') and measure = 'Introductory'))))) "+
	"and uuid in (select measure from latestNonDeletedArchEntIdentifiers "+
		"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionIDforPerson') "+
		"and uuid in (select uuid from latestNonDeletedAentValue "+
			"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionPersonRole') "+
			"and measure=(select uuid from latestNonDeletedAentValue "+
				"where AttributeID=(select AttributeID from AttributeKey where AttributeName='PersonRoleName') "+
				"and measure='consultant') "+
	"and uuid in (select uuid from latestNonDeletedAentValue "+
		"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionPersonName') "+
		"and measure ='"+person_id+"')));";

fetchAll(checkPsIntrSssQuery, new FetchCallback() {
        onFetch(result) {
        		if(!isNull(result)){
					personIntroSss.clear();
					personIntroSss.addAll(result);
					//createMainSessionPage();
					showTabGroup("introSssList");
					populateList("introSssList/introSssInfo/intrSessionList",personIntroSss);
					currentPersonInfo.clear();
					currentPersonInfo.add(person_id);
					currentPersonInfo.add(getFieldValue("person/personInfo/personName"));

        		}
        		else{
        			saveNewPerson("intro");
        		}
        	}
            
        onError(message) {
            showToast(message);
        }
    });

}
/*** Language ***/
onEvent("control/language_control/New_Language","click","newLanguage()");
onEvent("language/languageInfo/Finish_New_Language","click","saveNewLanguage()");
onEvent("control/language_control","show","loadLanguage()");
onEvent("control/language_control/languageList","click","loadLanguageInfo()");
language_id=null;
newLanguage(){
	language_id=null;
	newTabGroup("language");
	onEvent("language", "show", "showTab(\"language/languageInfo\");");  

}
saveNewLanguage(){

	if(isNull(getFieldValue("language/languageInfo/languageName"))){
		showWarning("Validation Error", "You must fill in the Language Name before you can continue");
        return;
	}
	if(isNull(getFieldValue("language/languageInfo/languageID"))){
		showWarning("Validation Error", "You must fill in the Language ID before you can continue");
        return;
	}
	//setFieldValue("person/personInfo/personID", getFieldValue("person/personInfo/personName")+getCurrentTime());
	tempDuplicateList=new ArrayList();
	tempDuplicateList.clear();
	int sizeOfDup=0;
	tempLangLabel=getFieldValue("language/languageInfo/languageID");
	langDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
				"where AttributeID=(select AttributeID from AttributeKey where AttributeName='LanguageID') "+
				"and measure like '"+tempLangLabel+"' or measure like '"+tempLangLabel+"(%)'";
    fetchAll(langDuplicateQuery,new FetchCallback() {
						onFetch(result) {
							if(!isNull(result)){
								tempDuplicateList.addAll(result);
								sizeOfDup=tempDuplicateList.size();
								if(sizeOfDup==1){
									attributes = createAttributeList();
									duplicateOldLabel=tempDuplicateList.get(0).get(1);
									suffix=duplicateOldLabel.substring(duplicateOldLabel.length()-3);
									if(!suffix.equals("(1)"))
									{
										newLabel=duplicateOldLabel+"(1)";
										attributes.add(createEntityAttribute("LanguageID", null, null, newLabel, null));
										entityId=tempDuplicateList.get(0).get(0);
										saveArchEnt(entityId, "Language", null, attributes);
									}
									tempLangLabel=tempLangLabel+"(2)";
						            setFieldValue("language/languageInfo/languageID",tempLangLabel);
								}
								else{
									sizeOfDup=sizeOfDup+1;
									tempLangLabel=tempLangLabel+"("+sizeOfDup.toString()+")";
									setFieldValue("language/languageInfo/languageID",tempLangLabel);
								}	
							}
							saveTabGroup("language", language_id, null, null, new SaveCallback() {
							    onSave(uuid, newRecord) {
							      language_id = uuid;
							      if (newRecord) {
									newLanguage();
							        showToast("New record created");
							      }
								  else{
									//language_id=null;
									showToast("Record changed");
								  }
							    }
							    onError(message) {
							        showWarning("error",message);
							    }  
							  });
						}
					});
	
}

loadLanguage(){
	language_id=null;
	
	fetchAll(loadAllLanguageQuery, new FetchCallback() {
        onFetch(result) {
            populateList("control/language_control/languageList", result);
        }

        onError(message) {
            showToast(message);
        }
    });
}
loadLanguageInfo(){
language_id=getListItemValue();
	if(isNull(language_id)){
		showToast("No Language selected");
		return;
	}
	showTabGroup("language", language_id, new FetchCallback() {
        onFetch(result) {
            language=result;
            showToast("Loaded language"+language.getId());            
        }
        onError(message) {
            showToast(message);
        }
    });
}
/*** File ***/
onEvent("control/file_control","show","loadFile()");
//onEvent("control/file_control/New_File","click","newFile(\"file\")");
onEvent("control/file_control/fileList","click","loadAnswerFileInfo(\"fileView\")");
file_id=null;
fileCategory=new ArrayList();
fileCategory.add(new NameValuePair("{All}", "All"));
fileCategory.add(new NameValuePair("{Audio}", "Audio"));
fileCategory.add(new NameValuePair("{Video}", "Video"));
fileCategory.add(new NameValuePair("{Photo}", "Photo"));
fileCategory.add(new NameValuePair("{Other}", "Other"));

loadFile(){
	file_id=null;
	populateDropDown("control/file_control/fileCategorySelect",fileCategory);
	setFieldValue("control/file_control/file_keyword","*");
	fetchAll(loadAllFileIDQuery, new FetchCallback() {
        onFetch(result) {
            populateList("control/file_control/fileList", result);
        }

        onError(message) {
            showToast(message);
        }
    });
}

/***Dynamic ui-FieldTrip***/
//onEvent("control/other_control","show","createFieldTripPage()");
//onEvent("control/other_control/fieldTrip_page","click","createFieldTripPage()");
//onEvent("fieldTrip_control/fieldTripInfo","show","loadFieldTripList()");

onEvent("control/other_control/fieldTrip_New_bn","click","createFieldTripInfoPage(\"new\")");
onEvent("control/other_control/fieldTripList","click","loadFieldTripInfo()");
onEvent("control/other_control","show","loadFieldTripList()");
//onEvent("control/other_control/fieldTrip_Search_bn","click","searchFieldTrip()");

fieldTrip_id=null;
selected_session_fieldTrip=new ArrayList();
candidate_session_fieldTrip=new ArrayList();
original_session_fieldTrip=new ArrayList();
fieldTripInfoOrigin=new ArrayList();
fieldTripInfoNew=new ArrayList();
/*
createFieldTripPage(){
	if(!hasView("fieldTrip_control/fieldTripInfo/fieldTrip_Search_kw")){
		removeAllViewsAndContainers("fieldTrip_control");
		executeViewTask(new ViewTask() {
    	doTask() { 	
	        style1 = "orientation";
	        style2 = "even";
	    	createContainer("fieldTrip_control/fieldTripInfo/fieldTrip_Search_Ct", "orientation");
	    	createContainer("fieldTrip_control/fieldTripInfo/child1", "even", "fieldTrip_control/fieldTripInfo/fieldTrip_Search_Ct");
	        createContainer("fieldTrip_control/fieldTripInfo/child2", "even", "fieldTrip_control/fieldTripInfo/fieldTrip_Search_Ct");
	        searchTextViewDef = createViewDef().createTextField().setLabel("keyword").setInfoEnabled(true);
	        searchButtonDef = createViewDef().createButton().setLabel("Search").setStyleCss("faims-blue");
	        newFTButtonDef = createViewDef().createButton().setLabel("New FieldTrip").setStyleCss("faims-blue");
	        fieldTripListDef=createViewDef().createList().setLabel("Record List").setStyleCss("session-list");
	        createView("fieldTrip_control/fieldTripInfo/fieldTrip_Search_kw", searchTextViewDef,"fieldTrip_control/fieldTripInfo/child1");
	        createView("fieldTrip_control/fieldTripInfo/fieldTrip_Search_bn", searchButtonDef,"fieldTrip_control/fieldTripInfo/child2");
	        createView("fieldTrip_control/fieldTripInfo/fieldTrip_New_bn", newFTButtonDef,"fieldTrip_control/fieldTripInfo");
	        createView("fieldTrip_control/fieldTripInfo/fieldTripList", fieldTripListDef,"fieldTrip_control/fieldTripInfo");
	        refreshTabgroupCSS("fieldTrip_control");
	        showTabGroup("fieldTrip_control");
	        onEvent("fieldTrip_control/fieldTripInfo/fieldTrip_New_bn","click","createFieldTripInfoPage(\"new\")");
	        onEvent("fieldTrip_control/fieldTripInfo/fieldTripList","click","loadFieldTripInfo()");
    	}
		});
	}
	else{
		showTabGroup("fieldTrip_control");
	}
	
}
*/
createFieldTripInfoPage(String typeflag){
	if(!hasView("fieldTrip/fieldTripBasicInfo/fieldTripID")){
		removeAllViewsAndContainers("fieldTrip");
		executeViewTask(new ViewTask() {
	    doTask() {
	    	
	    	//basic info page
	    	idTextViewDef = createViewDef().createTextField().setLabel("FieldTrip label").setAttributeName("FieldTripID").setAttributeType("measure").
	    	setAnnotationEnabled(true).setReadOnly(true);
	    	nameTextViewDef=createViewDef().createTextField().setLabel("FieldTrip name").setAttributeName("FieldTripName").setAttributeType("measure").
	    	setAnnotationEnabled(true);
	    	descTextViewDef=createViewDef().createTextField().setLabel("Description").setAttributeName("FieldTripDescription").setAttributeType("measure").
	    	setAnnotationEnabled(true);
	    	startDateDef = createViewDef().createDatePicker().setLabel("Start Date");
	    	endDateDef = createViewDef().createDatePicker().setLabel("End Date");
	    	createView("fieldTrip/fieldTripBasicInfo/fieldTripID", idTextViewDef,"fieldTrip/fieldTripBasicInfo");
	        createView("fieldTrip/fieldTripBasicInfo/fieldTripName", nameTextViewDef,"fieldTrip/fieldTripBasicInfo");
	        createView("fieldTrip/fieldTripBasicInfo/fieldTripDesc", descTextViewDef,"fieldTrip/fieldTripBasicInfo");
	        createView("fieldTrip/fieldTripBasicInfo/fieldTripStartDatePicker", startDateDef,"fieldTrip/fieldTripBasicInfo");
	        createView("fieldTrip/fieldTripBasicInfo/fieldTripEndDatePicker", endDateDef,"fieldTrip/fieldTripBasicInfo");

	    	//session page
	        style1 = "orientation";
	        style2 = "even";
	    	createContainer("fieldTrip/fieldTripSession/field_session_ct", "orientation");
	    	createContainer("fieldTrip/fieldTripSession/child1", "even", "fieldTrip/fieldTripSession/field_session_ct");
	        createContainer("fieldTrip/fieldTripSession/child2", "even", "fieldTrip/fieldTripSession/field_session_ct");
	        
	        ftFileListDef=createViewDef().createList().setLabel("Session").setStyleCss("session-file-list");
	        ftSelFileListDef=createViewDef().createList().setLabel("Select session").setStyleCss("session-file-list");
	        ftSaveBtnDef=createViewDef().createButton().setLabel("Save").setStyleCss("faims-blue");
	        createView("fieldTrip/fieldTripSession/fieldTripFileList", ftFileListDef,"fieldTrip/fieldTripSession/child1");
	        createView("fieldTrip/fieldTripSession/fieldTripFileSelectionList", ftSelFileListDef,"fieldTrip/fieldTripSession/child2");
	        createView("fieldTrip/fieldTripSession/Finish_New_FieldTrip", ftSaveBtnDef,"fieldTrip/fieldTripSession");
	        refreshTabgroupCSS("fieldTrip_control");
	        //showTabGroup("fieldTrip");
	        onEvent("fieldTrip/fieldTripSession/fieldTripFileSelectionList","click","addItemToTargetList(candidate_session_fieldTrip,\"fieldTripSession\",null)");
	        //No delete function for client
	        onEvent("fieldTrip/fieldTripSession/fieldTripFileList","click","deleteItemFromTargetList(selected_session_fieldTrip,\"fieldTripSession\",null)");
	        onEvent("fieldTrip/fieldTripSession/Finish_New_FieldTrip","click","saveFieldTrip()");
	        //fieldTripBasicInfoHidden page
	        startdateViewDef = createViewDef().createTextField().setLabel("startdate").setAttributeName("FieldTripStartTime").setAttributeType("measure");
	        enddateViewDef = createViewDef().createTextField().setLabel("enddate").setAttributeName("FieldTripEndTime").setAttributeType("measure");
	        createView("fieldTrip/fieldTripBasicInfoHidden/fieldTripStartTimetamp", startdateViewDef,"fieldTrip/fieldTripBasicInfoHidden");
	        createView("fieldTrip/fieldTripBasicInfoHidden/fieldTripEndTimestamp", enddateViewDef,"fieldTrip/fieldTripBasicInfoHidden");
	        
	   		}
			});

		if(typeflag.equals("new")){
			startNewFieldTrip();
		}

	}
	else{
		//showTabGroup("fieldTrip");
		if(typeflag.equals("new")){
			startNewFieldTrip();
		}
	}

	

}

loadFieldTripList(){
	fetchAll(loadAllFieldTripQuery, new FetchCallback() {
        onFetch(result) {
            //populateList("fieldTrip_control/fieldTripInfo/fieldTripList", result);
            populateList("control/other_control/fieldTripList", result);
        }

        onError(message) {
            showToast(message);
        }
    });
}

startNewFieldTrip(){
	fieldTrip_id=null;
	selected_session_fieldTrip.clear();
	candidate_session_fieldTrip.clear();
	original_session_fieldTrip.clear();
	fieldTripInfoOrigin.clear();
	fieldTripInfoNew.clear();
	currentDateTimeArray=new ArrayList();
	
	newTabGroup("fieldTrip");
	
	fetchAll(loadAllSessionIDQuery, new FetchCallback() {
        onFetch(result) {
        	candidate_session_fieldTrip.addAll(result);
            populateList("fieldTrip/fieldTripSession/fieldTripFileSelectionList", candidate_session_fieldTrip);
            populateList("fieldTrip/fieldTripSession/fieldTripFileList", selected_session_fieldTrip);
        }

        onError(message) {
            showToast(message);
        }
    });
}


saveFieldTrip(){
	//showWarning("saveFieldTrip","saveFieldTrip");
	String startDateToConvert=getFieldValue("fieldTrip/fieldTripBasicInfo/fieldTripStartDatePicker");
	//showWarning("startDateToConvert",startDateToConvert);
	String startDate=dateParser(startDateToConvert);
	//showWarning("startdate",startDate);
	String endDateToConvert=getFieldValue("fieldTrip/fieldTripBasicInfo/fieldTripEndDatePicker");
	String endDate=dateParser(endDateToConvert);
	//showWarning("endDate",endDate);
	if(isNull(fieldTrip_id)){//create new session
		//showWarning("new","new");
		if(isNull(getFieldValue("fieldTrip/fieldTripBasicInfo/fieldTripName"))){
			showWarning("Incomplete Data","Please make sure that data is complete");
			return;
			}
		else{
			//duplicate check
			tempFtLabel=username+"_FieldTrip_"+startDate;
			//setFieldValue("fieldTrip/fieldTripBasicInfo/fieldTripID",tempFtLabel);
			//showWarning("tempFtLabel",tempFtLabel);
			tempDuplicateList=new ArrayList();
			tempDuplicateList.clear();
			int sizeOfDup=0;
			ftDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
				"where AttributeID=(select AttributeID from AttributeKey where AttributeName='FieldTripID') "+
				"and measure = '"+tempFtLabel+"' or measure like '"+tempFtLabel+"(%)'";
			//showWarning("ftDuplicateQuery",ftDuplicateQuery);
			fetchAll(ftDuplicateQuery,new FetchCallback() {
						onFetch(result) {
							if(!isNull(result)){
								tempDuplicateList.addAll(result);
								sizeOfDup=tempDuplicateList.size();
								Pattern numberPat = Pattern.compile("\\(\\d+\\)");
								if(sizeOfDup==1){
									attributes = createAttributeList();
									duplicateOldLabel=tempDuplicateList.get(0).get(1);
									Matcher numMatcher = numberPat.matcher(duplicateOldLabel);
									if(numMatcher.find()){
										suffix=duplicateOldLabel.substring(duplicateOldLabel.indexOf("("),duplicateOldLabel.length());
										if(!suffix.equals("(1)"))
										{
											newLabel=duplicateOldLabel.substring(0,duplicateOldLabel.indexOf("("))+"(1)";
											attributes.add(createEntityAttribute("FieldTripID", null, null, newLabel, null));
											entityId=tempDuplicateList.get(0).get(0);
											saveArchEnt(entityId, "FieldTrip", null, attributes);
										}
									}
									else{
										newLabel=duplicateOldLabel+"(1)";
										attributes.add(createEntityAttribute("FieldTripID", null, null, newLabel, null));
										entityId=tempDuplicateList.get(0).get(0);
										saveArchEnt(entityId, "FieldTrip", null, attributes);
									}
									tempFtLabel=tempFtLabel+"(2)";
						            setFieldValue("fieldTrip/fieldTripBasicInfo/fieldTripID",tempFtLabel);
								}
								else{
									int maxSuffix=0;
									for(temp: tempDuplicateList){
										tempLabel=temp.get(1);
										Matcher numMatcher = numberPat.matcher(tempLabel);
										if(numMatcher.find()){
											tempSuffixStr=tempLabel.substring(tempLabel.indexOf("(")+1, tempLabel.length()-1);
											int tempSuffixNum=Integer.parseInt(tempSuffixStr);
											if(tempSuffixNum>maxSuffix){
												maxSuffix=tempSuffixNum;
											}
										}
									}
									maxSuffix=maxSuffix+1;
									tempFtLabel=tempFtLabel+"("+maxSuffix+")";
									setFieldValue("fieldTrip/fieldTripBasicInfo/fieldTripID",tempFtLabel);
								}
							}
						else{
							setFieldValue("fieldTrip/fieldTripBasicInfo/fieldTripID",tempFtLabel);
						}
						setFieldValue("fieldTrip/fieldTripBasicInfoHidden/fieldTripStartTimetamp",startDate);
						setFieldValue("fieldTrip/fieldTripBasicInfoHidden/fieldTripEndTimestamp",endDate);
						if(timeValidation(startDate,endDate,"fieldTripTime")){
							saveTabGroup("fieldTrip", fieldTrip_id, null, null, new SaveCallback() {
							    onSave(uuid, newRecord) {
							    	fieldTrip_id = uuid;
							      if (newRecord) {
							    	  for(session:selected_session_fieldTrip){
							    		  saveEntitiesToRel("Session and FieldTrip",fieldTrip_id,session.get(0));
							    	  }
							        showToast("New fieldtrip record created");
							        cancelTabGroup("fieldTrip",true);
							        showTab("control/other_control");
							        activeFieldTripCheck();
							      }
							    }
							    onError(message) {
							        showWarning("error",message);
							    }  
							  });
						}
							else{
								showWarning("Invalid date","Start date should before end date");
								return;
							}
						}
					});	
		}
	}
	else{//change session info
			tempFtLabel=username+"_FieldTrip_"+startDate;
			//showWarning("tempFtLabel",tempFtLabel);
			tempDuplicateList=new ArrayList();
			tempDuplicateList.clear();
			int sizeOfDup=0;
			ftDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
				"where AttributeID=(select AttributeID from AttributeKey where AttributeName='FieldTripID') "+
				"and uuid<>"+fieldTrip_id+" "+
				"and measure = '"+tempFtLabel+"' or measure like '"+tempFtLabel+"(%)'";
			//showWarning("ftDuplicateQuery",ftDuplicateQuery);
			fetchAll(ftDuplicateQuery,new FetchCallback() {
						onFetch(result) {
							if(!isNull(result)){
								tempDuplicateList.addAll(result);
								sizeOfDup=tempDuplicateList.size();
								Pattern numberPat = Pattern.compile("\\(\\d+\\)");
								if(sizeOfDup==1){
									attributes = createAttributeList();
									duplicateOldLabel=tempDuplicateList.get(0).get(1);
									Matcher numMatcher = numberPat.matcher(duplicateOldLabel);
									if(numMatcher.find()){
										suffix=duplicateOldLabel.substring(duplicateOldLabel.indexOf("("),duplicateOldLabel.length());
										if(!suffix.equals("(1)"))
										{
											newLabel=duplicateOldLabel.substring(0,duplicateOldLabel.indexOf("("))+"(1)";
											attributes.add(createEntityAttribute("FieldTripID", null, null, newLabel, null));
											entityId=tempDuplicateList.get(0).get(0);
											saveArchEnt(entityId, "FieldTrip", null, attributes);
										}
									}
									else{
										newLabel=duplicateOldLabel+"(1)";
										attributes.add(createEntityAttribute("FieldTripID", null, null, newLabel, null));
										entityId=tempDuplicateList.get(0).get(0);
										saveArchEnt(entityId, "FieldTrip", null, attributes);
									}
									tempFtLabel=tempFtLabel+"(2)";
						            setFieldValue("fieldTrip/fieldTripBasicInfo/fieldTripID",tempFtLabel);
								}
								else{
									int maxSuffix=0;
									for(temp: tempDuplicateList){
										tempLabel=temp.get(1);
										Matcher numMatcher = numberPat.matcher(tempLabel);
										if(numMatcher.find()){
											tempSuffixStr=tempLabel.substring(tempLabel.indexOf("(")+1, tempLabel.length()-1);
											int tempSuffixNum=Integer.parseInt(tempSuffixStr);
											if(tempSuffixNum>maxSuffix){
												maxSuffix=tempSuffixNum;
											}
										}
									}
									maxSuffix=maxSuffix+1;
									tempFtLabel=tempFtLabel+"("+maxSuffix+")";
									setFieldValue("fieldTrip/fieldTripBasicInfo/fieldTripID",tempFtLabel);
								}
							}
							else{
								//showWarning("nodup","nodup");
								setFieldValue("fieldTrip/fieldTripBasicInfo/fieldTripID",tempFtLabel);
							}
							fieldTripInfoNew.add(getFieldValue("fieldTrip/fieldTripBasicInfo/fieldTripID"));
							fieldTripInfoNew.add(getFieldValue("fieldTrip/fieldTripBasicInfo/fieldTripName"));
							fieldTripInfoNew.add(startDate);
							fieldTripInfoNew.add(endDate);
							Hashtable fieldTripInfoChange=listChange(fieldTripInfoNew,fieldTripInfoOrigin);
							Hashtable fieldTripSessionChange=listChange(selected_session_fieldTrip,original_session_fieldTrip);
							if(fieldTripInfoChange.containsKey("EQUAL")){
								if(fieldTripSessionChange.containsKey("EQUAL")){
									showWarning("No change","No data changed");
									return;
								}
								else{
									//showWarning("yes change","beginingchange file");
									for(session:selected_session_fieldTrip){
							    		  saveEntitiesToRel("Session and FieldTrip",fieldTrip_id,session.get(0));
							    	  }
									showToast("session in FieldTrip changed");
									cancelTabGroup("fieldTrip",true);
									showTab("control/other_control");
								}
							}
							else{
								setFieldValue("fieldTrip/fieldTripBasicInfoHidden/fieldTripStartTimetamp",startDate);
								setFieldValue("fieldTrip/fieldTripBasicInfoHidden/fieldTripEndTimestamp",endDate);
								if(timeValidation(startDate,endDate,"fieldTripTime")){
								saveTabGroup("fieldTrip", fieldTrip_id, null, null, new SaveCallback() {
								    onSave(uuid, newRecord) {
								    	for(session:selected_session_fieldTrip){
								    		  saveEntitiesToRel("Session and FieldTrip",fieldTrip_id,session.get(0));
								    	  }
								        showToast("fieldTrip data changed");
								        cancelTabGroup("fieldTrip",true);
								        showTab("control/other_control");

								    }
								    onError(message) {
								        showWarning("error",message);
								    }  
								  });
							}
								else{
									showWarning("Invalid date","Start date should before end date");
									return;
								}
							}
						}
					});
	}
}

loadFieldTripInfo(){
	if(!hasView("fieldTrip/fieldTripBasicInfo/fieldTripID")){
		createFieldTripInfoPage("change");
	}
	fieldTrip_id=getListItemValue();
	if(isNull(fieldTrip_id)){
		showWarning("Invalid fieldTrip","No fieldTrip is selected or fieldTrip is not available");
		return;
	}
	loadSessionForFieldTripQuery="select uuid,measure from latestNonDeletedAentValue "+ 
			"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionID') "+
			"and uuid in "+
			"(select uuid from latestNonDeletedAentReln where uuid <>'"+fieldTrip_id+"' "+
			"and RelationshipID in (select RelationshipID from latestNonDeletedAentReln where uuid='"+fieldTrip_id+
			"' and RelationshipID in (select RelationshipID from latestNonDeletedRelationship "+
				"where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Session and FieldTrip') "+
				"and latestNonDeletedRelationship.Deleted IS NULL)))";
				/*
	loadSessionForFieldTripQuery="select uuid,measure from latestNonDeletedAentValue "+ 
			"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionID') "+
			"and uuid in "+
 			"(select uuid from AentReln where RelationshipID in "+
 				"(select RelationshipID from "+
 					"(select RelationshipID, AEntRelnTimestamp from AentReln where AentReln.uuid="+fieldTrip_id+" "+
 					"and RelationshipID in "+
 						"(select RelationshipID from Relationship where RelnTypeID="+
 							"(select RelnTypeID from RelnType where RelnTypeName='Session and FieldTrip'))) t1 "+
 					"inner join "+
 					"(select max(AEntRelnTimestamp) as maxtime from AEntReln where AEntReln.uuid ="+fieldTrip_id+" "+
 					"and AentReln.RelationshipID in (select RelationshipID from Relationship where RelnTypeID="+
 					"(select RelnTypeID from RelnType where RelnTypeName='Session and FieldTrip'))) t2 "+
 					"on t1.AentRelnTimestamp=t2.maxtime group by relationshipID))";
	*/
	showTabGroup("fieldTrip", fieldTrip_id, new FetchCallback() {
        onFetch(result) {
        	String startTimeOrigin=getFieldValue("fieldTrip/fieldTripBasicInfoHidden/fieldTripStartTimetamp");
        	String endTimeOrigin=getFieldValue("fieldTrip/fieldTripBasicInfoHidden/fieldTripEndTimestamp");
        	fieldTripInfoOrigin.add(getFieldValue("fieldTrip/fieldTripBasicInfo/fieldTripID"));
        	fieldTripInfoOrigin.add(getFieldValue("fieldTrip/fieldTripBasicInfo/fieldTripName"));
        	fieldTripInfoOrigin.add(startTimeOrigin);
        	fieldTripInfoOrigin.add(endTimeOrigin);  
        	String startTimeForPicker=dateParser(startTimeOrigin);
        	String endTimeForPicker=dateParser(endTimeOrigin);
        	setFieldValue("fieldTrip/fieldTripBasicInfo/fieldTripStartDatePicker",startTimeForPicker);
        	setFieldValue("fieldTrip/fieldTripBasicInfo/fieldTripEndDatePicker",endTimeForPicker);
        	fetchAll(loadSessionForFieldTripQuery, new FetchCallback() {
                onFetch(result) {
                	selected_session_fieldTrip.clear();
                	selected_session_fieldTrip.addAll(result);
                	original_session_fieldTrip.clear();
                	original_session_fieldTrip.addAll(result);

                	fetchAll(loadAllSessionIDQuery, new FetchCallback() {
                        onFetch(result) {
                        	candidate_session_fieldTrip.clear();
                        	candidate_session_fieldTrip.addAll(result);
                        	candidate_session_fieldTrip.removeAll(selected_session_fieldTrip);
                        	populateList("fieldTrip/fieldTripSession/fieldTripFileSelectionList", candidate_session_fieldTrip);
                            populateList("fieldTrip/fieldTripSession/fieldTripFileList", selected_session_fieldTrip);
                        }
                        onError(message) {
                            showToast(message);
                        }
                    });
                }

                onError(message) {
                    showToast(message);
                }
            });
        	
        	
            showToast("Loaded fieldTrip"+result.getId());            
        }
        onError(message) {
            showToast(message);
        }
    });
}
/***Search button ***/
onEvent("control/survey_control/Survey_Search","click","entitySearch(\"session\",\"control/survey_control/survey_keyword\",\"control/survey_control/surveyList\",null)");
onEvent("control/user_control/Person_Search","click","entitySearch(\"person\",\"control/user_control/person_keyword\",\"control/user_control/userList\",null)");
onEvent("control/language_control/Language_Search","click","entitySearch(\"language\",\"control/language_control/language_keyword\",\"control/language_control/languageList\",null)");
onEvent("control/file_control/File_Search","click","entitySearch(\"file\",\"control/file_control/file_keyword\",\"control/file_control/fileList\",\"control/file_control/fileCategorySelect\")");
//onEvent("sessionGroup/sessionInfo/Session_Search","click","entitySearch(\"session\",\"sessionGroup/sessionInfo/session_Name\",\"sessionGroup/sessionInfo/sessionList\",null)");
//onEvent("questionnaireListAll/questionnaireListInfo/quesnir_Search","click","entitySearch(\"questionnaire\",\"questionnaireListAll/questionnaireListInfo/quesnir_keyword\",\"questionnaireListAll/questionnaireListInfo/questionnaireListInDB\",null)");
onEvent("control/other_control/fieldTrip_Search_bn","click","entitySearch(\"fieldTrip\",\"control/other_control/fieldTrip_Search_kw\",\"control/other_control/fieldTripList\",null)");
entitySearch(String entityNameRef, String keywordRef, String listRef, String fileTypeRef){
	String entityName= entityNameRef;
	String keywordOfEntity= getFieldValue(keywordRef).trim();
	if((isNull(keywordOfEntity)) || (keywordOfEntity.equals("*"))){
		switch (entityName){
		case "survey":		
			
			fetchAll(loadAllSurveyQuery,
					new FetchCallback() {
					onFetch(result) {
						if(!isNull(result)){
					populateList(listRef, result);}
						else{
							showWarning("No result","No record matches the keyword");
						}
					}  
			});
			break;
		
		case "person":
			fetchAll(loadAllPersonIDQuery,
					new FetchCallback() {
					onFetch(result) {
						if(!isNull(result)){
					populateList(listRef, result);}
						else{
							showWarning("No result","No record matches the keyword");
						}
					}  
			});
			break;
			
		case "language":	
			fetchAll(loadAllLanguageQuery,
					new FetchCallback() {
					onFetch(result) {
						if(!isNull(result)){
					populateList(listRef, result);}
						else{
							showWarning("No result","No record matches the keyword");
						}
					}  
			});
			break;
			
		case "session":	
			fetchAll(loadAllSessionIDQuery,
					new FetchCallback() {
					onFetch(result) {
						if(!isNull(result)){
					populateList(listRef, result);}
						else{
							showWarning("No result","No record matches the keyword");
						}
					}  
			});
			break;
			
		case "questionnaire":
			fetchAll(loadAllQuestionnaireQuery,
					new FetchCallback() {
			        	onFetch(result) {
							if (!isNull(result)) {
								populateList(listRef, result);}	
							else{
								showWarning("No result","No record matches the keyword");
							}
			       	 }

			        	onError(message) {
			            	showToast(message);
			        	}
			    	});
			break;

		case "fieldTrip":
		fetchAll(loadAllFieldTripQuery,
					new FetchCallback() {
			        	onFetch(result) {
							if (!isNull(result)) {
								populateList(listRef, result);}	
							else{
								showWarning("No result","No record matches the keyword");
							}
			       	 }

			        	onError(message) {
			            	showToast(message);
			        	}
			    	});
			break;

		case "file":
			String fileType=getFieldValue(fileTypeRef);
			switch (fileType){
			case "Audio":
				//select uuid,measure from 
				//((select uuid as fileID from latestNonDeletedAentValue where latestNonDeletedAentValue.measure='Audio' 
				//and AttributeID = (select AttributeID from AttributeKey where AttributeName='FileType') group by fileID) t1 
				//inner join 
				//(select uuid,measure from latestNonDeletedAentValue where AttributeID=
				//(select AttributeID from AttributeKey where AttributeName='FileName')) t2 on t1.fileID=t2.uuid);
				searchAudioFileQuery="select uuid,measure from "+
						"((select uuid as fileID from latestNonDeletedAentValue where latestNonDeletedAentValue.measure='Audio' and AttributeID = "+
							"(select AttributeID from AttributeKey where AttributeName='FileType') group by fileID) t1 "+
						"inner join "+
						"(select uuid,measure from latestNonDeletedAentValue where AttributeID= "+
							"(select AttributeID from AttributeKey where AttributeName='FileID')) t2 "+
							"on t1.fileID=t2.uuid );";
				fetchAll(searchAudioFileQuery,
						new FetchCallback() {
						onFetch(result) {
							if(!isNull(result)){
						populateList(listRef, result);}
							else{
								showWarning("No result","No record matches the keyword");
							}
						}  
				});
				
				break;
			case "Video":
				searchVideoFileQuery="select uuid,measure from "+
						"((select uuid as fileID from latestNonDeletedAentValue where latestNonDeletedAentValue.measure='Video' and AttributeID = "+
							"(select AttributeID from AttributeKey where AttributeName='FileType') group by fileID) t1 "+
						"inner join "+
						"(select uuid,measure from latestNonDeletedAentValue where AttributeID= "+
							"(select AttributeID from AttributeKey where AttributeName='FileID')) t2 "+
							"on t1.fileID=t2.uuid );";
				fetchAll(searchVideoFileQuery,
						new FetchCallback() {
						onFetch(result) {
							if(!isNull(result)){
						populateList(listRef, result);}
							else{
								showWarning("No result","No record matches the keyword");
							}
						}  
				});
				break;
			case "Photo":
				searchPhotoFileQuery="select uuid,measure from "+
						"((select uuid as fileID from latestNonDeletedAentValue where latestNonDeletedAentValue.measure='Photo' and AttributeID = "+
							"(select AttributeID from AttributeKey where AttributeName='FileType') group by fileID) t1 "+
						"inner join "+
						"(select uuid,measure from latestNonDeletedAentValue where AttributeID= "+
							"(select AttributeID from AttributeKey where AttributeName='FileID')) t2 "+
							"on t1.fileID=t2.uuid );";
				fetchAll(searchPhotoFileQuery,
						new FetchCallback() {
						onFetch(result) {
							if(!isNull(result)){
						populateList(listRef, result);}
							else{
								showWarning("No result","No record matches the keyword");
							}
						}  
				});
				break;
			case "Other":
				searchOtherFileQuery="select uuid,measure from "+
						"((select uuid as fileID from latestNonDeletedAentValue where latestNonDeletedAentValue.measure='Other' and AttributeID = "+
							"(select AttributeID from AttributeKey where AttributeName='FileType') group by fileID) t1 "+
						"inner join "+
						"(select uuid,measure from latestNonDeletedAentValue where AttributeID= "+
							"(select AttributeID from AttributeKey where AttributeName='FileID')) t2 "+
							"on t1.fileID=t2.uuid );";
				fetchAll(searchOtherFileQuery,
						new FetchCallback() {
						onFetch(result) {
							if(!isNull(result)){
						populateList(listRef, result);}
							else{
								showWarning("No result","No record matches the keyword");
							}
						}  
				});
				
				break;
			case "All":
				fetchAll(loadAllFileIDQuery,
						new FetchCallback() {
						onFetch(result) {
							if(!isNull(result)){
						populateList(listRef, result);}
							else{
								showWarning("No result","No record matches the keyword");
							}
						}  
				});
				break;
			}
			
			break;
		}
			
			
		}
	
	else{
		
		switch (entityName){
		case "survey":		
			searchSureyQuery="select uuid,measure from "+
			"((select measure as quesnirid from latestNonDeletedAentValue where AttributeID = "+
				"(select AttributeID from AttributeKey where AttributeName='AnswerQuestionnaireID') group by measure) t1 "+
			"inner join "+
			"(select uuid, measure from latestNonDeletedAentValue where AttributeID= "+
				"(select AttributeID from AttributeKey where AttributeName='QuestionnaireName') AND latestNonDeletedAentValue.Measure like '%"+
				keywordOfEntity+ "%') t2 "+
				"on t2.uuid=t1.quesnirid );";
			fetchAll(searchSureyQuery,
					new FetchCallback() {
					onFetch(result) {
						if(!isNull(result)){
							populateList(listRef, result);}
						else{
							showWarning("No result","No record matches the keyword");
						}
					}  
			});
			break;
			
		case "person":		
			searchPersonQuery="select uuid, measure from latestNonDeletedAentValue where " +
					"latestNonDeletedAentValue.Measure like '%"+ keywordOfEntity +
					"%' and latestNonDeletedAentValue.AttributeID = "+
					"(select AttributeID from AttributeKey where AttributeName='PersonID')";
			fetchAll(searchPersonQuery,
					new FetchCallback() {
					onFetch(result) {
						if(!isNull(result)){
							populateList(listRef, result);}
						else{
							showWarning("No result","No record matches the keyword");
						}
					}  
			});
			break;
			
		case "language":		
			searchPersonQuery="select uuid, measure from latestNonDeletedAentValue where " +
					"latestNonDeletedAentValue.Measure like '%"+ keywordOfEntity +
					"%' and latestNonDeletedAentValue.AttributeID = "+
					"(select AttributeID from AttributeKey where AttributeName='LanguageName')";
			fetchAll(searchPersonQuery,
					new FetchCallback() {
					onFetch(result) {
						if(!isNull(result)){
							populateList(listRef, result);}
						else{
							showWarning("No result","No record matches the keyword");
						}
					}  
			});
			break;
			
		case "session":		
			searchSessionQuery="select uuid, measure from latestNonDeletedAentValue where " +
					"latestNonDeletedAentValue.Measure like '%"+ keywordOfEntity +
					"%' and latestNonDeletedAentValue.AttributeID = "+
					"(select AttributeID from AttributeKey where AttributeName='SessionID')";
			fetchAll(searchSessionQuery,
					new FetchCallback() {
					onFetch(result) {
						if(!isNull(result)){
							populateList(listRef, result);}
						else{
							showWarning("No result","No record matches the keyword");
						}
					}  
			});
			break;
		case "questionnaire":
			searchQuesnirQuery="select uuid, measure from latestNonDeletedAentValue where " +
					"latestNonDeletedAentValue.Measure like '%"+ keywordOfEntity +
					"%' and latestNonDeletedAentValue.AttributeID = "+
					"(select AttributeID from AttributeKey where AttributeName='QuestionnaireName')";
			fetchAll(searchQuesnirQuery,
					new FetchCallback() {
					onFetch(result) {
						if(!isNull(result)){
							populateList(listRef, result);}
						else{
							showWarning("No result","No record matches the keyword");
						}
					}  
			});

			break;

		case "fieldTrip":
		searchFieldTripQuery="select uuid, measure from latestNonDeletedAentValue where " +
					"latestNonDeletedAentValue.Measure like '%"+ keywordOfEntity +
					"%' and latestNonDeletedAentValue.AttributeID = "+
					"(select AttributeID from AttributeKey where AttributeName='FieldTripName')";
			fetchAll(searchFieldTripQuery,
					new FetchCallback() {
					onFetch(result) {
						if(!isNull(result)){
							populateList(listRef, result);}
						else{
							showWarning("No result","No record matches the keyword");
						}
					}  
			});
		break;

		case "file":
			String fileType=getFieldValue(fileTypeRef);
			switch (fileType){
			case "Audio":
				searchAudioFileQuery="select uuid,measure from "+
						"((select uuid as fileID from latestNonDeletedAentValue where latestNonDeletedAentValue.measure='Audio' and AttributeID = "+
							"(select AttributeID from AttributeKey where AttributeName='FileType') group by fileID) t1 "+
						"inner join "+
						"(select uuid,measure from latestNonDeletedAentValue where AttributeID= "+
							"(select AttributeID from AttributeKey where AttributeName='FileID') and measure like '%"+keywordOfEntity+"%') t2 "+
							"on t1.fileID=t2.uuid );";
				fetchAll(searchAudioFileQuery,
						new FetchCallback() {
						onFetch(result) {
							if(!isNull(result)){
						populateList(listRef, result);}
							else{
								showWarning("No result","No record matches the keyword");
							}
						}  
				});
				
				break;
			case "Video":
				searchVideoFileQuery="select uuid,measure from "+
						"((select uuid as fileID from latestNonDeletedAentValue where latestNonDeletedAentValue.measure='Video' and AttributeID = "+
							"(select AttributeID from AttributeKey where AttributeName='FileType') group by fileID) t1 "+
						"inner join "+
						"(select uuid,measure from latestNonDeletedAentValue where AttributeID= "+
						"(select AttributeID from AttributeKey where AttributeName='FileID') and measure like '%"+keywordOfEntity+"%') t2 "+
							"on t1.fileID=t2.uuid );";
				fetchAll(searchVideoFileQuery,
						new FetchCallback() {
						onFetch(result) {
							if(!isNull(result)){
						populateList(listRef, result);}
							else{
								showWarning("No result","No record matches the keyword");
							}
						}  
				});
				break;
			case "Photo":
				searchPhotoFileQuery="select uuid,measure from "+
						"((select uuid as fileID from latestNonDeletedAentValue where latestNonDeletedAentValue.measure='Photo' and AttributeID = "+
							"(select AttributeID from AttributeKey where AttributeName='FileType') group by fileID) t1 "+
						"inner join "+
						"(select uuid,measure from latestNonDeletedAentValue where AttributeID= "+
						"(select AttributeID from AttributeKey where AttributeName='FileID') and measure like '%"+keywordOfEntity+"%') t2 "+
							"on t1.fileID=t2.uuid );";
				fetchAll(searchPhotoFileQuery,
						new FetchCallback() {
						onFetch(result) {
							if(!isNull(result)){
						populateList(listRef, result);}
							else{
								showWarning("No result","No record matches the keyword");
							}
						}  
				});
				break;
			case "Other":
				searchOtherFileQuery="select uuid,measure from "+
						"((select uuid as fileID from latestNonDeletedAentValue where latestNonDeletedAentValue.measure='Other' and AttributeID = "+
							"(select AttributeID from AttributeKey where AttributeName='FileType') group by fileID) t1 "+
						"inner join "+
						"(select uuid,measure from latestNonDeletedAentValue where AttributeID= "+
						"(select AttributeID from AttributeKey where AttributeName='FileID') and measure like '%"+keywordOfEntity+"%') t2 "+
							"on t1.fileID=t2.uuid );";
				fetchAll(searchOtherFileQuery,
						new FetchCallback() {
						onFetch(result) {
							if(!isNull(result)){
						populateList(listRef, result);}
							else{
								showWarning("No result","No record matches the keyword");
							}
						}  
				});
				
				break;
			case "All":
				searchAllFileQuery="select uuid, measure from latestNonDeletedAentValue where " +
						"latestNonDeletedAentValue.Measure like '%"+ keywordOfEntity +
						"%' and latestNonDeletedAentValue.AttributeID = "+
						"(select AttributeID from AttributeKey where AttributeName='FileID')";
				fetchAll(searchAllFileQuery,
						new FetchCallback() {
						onFetch(result) {
							if(!isNull(result)){
						populateList(listRef, result);}
							else{
								showWarning("No result","No record matches the keyword");
							}
						}  
				});
				break;
			}
			
			break;
		}
	}
  }
/*** query ***/
onEvent("control/querytest/Submit","click","testQuery()");

testQuery(){
	query=getFieldValue("control/querytest/query");
	//fetchAll("SELECT sql FROM sqlite_master WHERE name='archentity';",
	fetchAll(query.toString()+";",
	new FetchCallback() {
        onFetch(result) {
			if (isNull(result)) {
				//code
				showWarning("no","no result");
			}
			else{
			for (re : result) {
				
				showWarning("yes",re.toString());
				//showWarning("me",re.toString());
				
			}		    
            //populateList("control/question_control/questionList", result);
        }
		}
        onError(message) {
        	Log.e("query error",message);
            showToast(message);
        }
    });
	
}