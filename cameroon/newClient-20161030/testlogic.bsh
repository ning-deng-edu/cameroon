import java.util.concurrent.Callable;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import android.util.Log;
import java.io.File;
import java.lang.Character;
import java.lang.StringBuffer;

//import java.lang.*;
/*** 'Editable' - you can edit the code below based on the needs ***/
User user; // don't touch
String userid;

loadAllUserQuery="select userid, fname || ' ' || lname from user where userdeleted is null";

loadAllSessionIDQuery="SELECT uuid,measure FROM latestNonDeletedArchEntIdentifiers " +
		"WHERE AttributeID "+
		"= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='SessionID') "+
		"GROUP BY uuid;";

/***User***/
onEvent("user/usertab/users", "click", "login()");
loadUsers() {
    fetchAll(loadAllUserQuery, new FetchCallback() {
        onFetch(result) {
            populateList("user/usertab/users", result);
        }
    });
}

loadUsers();

String username = "";
String device = "";

login() {
    fetchOne("select userid,fname,lname,email from user where userid='" + getListItemValue() + "';", new FetchCallback() {
        onFetch(result) {
            user = new User(result.get(0),result.get(1),result.get(2),result.get(3));
            setUser(user);
            username = result.get(1) + " " + result.get(2);
            userid=result.get(0);
            showTabGroup("control");
            createControlGroupView();
        }
    });
}

addActionBarItem("sync", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "Disable Sync";
    }
    actionOn() {
        setSyncEnabled(false);
        setFileSyncEnabled(false);
        showToast("Sync disabled.");
    }
    isActionOff() {
        isSyncEnabled();
    } 
    actionOffLabel() {
        "Enable Sync";
    }
    actionOff() {
        setSyncEnabled(true);
        setFileSyncEnabled(true);
        showToast("Sync enabled.");
    }
});

addActionBarItem("internal_gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{Internal_GPS_Enabled}";
    }
    actionOn() {
        stopGPS();
        showToast("{GPS_Disabled}");
    }
    isActionOff() {
        isInternalGPSOn();
    }
    actionOffLabel() {
        "{Internal_GPS_Disabled}";
    }
    actionOff() {
        if(isExternalGPSOn()) {
            stopGPS();
        }
        startInternalGPS();
        showToast("{GPS_Enabled}");
    }
});

startInternalGPS();
onSyncEvent("onSyncStart()", "onSyncSuccess()", "onSyncFailure()");


onSyncStart() {
    showToast("sync started");
}
 
onSyncSuccess() {
    showToast("sync success");
}
 
onSyncFailure() {
    showToast("sync failed");
}
/*** Thing to do when login ***/
activeFieldTrip=new ArrayList();
activeFieldTripCheck(){
	String currentDate=getCurrentDate();
	activeFieldTrip.clear();
	//search for fieldTrip that this date is in
	fieldTripSearchQuery="select uuid from latestNonDeletedAentValue "+
		"where AttributeID=(select AttributeID from AttributeKey where AttributeName='FieldTripStartTime') "+
		"and measure <='"+currentDate+"' and uuid in "+
		"(select uuid from latestNonDeletedAentValue where "+
		"AttributeID=(select AttributeID from AttributeKey where AttributeName='FieldTripEndTime') "+
		"and measure >='"+currentDate+"' and uuid in "+
		"(select uuid from latestNonDeletedAentValue where "+
		"AttributeID=(select AttributeID from AttributeKey where AttributeName='FieldTripID') "+
		"and measure like '"+username+"%'))";

	fetchOne(fieldTripSearchQuery, new FetchCallback() {
        onFetch(result) {
           if(!isNull(result)){
           		activeFieldTrip.addAll(result);
           }
        }
    });
}

createControlGroupView(){
	createSurveyControlPage();
	createFieldTripControlPage();
	createPersonControlPage();
	createLanguageControlPage();
	createFileControlPage();
	createQueryControlPage();
}

createSurveyControlPage(){
	if(!hasView("control/survey_control/surveyList")){
		executeViewTask(new ViewTask() {
    	doTask() { 
    		style1 = "orientation";
	        style2 = "even";
	    	createContainer("control/survey_control/surveyButtonCtn", "orientation");
	    	createContainer("control/survey_control/surveyButtonChild1", "even", "control/survey_control/surveyButtonCtn");
	        createContainer("control/survey_control/surveyButtonChild2", "even", "control/survey_control/surveyButtonCtn");

	    	createContainer("control/survey_control/surveySearchCtn", "orientation");  	
			createContainer("control/survey_control/surveySearchChild1", "even", "control/survey_control/surveySearchCtn");
	        createContainer("control/survey_control/surveySearchChild2", "even", "control/survey_control/surveySearchCtn");
	        createContainer("control/survey_control/surveySearchChild3", "even", "control/survey_control/surveySearchCtn");

	        emrSssButtonDef = createViewDef().createButton().setLabel("Emr").setStyleCss("faims-blue");
	        newSssButtonDef = createViewDef().createButton().setLabel("New").setStyleCss("faims-blue");

	        createView("control/survey_control/EMR_Survey", emrSssButtonDef,"control/survey_control/surveyButtonChild1");
	        createView("control/survey_control/New_Survey", newSssButtonDef,"control/survey_control/surveyButtonChild2");

	        searchKeywordViewDef=createViewDef().createTextField().setLabel("keyword").setAnnotationEnabled(false);
	       	sssTypeViewDef=createViewDef().createDropDown().setLabel("Type").setAnnotationEnabled(false);
	       	searchButtonDef = createViewDef().createButton().setLabel("Search").setStyleCss("faims-blue");
	        sssListDef=createViewDef().createList().setLabel("Session").setAnnotationEnabled(false).setStyleCss("file-list");

	        createView("control/survey_control/survey_keyword", searchKeywordViewDef,"control/survey_control/surveySearchChild1");
	        createView("control/survey_control/survey_type", sssTypeViewDef,"control/survey_control/surveySearchChild2");
	        createView("control/survey_control/Survey_Search", searchButtonDef,"control/survey_control/surveySearchChild3");

			createView("control/survey_control/surveyList", sssListDef,"control/survey_control");

	        refreshTabgroupCSS("control");
	        onEvent("control/survey_control/New_Survey","click","preNewSss()");
	        onEvent("control/survey_control","show","loadSessionList(\"answer\")");
	        onEvent("control/survey_control/surveyList","click","loadSessionInfo(\"answer\")");
			}
	    
		});
	}
}

createFieldTripControlPage(){
	if(!hasView("control/other_control/fieldTripList")){
		executeViewTask(new ViewTask() {
    	doTask() { 
    		style1 = "orientation";
	        style2 = "even";

	        newFTButtonDef = createViewDef().createButton().setLabel("New").setStyleCss("faims-blue");

	        createView("control/other_control/fieldTrip_New_bn", newFTButtonDef,"control/other_control");

	        createContainer("control/other_control/fieldTripSearchCtn", "orientation");  	
			createContainer("control/other_control/fieldTripSearchChild1", "even", "control/other_control/fieldTripSearchCtn");
	        createContainer("control/other_control/fieldTripSearchChild2", "even", "control/other_control/fieldTripSearchCtn");

	        searchKeywordViewDef=createViewDef().createTextField().setLabel("keyword").setAnnotationEnabled(false);
	       	searchButtonDef = createViewDef().createButton().setLabel("Search").setStyleCss("faims-blue");

	        fTListDef=createViewDef().createList().setLabel("FieldTrip").setAnnotationEnabled(false).setStyleCss("survey-list");

	        createView("control/other_control/fieldTrip_Search_kw", searchKeywordViewDef,"control/other_control/fieldTripSearchChild1");
	        createView("control/other_control/fieldTrip_Search_bn", searchButtonDef,"control/other_control/fieldTripSearchChild2");

			createView("control/other_control/fieldTripList", fTListDef,"control/other_control");

	        refreshTabgroupCSS("control");

	        onEvent("control/other_control/fieldTrip_New_bn","click","createFieldTripInfoPage(\"new\")");
			}
	    
		});
	}
}

createPersonControlPage(){
	if(!hasView("control/user_control/userList")){
		executeViewTask(new ViewTask() {
    	doTask() { 
    		style1 = "orientation";
	        style2 = "even";

	        newPsButtonDef = createViewDef().createButton().setLabel("New").setStyleCss("faims-blue");

	        createView("control/user_control/New_User", newPsButtonDef,"control/user_control");

	        createContainer("control/user_control/psSearchCtn", "orientation");  	
			createContainer("control/user_control/psSearchChild1", "even", "control/user_control/psSearchCtn");
	        createContainer("control/user_control/psSearchChild2", "even", "control/user_control/psSearchCtn");

	        searchKeywordViewDef=createViewDef().createTextField().setLabel("keyword").setAnnotationEnabled(false);
	       	searchButtonDef = createViewDef().createButton().setLabel("Search").setStyleCss("faims-blue");

	        pSListDef=createViewDef().createList().setLabel("Person").setAnnotationEnabled(false).setStyleCss("file-list");

	        createView("control/user_control/person_keyword", searchKeywordViewDef,"control/user_control/psSearchChild1");
	        createView("control/user_control/Person_Search", searchButtonDef,"control/user_control/psSearchChild2");

			createView("control/user_control/userList", pSListDef,"control/user_control");

	        refreshTabgroupCSS("control");

	        onEvent("control/user_control/New_User","click","createPersonRolePage()");
	        onEvent("control/user_control","show","loadPerson()");
	        onEvent("control/user_control/userList","click","loadPersonInfo(\"person\",null)");

			}
	    
		});
	}
}

createLanguageControlPage(){
	if(!hasView("control/language_control/languageList")){
		executeViewTask(new ViewTask() {
    	doTask() { 
    		style1 = "orientation";
	        style2 = "even";

	        newLangButtonDef = createViewDef().createButton().setLabel("New").setStyleCss("faims-blue");

	        createView("control/language_control/New_Language", newLangButtonDef,"control/language_control");

	        createContainer("control/language_control/langSearchCtn", "orientation");  	
			createContainer("control/language_control/langSearchChild1", "even", "control/language_control/langSearchCtn");
	        createContainer("control/language_control/langSearchChild2", "even", "control/language_control/langSearchCtn");

	        searchKeywordViewDef=createViewDef().createTextField().setLabel("keyword").setAnnotationEnabled(false);
	       	searchButtonDef = createViewDef().createButton().setLabel("Search").setStyleCss("faims-blue");

	        langListDef=createViewDef().createList().setLabel("Language").setAnnotationEnabled(false).setStyleCss("file-list");

	        createView("control/language_control/person_keyword", searchKeywordViewDef,"control/language_control/langSearchChild1");
	        createView("control/language_control/Person_Search", searchButtonDef,"control/language_control/langSearchChild2");

			createView("control/language_control/languageList", langListDef,"control/language_control");

	        refreshTabgroupCSS("control");

	        onEvent("control/language_control/New_Language","click","newLanguage()");
	        onEvent("control/language_control","show","loadLanguage()");
			onEvent("control/language_control/languageList","click","loadLanguageInfo()");
			}
	    
		});
	}
}

createFileControlPage(){
	if(!hasView("control/file_control/fileList")){
		executeViewTask(new ViewTask() {
    	doTask() { 
    		style1 = "orientation";
	        style2 = "even";

	        createContainer("control/file_control/fileSearchCtn", "orientation");  	
			createContainer("control/file_control/fileSearchChild1", "even", "control/file_control/fileSearchCtn");
	        createContainer("control/file_control/fileSearchChild2", "even", "control/file_control/fileSearchCtn");
	        createContainer("control/file_control/fileSearchChild3", "even", "control/file_control/fileSearchCtn");
			
			fileTypeViewDef=createViewDef().createDropDown().setLabel("Type").setAnnotationEnabled(false);
	        searchKeywordViewDef=createViewDef().createTextField().setLabel("keyword").setAnnotationEnabled(false);
	       	searchButtonDef = createViewDef().createButton().setLabel("Search").setStyleCss("faims-blue");

	        fileListDef=createViewDef().createList().setLabel("File").setAnnotationEnabled(false).setStyleCss("file-list");

	        createView("control/file_control/fileCategorySelect", fileTypeViewDef,"control/file_control/fileSearchChild1");
	        createView("control/file_control/file_keyword", searchKeywordViewDef,"control/file_control/fileSearchChild2");
	        createView("control/file_control/File_Search", searchButtonDef,"control/file_control/fileSearchChild3");

			createView("control/file_control/fileList", fileListDef,"control/file_control");

	        refreshTabgroupCSS("control");
			}
	    
		});
	}
}

/**********Temp function, to be remove for official version************/
createQueryControlPage(){
	if(!hasView("control/querytest/Submit")){
			executeViewTask(new ViewTask() {
	    	doTask() { 
				queryViewDef=createViewDef().createTextField().setLabel("query").setAnnotationEnabled(false);
				queryButtonDef = createViewDef().createButton().setLabel("Submit").setStyleCss("faims-blue");

				createView("control/querytest/query", queryViewDef,"control/querytest");
				createView("control/querytest/Submit", queryButtonDef,"control/querytest");
				refreshTabgroupCSS("control");
				onEvent("control/querytest/Submit","click","testQuery()");
			}
	    
		});
	}

}
testQuery(){
	query=getFieldValue("control/querytest/query");
	//fetchAll("SELECT sql FROM sqlite_master WHERE name='archentity';",
	fetchAll(query.toString()+";",
	new FetchCallback() {
        onFetch(result) {
			if (isNull(result)) {
				//code
				showWarning("no","no result");
			}
			else{
			for (re : result) {
				
				showWarning("yes",re.toString());
				//showWarning("me",re.toString());
				
			}		    
            //populateList("control/question_control/questionList", result);
        }
		}
        onError(message) {
        	Log.e("query error",message);
            showToast(message);
        }
    });
	
}
/**********Temp function, to be remove for official version************/
/*** Session questionnaire list***/

createQuesnirList(){
	if(!hasView("questionnaireListAll/questionnaireListInfo/questionnaireListInDB")){
		removeAllViewsAndContainers("questionnaireListAll");
		executeViewTask(new ViewTask() {
    	doTask() { 	
	        style1 = "orientation";
	        style2 = "even";
	    	createContainer("questionnaireListAll/questionnaireListInfo/quesnirLsCt", "orientation");
	    	createContainer("questionnaireListAll/questionnaireListInfo/child1", "even", "questionnaireListAll/questionnaireListInfo/quesnirLsCt");
	        createContainer("questionnaireListAll/questionnaireListInfo/child2", "even", "questionnaireListAll/questionnaireListInfo/quesnirLsCt");

	        searchTextViewDef = createViewDef().createTextField().setLabel("Keyword").setInfoEnabled(true);
	        searchButtonDef = createViewDef().createButton().setLabel("Search").setStyleCss("faims-blue");
	        
	        quesnirListDef=createViewDef().createList().setLabel("Questionnaires").setStyleCss("questionnaire-list");

	        createView("questionnaireListAll/questionnaireListInfo/quesnir_keyword", searchTextViewDef,"questionnaireListAll/questionnaireListInfo/child1");
	        createView("questionnaireListAll/questionnaireListInfo/quesnir_Search", searchButtonDef,"questionnaireListAll/questionnaireListInfo/child2");
	   
	        createView("questionnaireListAll/questionnaireListInfo/questionnaireListInDB", quesnirListDef,"questionnaireListAll/questionnaireListInfo");

	        refreshTabgroupCSS("questionnaireListAll");

	        onEvent("questionnaireListAll","show","loadAllQuesnir()");
	        onEvent("questionnaireListAll/questionnaireListInfo/questionnaireListInDB","click","loadQuesnirInfo()");
	    }
		});
	}
}

createQuesSel(){
	if(!hasView("questionnaireInfo/surveyQuesnirHidden/surveyQuestionnaireID")){
		removeAllViewsAndContainers("questionnaireInfo");
		executeViewTask(new ViewTask() {
	    doTask() {
	    	hideQuesnirId=createViewDef().createTextField().setLabel("currentQuesnirID").setReadOnly(true);
	    	idTextViewDef = createViewDef().createTextField().setLabel("Questionnaire label").setAttributeName("QuestionnaireID").setAttributeType("measure").setAnnotationEnabled(false).setReadOnly(true);
	    	nameTextViewDef=createViewDef().createTextField().setLabel("Questionnaire name").setAttributeName("QuestionnaireName").setAttributeType("measure").setAnnotationEnabled(false).setReadOnly(true);
	    	typeTextViewDef=createViewDef().createTextField().setLabel("Questionnaire type").setAnnotationEnabled(false).setReadOnly(true);
	    	descTextViewDef=createViewDef().createTextField().setLabel("Questionnaire description").setAttributeName("QuestionnaireDescription").setAttributeType("measure").setAnnotationEnabled(false).setReadOnly(true);
	    	createView("questionnaireInfo/surveyQuesnirHidden/currentQuesnirID",hideQuesnirId,"questionnaireInfo/surveyQuesnirHidden");
	    	createView("questionnaireInfo/surveyQuesnirHidden/surveyQuestionnaireID",idTextViewDef,"questionnaireInfo/surveyQuesnirHidden");
	        createView("questionnaireInfo/surveyQuesnirHidden/surveyQuestionnaireName",nameTextViewDef,"questionnaireInfo/surveyQuesnirHidden");
	        createView("questionnaireInfo/surveyQuesnirHidden/surveyQuestionnaireType",typeTextViewDef,"questionnaireInfo/surveyQuesnirHidden");
	        createView("questionnaireInfo/surveyQuesnirHidden/surveyQuestionnaireDescription", descTextViewDef,"questionnaireInfo/surveyQuesnirHidden");
	    		    	

	        quesSelListDef=createViewDef().createList().setLabel("Questions").setStyleCss("questionQuestionnaire-list");

	        style1 = "orientation";
	        style2 = "even";
	        createContainer("questionnaireInfo/surveyQuestionnaire/quesSelCt", "orientation");
	    	createContainer("questionnaireInfo/surveyQuestionnaire/child1", "even", "questionnaireInfo/surveyQuestionnaire/quesSelCt");
	        createContainer("questionnaireInfo/surveyQuestionnaire/child2", "even", "questionnaireInfo/surveyQuestionnaire/quesSelCt");

	    	searchTextViewDef = createViewDef().createTextField().setLabel("Keyword").setInfoEnabled(true);
	        searchButtonDef = createViewDef().createButton().setLabel("Search").setStyleCss("faims-blue");

			createView("questionnaireInfo/surveyQuestionnaire/ques_keyword", searchTextViewDef,"questionnaireInfo/surveyQuestionnaire/child1");
	        createView("questionnaireInfo/surveyQuestionnaire/ques_Search", searchButtonDef,"questionnaireInfo/surveyQuestionnaire/child2");
	        createView("questionnaireInfo/surveyQuestionnaire/surveyQuestionInQuestionnaire", quesSelListDef,"questionnaireInfo/surveyQuestionnaire");
	    	 
	        refreshTabgroupCSS("questionnaireInfo");
	        //showTabGroup("fieldTrip");
	        onEvent("questionnaireInfo/surveyQuestionnaire/surveyQuestionInQuestionnaire","click","checkClickValidity(null)");
	        onEvent("questionnaireInfo/surveyQuestionnaire/ques_Search","click","searchQuesInCrtQuesnir()");
	   		}
		});
	}
}

/*** session ui ***/
createMainSessionPage(String typeflag){
	if(hasView("sessionForAnswer/sssAnsBasicInfo/sssType") && typeflag.equals("n")){
		removeView("sessionForAnswer/sssAnsBasicInfo/sssType");
	}

	if(!hasView("sessionForAnswer/sssHidden/sssID")){
		removeAllViewsAndContainers("sessionForAnswer");
		executeViewTask(new ViewTask() {
    	doTask() { 
    		//sssHidden page
    		sssIdViewDef= createViewDef().createTextField().setLabel("Session label").setAttributeName("SessionID").setAttributeType("measure").setAnnotationEnabled(true).setReadOnly(true);
    		sssStartTimeViewDef=createViewDef().createTextField().setLabel("Start time").setAttributeName("SessionStartTimestamp").setAttributeType("measure").setAnnotationEnabled(true).setReadOnly(true);
    		sssEndTimeViewDef=createViewDef().createTextField().setLabel("End time").setAttributeName("SessionEndTimestamp").setAttributeType("measure").setAnnotationEnabled(true).setReadOnly(true);
    		sssNameViewDef=createViewDef().createTextField().setLabel("Session name").setAttributeName("SessionName").setAttributeType("measure").setAnnotationEnabled(true);
    		createView("sessionForAnswer/sssHidden/sssID",sssIdViewDef,"sessionForAnswer/sssHidden"); 
    		createView("sessionForAnswer/sssHidden/sssStartTimetamp",sssStartTimeViewDef,"sessionForAnswer/sssHidden");
    		createView("sessionForAnswer/sssHidden/sssEndTimestamp",sssEndTimeViewDef,"sessionForAnswer/sssHidden");
    		createView("sessionForAnswer/sssHidden/sssName",sssNameViewDef,"sessionForAnswer/sssHidden");		
    		//sssAnsBasicInfo page   
    		
    		sssLocViewDef=createViewDef().createTextField().setLabel("GPS").setAttributeName("SessionLocation").setAttributeType("measure").setAnnotationEnabled(true).setReadOnly(true);
    		sssDescViewDef=createViewDef().createTextField().setLabel("Description").setAttributeName("SessionDescription").setAttributeType("measure").setAnnotationEnabled(true);

    		createView("sessionForAnswer/sssAnsBasicInfo/sssLocation",sssLocViewDef,"sessionForAnswer/sssAnsBasicInfo");	
    		createView("sessionForAnswer/sssAnsBasicInfo/sssDescription",sssDescViewDef,"sessionForAnswer/sssAnsBasicInfo");
    		
    		if(typeflag.equals("s")){
    			sssTypeViewDef=createViewDef().createTextField().setLabel("Type").setAnnotationEnabled(false).setReadOnly(true);
    			createView("sessionForAnswer/sssAnsBasicInfo/sssType",sssTypeViewDef,"sessionForAnswer/sssAnsBasicInfo");
    		} 
    		
    		//sssPersonInfo page
	        style1 = "orientation";
	        style2 = "even";
	    	createContainer("sessionForAnswer/sssPersonInfo/sssPsSelCt", "orientation");
	    	createContainer("sessionForAnswer/sssPersonInfo/sssPsSelCtchild1", "even", "sessionForAnswer/sssPersonInfo/sssPsSelCt");
	        createContainer("sessionForAnswer/sssPersonInfo/sssPsSelCtchild2", "even", "sessionForAnswer/sssPersonInfo/sssPsSelCt");

	    	createContainer("sessionForAnswer/sssPersonInfo/sssPsBtnCt", "orientation");  	
			createContainer("sessionForAnswer/sssPersonInfo/sssPsBtnCtchild1", "even", "sessionForAnswer/sssPersonInfo/sssPsBtnCt");
	        createContainer("sessionForAnswer/sssPersonInfo/sssPsBtnCtchild2", "even", "sessionForAnswer/sssPersonInfo/sssPsBtnCt");
			
		
	        psRoleListDef=createViewDef().createDropDown().setLabel("Role in session").setAnnotationEnabled(false);
	        psNameListDef=createViewDef().createDropDown().setLabel("Person name").setAnnotationEnabled(false);

	        addPsButtonDef = createViewDef().createButton().setLabel("Add").setStyleCss("faims-blue");
	        newPsButtonDef = createViewDef().createButton().setLabel("New").setStyleCss("faims-blue");
	        
	        psListDef=createViewDef().createList().setLabel("Session person list").setAnnotationEnabled(false).setStyleCss("session-list");

	        createView("sessionForAnswer/sssPersonInfo/sssPersonRole", psRoleListDef,"sessionForAnswer/sssPersonInfo/sssPsSelCtchild1");
	        createView("sessionForAnswer/sssPersonInfo/sssPersonName", psNameListDef,"sessionForAnswer/sssPersonInfo/sssPsSelCtchild2");
	   
	        createView("sessionForAnswer/sssPersonInfo/Add_New_Person", newPsButtonDef,"sessionForAnswer/sssPersonInfo/sssPsBtnCtchild1");
			createView("sessionForAnswer/sssPersonInfo/Add_Person", addPsButtonDef,"sessionForAnswer/sssPersonInfo/sssPsBtnCtchild2");

			createView("sessionForAnswer/sssPersonInfo/sssPersonList", psListDef,"sessionForAnswer/sssPersonInfo");
			
			//sssAnsList page
			saveSssButtonDef = createViewDef().createButton().setLabel("Save Session").setStyleCss("faims-blue");
			newAnsButtonDef = createViewDef().createButton().setLabel("New Answer").setStyleCss("faims-blue");

			//ansSelListDef=createViewDef().createList().setLabel("Selectable Answers").setAnnotationEnabled(false).setStyleCss("session-file-list");
			ansListDef=createViewDef().createList().setLabel("Answers").setAnnotationEnabled(false).setStyleCss("session-file-list");

			createView("sessionForAnswer/sssAnsList/Save_Session", saveSssButtonDef,"sessionForAnswer/sssAnsList");
	        createView("sessionForAnswer/sssAnsList/New_Answer_In_Session", newAnsButtonDef,"sessionForAnswer/sssAnsList");

	        //createView("sessionForAnswer/sssAnsList/sssAnsSelList", ansSelListDef,"sessionForAnswer/sssAnsList");
	        createView("sessionForAnswer/sssAnsList/sssAnswerList", ansListDef,"sessionForAnswer/sssAnsList");

	        refreshTabgroupCSS("sessionForAnswer");

	        onEvent("sessionForAnswer/sssAnsList/New_Answer_In_Session","click","checkNewAnsTime()");
			onEvent("sessionForAnswer/sssAnsList/Save_Session","click","saveSession(\"answer\")");
			onEvent("sessionForAnswer/sssPersonInfo/Add_Person","click","addPersonToSession()");
			onEvent("sessionForAnswer/sssPersonInfo/sssPersonList","click","deletePersonInSession()");
			onEvent("sessionForAnswer/sssPersonInfo/Add_New_Person","click","createPersonRolePage()");
			onEvent("sessionForAnswer/sssPersonInfo","show","refreshPsAndRole()");
			//onEvent("sessionForAnswer/sssAnsList/sssAnsSelList","click","addItemToTargetList(candidate_files_session,\"sessionFile\",null)");
			onEvent("sessionForAnswer/sssAnsList/sssAnswerList","click","checkDelOrView()");

			}
	    
		});
	}
	else if(!hasView("sessionForAnswer/sssAnsBasicInfo/sssType") && typeflag.equals("s")){
		sssTypeViewDef=createViewDef().createTextField().setLabel("Type").setAnnotationEnabled(false).setReadOnly(true);
    	createView("sessionForAnswer/sssAnsBasicInfo/sssType",sssTypeViewDef,"sessionForAnswer/sssAnsBasicInfo");
	}
}

refreshPsAndRole(){
	fetchAll(loadAllRoleQuery, new FetchCallback() {
    	onFetch(result) {
			if (!isNull(result)) {
				personRoleList.clear();
				personRoleList.addAll(result);
				populateDropDown("sessionForAnswer/sssPersonInfo/sssPersonRole", personRoleList);	
				fetchAll(loadAllPersonQuery,new FetchCallback() {
		        	onFetch(fetchResult) {
						if (!isNull(fetchResult)) {
							personList.clear();
							personList.addAll(fetchResult);
							populateDropDown("sessionForAnswer/sssPersonInfo/sssPersonName", personList);	
							
						}	
						else{
					    	showWarning("No person data","No person data is available, please contact the admin");
							return;
						}
		       	 }

		        	onError(message) {
		            	showToast(message);
		        	}
		    	});
			}	
			else{
		    	showWarning("No Role data","No role data is available, please contact the admin");
				return;
			}
   	    }

    	onError(message) {
        	showToast(message);
    	}
    });
}

checkDelOrView(){
	current_answer_id=null;
	current_answer_id=getListItemValue();

	if(isNull(current_answer_id)){
		showWarning("Error","Can't find this answer, please contact the admin");
		return;
	}
	showAlert("View File Info","Do you want to view answer info?","preLoadAnswerInfo(\""+current_answer_id+"\")","delAnsInSssAlert(\""+current_answer_id+"\")");
}

preLoadAnswerInfo(String tempAnswerId){
	checkLangIntroAnsQuery="select 1 from (select measure as ansQuesID from latestNonDeletedAentValue "+
		"where AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionID') and uuid='"+tempAnswerId+"') t1 "+
		"inner join (select langIntroQues.measure as langIntroQuesID from latestNonDeletedAentValue as langIntroQues, latestNonDeletedAentValue as QuesType "+
		"where langIntroQues.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesUuid') "+
		"and QuesType.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesPropDefID') "+
		"and langIntroQues.uuid=QuesType.uuid and QuesType.measure=(select QuesTypeID.uuid from latestNonDeletedAentValue as QuesTypeID "+
		"where QuesTypeID.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesPropDefName') and QuesTypeID.measure='LangIntro' ) limit 1) t2 "+
		"on t1.ansQuesID=t2.langIntroQuesID";

	fetchOne(checkLangIntroAnsQuery,new FetchCallback() {
		onFetch(result) {
			if(isNull(result)){
				loadAnswerInfo();
			}
			else{
				loadLangIntroAnsInfo(tempAnswerId);
			}
		}	       
		onError(message) {
			showToast(message);
		}
	});
}

delAnsInSssAlert(String toDelId){
	showAlert("Delete File","Do you want to delete this answer from this session?","deleteItemFromTargetList(sss_answer_list,\"sessionFile\",\""+toDelId+"\")","stayInCurrentPage()");
}
checkNewAnsTime(){
	sssTime=getFieldValue("sessionForAnswer/sssHidden/sssStartTimetamp");
	sssDateTimeArray=sssTime.split("\\s+");
    sssDate=sssDateTimeArray[0];

	String crnDate=getCurrentDate();
	if(!(sssDate.equals(crnDate))){
		showAlert("alert", "You cannot add new answer to this session \n"+"Do you want to create a new session?", "preNewSss()", "stayInCurrentPage()");
	}	
	else{
		showQuestionnaireList();
	}
}

preNewSss(){
	if(isNull(activeFieldTrip)){
		showAlert("alert", "No active FieldTrip for this session\n"+"Do you want to continue create a new session?", "newSessionForAnswer(\"answer\",null)", "checkGoToFieldTrip()");
	}
	else{
		newSessionForAnswer("answer",null);
	}
}
checkGoToFieldTrip(){
	showAlert("alert", "Do you want to create a fieldTrip?","createFieldTripInfoPage(\"new\")", "stayInCurrentPage()");
}
/*** session variables ***/
sss_id=null;
sss_answer_list=new ArrayList();
sss_interviewer_list=new ArrayList();//for recording interviewer list when creating session
sssOriginInfo=new ArrayList();
sssNewInfo=new ArrayList();
original_sss_answer_list=new ArrayList();
sssAnsRelnOrigin=new ArrayList();
String sssLabel=null;//This is used for sssID interviewee changing
sssAnswerInterviewerOrigin=new LinkedHashSet();
sssAnswerInterviewerNew=new LinkedHashSet();//This is for generating sss label
String sssLabelOld=null;

Boolean introAns=false;//mark if a session is for introductory questionnaire answer collecting or not
ArrayList newPersonForIntro=new ArrayList(); 

sssPsInfoRelnOrigin=new ArrayList();
sssPsInfoRelnNew=new ArrayList();
sssPersonRoleNameListOrigin=new ArrayList();
sssPersonRoleandNameList=new ArrayList();//selected person role
personRoleList=new ArrayList();
personList=new ArrayList();
sssConsultantList=new LinkedHashSet();
sssInterviewerList=new LinkedHashSet();
sssConsultantIdList=new ArrayList();
String introPsMark=null;//use for check if an intro ps is deleted from his/her intro session
currentPosition=new ArrayList();

candidate_files_session=new ArrayList();

sssOldIntvReln=new ArrayList();
sssOldCoslReln=new ArrayList();
sssOldPsReln=new ArrayList();

quesRecordingType=new ArrayList();
/*** SEssion queries ***/
/*** usage: session list, session search, fieldTrip creation, fieldTrip update (current 4 usages)***/
loadAllSessionIDQuery="SELECT uuid,measure FROM latestNonDeletedArchEntIdentifiers " +
		"WHERE AttributeID "+
		"= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='SessionID') "+
		"GROUP BY uuid;";

initSessionVar(){
	introAns=false;
	introPsMark=null;
	langIntro=false;
	sss_id=null;
	sssLabel=null;
	sssLabelOld=null;
	sss_answer_list.clear();
	sssOriginInfo.clear();
	sssNewInfo.clear();	
	original_sss_answer_list.clear();
	sssAnsRelnOrigin.clear();
	sss_interviewer_list.clear();
	sssConsultantList.clear();
	sssConsultantIdList.clear();
	sssInterviewerList.clear();
	sssPersonRoleandNameList.clear();
	sssOldPsReln.clear();
	sssOldCoslReln.clear();
	sssOldIntvReln.clear();
	quesRecordingType.clear();
	
	personRoleList.clear();
    personList.clear();
    sssPersonRoleandNameList.clear();
    /*
	emrSssInfo.clear();
	emrAnsInfo.clear();
	emrPsInfo.clear();
	emrIveExist=false;

	newLangInLangIntro=0;
	crntLangIntroId=null;
	langIntroAnsLabel=null;
	canLangList.clear();
	newTempLangList.clear();
	loopQuesOrder.clear();
	langIntro=false;
	*/
}
loadSessionListByQuesnirType(String typeflag,ArrayList typeIdList){
	String typeIds=buildQuerySetCondition(typeIdList);
	loadSessionByTypeQuery="select uuid,measure from latestNonDeletedAentValue where "+
	"latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionID') "+
	"and uuid in "+
	"(select uuid from AentReln where RelationshipID "+
	"in (select RelationshipID from AEntReln where AEntReln.uuid in "+
	"(select uuid from latestNonDeletedAentValue "+
	"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionnaireID') "+
	"and measure IN (select uuid from latestNonDeletedAentValue "+
	"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionnaireType') and "+
	"measure IN'"+typeIds+"')) "+
	"AND RelationshipID in (select RelationshipID from latestNonDeletedRelationship "+
	"where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Answer and Session') and latestNonDeletedRelationship.Deleted IS NULL)))";

	fetchAll(loadSessionByTypeQuery, new FetchCallback() {
        onFetch(result) {
        	populateList("control/survey_control/surveyList");
        }
        onError(message) {
            showToast(message);
        }
    });
}

loadSessionList(String typeflag){
	fetchAll(loadAllSessionIDQuery, new FetchCallback() {
        onFetch(result) {
        	switch(typeflag){
        	case "session":
        		//populateList("sessionGroup/sessionInfo/sessionList", result);
        		break;
        	case "answer":
        		populateList("control/survey_control/surveyList", result);
        		break;
        	}
            
        }

        onError(message) {
            showToast(message);
        }
    });
}

checkSssQuesnirType(String typeflag){
	String checkAnsId=null;
	if((!isNull(original_sss_answer_list)) && (typeflag.equals("answer"))){		
		checkAnsId=original_sss_answer_list.get(0).get(0);

	checkAnsQuesnirTypeQuery="select uuid,measure from latestNonDeletedAentValue "+
		"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesnirTypeName') "+
		"and uuid=(select measure from latestNonDeletedAentValue "+
			"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionnaireType') "+
			"and uuid=(select measure from latestNonDeletedAentValue where uuid='"+checkAnsId+"' "+
				"and AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionnaireID')))";

	fetchAll(checkAnsQuesnirTypeQuery, new FetchCallback() {
        	onFetch(quesnirTypeResult) {
              String quesnirType=quesnirTypeResult.get(0).get(1);
              if(quesnirType.equals("Introductory") || quesnirType.equals("Sociolinguistic")){
              	introAns=true;
              }
              else{
              	introAns=false;
              }
       		 }
   		 });
	}
	else{
		introAns=false;
	}
}

takePoint() {
	currentPosition.clear();
    Object position = getGPSPosition();
    
    if (position != null ) {
        latitude = position.getLatitude();
        longitude = position.getLongitude();

	    String latitudeString=latitude.toString();
	    String longitudeString=longitude.toString();
	    String currentPositionLong="lat:"+latitudeString+"long:"+longitudeString;
	    String latitudeShort=latitudeString.substring(0,6);
	    String longitudeShort=longitudeString.substring(0,6);
	    currentPosition.clear();
	    currentPosition.add(currentPositionLong);
	    currentPosition.add(latitudeShort);
	    currentPosition.add(longitudeShort);
	    //return currentPosition;

    } else {
        showToast("GPS Not initialized");
    }
}

newSessionForAnswer(String typeflag, ArrayList newAddedPerson){
	createMainSessionPage("n");
	initSessionVar();
	if(typeflag.equals("answer")){
		introAns=false;
		introPsMark=null;
	}
	
	else{
		introAns=true;
		newPersonForIntro.clear();
		newPersonForIntro.add(newAddedPerson);
	}
	
	//showWarning("initSessionVar2","initSessionVar2");
	newTabGroup("sessionForAnswer");
	takePoint();

	String currentTime=getCurrentTime();

    String currentDate=getCurrentDate();
    setFieldValue("sessionForAnswer/sssHidden/sssStartTimetamp",currentTime);           

    if (!isNull(currentPosition)){
    	sssLabel="_"+currentPosition.get(1)+"_"+currentPosition.get(2)+"_"+currentDate;
    	setFieldValue("sessionForAnswer/sssAnsBasicInfo/sssLocation",currentPosition.get(0));
    }
    else{
    	sssLabel="_"+"unknownLat"+"_"+"unknownLong"+"_"+currentDate;
    	setFieldValue("sessionForAnswer/sssAnsBasicInfo/sssLocation","GPS not available");
    }
    //String tempSssLabelNew=username+sssLabel;

    populateList("sessionForAnswer/sssAnsList/sssAnswerList",sss_answer_list); 
    populateList("sessionForAnswer/sssPersonInfo/sssPersonList",sssPersonRoleandNameList);

	//showWarning("populateList","populateList");
    fetchAll(loadAllRoleQuery, new FetchCallback() {
    	onFetch(result) {
			if (!isNull(result)) {
				personRoleList.addAll(result);
				populateDropDown("sessionForAnswer/sssPersonInfo/sssPersonRole", personRoleList);	

				if(introAns){//if intro ans, add the current person to the list
					for (psRole:personRoleList){
						if(psRole.get(1).equals("consultant")){
							String cosId=psRole.get(0);
							introPsMark=cosId+"_"+newPersonForIntro.get(0).get(0);
							introPs=new ArrayList();
							introPs.add(introPsMark);
							introPs.add(psRole.get(1)+"_"+newPersonForIntro.get(0).get(1));
							sssPersonRoleandNameList.add(introPs);
							populateList("sessionForAnswer/sssPersonInfo/sssPersonList",sssPersonRoleandNameList); 
							break;
						}
						
					}
					//showWarning("psRole","psRole");
				}
				fetchAll(loadAllPersonQuery,new FetchCallback() {
		        	onFetch(fetchResult) {
						if (!isNull(fetchResult)) {
							personList.addAll(fetchResult);
							populateDropDown("sessionForAnswer/sssPersonInfo/sssPersonName", personList);	
							
						}	
						else{
					    	showWarning("No person data","No person data is available, please contact the admin");
							return;
						}
						//showWarning("loadAllPersonQuery","loadAllPersonQuery");
		       	 	}

		        	onError(message) {
		            	showToast(message);
		        	}
		    	});
			}	
			else{
		    	showWarning("No Role data","No role data is available, please contact the admin");
				return;
			}
   	    }

    	onError(message) {
        	showToast(message);
    	}
    });
}

checkRolesInSession(){
	psRoleSum=new LinkedHashSet();
	sssConsultantList.clear();
	sssInterviewerList.clear();

	for(person : sssPersonRoleandNameList) {
		String [] psInfo=person.get(1).split("_");
		if(psInfo[0].equals("consultant")){
			psRoleSum.add("consultant");
			sssConsultantList.add(psInfo[1]);
			String [] psInSssId=person.get(0).split("_");
			tempPs=new ArrayList();
			tempPs.add(psInSssId[1]);
			tempPs.add(psInfo[1]);
			sssConsultantIdList.add(tempPs);
		}
		else if(psInfo[0].equals("interviewer")){
			psRoleSum.add("interviewer");
			sssInterviewerList.add(psInfo[1]);
		}
	}
	return psRoleSum;
}

addPersonToSession(){
	String selectedRoleID=getFieldValue("sessionForAnswer/sssPersonInfo/sssPersonRole");
	String selectedPersonID=getFieldValue("sessionForAnswer/sssPersonInfo/sssPersonName");
	if((isNull(selectedRoleID))||(isNull(selectedPersonID))){
		showWarning("Invalid data","No person role or person is selected");
		return;
	}

	rolePerson=new ArrayList();
	String psRoleNameId=selectedRoleID+"_"+selectedPersonID;
	rolePerson.add(psRoleNameId);

	String selectedRoleName=null;
	String selectedPersonName=null;
	//check duplication
	for (existPs: sssPersonRoleandNameList){
		if (existPs.get(0).equals(psRoleNameId)){
			showWarning("Duplicate data","This person with this role is already in the list");
			return;
		}
	}

	for(role:personRoleList){
		if(role.get(0).equals(selectedRoleID)){
			selectedRoleName=role.get(1);
			break;
		}
	}
	for(person:personList){
		if(person.get(0).equals(selectedPersonID)){
			selectedPersonName=person.get(1);
			break;
		}

	}
	if((isNull(selectedRoleName))||(isNull(selectedPersonName))){
		showWarning("Invalid data","Invalid role data or person data\n"+"you might be using stale data, please contact the Admin");
		return;
	}
	rolePerson.add(selectedRoleName+"_"+selectedPersonName);
	
	if(selectedRoleName.equals("consultant")){
		checkPersonIntro(selectedPersonID,rolePerson);
	}
	else{
		sssPersonRoleandNameList.add(rolePerson);
		populateList("sessionForAnswer/sssPersonInfo/sssPersonList",sssPersonRoleandNameList);
	}
}

deletePersonInSession(){
	String toDelPerson=getListItemValue();
	if(introAns){
		if (toDelPerson.equals(introPsMark)){
			showWarning("Invalid operation","This person can not be deleted from this session");
			return;
		}
	}
	for(psInfo : sssPersonRoleandNameList){
		if(psInfo.get(0).equals(toDelPerson)){
			sssPersonRoleandNameList.remove(psInfo);
			break;
		}
	}
	populateList("sessionForAnswer/sssPersonInfo/sssPersonList",sssPersonRoleandNameList);
}

checkPersonIntro(String personID, ArrayList toAddPerson){
	checkPsIntrSssQuery="select uuid,measure from latestNonDeletedArchEntIdentifiers "+
			"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionID') "+
			"and uuid in ( select uuid from AentReln "+
				"where RelationshipID in(select RelationshipID from AentReln "+
					"where RelationshipID in (select RelationshipID from latestNonDeletedRelationship "+
						"where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Answer and Session' ) "+
						"and latestNonDeletedRelationship.Deleted IS NULL) "+
			"and uuid in (select uuid from latestNonDeletedAentValue "+
				"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionnaireID') "+
				"and latestNonDeletedAentValue.measure in(select uuid from latestNonDeletedAentValue "+
					"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionnaireType') "+
					"and measure=(select uuid from latestNonDeletedAentValue "+
						"where AttributeID= (select AttributeID from AttributeKey "+
							"where AttributeName='QuesnirTypeName') and measure = 'Introductory'))))) "+
			"and uuid in (select measure from latestNonDeletedArchEntIdentifiers "+
				"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionIDforPerson') "+
				"and uuid in (select uuid from latestNonDeletedAentValue "+
					"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionPersonRole') "+
					"and measure=(select uuid from latestNonDeletedAentValue "+
						"where AttributeID=(select AttributeID from AttributeKey where AttributeName='PersonRoleName') "+
						"and measure='consultant') "+
			"and uuid in (select uuid from latestNonDeletedAentValue "+
				"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionPersonName') "+
				"and measure ='"+personID+"')));";
	
	fetchAll(checkPsIntrSssQuery,new FetchCallback() {				        	
		onFetch(result) {					        	
			if(isNull(result)){
				String toAddPsIdInfo=toAddPerson.get(0);
				String toAddPsInfo=toAddPerson.get(1);

				showAlert("alert", "This person has not answered introductory questionnaire \n"+"Do you still want to add this person?", 
					"addPsToSssConfirm(\""+toAddPsIdInfo+"\", \""+toAddPsInfo+"\")", "addPersonIntro(\""+personID+"\")");
			}
			else
			{	
				sssPersonRoleandNameList.add(toAddPerson);
				populateList("sessionForAnswer/sssPersonInfo/sssPersonList",sssPersonRoleandNameList);
			}
        }
        onError(message) {
            showToast(message);     
        }
	});
}

addPsToSssConfirm(String toAddPersonID, String toAddPersonName){
	toAddPersonTemp=new ArrayList();
	toAddPersonTemp.clear();
	toAddPersonTemp.add(toAddPersonID);
	toAddPersonTemp.add(toAddPersonName);
	sssPersonRoleandNameList.add(toAddPersonTemp);
	populateList("sessionForAnswer/sssPersonInfo/sssPersonList",sssPersonRoleandNameList);
}
addPersonIntro(String toAddIntroPersonId){
	showAlert("alert", "Do you want to add introductory answer for this person?", "addPersonIntroAnswer(\""+toAddIntroPersonId+"\")", "stayInCurrentPage()");
}

addPersonIntroAnswer(String toAddIntroPersonId){
	loadPersonInfo("sss",toAddIntroPersonId);
}
autoSaveSession(String typeFlag){
	switch(typeFlag){
		case "head":
			saveSession("answer");
		break;
		case "tail":
			sssOriginInfo.clear();
			sssOriginInfo.addAll(sssNewInfo);
			original_sss_answer_list.clear();
			original_sss_answer_list.addAll(sss_answer_list);
			sssPersonRoleNameListOrigin.clear();
			sssPersonRoleNameListOrigin.addAll(sssPersonRoleandNameList);
		break;
		case "tailNew":
			sssOriginInfo.clear();
			sssOriginInfo.add(getFieldValue("sessionForAnswer/sssHidden/sssID"));

			original_sss_answer_list.clear();
			original_sss_answer_list.addAll(sss_answer_list);
			sssPersonRoleNameListOrigin.clear();
			sssPersonRoleNameListOrigin.addAll(sssPersonRoleandNameList);
		break;
		case "emr":
			sssOriginInfo.clear();
			sssOriginInfo.add(emrSssInfo.get("sssId"));
			original_sss_answer_list.clear();
			original_sss_answer_list.addAll(sss_answer_list);
		break;
	}
	
}
//todo: session description is not added for info checking
saveSession(String typeflag){
	if(isNull(sss_id)){//SAVING NEW SESSION
		if(isNull(sss_answer_list))
		{
			showWarning("Incomplete Data","Data can't be saved\n"+"Please make sure you have answer(s) in this session");
			return;
		}

	    //generate session label
		Hashtable psInfo=extractPsSum();
		String needInfo=checkRoleComplete(psInfo);
		//showWarning("needInfo1","needInfo1");
		if(needInfo!=null){
			showWarning("No "+ needInfo +" info","No "+needInfo+" selected, please add "+needInfo+" info");
			return;
		}
		//showWarning("needInfo","needInfo");
		ansConsultant=psInfo.get("consultant");
		interviwerPrefix=psInfo.get("interviewer");
		
		String tempSssLabel=interviwerPrefix+sssLabel;
		sssDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
		"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionID') "+
		"and (measure = '"+tempSssLabel+"' or measure like '"+tempSssLabel+"(%)')";

		fetchAll(sssDuplicateQuery,new FetchCallback() {
			onFetch(result) {
				if(!isNull(result)){
					tempSssLabel = nonDupLabelGen(result, tempSssLabel,"Session","SessionID",true);
				}
				//showWarning("tempSssLabel",tempSssLabel);
				setFieldValue("sessionForAnswer/sssHidden/sssID",tempSssLabel);

				saveTabGroup("sessionForAnswer", sss_id, null, null, new SaveCallback() {
				    onSave(uuid, newRecord) {
				    	sss_id = uuid;
				      	if (newRecord) {
							saveAnsInSession(sss_id,"newSss",psInfo);
							savePsInSession(sss_id);
							autoSaveSession("tailNew");
							showToast("New session contains answer(s) created");
							saveNewSssToFieldTrip(sss_id);
				      }
				    }
				    onError(message) {
				        showWarning("error on saveSession 1",message);
				    }  
					});
			}  
		});
	}
	else{
		//showWarning("update session","update session");
		updateSession();
	}
}

saveAnsInSession(String sessionId, String typeflag, Hashtable psInfo){
	//showWarning("saveAnsInSession","saveAnsInSession");
	if(psInfo == null || psInfo.isEmpty()){
		Hashtable psInfo=extractPsSum();
		String needInfo=checkRoleComplete(psInfo);
		if(needInfo!=null){
			showWarning("No "+ needInfo +" info","No "+needInfo+" selected, please add "+needInfo+" info");
			return;
		}
	}
	//if this is for saving new session, then we need to save the relns
	if(typeflag.equals("newSss")){
		for(answer:sss_answer_list){
			saveEntitiesToRel("Answer and Session",sessionId,answer.get(0));
		}
	}
	//else we just need to check the labels
    ansConsultant=psInfo.get("consultant");
	//below is updating answer label and file labels
	sssOrgnAnsLblList=extractOriginLbl(sss_answer_list);

	if(!isNull(sssOrgnAnsLblList)){
		for(ans : sssOrgnAnsLblList){
			//showWarning(ans.get(0),ans.get(1));
			ansLblMng(ans,ansConsultant);
		}// for(ans : sss_answer_list)
	}
	
}

savePsInSession(String sessionId){
	tempCostntID=null;
	tempIntverID=null;
	for (tempRoleID:personRoleList){
		if (tempRoleID.get(1).equals("consultant")){
			tempCostntID=tempRoleID.get(0);
		}
		else if(tempRoleID.get(1).equals("interviewer")){
			tempIntverID=tempRoleID.get(0);
		}
	}
	for(personInSss: sssPersonRoleandNameList){
		String psInfoId=personInSss.get(0);
		String [] psInfoIdSplit=psInfoId.split("_");
		String tempPsRoleID=psInfoIdSplit[0];
		String tempPsID=psInfoIdSplit[1];
		sssPsRoleAttributes= createAttributeList();
		sssPsRoleAttributes.add(createEntityAttribute("SessionIDforPerson", null, null, sessionId, null));
		sssPsRoleAttributes.add(createEntityAttribute("SessionPersonName", null, null, tempPsID, null));
		sssPsRoleAttributes.add(createEntityAttribute("SessionPersonRole", null, null, tempPsRoleID, null));
		saveArchEnt(null, "SessionPerson", null, sssPsRoleAttributes);
		//save consultant and interviewer and other roles in to a relationship
		//for the convenience of viewing data
		if(tempPsRoleID.equals(tempCostntID)){
			saveEntitiesToRel("Session and Consultant",sessionId,tempPsID);
		}
		else if(tempPsRoleID.equals(tempIntverID)){
			saveEntitiesToRel("Session and Interviewer",sessionId,tempPsID);
		}
		else{
			saveEntitiesToRel("Session and Person",sessionId,tempPsID);
		}	
	}
}

loadSessionInfo(String typeflag){
	sss_id=getListItemValue();
	if(isNull(sss_id)){
		showWarning("Invalid session","No session is selected or session is not available");
		return;
	}
	createMainSessionPage("s");

	showTabGroup("sessionForAnswer", sss_id, new FetchCallback() {
        onFetch(result) {
			sssOriginInfo.clear();
        	sssOriginInfo.add(getFieldValue("sessionForAnswer/sssHidden/sssID"));
        	loadAnswerForSss(sss_id);
        	loadSssType(sss_id);
			loadPersonForSss(sss_id);
			showToast("Loaded session"+result.getId()); 
		}   
        onError(message) {
            showToast(message);
        }
	});
	loadSssReln(sss_id);
	//saveTabGroup("sessionForAnswer", sss_id, null, null, null, true);
}

loadSssReln(String sessionId){
		loadAnsSssRelnQuery="select RelationshipID, uuid from latestNonDeletedAentReln where uuid <> '"+sessionId+
		"' and RelationshipID in (select RelationshipID from latestNonDeletedAentReln where uuid='"+sessionId+
			"' and RelationshipID in(select RelationshipID from latestNonDeletedRelationship "+
				"where RelnTypeID= (select RelnTypeID from RelnType where RelnTypeName='Answer and Session')"+
				"and latestNonDeletedRelationship.Deleted IS NULL))";

		//Query out the reln id of person and person roles in a session
		loadSssPersonRelnQuery="select uuid from latestNonDeletedArchEntIdentifiers "+
		"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionIDforPerson') "+
		"and measure='"+sessionId+"' ";

		loadSssConslRelnQuery="select RelationshipID, uuid from latestNonDeletedAentReln where uuid <>'"+sessionId+"' "+
		"and RelationshipID in (select RelationshipID from latestNonDeletedAentReln where uuid='"+sessionId+
			"' and RelationshipID in (select RelationshipID from latestNonDeletedRelationship "+
				"where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Session and Consultant') "+
				"and latestNonDeletedRelationship.Deleted IS NULL))";

		loadSssIntvRelnQuery="select RelationshipID, uuid from latestNonDeletedAentReln where uuid <>'"+sessionId+"' "+
		"and RelationshipID in (select RelationshipID from latestNonDeletedAentReln where uuid='"+sessionId+
			"' and RelationshipID in (select RelationshipID from latestNonDeletedRelationship "+
				"where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Session and Interviewer') "+
				"and latestNonDeletedRelationship.Deleted IS NULL))";


		loadSssPsRelnQuery="select RelationshipID, uuid from latestNonDeletedAentReln where uuid <>'"+sessionId+"' "+
		"and RelationshipID in (select RelationshipID from latestNonDeletedAentReln where uuid='"+sessionId+
			"' and RelationshipID in (select RelationshipID from latestNonDeletedRelationship "+
				"where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Session and Person') "+
				"and latestNonDeletedRelationship.Deleted IS NULL))";
		
		fetchAll(loadAnsSssRelnQuery, new FetchCallback() {
	        onFetch(result) {
	        	sssAnsRelnOrigin.clear();
	        	sssAnsRelnOrigin.addAll(result);
	        }
	        onError(message) {
	            showToast(message);
	        }
	    });

		fetchAll(loadSssConslRelnQuery, new FetchCallback() {
	        onFetch(result) {
	        	sssOldCoslReln.clear();
	        	sssOldCoslReln.addAll(result);
	        }
	        onError(message) {
	            showToast(message);
	        }
	    });
	    fetchAll(loadSssIntvRelnQuery, new FetchCallback() {
	        onFetch(result) {
	        	sssOldIntvReln.clear();
	        	sssOldIntvReln.addAll(result);
	        }
	        onError(message) {
	            showToast(message);
	        }
	    });
	    fetchAll(loadSssPsRelnQuery, new FetchCallback() {
	        onFetch(result) {
	        	sssOldPsReln.clear();
	        	sssOldPsReln.addAll(result);
	        }
	        onError(message) {
	            showToast(message);
	        }
	    });
}

loadAnswerForSss(String sessionId){
	loadAnswerForSessionQuery="select uuid,measure from latestNonDeletedAentValue "+ 
		"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerLabel') "+
		"and uuid in "+
			"(select uuid from AentReln where RelationshipID in "+
		"(select RelationshipID from AEntReln where AEntReln.uuid='"+sessionId+"' "+
			"AND RelationshipID in "+
		"(select RelationshipID from latestNonDeletedRelationship where RelnTypeID="+
			"(select RelnTypeID from RelnType where RelnTypeName='Answer and Session') "+
		"and latestNonDeletedRelationship.Deleted IS NULL)))";

	fetchAll(loadAnswerForSessionQuery, new FetchCallback() {
        onFetch(answers) {
        	if(!isNull(answers)){
        		original_sss_answer_list.clear();
	        	sss_answer_list.clear();
	       		original_sss_answer_list.addAll(answers);
	       		sss_answer_list.addAll(answers);
	        	populateList("sessionForAnswer/sssAnsList/sssAnswerList",original_sss_answer_list);
	        	checkSssQuesnirType("answer");
        	}
        	else{
        		original_sss_answer_list.clear();
        		populateList("sessionForAnswer/sssAnsList/sssAnswerList",original_sss_answer_list);
        		showWarning("Out-of-date Data","Answers in this session may not be used anymore\n"+"Please contact the admin for further information");
        	}

        }
        onError(message) {
            showToast(message);
        }
    });
}

loadSssType(String sessionId){
	loadSessionTypeNamesQuery="select measure from latestNonDeletedAentValue "+
		"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesnirTypeName') "+
		"and uuid in "+
		"(select measure from latestNonDeletedAentValue "+
		"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionnaireType') "+
		"and uuid in (select measure from latestNonDeletedAentValue "+
		"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionnaireID') "+
		"and uuid in (select uuid from AentReln where RelationshipID in "+
		"(select RelationshipID from AEntReln where AEntReln.uuid='"+sessionId+"' "+
		"AND RelationshipID in (select RelationshipID from latestNonDeletedRelationship "+
		"where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Answer and Session') "+
		"and latestNonDeletedRelationship.Deleted IS NULL))) group by measure))";
	fetchAll(loadSessionTypeNamesQuery, new FetchCallback() {
        onFetch(result) {
        	if(!isNull(result)){
        		StringBuilder sb=new StringBuilder();
        		for (re:result){
        			if (sb.length()>0)
        			{
        				sb.append(",");
        			}
        			sb.append(re.toString());
        		}
        		setFieldValue("sessionForAnswer/sssAnsBasicInfo/sssType",sb.toString());
        	}
        	else{
        		setFieldValue("sessionForAnswer/sssAnsBasicInfo/sssType","");
        	}
        }
        onError(message) {
            showToast(message);
        }
    });
}

loadPersonForSss(String sessionId){
	//select t5.relnId, t5.personUuid, t5.persName, t6.personRoleUuid, t6.personRoleName from (select t1.personId as personUuid, t1.personName as persName, t2.psssId as relnId from (select pId.uuid as personId, pId.measure as personName from latestNonDeletedAentValue as pId where pId.AttributeID=(SELECT AttributeID from AttributeKey where AttributeName='PersonName') and pId.uuid in (select psName.measure from latestNonDeletedAentValue as psName, latestNonDeletedAentValue as psReln where psName.AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionPersonName') and psReln.AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionIDforPerson') and psReln.measure='1000011478038316786' and psName.uuid=psReln.uuid)) t1 inner join (select psName.uuid as psssId, psName.measure as psId from latestNonDeletedAentValue as psName, latestNonDeletedAentValue as psReln where psName.AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionPersonName') and psReln.AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionIDforPerson') and psReln.measure='1000011478038316786' and psName.uuid=psReln.uuid) t2 on t1.personId=t2.psId) t5 inner join (select t3.roleId as personRoleUuid, t3.roleName as personRoleName, t4.rsssId as relnId from (select rId.uuid as roleId, rId.measure as roleName from latestNonDeletedAentValue as rId where rId.AttributeID=(select AttributeID from AttributeKey where AttributeName='PersonRoleName') and rId.uuid in (select psRole.measure from latestNonDeletedAentValue as psRole, latestNonDeletedAentValue as psReln where psRole.AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionPersonRole') and psReln.AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionIDforPerson') and psReln.measure='1000011478038316786' and psRole.uuid=psReln.uuid))t3 inner join (select psRole.uuid as rsssId, psRole.measure as tempPsRoleID from latestNonDeletedAentValue as psRole, latestNonDeletedAentValue as psReln where psRole.AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionPersonRole') and psReln.AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionIDforPerson') and psReln.measure='1000011478038316786' and psRole.uuid=psReln.uuid)t4 on t3.roleId=t4.tempPsRoleID) t6 on t5.relnId =t6.relnId

	loadSssPersonRoleQuery="select t5.relnId, t6.personRoleUuid|| '_' || t5.personUuid as personRoleNameId, t6.personRoleName|| '_' || t5.persName as personRoleName from "+
		"(select t1.personId as personUuid, t1.personName as persName, t2.psssId as relnId from "+
		"(select pId.uuid as personId, pId.measure as personName from latestNonDeletedAentValue as pId "+
		"where pId.AttributeID=(SELECT AttributeID from AttributeKey where AttributeName='PersonName') "+
		"and pId.uuid in (select psName.measure from latestNonDeletedAentValue as psName, latestNonDeletedAentValue as psReln "+
		"where psName.AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionPersonName') "+
		"and psReln.AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionIDforPerson') "+
		"and psReln.measure='"+sessionId+"' and psName.uuid=psReln.uuid)) t1 "+
		"inner join (select psName.uuid as psssId, psName.measure as psId from latestNonDeletedAentValue as psName, latestNonDeletedAentValue as psReln "+
		"where psName.AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionPersonName') "+
		"and psReln.AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionIDforPerson') "+
		"and psReln.measure='"+sessionId+"' and psName.uuid=psReln.uuid) t2 on t1.personId=t2.psId) t5 "+
		"inner join (select t3.roleId as personRoleUuid, t3.roleName as personRoleName, t4.rsssId as relnId from (select rId.uuid as roleId, rId.measure as roleName "+
		"from latestNonDeletedAentValue as rId where rId.AttributeID=(select AttributeID from AttributeKey where AttributeName='PersonRoleName') "+
		"and rId.uuid in (select psRole.measure from latestNonDeletedAentValue as psRole, latestNonDeletedAentValue as psReln "+
		"where psRole.AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionPersonRole') "+
		"and psReln.AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionIDforPerson') "+
		"and psReln.measure='"+sessionId+"' and psRole.uuid=psReln.uuid))t3 "+
		"inner join (select psRole.uuid as rsssId, psRole.measure as tempPsRoleID from latestNonDeletedAentValue as psRole, latestNonDeletedAentValue as psReln "+
		"where psRole.AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionPersonRole') "+
		"and psReln.AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionIDforPerson') and psReln.measure='"+sessionId+"' "+
		"and psRole.uuid=psReln.uuid)t4 on t3.roleId=t4.tempPsRoleID) t6 on t5.relnId =t6.relnId";	

	sssPsInfoRelnOrigin.clear();
	sssPersonRoleandNameList.clear();
	sssPersonRoleNameListOrigin.clear();
	fetchAll(loadSssPersonRoleQuery, new FetchCallback() {
        onFetch(result) {
        	if(!isNull(result)){
        		for(ps: result){
        			psInfTriplePair=new ArrayList();
					psInfTriplePair.add(ps.get(0));
					psInfTriplePair.add(ps.get(1));	
        			sssPsInfoRelnOrigin.add(psInfTriplePair);
        			psRoleNamePair=new ArrayList();
					psRoleNamePair.add(ps.get(1));
					psRoleNamePair.add(ps.get(2));
					sssPersonRoleNameListOrigin.add(psRoleNamePair);
					sssPersonRoleandNameList.add(psRoleNamePair);
        		}
        		populateList("sessionForAnswer/sssPersonInfo/sssPersonList",sssPersonRoleandNameList);

        	}
        	else{
        		populateList("sessionForAnswer/sssPersonInfo/sssPersonList",sssPersonRoleandNameList);
        		showWarning("Out-of-date Data","Some person in this session may not be used anymore\n"+"Please contact the admin for further information");
        	}
        }
        onError(message) {
            showToast(message);
        }
    });
	    
}

updateSession(){
	if(isNull(sss_answer_list)){
		showWarning("Incomplete Data","Please make sure that you have answer(s) in this session");
		return;
	}

	sssNewInfo.clear();
	sssNewInfo.add(getFieldValue("sessionForAnswer/sssHidden/sssID"));

	Hashtable sssInfoChange=listChange(sssNewInfo,sssOriginInfo);
	Hashtable sssAnsChange=listChange(sss_answer_list,original_sss_answer_list);
	Hashtable sssPsChange=listChange(sssPersonRoleandNameList,sssPersonRoleNameListOrigin);

	//showWarning("compare done","compare done");
	if((sssInfoChange.containsKey("EQUAL")) && (sssAnsChange.containsKey("EQUAL")) && (sssPsChange.containsKey("EQUAL"))){
		showWarning("No change","No data changed");
		return;				
	}
	else if(sssPsChange.containsKey("EQUAL")){
		updateSssNoPsChange(sssInfoChange,sssAnsChange);
	}
	else if(!sssPsChange.containsKey("EQUAL")){
		//showWarning("updateSssPsChange","updateSssPsChange");
		updateSssPsChange(sssInfoChange,sssAnsChange,sssPsChange);
		showToast("Session info updated");
		//autoSaveSession("tail");

	}	
}

updateSssNoPsChange(Hashtable sssInfoChange,Hashtable sssAnsChange){
	Boolean sssInfoUpdated=false;
	if(!sssAnsChange.containsKey("EQUAL")){
		ansListChange(sssAnsChange);
		autoSaveSession("tail");
		sssInfoUpdated=true;
	}
	saveTabGroup("sessionForAnswer", sss_id, null, null, new SaveCallback() {
	    onSave(uuid, newRecord) {
	    	if(!sssInfoUpdated){
				autoSaveSession("tail");
	    	}
	        showToast("Session basic info changed");
	    }
	    onError(message) {
	        showWarning("error on updateSssNoPsChange1",message);
	    }  
	});
}

ansListChange(Hashtable sssAnsChange){
	if(sssAnsChange.containsKey("PUREADD")){
		//showWarning("PUREADD","PUREADD");
		sssNewAddedAns= sssAnsChange.get("PUREADD");
		for(answer:sssNewAddedAns){
			saveEntitiesToRel("Answer and Session",sss_id,answer.get(0));
			//showWarning(sss_id,"new added:"+answer.get(0));
		}//for(answer:sss_answer_list)
		//showWarning("saveEntitiesToRel","saveEntitiesToRel done");
	}
	else if (sssAnsChange.containsKey("PUREDELETE")){
		sssDelAns=sssAnsChange.get("PUREDELETE");
		for(ansDelete:sssDelAns){
			toDelAns=ansDelete.get(0);
			for (oldReln:sssAnsRelnOrigin){
				relnId=oldReln.get(0);
				ansId=oldReln.get(1);
				if (ansId.equals(toDelAns)){
					deleteRel(relnId);
				}
			}
		}
	}
	else{
		sssAddChange=sssAnsChange.get("ADD");
		sssDelChange=sssAnsChange.get("DELETE");

		for(ansDelete:sssDelChange){
			toDelAns=ansDelete.get(0);
			for (oldReln:sssAnsRelnOrigin){
				relnId=oldReln.get(0);
				ansId=oldReln.get(1);
				if (ansId.equals(toDelAns)){
					deleteRel(relnId);
				}
			}
		}
		
		for(answer:sssAddChange){
		    saveEntitiesToRel("Answer and Session",sss_id,answer.get(0));
		}//for(answer:sss_answer_list)
	}
}
//todo: fix this function
updateSssPsChange(Hashtable sssInfoChange,Hashtable sssAnsChange,Hashtable sssPsChange){
	Hashtable psInfo=extractPsSum();
	String needInfo=checkRoleComplete(psInfo);
	if(needInfo!=null){
		showWarning("No "+ needInfo +" info","No "+needInfo+" selected, please add "+needInfo+" info");
		return;
	}
	ansConsultant=psInfo.get("consultant");
	interviwerPrefix=psInfo.get("interviewer");
	//showWarning("coin",ansConsultant+ansConsultant);
	//generate new sssLabel
	Boolean sssLabelChange=false;
    String oldSssLabel=getFieldValue("sessionForAnswer/sssHidden/sssID");
   // showWarning("oldSssLabel",oldSssLabel);
	String [] oldSssLabelSplit=oldSssLabel.split("_");
	String sssOldInv=oldSssLabelSplit[0];
	//showWarning("sssOldInv",sssOldInv);
	String newSssLabel=oldSssLabel;
	if(!sssOldInv.equals(interviwerPrefix)){
		oldSssLabelSplit[0]=interviwerPrefix;
		StringBuilder sb=new StringBuilder();
		for (sssLabelComp : oldSssLabelSplit){
			if (sb.length()>0)
				{sb.append("_");}
			sb.append(sssLabelComp);
		}
		newSssLabel=sb.toString();
		newSssLabel=extractOriginLbl(newSssLabel);
		sssLabelChange=true;
	}
	//change session label
	if(sssLabelChange){
		showWarning("sessLabel","sessionLabelchanging");
		sssDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
		"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionID') "+
		"and uuid<>"+sss_id+" "+
		"and (measure = '"+newSssLabel+"' or measure like '"+newSssLabel+"(%)')";
		//showWarning("sssDuplicateQuery","sssDuplicateQuery");
		fetchAll(sssDuplicateQuery,new FetchCallback() {
			onFetch(result) {
				if(!isNull(result)){
					newSssLabel=nonDupLabelGen(result,newSssLabel, "Session","SessionID",true);
				}
				setFieldValue("sessionForAnswer/sssHidden/sssID",newSssLabel);
				showWarning("sss_id",sss_id+newSssLabel);

				saveTabGroup("sessionForAnswer", sss_id, null, null, null);
				showWarning("saveTabGroup done","saveTabGroup done");
				if(!(sssAnsChange.containsKey("EQUAL"))){//case0: answer list changed
    				ansListChange(sssAnsChange);
    				showWarning("ansListChange done","ansListChange done");
    				autoSaveSession("tail");
	    		}
			}
			onError(message) {
		        showWarning("error on updateSssPsChange fetch query",message);
		    } 
		});
		//showWarning("sssLabelChange",sssLabelChange.toString());
	}//if sssLabelChange

	else{
		updateSssNoPsChange(sssInfoChange,sssAnsChange);
	}
	sssPsUpdate(sssPsChange);
	saveAnsInSession(sss_id,"dupLabel",psInfo);
}

sssPsUpdate(Hashtable sssPsChange){
	tempCostntID=null;
	tempIntverID=null;
	for (tempRoleID:personRoleList){
	   	if (tempRoleID.get(1).equals("consultant")){
    	  	tempCostntID=tempRoleID.get(0);
    	}
	    else if(tempRoleID.get(1).equals("interviewer")){
    	  	tempIntverID=tempRoleID.get(0);
    	}
	}

	if (sssPsChange.containsKey("PUREADD")){
		sssNewAddedPs=sssPsChange.get("PUREADD");
		for(personInSss: sssNewAddedPs){
	  		String psInfoId=personInSss.get(0);
	  		String [] psInfoIdSplit=psInfoId.split("_");
	  		tempPsRoleID=psInfoIdSplit[0];
	  		tempPsID=psInfoIdSplit[1];
	  		sssPsRoleAttributes= createAttributeList();
	  		sssPsRoleAttributes.add(createEntityAttribute("SessionIDforPerson", null, null, sss_id, null));
	  		sssPsRoleAttributes.add(createEntityAttribute("SessionPersonName", null, null, tempPsID, null));
	  		sssPsRoleAttributes.add(createEntityAttribute("SessionPersonRole", null, null, tempPsRoleID, null));
	  		saveArchEnt(null, "SessionPerson", null, sssPsRoleAttributes);
	  		if(tempPsRoleID.equals(tempCostntID)){
	    	  	saveEntitiesToRel("Session and Consultant",sss_id,tempPsID);
	    	}
	    	else if(tempPsRoleID.equals(tempIntverID)){
	    	  	saveEntitiesToRel("Session and Interviewer",sss_id,tempPsID);
	    	}
	    	else{
	    	  	saveEntitiesToRel("Session and Person",sss_id,tempPsID);
	    	}	
	  	}
	}//if (sssPsChange.containsKey("PUREADD"))

	else if (sssPsChange.containsKey("PUREDELETE")){
		sssNewDelPs=sssPsChange.get("PUREDELETE");
		for(personInSss: sssNewDelPs){
	  		String toDelPsID=personInSss.get(0);
	  		String [] psInfoIdSplit=toDelPsID.split("_");
	  		tempPsRoleID=psInfoIdSplit[0];
	  		tempPsID=psInfoIdSplit[1];
	  		//delete person info and sessionPerson table
	  		for(oldPs: sssPsInfoRelnOrigin){
	  			if (toDelPsID.equals(oldPs.get(1))){
	  				String toDelPsRelnID=oldPs.get(0);
	  				//showWarning("toDelPsRelnID",toDelPsRelnID);
	  				deleteArchEnt(toDelPsRelnID);
	  				//deleteArchEnt(toDelPsRelnID);
	  			}
	  		}
	  		if(tempPsRoleID.equals(tempCostntID)){
	    	  	for(toDelConsul:sssOldCoslReln){
	    	  		String oldConsulID=toDelConsul.get(1);
	    	  		if(oldConsulID.equals(tempPsID)){
	    	  			deleteRel(toDelConsul.get(0));
	    	  		}
	    	  	}
	    	}
	    	else if(tempPsRoleID.equals(tempIntverID)){
	    	  	for(toDelConsul:sssOldIntvReln){
	    	  		String oldConsulID=toDelConsul.get(1);
	    	  		if(oldConsulID.equals(tempPsID)){
	    	  			deleteRel(toDelConsul.get(0));
	    	  		}
	    	  	}
	    	}
	    	else{
	    	  	for(toDelConsul:sssOldPsReln){
	    	  		String oldConsulID=toDelConsul.get(1);
	    	  		if(oldConsulID.equals(tempPsID)){
	    	  			deleteRel(toDelConsul.get(0));
	    	  		}
	    	  	}
	    	}	
	  	}
	}//else if (sssPsChange.containsKey("PUREDELETE"))

	else{
		//showWarning("DELETE","DELETE");
	  	sssToDelPs=sssPsChange.get("DELETE");
	  	for(personInSss: sssToDelPs){
	  		String toDelPsID=personInSss.get(0);
	  		String [] psInfoIdSplit=toDelPsID.split("_");
	  		tempPsRoleID=psInfoIdSplit[0];
	  		tempPsID=psInfoIdSplit[1];

	  		for(oldPs: sssPsInfoRelnOrigin){
	  			if (toDelPsID.equals(oldPs.get(1))){
	  				String toDelPsRelnID=oldPs.get(0);
	  				deleteArchEnt(toDelPsRelnID);
	  			}
	  		}

	  		if(tempPsRoleID.equals(tempCostntID)){
	    	  	for(toDelConsul:sssOldCoslReln){
	    	  		String oldConsulID=toDelConsul.get(1);
	    	  		if(oldConsulID.equals(tempPsID)){
	    	  			deleteRel(toDelConsul.get(0));
	    	  		}
	    	  	}
	    	}

	    	else if(tempPsRoleID.equals(tempIntverID)){
	    	  	for(toDelConsul:sssOldIntvReln){
	    	  		String oldConsulID=toDelConsul.get(1);
	    	  		if(oldConsulID.equals(tempPsID)){
	    	  			deleteRel(toDelConsul.get(0));
	    	  		}
	    	  	}
	    	}

	    	else{
	    	  	for(toDelConsul:sssOldPsReln){
	    	  		String oldConsulID=toDelConsul.get(1);
	    	  		if(oldConsulID.equals(tempPsID)){
	    	  			deleteRel(toDelConsul.get(0));
	    	  		}
	    	  	}
	    	}	
	  	}
		sssToAddPs=sssPsChange.get("ADD");
		//showWarning("ADD","ADD");
		for(personInSss: sssToAddPs){
	  		String psInfoId=personInSss.get(0);
	  		String [] psInfoIdSplit=psInfoId.split("_");
	  		tempPsRoleID=psInfoIdSplit[0];
	  		tempPsID=psInfoIdSplit[1];
	  		sssPsRoleAttributes= createAttributeList();
	  		sssPsRoleAttributes.add(createEntityAttribute("SessionIDforPerson", null, null, sss_id, null));
	  		sssPsRoleAttributes.add(createEntityAttribute("SessionPersonName", null, null, tempPsID, null));
	  		sssPsRoleAttributes.add(createEntityAttribute("SessionPersonRole", null, null, tempPsRoleID, null));
	  		saveArchEnt(null, "SessionPerson", null, sssPsRoleAttributes);
	  		if(tempPsRoleID.equals(tempCostntID)){
	    	  	saveEntitiesToRel("Session and Consultant",sss_id,tempPsID);
	    	}
	    	else if(tempPsRoleID.equals(tempIntverID)){
	    	  	saveEntitiesToRel("Session and Interviewer",sss_id,tempPsID);
	    	}
	    	else{
	    	  	saveEntitiesToRel("Session and Person",sss_id,tempPsID);
	    	}	
	  	}
		
	  	//showWarning("ADD+DELETE","ADD+DELETE");
	}//sssPsChange containsKey("ADD") and "DELETE"
}
/*** Common methods for session ***/

extractPsSum(){
	ansConsultant=null;
	interviwerPrefix=null;
	Hashtable extractedPsRole=new Hashtable();
	extractedPsRole.clear();

	psRoleInfo=checkRolesInSession();

	if(psRoleInfo.contains("consultant")){
		Iterator itConsultant=sssConsultantList.iterator();
	    firstConsultant=itConsultant.next();
	    ansConsultant=firstConsultant;

	    if(sssConsultantList.size()>1){
			ansConsultant=ansConsultant+"EtAl";
	    }
	    extractedPsRole.put("consultant",ansConsultant);
	}

	if(psRoleInfo.contains("interviewer")){
		Iterator inveIt=sssInterviewerList.iterator();
		interviwerPrefix=inveIt.next();
		if (sssInterviewerList.size()>1){
			interviwerPrefix=interviwerPrefix+"EtAl";
		}
		extractedPsRole.put("interviewer",interviwerPrefix);
	}
	return extractedPsRole;
}

ansLblMng(ArrayList ans, String ansConsultant){
	//showWarning("ansLblMng","ansLblMng");
	String ansLabel=ans.get(1);
	String [] ansLabelSplit=ansLabel.split("_");
	String ansOldPs=ansLabelSplit[2];
	//showWarning("2","2");
	if(!ansOldPs.equals(ansConsultant)){
		ansLabelSplit[2]=ansConsultant;
		StringBuilder sb=new StringBuilder();
		for (ansLabelComp : ansLabelSplit){
			if (sb.length()>0)
				{sb.append("_");}
			sb.append(ansLabelComp);
		}

		String newAnsLabelSss=sb.toString();
		//showWarning("3","3");
		ansDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
			"where AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerLabel') "+
			"and uuid <>"+ans.get(0)+" "+
			"and (measure ='"+newAnsLabelSss+"' or measure like '"+newAnsLabelSss+"(%)')";

		fetchAll(ansDuplicateQuery,new FetchCallback() {
			onFetch(result) {
				entityId=ans.get(0);
				showWarning("entityId",entityId);
				if(!isNull(result)){
					newAnsLabelSss=nonDupLabelGen(result,newAnsLabelSss,"AnswerToQuestionnaire","AnswerLabel", true);
				}
				showWarning("newAnsLabelSss",newAnsLabelSss);
				attributes = createAttributeList();
				attributes.add(createEntityAttribute("AnswerLabel", null, null, newAnsLabelSss, null));
				showWarning("newAnsLabelSss2",entityId+newAnsLabelSss);
				saveArchEnt(entityId, "AnswerToQuestionnaire", null, attributes, new SaveCallback() {
					onSave(answerUuid,newRecord) {
						//below is changing the filelabel
						showWarning("saveArchEntansLblMng","saveArchEntansLblMng");
						saveFileLabelChange(entityId, newAnsLabelSss);
					}  
				});	
			}
		});

	}
}

saveFileLabelChange(String entityId, String newAnsLabelSss){
	loadFileForAnswerQuery="select uuid,measure from latestNonDeletedAentValue "+ 
		"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='FileID') "+
		"and uuid in "+
			"(select uuid from AentReln where RelationshipID in "+
		"(select RelationshipID from AEntReln where AEntReln.uuid="+entityId+" "+
			"AND RelationshipID in "+
		"(select RelationshipID from latestNonDeletedRelationship where RelnTypeID="+
			"(select RelnTypeID from RelnType where RelnTypeName='Answer and File') "+
		"and latestNonDeletedRelationship.Deleted IS NULL)))";
				//showWarning("5","5");
	fetchAll(loadFileForAnswerQuery, new FetchCallback() {
        onFetch(fileListForAns) {
        	//showWarning("answerFileFetchDone","answerFileFetchDone");
        	for (file: fileListForAns){
        		String fileEntityId=file.get(0);
        		String oldFileLabel=file.get(1);
        		String [] oldFileLabelSplit=oldFileLabel.split("_");
        		String oldFileLabelType=oldFileLabelSplit[oldFileLabelSplit.length-1];
        		//showWarning("oldFileLabelType",oldFileLabelType);
        		String newFileLabel=newAnsLabelSss+"_"+oldFileLabelType;
        		//showWarning("newFileLabel",newFileLabel);
        		attributesForFile = createAttributeList();
				attributesForFile.add(createEntityAttribute("FileID", null, null, newFileLabel, null));
				saveArchEnt(fileEntityId, "File", null, attributesForFile);

        	}
        	//showWarning("8","8");
        }

        onError(message) {
            showToast(message);
        }
    });

}
saveNewSssToFieldTrip(String newSssId){
	if(!isNull(activeFieldTrip)){
		saveEntitiesToRel("Session and FieldTrip",activeFieldTrip.get(0),newSssId);
		showToast("session is added to a fieldTrip");
	}	
}

checkRoleComplete(Hashtable roleList){
	//showWarning("checkRoleComplete","checkRoleComplete");
	if(roleList==null || roleList.isEmpty()){
		return "person";
	}
	else if(!roleList.containsKey("consultant")){
		return "consultant";
	}
	else if(!roleList.containsKey("interviewer")){
		//showWarning("return i","return isNull");
		return "interviewer";
	}
	//showWarning("null","null");
	return null;
}
/*** Quesnir list variables ***/
current_quesnir_id=null;
current_question_id=null;
current_quesnir_name=null;
current_question_content=null;
current_question_label=null;//label for generating answerID


questionnaire_list=new ArrayList();
ques_in_current_quesnir=new ArrayList();
queslabel_current_quesnir=new ArrayList();
survey_list=new ArrayList();

initQuesNirListVar(){
	current_quesnir_id=null;
	current_question_id=null;
	current_quesnir_name=null;
	current_question_content=null;
	current_question_label=null;
	
	ques_in_current_quesnir.clear();
	survey_list.clear();
	questionnaire_list.clear();
	queslabel_current_quesnir.clear();
	quesRecordingType.clear();
}

showQuestionnaireList(){
	sssRoleInfo=checkRolesInSession();
	if(!sssRoleInfo.contains("consultant")){
		showWarning("No consultant","No consultant selected, please add consultant");
		return;
	}
	else if(!sssRoleInfo.contains("interviewer")){
		showWarning("No interviewer","No interviewer selected, please add interviewer");
		return;
	}
	
	createQuesnirList();
	initQuesNirListVar();
	newTabGroup("questionnaireListAll");
}
/*** quesnir list queries***/
/***usage: quesnir listing (1 usage)***/
loadAllRegQuesnirQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
	"WHERE latestNonDeletedAentValue.AttributeID = "+
	"(SELECT AttributeID FROM AttributeKey WHERE AttributeName='QuestionnaireName') "+
	"AND latestNonDeletedAentValue.uuid IN "+
	"(SELECT uuid from latestNonDeletedAentValue WHERE latestNonDeletedAentValue.AttributeID= "+
		"(select AttributeID from AttributeKey where AttributeName='QuestionnaireType') "+
		"AND latestNonDeletedAentValue.measure NOT IN "+
		"(select uuid from latestNonDeletedAentValue where latestNonDeletedAentValue.AttributeID="+
			"(select AttributeID from AttributeKey where AttributeName='QuesnirTypeName') "+
			"and latestNonDeletedAentValue.measure = 'Introductory' "+ 
			"or latestNonDeletedAentValue.measure = 'Emergency' "+
			"or latestNonDeletedAentValue.measure = 'Sociolinguistic' "+
			")) GROUP BY uuid;";

/***usage: quesnir listing (1 usage)***/
loadAllIntrQuesnirQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
	"WHERE latestNonDeletedAentValue.AttributeID = "+
	"(SELECT AttributeID FROM AttributeKey WHERE AttributeName='QuestionnaireName') "+
	"AND latestNonDeletedAentValue.uuid IN "+
	"(SELECT uuid from latestNonDeletedAentValue WHERE latestNonDeletedAentValue.AttributeID= "+
		"(select AttributeID from AttributeKey where AttributeName='QuestionnaireType') "+
		"AND latestNonDeletedAentValue.measure IN "+
		"(select uuid from latestNonDeletedAentValue where latestNonDeletedAentValue.AttributeID="+
			"(select AttributeID from AttributeKey where AttributeName='QuesnirTypeName') "+
			"and latestNonDeletedAentValue.measure = 'Introductory' "+
			"or latestNonDeletedAentValue.measure = 'Sociolinguistic' "+
			")) GROUP BY uuid;";

loadAllQuesnir(){
	if(!introAns){
		fetchAll(loadAllRegQuesnirQuery,new FetchCallback() {
        	onFetch(result) {
				if (!isNull(result)) {
					populateList("questionnaireListAll/questionnaireListInfo/questionnaireListInDB", result);	
					setFieldValue("questionnaireListAll/questionnaireListInfo/quesnir_keyword","*");
				}	
				else{
			    	showWarning("No questionnaire","No questionnaire is available, please contact the admin");
					return;
				}
       	 	}

        	onError(message) {
            	showToast(message);
        	}
    	});
	}
	else{
		fetchAll(loadAllIntrQuesnirQuery,new FetchCallback() {
        	onFetch(result) {
				if (!isNull(result)) {
					populateList("questionnaireListAll/questionnaireListInfo/questionnaireListInDB", result);	
					setFieldValue("questionnaireListAll/questionnaireListInfo/quesnir_keyword","*");
				}	
				else{
			    	showWarning("No questionnaire","No questionnaire is available, please contact the admin");
					return;
				}
       	 }

        	onError(message) {
            	showToast(message);
        	}
    	});
	}
}

loadQuesnirInfo(){
	current_quesnir_id=getListItemValue();
	
	if(isNull(current_quesnir_id)){
		showWarning("No questionnaire selected","No questionnaire is selected, please select a questionnaire");
		return;
	}
	if(current_quesnir_id.equals("placeholder")){
		showWarning("No questionnaire available","No questionnaire available, please contact the admin");
		return;
	}
	else{
		createQuesSel();
		showTabGroup("questionnaireInfo", current_quesnir_id, new FetchCallback() {
        	onFetch(result) {
	        	setFieldValue("questionnaireInfo/surveyQuesnirHidden/currentQuesnirID",current_quesnir_id);
	        	refreshQuesnirInfo();
				current_quesnir_name=getFieldValue("questionnaireInfo/surveyQuesnirHidden/surveyQuestionnaireName");
				showToast("Loaded questionnaire"+result.getId());  

        	}
        	onError(message) {
            	showToast(message);
        	}
       
   	 	});
		
		
	}
}

refreshQuesnirInfo(){
	loadQuesnirTypeQuery="select measure from latestNonDeletedAentValue "+
		"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesnirTypeName') "+
		"and uuid=(select measure from latestNonDeletedAentValue where AttributeID="+
			"(select AttributeID from AttributeKey where AttributeName='QuestionnaireType') "+
			"and uuid='"+current_quesnir_id+"')";

	fetchOne(loadQuesnirTypeQuery,new FetchCallback() {
			onFetch(typeResult) {
				if (!isNull(typeResult)) {	
					setFieldValue("questionnaireInfo/surveyQuesnirHidden/surveyQuestionnaireType",typeResult.get(0));
					if(typeResult.get(0).equals("Sociolinguistic")){
						sclngstPrep();
					}
					else{
						regularQuesnirPrep();
					}
				}
			}	       
			onError(message) {
				showToast(message);
			}
	});
}
sclngstPrep(){

}

regularQuesnirPrep(){
	loadQuesContentandOrderQuery="select t1.quesId, t1.quesOrder || '-' || t2.quesContent as qOrderedContent from "+
		"(select quId.measure as quesId, qOrder.measure as quesOrder "+
		"from latestNonDeletedAentValue as quId, latestNonDeletedAentValue as qOrder "+
		"where qOrder.AttributeID=(SELECT AttributeID from AttributeKey where AttributeName='QuesOrderLocal') "+
		"and quId.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesID') "+
		"and quId.uuid=qOrder.uuid "+
		"and quId.measure in "+
			"(select quesInQuesnir.measure from latestNonDeletedAentValue as quesInQuesnir, latestNonDeletedAentValue as quesnir "+
			"where quesInQuesnir.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesID') "+
			"and quesnir.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesnirID') "+
			"and quesInQuesnir.uuid=quesnir.uuid and quesnir.measure='"+current_quesnir_id+"') "+
		"and qOrder.uuid in "+
			"(select uuid from latestNonDeletedArchEntIdentifiers where AttributeID = (select AttributeID from AttributeKey where AttributeName='QuesnirID') "+
			"and measure='"+current_quesnir_id+"')) t1 "+
	"inner join "+
		"(select qId.measure as quesId, qContent.measure as quesContent "+
		"from latestNonDeletedAentValue as qId, latestNonDeletedAentValue as qContent "+
		"where qContent.AttributeID=(SELECT AttributeID from AttributeKey where AttributeName='QuesContent') "+
		"and qId.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionUuid') "+
		"and qId.uuid=qContent.uuid "+
		"and qId.measure in "+
			"(select quesInQuesnir.measure from latestNonDeletedAentValue as quesInQuesnir, latestNonDeletedAentValue as quesnir "+
			"where quesInQuesnir.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesID') "+
			"and quesnir.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesnirID') "+
			"and quesInQuesnir.uuid=quesnir.uuid and quesnir.measure='"+current_quesnir_id+"') "+
		"and qId.uuid in "+
			"(select uuid from latestNonDeletedArchEntIdentifiers where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionUuid'))) t2 "+
	"on t1.quesId=t2.quesId "+
	"order by qOrderedContent asc";

	fetchAll(loadQuesContentandOrderQuery, new FetchCallback() {
	        onFetch(result) {
	            ques_in_current_quesnir.clear();
	            ques_in_current_quesnir.addAll(result);
	            populateList("questionnaireInfo/surveyQuestionnaire/surveyQuestionInQuestionnaire", ques_in_current_quesnir);
	        }
		});

	queslabel_quesnir_query="select uuid, measure from latestNonDeletedAentValue "+
		"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionID') "+
		"and uuid in (select measure from latestNonDeletedArchEntIdentifiers "+
		"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesUuid') "+
		"and measure in (select quesInQuesnir.measure from latestNonDeletedAentValue as quesInQuesnir, latestNonDeletedAentValue as quesnir "+
		"where quesInQuesnir.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesID') "+
		"and quesnir.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesnirID') "+
		"and quesInQuesnir.uuid=quesnir.uuid and quesnir.measure='"+current_quesnir_id+"'))";

	quesRecordingTypeQuery="select t2.quId, t1.prName from "+
		"(select pName.uuid as prId, pName.measure as prName from latestNonDeletedAentValue as pName "+
			"where pName.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesPropDefName'))t1 "+
		"inner join "+
		"(select qId.measure as quId, qProp.measure as qPropId "+
		"from latestNonDeletedArchEntIdentifiers as qId, latestNonDeletedAentValue as qProp "+
		"where qId.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesUuid') "+
		"and qProp.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesPropDefID') "+
		"and qId.uuid=qProp.uuid "+
		"and qId.measure in (select quesInQuesnir.measure from latestNonDeletedAentValue as quesInQuesnir, latestNonDeletedAentValue as quesnir "+
			"where quesInQuesnir.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesID') "+
			"and quesnir.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesnirID') "+
		"and quesInQuesnir.uuid=quesnir.uuid and quesnir.measure='"+current_quesnir_id+"')) t2 "+
		"on t1.prId=t2.qPropId";

	fetchAll(queslabel_quesnir_query, new FetchCallback() {
	    onFetch(result) {
	        queslabel_current_quesnir.clear();
	        queslabel_current_quesnir.addAll(result);
	    }
	});
	fetchAll(quesRecordingTypeQuery, new FetchCallback() {
	    onFetch(result) {
	        quesRecordingType.clear();
	        quesRecordingType.addAll(result);
	    }
	});

}

checkClickValidity(String tempQuesId){
	String tempQuesUuid=null;
	if(tempQuesId==null){
		tempQuesUuid=getListItemValue();
	}
	else
	{
		tempQuesUuid=tempQuesId;
	}
	
	if(loopQuesOrder!=null && !loopQuesOrder.isEmpty()){
		for(ques:loopQuesOrder){
			if(ques.get(0).equals(tempQuesUuid)){
				showWarning("Unselectable question","Please start with the 'known languages' question for answering this question");
				return;
			}
		}
	}
	checkPersonAns(tempQuesUuid);
}

checkPersonAns(String tempQuesId){
	if(tempQuesId==null){
		tempQuesId=getListItemValue();
	}
	
	ArrayList consultantList=new ArrayList();
	for (i=0;i<sssConsultantIdList.size();i++){	
		consultantList.add(sssConsultantIdList.get(i).get(0));
	}
	String consultantListClause=buildQuerySetCondition(consultantList);

	loadPersonAnswerQuery="select measure from latestNonDeletedAentValue "+
		"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionID') "+
		"and uuid in (select uuid from AentReln where RelationshipID in (select RelationshipID from AEntReln where AEntReln.uuid in "+
			"(select uuid from latestNonDeletedAentValue "+
				"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionID') "+
				"and uuid in (select uuid from AentReln where RelationshipID "+
					"in (select RelationshipID from AEntReln where AEntReln.uuid IN "+consultantListClause+
						" AND RelationshipID in (select RelationshipID from latestNonDeletedRelationship "+
							"where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Session and Consultant') "+
							"and latestNonDeletedRelationship.Deleted IS NULL)))) "+
		"AND RelationshipID in (select RelationshipID from latestNonDeletedRelationship "+
			"where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Answer and Session') "+
			"and latestNonDeletedRelationship.Deleted IS NULL)))";
	fetchAll(loadPersonAnswerQuery,new FetchCallback() {
        onFetch(result) {
        	//showWarning("loadPersonAnswerQueryresult","loadPersonAnswerQueryresult");
        	Boolean rep=false;
        	if(!isNull(result)){	 
        		//showWarning("!isNull(tempAnsQues)","!isNull(tempAnsQues)");
        		for (ansQues :result){
        			//showWarning("ansQues",ansQues.get(0));
        			if((!isNull(ansQues.get(0))) && (ansQues.get(0).equals(tempQuesId))){
        				rep=true;
        				checkDuplicateAns(true, tempQuesId);
        				break;	
        			}
        		}
        		//showWarning("rep",rep.toString());
        		if(!rep){
        			//showWarning("loadAnswerFromQuesInQuesnir","rep.false");
        			loadAnswerFromQuesInQuesnir(tempQuesId);
        		}       		
			}
			else{
				//showWarning("loadAnswerFromQuesInQuesnir","nullresult");
				loadAnswerFromQuesInQuesnir(tempQuesId);
			}
        }
    });
}
checkDuplicateAns(Boolean dupOrNot, String tempQuesId){
	if(dupOrNot){
		showAlert("alert", "The consultant(s) already answered this question \n"+"Do you still want to continue?", "loadAnswerFromQuesInQuesnir(\""+tempQuesId+"\")", "stayInCurrentPage()");
	}
	else{
		loadAnswerFromQuesInQuesnir(tempQuesId);
	}
}

/*** Answer UI***/
createAnswerPage(){
	if(!hasView("survey/answerHidden/answerLabel")){
		removeAllViewsAndContainers("survey");
		executeViewTask(new ViewTask() {
	    doTask() {
	  		//answerHidden page
	    	hideQuesnirId=createViewDef().createTextField().setLabel("Questionnaire id").setAttributeName("AnswerQuestionnaireID").setAttributeType("measure").setReadOnly(true);
	    	hideQuesId=createViewDef().createTextField().setLabel("Question id").setAttributeName("AnswerQuestionID").setAttributeType("measure").setReadOnly(true);
	    	ansLabelViewDef = createViewDef().createTextField().setLabel("Answer label").setAttributeName("AnswerLabel").setAttributeType("measure").setAnnotationEnabled(true).setReadOnly(true);
	    	ansStartTimeViewDef=createViewDef().createTextField().setLabel("Start timestamp").setAttributeName("AnswerStartTime").setAttributeType("measure").setAnnotationEnabled(true).setReadOnly(true);
	    	ansEndTimeViewDef=createViewDef().createTextField().setLabel("End timestamp").setAttributeName("AnswerEndTime").setAttributeType("measure").setAnnotationEnabled(true).setReadOnly(true);
	    	createView("survey/answerHidden/answerQuestionnaireID",hideQuesnirId,"survey/answerHidden");
	    	createView("survey/answerHidden/answerQuestionID",hideQuesId,"survey/answerHidden");
	    	createView("survey/answerHidden/answerLabel",ansLabelViewDef,"survey/answerHidden");
	        createView("survey/answerHidden/answerStartTimestamp",ansStartTimeViewDef,"survey/answerHidden");
	        createView("survey/answerHidden/answerEndTimestamp",ansEndTimeViewDef,"survey/answerHidden");
	    	//answerBasic page
	    	
	    	ansTextViewDef=createViewDef().createTextField().setLabel("Answer text").setAttributeName("AnswerText").setAttributeType("measure").setAnnotationEnabled(true);
			createView("survey/answerBasic/answerText",ansTextViewDef,"survey/answerBasic");
	    	
	        
	        //answerFile page
			newAnsBtnDef = createViewDef().createButton().setLabel("Save Answer").setStyleCss("faims-blue");
			fileCateDef = createViewDef().createDropDown().setLabel("File Category");
			newFileBtnDef = createViewDef().createButton().setLabel("New File").setStyleCss("faims-blue");
			fileListDef=createViewDef().createList().setLabel("Answer files").setStyleCss("answerFile-list");
			createView("survey/answerFile/Finish_New_Answer",newAnsBtnDef,"survey/answerFile");
	    	createView("survey/answerFile/file_Category",fileCateDef,"survey/answerFile");
	        createView("survey/answerFile/Add_New_File",newFileBtnDef,"survey/answerFile");
	        createView("survey/answerFile/answerFileList",fileListDef,"survey/answerFile");
	        refreshTabgroupCSS("survey");
			/**Events for answer**/
			onEvent("survey/answerFile/Finish_New_Answer","click","saveNewAnswer()");
			onEvent("survey/answerFile/Add_New_File","click","newFile(\"answer\",null)");
			onEvent("survey/answerFile/answerFileList","click","viewOrDeleteFileReln()");
	   		}
			});
	}
}
createChkListPage(String tempQuesId){
	if(!hasView("survey/answerBasic/radioGrp")){
		removeAllViewsAndContainers("survey");
		executeViewTask(new ViewTask() {
	    doTask() {
	    	quesContentDef = createViewDef().createTextField().setReadOnly(true);
	    	ansSelDef=createViewDef().createRadioGroup();
	    	newNextBtnDef = createViewDef().createButton().setLabel("Next").setStyleCss("faims-blue");

			createView("survey/answerBasic/quesText",quesContentDef,"survey/answerBasic");
	        createView("survey/answerBasic/radioGrp",ansSelDef,"survey/answerBasic");
	        createView("survey/answerBasic/nextBtn",newNextBtnDef,"survey/answerBasic");

	        refreshTabgroupCSS("survey");
			/**Events for answer**/
			tempChoice=new ArrayList();
			tempChoice.add(new NameValuePair("Yes", "Y"));
			tempChoice.add(new NameValuePair("No", "N"));
			populateRadioGroup("survey/answerBasic/radioGrp",tempChoice);
			onEvent("survey/answerBasic/nextBtn","click","nextQuestion(\""+tempQuesId+"\", \""+ques_in_current_quesnir+"\")");
	   		}
		});
	}
}
/*** Answer variables ***/

answerInfoOriginal=new ArrayList();
answerInfoNew=new ArrayList();

ansFileOriginReln=new ArrayList();

ansLabelFstPart=null;//QuestionID+"Answer"
ansLabelMidPart=null;//Interviewee("EtAl")
ansLabelSndPart=null;//Date of interview

tempAnsLabel=null;//tempAnsLabel, for trigger of changing answer label


Boolean dupAnsLblChange=false;
dupAnsLblInfo=new ArrayList();
Boolean dupFileLblChange=false;
dupFileLblInfo=new ArrayList();

answer_id=null;//new answer_id

current_answer_file_id=null;
current_answer_id=null;

files_in_current_ques=new ArrayList();
files_origin=new ArrayList();
file_and_fileType=new ArrayList();//Keep track of file types, used for changing file labels

Boolean ansOrNot=true;//denoting if the answer has the answer ui page
hiddenAnsInfo=new HashMap();// holding the answer info when no answer ui

Boolean answerFile=false;//denoting whether user is viewing file from answer page

initAnswerVar(){
	answerInfoOriginal.clear();
	answerInfoNew.clear();
	
	files_in_current_ques.clear();
	file_and_fileType.clear();
	files_origin.clear();
	
	answer_id=null;
	current_answer_file_id=null;
	current_answer_id=null;
	answerFile=true;
	ansLabelFstPart=null;
	ansLabelSndPart=null;
	ansLabelMidPart=null;
	tempAnsLabel=null;
	
	dupAnsLblChange=false;
	dupFileLblChange=false;
	dupAnsLblInfo.clear();
	dupFileLblInfo.clear();
	hiddenAnsInfo.clear();
}

loadAnswerInfo(){
	current_answer_id=getListItemValue();

	if(isNull(current_answer_id)){
		showWarning("Error","Can't find this answer, please contact the admin");
		return;
	}
	else{

		loadFileAnsRelnQuery="select uuid,RelationshipID from AentReln "+
			"where uuid <>'"+current_answer_id+"' "+
			"and RelationshipID in "+
				"(select RelationshipID from AEntReln "+
				"where AEntReln.uuid='"+current_answer_id+"' "+
				"AND RelationshipID in "+
				"(select RelationshipID from latestNonDeletedRelationship "+
				"where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Answer and File') "+
				"and latestNonDeletedRelationship.Deleted IS NULL))";
		
		fetchAll(loadFileAnsRelnQuery, new FetchCallback() {
	        onFetch(result) {
	        	ansFileOriginReln.clear();
	        	ansFileOriginReln.addAll(result);
	        }

	        onError(message) {
	            showToast(message);
	        }
	    });
	
	loadFileForAnswerQuery="select uuid,measure from latestNonDeletedAentValue "+ 
			"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='FileID') "+
			"and uuid in "+
 			"(select uuid from AentReln where RelationshipID in "+
			"(select RelationshipID from AEntReln where AEntReln.uuid="+current_answer_id+" "+
 			"AND RelationshipID in "+
			"(select RelationshipID from latestNonDeletedRelationship where RelnTypeID="+
 			"(select RelnTypeID from RelnType where RelnTypeName='Answer and File') "+
			"and latestNonDeletedRelationship.Deleted IS NULL)))";		

	loadFileTypeQuery="select uuid,measure from latestNonDeletedAentValue "+ 
			"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='FileType') "+
			"and uuid in "+
 			"(select uuid from AentReln where RelationshipID in "+
			"(select RelationshipID from AEntReln where AEntReln.uuid="+current_answer_id+" "+
 			"AND RelationshipID in "+
			"(select RelationshipID from latestNonDeletedRelationship where RelnTypeID="+
 			"(select RelnTypeID from RelnType where RelnTypeName='Answer and File') "+
			"and latestNonDeletedRelationship.Deleted IS NULL)))";

	loadFileStartTimeQuery="select uuid,measure from latestNonDeletedAentValue "+ 
			"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='FileStartTime') "+
			"and uuid in "+
 			"(select uuid from AentReln where RelationshipID in "+
			"(select RelationshipID from AEntReln where AEntReln.uuid="+current_answer_id+" "+
 			"AND RelationshipID in "+
			"(select RelationshipID from latestNonDeletedRelationship where RelnTypeID="+
 			"(select RelnTypeID from RelnType where RelnTypeName='Answer and File') "+
			"and latestNonDeletedRelationship.Deleted IS NULL)))";

	loadFileEndTimeQuery="select uuid,measure from latestNonDeletedAentValue "+ 
			"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='FileEndTime') "+
			"and uuid in "+
 			"(select uuid from AentReln where RelationshipID in "+
			"(select RelationshipID from AEntReln where AEntReln.uuid="+current_answer_id+" "+
 			"AND RelationshipID in "+
			"(select RelationshipID from latestNonDeletedRelationship where RelnTypeID="+
 			"(select RelnTypeID from RelnType where RelnTypeName='Answer and File') "+
			"and latestNonDeletedRelationship.Deleted IS NULL)))";
	
	fetchAll(loadFileForAnswerQuery, new FetchCallback() {
        onFetch(result) {
        	files_in_current_ques.clear();
        	files_origin.clear();
        	files_in_current_ques.addAll(result);
        	files_origin.addAll(result);
        }

        onError(message) {
            showToast(message);
        }
    });

    fetchAll(loadFileTypeQuery, new FetchCallback() {
        onFetch(result) {
        	file_and_fileType.clear();     	
        	file_and_fileType.addAll(result);
        }
        onError(message) {
            showToast(message);
        }
    });
    
    createAnswerPage();
	showTabGroup("survey", current_answer_id, new FetchCallback() {
        onFetch(result) {
			answerInfoOriginal.clear();
        	populateList("survey/answerFile/answerFileList", files_in_current_ques);   	
        	populateDropDown("survey/answerFile/file_Category",categoryTypes);
        	answerInfoOriginal.add(getFieldValue("survey/answerHidden/answerLabel"));
        	answerInfoOriginal.add(getFieldValue("survey/answerBasic/answerText"));
        	answerInfoOriginal.add(getFieldValue("survey/answerHidden/answerStartTimestamp"));
            showToast("Loaded answer"+result.getId());            
        }
        onError(message) {
            showToast(message);
        }
    });
	}
}

startNewAnswer(String typeflag){
	//showWarning("startNewAnswer","startNewAnswer");
	initAnswerVar();
	//showWarning("initAnswerVar","initAnswerVar");
    String current_start_time=getCurrentTime();
    String currentDate=getCurrentDate();
   
    ansLabelFstPart=current_question_label+"_"+"Answer_";
    ansLabelSndPart="_"+currentDate;

    Iterator itConsultant=sssConsultantList.iterator();
    firstConsultant=itConsultant.next();
    ansLabelMidPart=firstConsultant;
   // showWarning("ansLabelMidPart",ansLabelMidPart);
    if(sssConsultantList.size()>1){
		ansLabelMidPart=ansLabelMidPart+"EtAl";
    }

    tempAnsLabel=ansLabelFstPart+ansLabelMidPart+ansLabelSndPart;
   // showWarning("tempAnsLabel",tempAnsLabel);
    switch(typeflag){
    	case "non":
    		startNewAnswerBasic(current_start_time);
    	break;
    	case "chk":
    		startNewAnswerChk();
    	break;
    	case "lan":
    		startNewAnswerLangIntro();
    	break;
    	default:
    		//showWarning("default","default");
    		startNewAnswerFile(typeflag, current_start_time);
    	break;
	}
}

startNewAnswerBasic(String current_start_time){
	createAnswerPage();
	newTabGroup("survey");
	setFieldValue("survey/answerHidden/answerQuestionnaireID", current_quesnir_id);
	setFieldValue("survey/answerHidden/answerQuestionID", current_question_id);
	setFieldValue("survey/answerHidden/answerStartTimestamp", current_start_time);
	
	labelDeduplicate(tempAnsLabel,"AnswerLabel","survey/answerHidden/answerLabel","answer", dupAnsLblChange, dupAnsLblInfo);

	populateList("survey/answerFile/answerFileList",files_in_current_ques);
	populateDropDown("survey/answerFile/file_Category",categoryTypes);
	ansOrNot=true;
}

startNewAnswerChk(){
	String tempChkQues=null;
	for(ques: ques_in_current_quesnir){
		if(ques.get(0).equals(current_question_id)){
			tempChkQues=ques.get(1);
		}
	}
	if(tempChkQues!=null){
		createChkListPage(current_question_id);
		newTabGroup("survey");
		setFieldValue("survey/answerBasic/quesText", tempChkQues);
	}
}

startNewAnswerLangIntro(){
	createLangIntroPage(current_quesnir_id,current_question_id, "N",null);
		
	ansLabelDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
	"where AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerLabel') "+
	"and (measure = '"+tempAnsLabel+"' or measure like '"+tempAnsLabel+"(%)')";

	fetchAll(ansLabelDuplicateQuery,new FetchCallback() {
		onFetch(result) {
			if(!isNull(result)){
				tempAnsLabel=nonDupLabelGen(result,tempAnsLabel,null,null, false);
				if(result.size()==1){
					String newLabel=null;
					ArrayList tempLabels=extractLabelToList(tempAnsLabel);
					if(tempLabels !=null && !tempLabels.isEmpty()){
						tempAnsLabel=tempLabels.get(0);
						if(tempLabels.size()>1){
							newLabel=tempLabels.get(1);
							dupAnsLblChange=true;
							dupAnsLblInfo.add(result.get(0).get(0));
							dupAnsLblInfo.add(newLabel);
						}
					}
				}
			}
			langIntroAnsLabel=tempAnsLabel;
			newTabGroup("langIntroAns");
		}
	});
}

startNewAnswerFile(String typeflag, String current_start_time){
	hiddenAnsInfo.put("quesnir_id",current_quesnir_id);
	hiddenAnsInfo.put("ques_id",current_question_id);
	hiddenAnsInfo.put("start_time",current_start_time);
	ansLabelDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
	"where AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerLabel') "+
	"and (measure = '"+tempAnsLabel+"' or measure like '"+tempAnsLabel+"(%)')";

	fetchAll(ansLabelDuplicateQuery,new FetchCallback() {
		onFetch(result) {
			if(!isNull(result)){
				tempAnsLabel=nonDupLabelGen(result,tempAnsLabel,null,null, false);
				//showWarning("tempAnsLabelstartNewAnswerFile",tempAnsLabel);
				if(result.size()==1){
					String newLabel=null;
					ArrayList tempLabels=extractLabelToList(tempAnsLabel);
					if(tempLabels !=null && !tempLabels.isEmpty()){
						tempAnsLabel=tempLabels.get(0);
						if(tempLabels.size()>1){
							newLabel=tempLabels.get(1);
							dupAnsLblChange=true;
							dupAnsLblInfo.add(result.get(0).get(0));
							dupAnsLblInfo.add(newLabel);
						}
					}
				}
			}
			hiddenAnsInfo.put("label",tempAnsLabel);
			//showWarning("hiddenAnsInfotempAnsLabelstartNewAnswerFile",tempAnsLabel);
			switch(typeflag){
				case "aud":
					newFile("answer","Audio");
					attachAudioToField("file/fileInfo/audioFileContent");
				break;
				case "vid":
					newFile("answer","Video");
					attachVideoToField("file/fileInfo/videoFileContent");
				break;
				case "pho":
					newFile("answer","Photo");
					attachPictureToField("file/fileInfo/photoFileContent");
				break;

				case "fil":
					newFile("answer","Sketch");
					attachFileToField("file/fileInfo/sketchFileContent");
				break;
			}
			ansOrNot=false;
		}
	});
}

loadAnswerFromQuesInQuesnir(String ques_id){
//	showWarning("loadAnswerFromQuesInQuesnirques_id",ques_id);
	if(isNull(current_quesnir_name)){
		showWarning("No questionnaire name available","Can't get the questionnaire name, please contact the admin");
		return;
	}
	if(ques_id==null || ques_id.equals("null")){
		current_question_id=getListItemValue();
//		showWarning("current_question_idL",current_question_id);
	}
	else
	{
		current_question_id=ques_id;
	}
//	showWarning("loadAnswerFromQuesInQuesnircurrent_question_id",current_question_id);
	Boolean quesLabelRead=false;
	for(ques: ques_in_current_quesnir){
		if(ques.get(0).equals(current_question_id))
		{
			current_question_content=ques.get(1);
			break;
		}
	}
	//showWarning("current_question_content",current_question_content);
	if(isNull(current_question_content)){
		showWarning("No question content available","Can't get the question content, please contact the admin");
		return;
	}

	for(quesLabel: queslabel_current_quesnir){
		if(quesLabel.get(0).equals(current_question_id))
		{
			current_question_label=quesLabel.get(1);
			quesLabelRead=true;
			break;
		}
	}
	//showWarning("quesLabelRead",quesLabelRead.toString());

	if(quesLabelRead){
	//	showWarning("ansTypeChecking","ansTypeCheckingenter");
		ansTypeChecking(current_question_id);
	}
	
	else{
		queslabel_quesnir_query="select uuid, measure from latestNonDeletedAentValue "+
			"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionID') "+
			"and uuid in (select measure from latestNonDeletedArchEntIdentifiers "+
			"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesUuid') "+
			"and measure in (select quesInQuesnir.measure from latestNonDeletedAentValue as quesInQuesnir, latestNonDeletedAentValue as quesnir "+
			"where quesInQuesnir.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesID') "+
			"and quesnir.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesnirID') "+
			"and quesInQuesnir.uuid=quesnir.uuid and quesnir.measure='"+current_quesnir_id+"'))";
			fetchAll(queslabel_quesnir_query, new FetchCallback() {
					onFetch(result) {
						//showWarning("queslabel_quesnir_query","queslabel_quesnir_query");
						if (!isNull(result)) {	
							//showWarning("!nullqueslabel_quesnir_query","queslabel_quesnir_query");
							queslabel_current_quesnir.clear();
							queslabel_current_quesnir.addAll(result);
							//showWarning("!queslabel_current_quesniraddall","queslabel_quesnir_query");
							for(quesLabel: queslabel_current_quesnir){
								if(quesLabel.get(0).equals(current_question_id))
								{
									current_question_label=quesLabel.get(1);
									quesLabelRead=true;
									break;
								}
							}
							//showWarning("!queslabel_current_quesnirquesLabelRead",quesLabelRead.toString());
							for(quesLabel: queslabel_current_quesnir){
								if(quesLabelRead){
									ansTypeChecking(current_question_id);
								}
								else{
									showWarning("The data is outdated","Please exit the module and retry");
								}
							}
						}
						else{
							showWarning("Something wrong with getting data","Please exit the module and retry");
								return;
						}
			      }
				onError(message) {
					showToast(message);
				}
		});

	}
}

ansTypeChecking(String ques_id){
	//showWarning("ansTypeChecking",ques_id);
	String answerType=null;
	String recordingType=null;
	for(ques: quesRecordingType){
		//showWarning("quesType",ques.get(0));
		if(ques.get(0).equals(ques_id)){
			recordingType=ques.get(1);
			//showWarning("quesTypename",ques.get(1));
			switch(recordingType){
				case "Audio_Required":
					answerType="aud";
				break;
				case "Video_Required":
					answerType="vid";
				break;
				case "Photo_Required":
					answerType="pho";
				break;
				case "File_Required":
					answerType="fil";
				break;
				case "None":
					answerType="non";
				break;
				case "CheckList":
					answerType="chk";
				break;
				case "LangIntro":
					answerType="lan";
				break;
				default:
					answerType="non";
				break;
			}
			//showWarning("answerType",answerType);
			startNewAnswer(answerType);
			break;
		}
	}
}

saveNewAnswer(){
	if(!ansOrNot){
		attributes = createAttributeList();
		
		attributes.add(createEntityAttribute("AnswerQuestionnaireID", null, null, hiddenAnsInfo.get("quesnir_id"), null));
		attributes.add(createEntityAttribute("AnswerQuestionID", null, null, hiddenAnsInfo.get("ques_id"), null));
		attributes.add(createEntityAttribute("AnswerLabel", null, null, hiddenAnsInfo.get("label"), null));
		attributes.add(createEntityAttribute("AnswerStartTime", null, null, hiddenAnsInfo.get("start_time"), null));

		saveArchEnt(null, "AnswerToQuestionnaire", null, attributes, new SaveCallback(){
			onSave(uuid, newRecord){
				//showWarning("saveArchEnt 1","saveArchEnt 1");
				answer_id = uuid;
				//showWarning("answer_id 1",answer_id);
				current_answer_id=answer_id;
				if (newRecord) {
					for(file : files_in_current_ques){
						saveEntitiesToRel("Answer and File",answer_id,file.get(0));		
					}
					//showWarning("answer_id newRecord","newRecord");
					newAnswer=new ArrayList();
					newAnswer.add(answer_id);
					//showWarning(".add(answer_id)",".add(answer_id)");
					newAnswer.add(hiddenAnsInfo.get("label"));
					//showWarning(".hiddenAnsInfo",".hiddenAnsInfo)");
					sss_answer_list.add(newAnswer);
					populateList("sessionForAnswer/sssAnsList/sssAnswerList",sss_answer_list);
					//showWarning("populateList","populateList");
					//TODO: TO TEST
					updateDupLabel(dupAnsLblInfo,"AnswerToQuestionnaire","AnswerLabel");
					showToast("new answer created");
					//cancelTabGroup("file", true);
					autoSaveSession("head");
					//showWarning("autoSaveSession 3","autoSaveSession 3");
					nextQuestion(hiddenAnsInfo.get("ques_id"),ques_in_current_quesnir);
				}
			}
			onError(message) {
				showWarning("error on saveNewAnswer1",message);
			}  
		});
	}
	else{
		if((files_in_current_ques==null || files_in_current_ques.isEmpty()) && isNull(getFieldValue("survey/answerBasic/answerText")) ){
			showWarning("Warning","Please input answer text or adding an answer file");
			return;
		}
		
		if(isNull(current_answer_id)){//create new answer
			String newAnsLabel=getFieldValue("survey/answerHidden/answerLabel");
			
			saveTabGroup("survey", answer_id, null, null, new SaveCallback() {
				onSave(uuid, newRecord) {
					answer_id = uuid;
					//showWarning("answer_id",answer_id);
					current_answer_id=answer_id;
					//showWarning("current_answer_id",current_answer_id);

					if (newRecord) {
						for(file : files_in_current_ques){
							saveEntitiesToRel("Answer and File",answer_id,file.get(0));		
						}
						
						newAnswer=new ArrayList();
						newAnswer.add(answer_id);
						newAnswer.add(newAnsLabel);
						sss_answer_list.add(newAnswer);
						
						populateList("sessionForAnswer/sssAnsList/sssAnswerList",sss_answer_list);
						//if this is the second answer with a duplicate label
						//the other answer label will be changed with a suffix (1)
						updateDupLabel(dupAnsLblInfo,"AnswerToQuestionnaire","AnswerLabel");
						showToast("new answer created");
						//String curntQuesId=getFieldValue("survey/answerHidden/answerQuestionID");
						cancelTabGroup("survey", true);
						//cancelTabGroup("answerToQuestion", true);
						autoSaveSession("head");
						nextQuestion(getFieldValue("survey/answerHidden/answerQuestionID"), ques_in_current_quesnir);
					}
				}
				onError(message) {
					showWarning("error on saveNewAnswer2",message);
				}  
			});
		}

		else{//this is changing answerInfo		
			answerInfoNew.clear();
			answerInfoNew.add(getFieldValue("survey/answerHidden/answerLabel"));
			answerInfoNew.add(getFieldValue("survey/answerBasic/answerText"));
			answerInfoNew.add(getFieldValue("survey/answerHidden/answerStartTimestamp"));
			Hashtable fileListChange=listChange(files_in_current_ques,files_origin);
			Hashtable answerBasicInfoChange=listChange(answerInfoNew,answerInfoOriginal);
			//case1: Nothing changed
			if((fileListChange.containsKey("EQUAL"))&&(answerBasicInfoChange.containsKey("EQUAL"))){
					showWarning("Answer Modification","No data is changed");
					return;
				}
			//case2: only fileList changed
			else if((!fileListChange.containsKey("EQUAL"))&&(answerBasicInfoChange.containsKey("EQUAL"))){
					ansFileRelnUpdate(fileListChange);
					showToast("file list changed");
					//cancelTabGroup("survey", true);
			}
			else{//case 3: both answer basic info and file list are changed
					saveTabGroup("survey", current_answer_id, null, null, new SaveCallback() {
						onSave(uuid, newRecord) {
							answer_id = uuid;	//not sure how it's working
							ansFileRelnUpdate(fileListChange);
							showToast("Answer Info Changed");
								
						}
						onError(message) {
							showWarning("error on saveNewAnswer3 ",message);
						}  
					});
			}
		}
	}
}

ansFileRelnUpdate(Hashtable fileListChange){
	if(fileListChange.containsKey("PUREADD")){
		//case passed  
		fileToAdd=fileListChange.get("PUREADD");
		for(file : fileToAdd){
			//showWarning(current_answer_id,file.get(0));
			saveEntitiesToRel("Answer and File",current_answer_id,file.get(0));		
		}
	}
	//case passed  
	else if(fileListChange.containsKey("PUREDELETE")){
		fileToDelete=fileListChange.get("PUREDELETE");
		for(file : fileToDelete){
			for(fileReln: ansFileOriginReln){
				if(file.get(0).equals(fileReln.get(0))){
					//showWarning(fileReln.get(0),fileReln.get(1));
					deleteRel(fileReln.get(1));
				}
			}
		}
	}
	//this case is not stable
	else{
		fileToAdd=fileListChange.get("ADD");
		for(file : fileToAdd){
			saveEntitiesToRel("Answer and File",current_answer_id,file.get(0));
		}
		fileToDelete=fileListChange.get("DELETE");
		for(file : fileToDelete){
			for(fileReln: ansFileOriginReln){
				if(file.get(0).equals(fileReln.get(0))){
					deleteRel(fileReln.get(1));
				}
			}
		}
		
	}
}

viewOrDeleteFileReln(){
	select_file_id=getListItemValue();
	if(select_file_id==null || select_file_id.equals("")){
		showWarning("Invalid file","File not exist");
		return;
	}
	showAlert("View File Info","Do you want to view file info?","loadAnswerFileInfo(\"answer\")","deleteRelnAlert()");
}
deleteRelnAlert(){
	showAlert("Delete File","Do you want to delete this file from this answer?","deleteFileRelation()","returnToCurrentPage()");
}

deleteFileRelation(){		
	delete_file_id=getListItemValue();
	if(isNull(delete_file_id)){
		showWarning("Error","No file selected or file is not available,please contact the admin");
		return;
	}
	for(deleteFile:files_in_current_ques){
		if(deleteFile.get(0).equals(delete_file_id))
		{
			files_in_current_ques.remove(deleteFile);
			populateList("survey/answerFile/answerFileList",files_in_current_ques);
			break;
		}
	}
	for(fileToDelete:file_and_fileType){
		if(fileToDelete.get(0).equals(delete_file_id))
		{
			file_and_fileType.remove(deleteFile);
			break;
		}
	}
}
/*** File ***/
/*** File variables ***/
categoryTypes=new ArrayList();
categoryTypes.add(new NameValuePair("{Audio}", "Audio"));
categoryTypes.add(new NameValuePair("{Video}", "Video"));
categoryTypes.add(new NameValuePair("{Photo}", "Photo"));
categoryTypes.add(new NameValuePair("{Other}", "Other"));

Boolean emrOrNot=false;

/*** File dynamic ui ***/
createFilePage(String fileType, String attachFunc, String saveFunc){
	String uiNamePrefix=null;
	String uiLabelPrefix=null;
	switch(fileType){
		case "audio":
		uiNamePrefix="audio";
		uiLabelPrefix="Audio";
		break;

		case "video":
		uiNamePrefix="video";
		uiLabelPrefix="Video";
		break;

		case "photo":
		uiNamePrefix="photo";
		uiLabelPrefix="Photo";
		break;

		case "sketch":
		uiNamePrefix="sketch";
		uiLabelPrefix="Sketch";
		break;
	}
	//Generate ui

	removeAllViewsAndContainers("file");
 	executeViewTask(new ViewTask() {
		doTask() { 

			//file hidden	
	 	
			idFileDef = createViewDef().createTextField().setLabel(uiLabelPrefix+" file label").setAttributeName("FileID").setAttributeType("measure").
			setAnnotationEnabled(true).setReadOnly(true);

			typeViewDef=createViewDef().createTextField().setLabel("File type").setAttributeName("FileType").setAttributeType("measure").
			setAnnotationEnabled(true).setReadOnly(true);

			creatorViewDef=createViewDef().createTextField().setLabel("Creator").setAttributeName("FileCreator").setAttributeType("measure").
			setAnnotationEnabled(true).setReadOnly(true);

			startTimeViewDef=createViewDef().createTextField().setLabel("Start time").setAttributeName("FileStartTime").setAttributeType("measure").
			setAnnotationEnabled(true).setReadOnly(true);

			endTimeViewDef=createViewDef().createTextField().setLabel("End time").setAttributeName("FileEndTime").setAttributeType("measure").
			setAnnotationEnabled(true).setReadOnly(true);

			if (fileType.equals("audio") || fileType.equals("sketch")){
				fileContentViewDef=createViewDef().createFileGroup(true).setLabel(uiLabelPrefix).setAttributeName("FileContent").setAttributeType("measure").setAnnotationEnabled(true);
			}
			else if(fileType.equals("video")){
				fileContentViewDef=createViewDef().createVideoGallery(true).setLabel("Video").setAttributeName("FileContent").setAttributeType("measure").setAnnotationEnabled(true);
			}
			else{
				fileContentViewDef=createViewDef().createCameraGallery(true).setLabel("Photo").setAttributeName("FileContent").setAttributeType("measure").setAnnotationEnabled(true);
			}
			nameViewDef=createViewDef().createTextField().setLabel(uiLabelPrefix+" file name").setAttributeName("FileName").setAttributeType("measure");

			createView("file/fileHidden/"+uiNamePrefix+"FileID", idFileDef,"file/fileHidden");
			createView("file/fileHidden/"+uiNamePrefix+"FileType", typeViewDef,"file/fileHidden");
			createView("file/fileHidden/"+uiNamePrefix+"FileCreator", creatorViewDef,"file/fileHidden");
			createView("file/fileHidden/"+uiNamePrefix+"FileStartTime", startTimeViewDef,"file/fileHidden");
			createView("file/fileHidden/"+uiNamePrefix+"FileEndTime", endTimeViewDef,"file/fileHidden");
			createView("file/fileHidden/"+uiNamePrefix+"FileName", nameViewDef,"file/fileHidden");

			//non-hidden page
			newBtnViewDef=createViewDef().createButton().setLabel("New "+ uiLabelPrefix);

			pathTextViewDef=createViewDef().createTextField().setLabel(uiLabelPrefix+" file path").setAttributeName("FilePath").setAttributeType("measure").
			setAnnotationEnabled(true).setReadOnly(true);

			saveBtnViewDef=createViewDef().createButton().setLabel("Save "+ uiLabelPrefix);
			//createView("file/fileInfo/"+uiNamePrefix+"FileName", nameViewDef,"file/fileInfo");

			
			createView("file/fileInfo/"+uiNamePrefix+"FileContent", fileContentViewDef,"file/fileInfo");
			createView("file/fileInfo/Take_"+uiLabelPrefix+"_File", newBtnViewDef,"file/fileInfo");
			createView("file/fileInfo/"+uiNamePrefix+"FilePath", pathTextViewDef,"file/fileInfo");
			createView("file/fileInfo/Save_New_"+uiLabelPrefix, saveBtnViewDef,"file/fileInfo");

		    onEvent("file/fileInfo/Take_"+uiLabelPrefix+"_File","click",attachFunc);
			//onEvent("file/fileInfo/Save_New_"+uiLabelPrefix,"click","saveFileFromAnswer(\"file/fileInfo/"+uiNamePrefix+"FileName\",\"file/fileInfo/"+uiNamePrefix+"FileContent\",\"file\",uiLabelPrefix)");
			onEvent("file/fileInfo/Save_New_"+uiLabelPrefix,"click",saveFunc);
			}
	});
}
newFile(String typeFlag, String fileType){
	String fileCategory=null;
	String tempAnsID=null;
	emrOrNot=false;
	switch (typeFlag){
		case "answer":
		if(fileType==null){
			fileCategory=getFieldValue("survey/answerFile/file_Category");
			tempAnsID=getFieldValue("survey/answerHidden/answerLabel");
		}
		else if(!fileType.equals("emr")){
			fileCategory=fileType;
	        tempAnsID=hiddenAnsInfo.get("label");
		}
		else{
			fileCategory=fileType;
	        tempAnsID=emrAnsInfo.get("label");
		}
			answerFile=true;
			current_answer_file_id=null;	
			
			switch (fileCategory){
				case "Audio":		
					//Generate audio file creation ui pages
				 	//createAudioFilePage("new");
					createFilePage("audio","attachAudioToField(\"file/fileInfo/audioFileContent\")",
						"saveFileFromAnswer(\"file/fileHidden/audioFileID\",\"file/fileInfo/audioFileContent\",\"file\",\"Audio\")");
					newTabGroup("file");

					String tempAudioID=tempAnsID+"_Audio";
					labelDeduplicate(tempAudioID,"FileID","file/fileHidden/audioFileID","file", dupFileLblChange,dupFileLblInfo);

					setFieldValue("file/fileHidden/audioFileCreator",username);
					setFieldValue("file/fileHidden/audioFileType","Audio");
					setFieldValue("file/fileHidden/audioFileStartTime", getCurrentTime());
					//showWarning("audio","audio");
				break;
				case "Video":
					//createVideoPage("new");
					createFilePage("video","attachVideoToField(\"file/fileInfo/videoFileContent\")",
						"saveFileFromAnswer(\"file/fileHidden/videoFileID\",\"file/fileInfo/videoFileContent\",\"file\",\"Video\")");
					newTabGroup("file");
					String tempVideoID=tempAnsID+"_Video";
					labelDeduplicate(tempVideoID,"FileID","file/fileHidden/videoFileID","file",dupFileLblChange,dupFileLblInfo);
	
					setFieldValue("file/fileHidden/videoFileCreator",username);
					setFieldValue("file/fileHidden/videoFileType","Video");
					setFieldValue("file/fileHidden/videoFileStartTime", getCurrentTime());
				break;

				case "Photo":
					//createPhotoPage("new");
					createFilePage("photo","attachPictureToField(\"file/fileInfo/photoFileContent\")",
						"saveFileFromAnswer(\"file/fileHidden/photoFileID\",\"file/fileInfo/photoFileContent\",\"file\",\"Photo\")");
					newTabGroup("file");
					String tempPhotoID=tempAnsID+"_Photo";
					labelDeduplicate(tempPhotoID,"FileID","file/fileHidden/photoFileID","file",dupFileLblChange,dupFileLblInfo);

					setFieldValue("file/fileHidden/photoFileCreator",username);
					setFieldValue("file/fileHidden/photoFileType","Photo");
					setFieldValue("file/fileHidden/photoFileStartTime", getCurrentTime());
				
				break;
				case "Other":
					//createSketchPage("new");
					createFilePage("sketch","attachFileToField(\"file/fileInfo/sketchFileContent\")",
						"saveFileFromAnswer(\"file/fileHidden/sketchFileID\",\"file/fileInfo/sketchFileContent\",\"file\",\"Recording\")");
					newTabGroup("file");
					String tempSketchID=tempAnsID+"_Recording";
					labelDeduplicate(tempSketchID,"FileID","file/fileHidden/sketchFileID","file",dupFileLblChange,dupFileLblInfo);

					setFieldValue("file/fileHidden/sketchFileCreator",username);
					setFieldValue("file/fileHidden/sketchFileType","Recording");
					setFieldValue("file/fileHidden/sketchFileStartTime", getCurrentTime());
					
					break;
				case "emr":		
					//Generate audio file creation ui pages
				 	//createAudioFilePage("new");
					emrOrNot=true;
					createFilePage("audio","attachAudioToField(\"file/fileInfo/audioFileContent\")",
						"saveEmrFile(\"file/fileHidden/audioFileID\",\"file/fileInfo/audioFileContent\",\"file\",\"Audio\")");
					newTabGroup("file");

					String tempAudioID=tempAnsID+"_Audio";
					labelDeduplicate(tempAudioID,"FileID","file/fileHidden/audioFileID","file",dupFileLblChange,dupFileLblInfo);

					setFieldValue("file/fileHidden/audioFileCreator",username);
					setFieldValue("file/fileHidden/audioFileType","Audio");
					setFieldValue("file/fileHidden/audioFileStartTime", getCurrentTime());
				break;
				default:
					showWarning("Invalid category","Please select a valid file category");
				break;
			}
		break;
	}
}

saveFileFromAnswer(String ref, String fileListViewRef, String tabGroupRef, String fileType){
	if(isNull(getFieldValue(fileListViewRef))){	
		showWarning("Warning","File not recorded");
		return;
	}
	if(answerFile && !langIntro){
		saveTabGroup(tabGroupRef,current_answer_file_id, null, null, new SaveCallback() {
			onSave(uuid, newRecord) {
				current_answer_file_id = uuid;
				if (newRecord){	
					newFile=new ArrayList();
					newFile.add(current_answer_file_id);
					newFile.add(getFieldValue(ref));
					files_in_current_ques.add(newFile);
								
					//Adding new file and file type for changing fileID
					newFileType=new ArrayList();
					newFileType.add(current_answer_file_id);
					newFileType.add(fileType);
					file_and_fileType.add(newFileType);

					updateDupLabel(dupFileLblInfo,"File", "FileID");

					if(ansOrNot){
						populateList("survey/answerFile/answerFileList",files_in_current_ques);
					}	

					saveNewAnswer();
					cancelTabGroup(tabGroupRef, true);
				}
				else{
					for(changeFile:files_in_current_ques){
						if(changeFile.get(0).equals(current_answer_file_id)){
							newFile=new ArrayList();
							newFile.add(current_answer_file_id);
							newFile.add(getFieldValue(ref));
							files_in_current_ques.remove(changeFile);
							files_in_current_ques.add(newFile);
							populateList("survey/answerFile/answerFileList",files_in_current_ques);
							break;
						}
					}
					showToast("file record changed");
					cancelTabGroup(tabGroupRef, true);
					showTab("survey/answerFile");
				}
			}
			onError(message) {
				showWarning("error",message);
			}  
		});
	}
	else if(langIntro){
		saveLangIntro(ref, fileListViewRef, tabGroupRef, fileType);
	}
}

attachAudioToField(String ref) {
	recordAudio("setAudioToField(\""+ref+"\")");
}

setAudioToField(String ref) {
	String filePath = getLastAudioFilePath();
	List selectedFiles = null;
	selectedFiles = new ArrayList();
	selectedFiles.add(filePath);
	addFile(ref, filePath);  	
    setFieldValue(ref, _convertListToPairs(selectedFiles));
    setFieldValue("file/fileInfo/audioFilePath",filePath);
    setFieldValue("file/fileHidden/audioFileEndTime",getCurrentTime());
}


attachVideoToField(String ref) {
	if(!isNull(getFieldValue(ref))){
		showWarning("File exists","File exists, please Create New File");
		return;
	}
	openVideo("setVideoToField(\""+ref+"\")");
}


setVideoToField(String ref) {
	String filePath = getLastVideoFilePath();
	List selectedFiles = null;
    if (isNull(getFieldValue(ref))) {
    	selectedFiles = new ArrayList();
    	selectedFiles.add(filePath);
    	addVideo(ref, filePath);
    } else {
    	//selectedFiles = _convertPairsToList(getFieldValue(ref));
    	showWarning("File exists","File exists, please Create New File");
    }
    setFieldValue(ref, _convertListToPairs(selectedFiles));
    setFieldValue("file/fileInfo/videoFilePath",filePath);
    setFieldValue("file/fileHidden/videoFileEndTime",getCurrentTime());
}


attachPictureToField(String ref) {
	if(!isNull(getFieldValue(ref))){
		showWarning("File exists","File exists, please Create New File");
		return;
	}
	openCamera("setPictureToField(\""+ref+"\")");
}

/**
  */
setPictureToField(String ref) {
	String filePath = getLastPictureFilePath();
	List selectedFiles = null;
    if (isNull(getFieldValue(ref))) {
    	selectedFiles = new ArrayList();
    	selectedFiles.add(filePath);
    	addPicture(ref, filePath);
    } else {
    	//selectedFiles = _convertPairsToList(getFieldValue(ref));
    	showWarning("File exists","File exists, please Create New File");
    }
    setFieldValue(ref, _convertListToPairs(selectedFiles));
    setFieldValue("file/fileInfo/photoFilePath",filePath);
    setFieldValue("file/fileHidden/photoFileEndTime",getCurrentTime());
}


attachFileToField(String ref) {
	if(!isNull(getFieldValue(ref))){
		showWarning("File exists","File exists, please Create New File");
		return;
	}
	showFileBrowser("setFileToField(\""+ref+"\")");
}


setFileToField(String ref) {
	String filePath = getLastSelectedFilepath();
	List selectedFiles = null;
    if (isNull(getFieldValue(ref))) {
    	selectedFiles = new ArrayList();
    	selectedFiles.add(filePath);
    	addFile(ref, filePath);
    } else {
    	//selectedFiles = _convertPairsToList(getFieldValue(ref));
    	showWarning("File exists","File exists, please Create New File");
    }
    setFieldValue(ref, _convertListToPairs(selectedFiles));
    setFieldValue("file/fileInfo/sketchFilePath",filePath);
    setFieldValue("file/fileHidden/sketchFileEndTime",getCurrentTime());
}

/*** File functions ***/
/*** Sociolingustic quesnir UI ***/
createLoopQuesList(){
	if(!hasView("langIntroQues/langIntroQuesInfo/loopQues")){
	removeAllViewsAndContainers("langIntroQues");
	executeViewTask(new ViewTask() {
    doTask() {
        quesSelListDef=createViewDef().createList().setLabel("Questions").setStyleCss("questionQuestionnaire-list");
        createView("langIntroQues/langIntroQuesInfo/loopQues", quesSelListDef,"langIntroQues/langIntroQuesInfo");
        refreshTabgroupCSS("langIntroQues");
        onEvent("langIntroQues/langIntroQuesInfo/loopQues","click","checkAnsweredLangQues()");
   		}
		});
	}

}

createLangIntroPage(String tempQuesnirId,String tempQuesId, String typeflag, ArrayList tempLangDeg){
	fetchAll(loadAllLanguageQuery,new FetchCallback() {
		onFetch(result) {
			canLangList.clear();
			canLangList.addAll(result);
			newTempLangList.clear();
			int langCount=0;
			int langSize=canLangList.size();
			crntLangIntroId=null;
			langIntroAnsLabel=null;
			newLangInLangIntro=0;

			removeAllViewsAndContainers("langIntroAns");
			
			for(lang:canLangList){
				String langID=lang.get(0);
				String langName=lang.get(1);

				style1="orientation";
				style2="even";
				style3="large";

				executeViewTask(new ViewTask(){
					doTask(){
						createContainer("langIntroAns/langIntroAnsInfo/lang_c"+langCount, "orientation","langIntroAns/langIntroAnsInfo");
						createContainer("langIntroAns/langIntroAnsInfo/langName_c" + langCount, "even", "langIntroAns/langIntroAnsInfo/lang_c" + langCount);
						createContainer("langIntroAns/langIntroAnsInfo/degree_c" + langCount, "even", "langIntroAns/langIntroAnsInfo/lang_c" + langCount);
        				createContainer("langIntroAns/langIntroAnsInfo/quesInput_c" + langCount, "even", "langIntroAns/langIntroAnsInfo/lang_c" + langCount);

    					
  						createView("langIntroAns/langIntroAnsInfo/langc" + langCount, createViewDef().createCheckboxGroup().addChoice(langName, langID), "langIntroAns/langIntroAnsInfo/langName_c" + langCount);  
  						createView("langIntroAns/langIntroAnsInfo/dec" + langCount, createViewDef().createDropDown(), "langIntroAns/langIntroAnsInfo/degree_c" + langCount); 					
    					createView("langIntroAns/langIntroAnsInfo/quesc" + langCount, createViewDef().createButton().setLabel("Next").setStyleCss("faims-blue"), "langIntroAns/langIntroAnsInfo/quesInput_c" + langCount);
    					onEvent("langIntroAns/langIntroAnsInfo/quesc" + langCount,"click","startLoopQues(\""+langID+"\")");
        				
						if(langCount==langSize-1){
							createView("langIntroAns/langIntroAnsInfo/Finish_LangIntro", createViewDef().createButton().setLabel("Finish").setStyleCss("faims-blue"), "langIntroAns/langIntroAnsInfo");
							createView("langIntroAns/langIntroAnsInfo/new_langInIntro", createViewDef().createButton().setLabel("New Language").setStyleCss("faims-blue"), "langIntroAns/langIntroAnsInfo");	
							onEvent("langIntroAns/langIntroAnsInfo/new_langInIntro","click","reConstructLangIntro()");	
							onEvent("langIntroAns/langIntroAnsInfo/Finish_LangIntro","click","saveLangIntroQuesAnswer(null,\""+tempQuesnirId+"\",\""+tempQuesId+"\",null)");	
						}
						
					}
				});
				langCount++;
				
			}
			refreshTabgroupCSS("langIntroAns");
			tempChoice=new ArrayList();
			for(int i=1;i<=5;i++){
				tempChoice.add(new NameValuePair(i.toString(), i.toString()));
			}
			for(int i=0; i<langSize;i++){
				populateDropDown("langIntroAns/langIntroAnsInfo/dec"+i, tempChoice);
			}
			if(typeflag.equals("L")){
				showLangIntroAnsPage(tempLangDeg);
			}
		}  
	});
}
/*** langIntro variables ***/
Boolean langIntro=false;
loopQuesOrder=new ArrayList();
showLangIntroAnsPage(ArrayList langDegList){
	showTabGroup("langIntroAns");
	//step 4: analyze the answerText and map it to the ui

	for(lang: langDegList){
		//showWarning("lang",lang.get(0));
		for(int i=0;i<canLangList.size();i++){
			//showWarning("canlang",canLangList.get(i).get(0));
			setFieldValue("langIntroAns/langIntroAnsInfo/langc" + i, lang.get(0));
			//showWarning("langID",lang.get(0));
		}
	}
	for(int i=0;i<canLangList.size();i++){
		if(!isNull(getFieldValue("langIntroAns/langIntroAnsInfo/langc" + i))){
			String templangID=getFieldValue("langIntroAns/langIntroAnsInfo/langc" + i).get(0).getName();
			for(lang:langDegList){
				if(lang.get(0).equals(templangID)){
					setFieldValue("langIntroAns/langIntroAnsInfo/dec" + i,lang.get(1));
					//showWarning("langDeg",lang.get(1));
				}
			}
		}
	}

}
/*** Language ***/
/*** Language UI ***/
createLanguageGroupPage(){
	if(!hasView("language/languageInfo/Finish_New_Language")){
		executeViewTask(new ViewTask() {
    	doTask() {

    		langIDViewDef=createViewDef().createTextField().setAttributeName("LanguageID").setAttributeType("measure").setLabel("Language code").setAnnotationEnabled(true).setStyleCss("required");
    		langNameViewDef=createViewDef().createTextField().setAttributeName("LanguageName").setAttributeType("measure").setLabel("Language name").setAnnotationEnabled(true).setStyleCss("required");
			langotherNameViewDef=createViewDef().createTextField().setAttributeName("LanguageOtherNames").setAttributeType("measure").setLabel("Language other name(s)").setAnnotationEnabled(true);
			langTypeViewDef=createViewDef().createDropDown().setLabel("Language type").setAnnotationEnabled(false);
	        
	       	finButtonDef = createViewDef().createButton().setLabel("Save").setStyleCss("faims-blue");

	        createView("language/languageInfo/languageID", langIDViewDef,"language/languageInfo/");
	        createView("language/languageInfo/languageName", langNameViewDef,"language/languageInfo/");
	        createView("language/languageInfo/languageOtherNames", langotherNameViewDef,"language/languageInfo/");
			createView("language/languageInfo/languageType", langTypeViewDef,"language/languageInfo/");
			createView("language/languageInfo/Finish_New_Language", finButtonDef,"language/languageInfo/");

	        refreshTabgroupCSS("language");

	        onEvent("language/languageInfo/Finish_New_Language","click","saveLanguage()");
			}
	    
		});
	}
}
saveLangIntro(String ref, String fileListViewRef, String tabGroupRef, String fileType){
}
/*** Language variables ***/
language_id=null;
originLangProp=new ArrayList();
newLangProp=new ArrayList();
candLangProp=new ArrayList();

/*** Language queries ***/
/***usage: scocialinguistic questionnaire answer, language * search, load language list ***/ 
loadAllLanguageQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
	"WHERE latestNonDeletedAentValue.AttributeID "+
	"= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='LanguageName') "+
	"and uuid in "+
	"(select uuid from latestNonDeletedArchEntIdentifiers "+
	"where AttributeID=(select AttributeID from AttributeKey where AttributeName='LanguageID')) "+
	"GROUP BY uuid;";
/*** usage: language creation and update ***/
loadAllLangTypeQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
		"WHERE latestNonDeletedAentValue.AttributeID "+
		"= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='LangTypeName') "+
		"GROUP BY uuid;";

/*** Language events ***/

initializeLangVar(){
	language_id=null;
	candLangProp.clear();
	originLangProp.clear();
	newLangProp.clear();
}

newLanguage(){
	initializeLangVar();
	createLanguageGroupPage();
	newTabGroup("language");
	fetchAll(loadAllLangTypeQuery, new FetchCallback() {
		onFetch(result) {
			candLangProp.clear();
			candLangProp.addAll(result);
			populateDropDown("language/languageInfo/languageType", candLangProp);

		}
		onError(message) {
			showToast(message);
		}
	}); 
}

loadLanguage(){
	initializeLangVar();
	fetchAll(loadAllLanguageQuery, new FetchCallback() {
        onFetch(result) {
            populateList("control/language_control/languageList", result);
        }
        onError(message) {
            showToast(message);
        }
    });
}

loadLanguageInfo(){
	createLanguageGroupPage();
	language_id=getListItemValue();
	if(isNull(language_id)){
		showToast("No Language selected");
		return;
	}
	showTabGroup("language", language_id, new FetchCallback() {
        onFetch(result) {
            language=result;

            loadLangPropQuery="select lProp.measure from latestNonDeletedAentValue as lProp "+
            "where lProp.AttributeID=(select AttributeID from AttributeKey where AttributeName='LanguageTypeID') "+
            "and lProp.uuid='"+language_id+"'";
           	
           	fetchOne(loadLangPropQuery,new FetchCallback() {
				onFetch(propResult) {
					if(!isNull(propResult)){
						String tempProp=propResult.get(0);
						originLangProp.clear();
						originLangProp.addAll(propResult);
						newLangProp.clear();    

						fetchAll(loadAllLangTypeQuery, new FetchCallback() {
							onFetch(result) {
								candLangProp.clear();
								candLangProp.addAll(result);

								tempPropList=new ArrayList();
								tempPropList.addAll(result);

								for(int i=0;i<tempPropList.size();i++){
									if(tempPropList.get(i).get(0).equals(tempProp)){
										Collections.swap(tempPropList,0,i);
										break;
									}
								}
								populateDropDown("language/languageInfo/languageType", tempPropList);

							}
							onError(message) {
    							showToast(message);
  							}
						}); 
		        	}
		        	else{
						showWarning("Out-of-date data","The property of the language is not using anymore");
					}
   				 }
		   		onError(message) {
	            	showToast(message);
	        	}
			});
       		showToast("Loaded language"+language.getId());            
       	}
        onError(message) {
            showToast(message);
        }
    });
}


saveLanguage(){

	if(isNull(getFieldValue("language/languageInfo/languageName"))){
		showWarning("Validation Error", "You must fill in the Language Name before you can continue");
        return;
	}
	if(isNull(getFieldValue("language/languageInfo/languageID"))){
		showWarning("Validation Error", "You must fill in the Language ID before you can continue");
        return;
	}
	tempLangLabel=getFieldValue("language/languageInfo/languageID");
	langDuplicateQuery=null;
	if(language_id==null){
		langDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
				"where AttributeID=(select AttributeID from AttributeKey where AttributeName='LanguageID') "+
				"and measure ='"+tempLangLabel+"' or measure like '"+tempLangLabel+"(%)'";
	}
	
	else{
		langDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
				"where AttributeID=(select AttributeID from AttributeKey where AttributeName='LanguageID') "+
				"and uuid<>'"+language_id+"' "+
				"and measure ='"+tempLangLabel+"' or measure like '"+tempLangLabel+"(%)'";
	}

    fetchAll(langDuplicateQuery,new FetchCallback() {
		onFetch(result) {
			if(!isNull(result)){
				tempLangLabel=nonDupLabelGen(result,tempLangLabel,"Language","LanguageID", true);
				setFieldValue("language/languageInfo/languageID",tempLangLabel);
			}

			crntLangTypeId=getFieldValue("language/languageInfo/languageType");
			saveTabGroup("language", language_id, null, null, new SaveCallback() {
			    onSave(uuid, newRecord) {
			      language_id = uuid;
			      if (newRecord) {
			      	attributes=createAttributeList();
			    	attributes.add(createEntityAttribute("LanguageTypeID", null, null, crntLangTypeId, null));
			    	saveArchEnt(language_id, "Language", null, attributes);
					cancelTabGroup("language",true);
					showTab("control/language_control");
			        showToast("New record created");
			      }
				  else{
					showToast("Record changed");
				  }
			    }
			    onError(message) {
			        showWarning("error",message);
			    }  
			});
			if((language_id!=null) && (!isNull(originLangProp))){
				newLangProp.add(crntLangTypeId);
				Hashtable langPropChange=listChange(newLangProp,originLangProp);
				if(langPropChange.containsKey("ADD")){
					attributes=createAttributeList();
			    	attributes.add(createEntityAttribute("LanguageTypeID", null, null, crntLangTypeId, null));
			    	saveArchEnt(language_id, "Language", null, attributes);
			    	showToast("language type changed");
				}
			}
		}
	});
	
}

/*** FieldTrip ***/
/*** FieldTrip UI ***/
createFieldTripInfoPage(String typeflag){
	if(!hasView("fieldTrip/fieldTripBasicInfo/fieldTripID")){
		removeAllViewsAndContainers("fieldTrip");
		executeViewTask(new ViewTask() {
	    doTask() {
	    	
	    	//basic info page
	    	idTextViewDef = createViewDef().createTextField().setLabel("FieldTrip label").setAttributeName("FieldTripID").setAttributeType("measure").
	    	setAnnotationEnabled(true).setReadOnly(true);
	    	nameTextViewDef=createViewDef().createTextField().setLabel("FieldTrip name").setAttributeName("FieldTripName").setAttributeType("measure").
	    	setAnnotationEnabled(true);
	    	descTextViewDef=createViewDef().createTextField().setLabel("Description").setAttributeName("FieldTripDescription").setAttributeType("measure").
	    	setAnnotationEnabled(true);
	    	startDateDef = createViewDef().createDatePicker().setLabel("Start Date");
	    	endDateDef = createViewDef().createDatePicker().setLabel("End Date");
	    	createView("fieldTrip/fieldTripBasicInfo/fieldTripID", idTextViewDef,"fieldTrip/fieldTripBasicInfo");
	        createView("fieldTrip/fieldTripBasicInfo/fieldTripName", nameTextViewDef,"fieldTrip/fieldTripBasicInfo");
	        createView("fieldTrip/fieldTripBasicInfo/fieldTripDesc", descTextViewDef,"fieldTrip/fieldTripBasicInfo");
	        createView("fieldTrip/fieldTripBasicInfo/fieldTripStartDatePicker", startDateDef,"fieldTrip/fieldTripBasicInfo");
	        createView("fieldTrip/fieldTripBasicInfo/fieldTripEndDatePicker", endDateDef,"fieldTrip/fieldTripBasicInfo");

	    	//session page
	        style1 = "orientation";
	        style2 = "even";
	    	createContainer("fieldTrip/fieldTripSession/field_session_ct", "orientation");
	    	createContainer("fieldTrip/fieldTripSession/child1", "even", "fieldTrip/fieldTripSession/field_session_ct");
	        createContainer("fieldTrip/fieldTripSession/child2", "even", "fieldTrip/fieldTripSession/field_session_ct");
	        
	        ftFileListDef=createViewDef().createList().setLabel("Session").setStyleCss("session-file-list");
	        ftSelFileListDef=createViewDef().createList().setLabel("Select session").setStyleCss("session-file-list");
	        ftSaveBtnDef=createViewDef().createButton().setLabel("Save").setStyleCss("faims-blue");
	        createView("fieldTrip/fieldTripSession/fieldTripFileList", ftFileListDef,"fieldTrip/fieldTripSession/child1");
	        createView("fieldTrip/fieldTripSession/fieldTripFileSelectionList", ftSelFileListDef,"fieldTrip/fieldTripSession/child2");
	        createView("fieldTrip/fieldTripSession/Finish_New_FieldTrip", ftSaveBtnDef,"fieldTrip/fieldTripSession");
	        refreshTabgroupCSS("fieldTrip");

	        onEvent("fieldTrip/fieldTripSession/fieldTripFileSelectionList","click","addItemToTargetList(candidate_session_fieldTrip,\"fieldTripSession\",null)");
	        //No delete function for client
	        onEvent("fieldTrip/fieldTripSession/fieldTripFileList","click","deleteItemFromTargetList(selected_session_fieldTrip,\"fieldTripSession\",null)");
	        onEvent("fieldTrip/fieldTripSession/Finish_New_FieldTrip","click","saveFieldTrip()");
	        //fieldTripBasicInfoHidden page
	        startdateViewDef = createViewDef().createTextField().setLabel("startdate").setAttributeName("FieldTripStartTime").setAttributeType("measure");
	        enddateViewDef = createViewDef().createTextField().setLabel("enddate").setAttributeName("FieldTripEndTime").setAttributeType("measure");
	        createView("fieldTrip/fieldTripBasicInfoHidden/fieldTripStartTimetamp", startdateViewDef,"fieldTrip/fieldTripBasicInfoHidden");
	        createView("fieldTrip/fieldTripBasicInfoHidden/fieldTripEndTimestamp", enddateViewDef,"fieldTrip/fieldTripBasicInfoHidden");
	        
	   		}
			});

		if(typeflag.equals("new")){
			startNewFieldTrip();
		}

	}
	else{
		//showTabGroup("fieldTrip");
		if(typeflag.equals("new")){
			startNewFieldTrip();
		}
	}
}

fieldTrip_id=null;
selected_session_fieldTrip=new ArrayList();
candidate_session_fieldTrip=new ArrayList();
original_session_fieldTrip=new ArrayList();
fieldTripInfoOrigin=new ArrayList();
fieldTripInfoNew=new ArrayList();

startNewFieldTrip(){
	fieldTrip_id=null;
	selected_session_fieldTrip.clear();
	candidate_session_fieldTrip.clear();
	original_session_fieldTrip.clear();
	fieldTripInfoOrigin.clear();
	fieldTripInfoNew.clear();
	currentDateTimeArray=new ArrayList();
	
	newTabGroup("fieldTrip");
	
	fetchAll(loadAllSessionIDQuery, new FetchCallback() {
        onFetch(result) {
        	candidate_session_fieldTrip.addAll(result);
            populateList("fieldTrip/fieldTripSession/fieldTripFileSelectionList", candidate_session_fieldTrip);
            populateList("fieldTrip/fieldTripSession/fieldTripFileList", selected_session_fieldTrip);
        }

        onError(message) {
            showToast(message);
        }
    });
}

/*** Person ***/ 
/*** Person variables ***/
person_id=null;
personIntroSss=new ArrayList();
currentPersonInfo=new ArrayList();//for creating intro session for a new added person or existing person
originPersonInfo =new ArrayList();//for recording original loaded person info so that we can tell if a person's info has changed
changedPersonInfo=new ArrayList();//for recording newest edited person info so that we can tell if a person's info has been changed
role_list=new ArrayList();
savePersonWfProperty=new ArrayList();
role_id=null;

/*** Person queries ***/
/*** usage: create person, create session, session update (4 usages) ***/
loadAllRoleQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
		"WHERE latestNonDeletedAentValue.AttributeID =( SELECT AttributeID FROM AttributeKey WHERE AttributeName='PersonRoleName') "+
		"AND uuid in (SELECT uuid FROM latestNonDeletedAentValue "+
			"WHERE AttributeID= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='RoleDataOnClient') AND measure ='Yes');";
/*** usage: list person, create session, session update (3 usages)***/
loadAllPersonQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
	"WHERE latestNonDeletedAentValue.AttributeID "+
	"= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='PersonName') "+
	"GROUP BY uuid;";
/*** usage: list person, search person (2 usages)***/
loadAllPersonIDQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
		"WHERE latestNonDeletedAentValue.AttributeID "+
		"IN (SELECT AttributeID FROM AttributeKey WHERE AttributeName='PersonID') "+
		"GROUP BY uuid;";
/*** Person UI ***/
createPersonRolePage(){
	if(!hasView("personRoleSelect/personRoleSelectInfo/SearchRole")){
		removeAllViewsAndContainers("personRoleSelect");
	
		executeViewTask(new ViewTask() {
    	doTask() { 	
	        style1 = "orientation";
	        style2 = "even";
	    	createContainer("personRoleSelect/personRoleSelectInfo/psRoleSelCtn", "orientation");
	    	createContainer("personRoleSelect/personRoleSelectInfo/child1", "even", "personRoleSelect/personRoleSelectInfo/psRoleSelCtn");
	        createContainer("personRoleSelect/personRoleSelectInfo/child2", "even", "personRoleSelect/personRoleSelectInfo/psRoleSelCtn");
		
			searchTextViewDef = createViewDef().createTextField().setLabel("Keyword");
			searchButtonDef = createViewDef().createButton().setLabel("Search").setStyleCss("faims-blue");
			psRoleListDef=createViewDef().createDropDown().setLabel("Role List");
			newPsBtnDef=createViewDef().createButton().setLabel("New Person").setStyleCss("faims-blue");
			createView("personRoleSelect/personRoleSelectInfo/keywordOfRole", searchTextViewDef,"personRoleSelect/personRoleSelectInfo/child1");
			createView("personRoleSelect/personRoleSelectInfo/SearchRole", searchButtonDef,"personRoleSelect/personRoleSelectInfo/child2");
			createView("personRoleSelect/personRoleSelectInfo/PersonRoleSelectList", psRoleListDef,"personRoleSelect/personRoleSelectInfo");
			createView("personRoleSelect/personRoleSelectInfo/CreateNewPerson", newPsBtnDef,"personRoleSelect/personRoleSelectInfo");
	        refreshTabgroupCSS("personRoleSelect");

	        onEvent("personRoleSelect/personRoleSelectInfo","show","loadRoles(\"newPerson\",\"personRoleSelect/personRoleSelectInfo/PersonRoleSelectList\")");
			onEvent("personRoleSelect/personRoleSelectInfo/CreateNewPerson","click","newPersonByRole()");
	        }
		});

	}
	showTabGroup("personRoleSelect");
}

loadRoles(String typeFlag, String populateRef){
	fetchAll(loadAllRoleQuery,new FetchCallback() {
		onFetch(result) {
			role_list.clear();
			role_list.addAll(result);
			if(typeFlag.equals("newPerson")){
				populateDropDown(populateRef, role_list);
			}
			else{
				populateList(populateRef,role_list);
			}
		}  
	});
}

initPersonVar(){
	person_id=null;
	personIntroSss.clear();
	currentPersonInfo.clear();
	originPersonInfo.clear();
	changedPersonInfo.clear();
	savePersonWfProperty.clear();
	role_id=null;
}

loadPerson(){
	person_id=null;
	fetchAll(loadAllPersonIDQuery, new FetchCallback() {
        onFetch(result) {
            populateList("control/user_control/userList", result);
        }

        onError(message) {
            showToast(message);
        }
    });
}

loadPersonInfo(String typeflag, String toShowPsId){
	if(typeflag.equals("person")){
		person_id=getListItemValue();
	}
	else{
		person_id=toShowPsId;
	}
	if(isNull(person_id)){
		showToast("No Person selected");
		return;
	}
	createPersonPage();

	showTabGroup("person", person_id, new FetchCallback() {
        onFetch(result) {
      
        	String roleUuid=getFieldValue("person/personInfoHide/personRoleId");
            checkPersonRoleQuery="SELECT measure from latestNonDeletedAentValue "+
								"WHERE latestNonDeletedAentValue.uuid='"+roleUuid+"' "+
								"AND latestNonDeletedAentValue.AttributeID="+
								"(select AttributeID from AttributeKey where AttributeName='PersonRoleName');";

			checkRoleIntroQuery="SELECT measure from latestNonDeletedAentValue "+
								"WHERE latestNonDeletedAentValue.uuid='"+roleUuid+"' "+
								"AND latestNonDeletedAentValue.AttributeID="+
								"(select AttributeID from AttributeKey where AttributeName='RoleIntroAnsRequired');";

			checkRolePhotoQuery="SELECT measure from latestNonDeletedAentValue "+
								"WHERE latestNonDeletedAentValue.uuid='"+roleUuid+"' "+
								"AND latestNonDeletedAentValue.AttributeID="+
								"(select AttributeID from AttributeKey where AttributeName='RolePhotoRequired');";

        	fetchOne(checkPersonRoleQuery,new FetchCallback() {
				onFetch(result) {
					if(!isNull(result)){
						setFieldValue("person/personInfoHide/personRoleName",result.get(0));	
					}
					else{
						showWarning("Invalid role","This role may not be using anymore\n"+" please contact the admin for details");
					}
				 
				}  
			});

        	fetchOne(checkRoleIntroQuery,new FetchCallback() {
				onFetch(result) {
					if(!isNull(result)){
						savePersonWfProperty.clear();
						if(result.get(0).equals("Yes")){
							savePersonWfProperty.add("Y");
						}
						else{
							savePersonWfProperty.add("N");
						}
						fetchOne(checkRolePhotoQuery,new FetchCallback() {
							onFetch(result) {
								if(!isNull(result)){
									if(result.get(0).equals("Yes")){
										savePersonWfProperty.add("Y");
									}
									else{
										savePersonWfProperty.add("N");
									}
									
								}
								else{
									showWarning("Invalid role","This role may not be using anymore\n"+" please contact the admin for details");
								}
							 
							}  
						});
					}
					else{
						showWarning("Invalid role","This role may not be using anymore\n"+" please contact the admin for details");
					}
				 
				}  
			});
        	originPersonInfo.clear();
        	originPersonInfo.add(getFieldValue("person/personInfoHide/personID"));
        	originPersonInfo.add(getFieldValue("person/personInfo/personName"));
        	originPersonInfo.add(getFieldValue("person/personInfo/personOtherNames"));
        	originPersonInfo.add(getFieldValue("person/personInfo/personDOB"));
        	originPersonInfo.add(getFieldValue("person/personInfo/personPhoto"));
			originPersonInfo.add(getFieldValue("person/personInfo/personPhotoDesc"));
			originPersonInfo.add(getFieldValue("person/personInfo/personIntroDesc"));

           // person=result;
            showToast("Loaded person"+result.getId());            
        }
        onError(message) {
            showToast(message);
        }
    });
}

newPersonByRole(){
	initPersonVar();

	role_id=getFieldValue("personRoleSelect/personRoleSelectInfo/PersonRoleSelectList");
	//showWarning("role_id",role_id);
	roleInfo=new ArrayList();
	Hashtable propertyInfo=new Hashtable();

	String roleName=null;

	if(isNull(role_id)){
		showWarning("Invalid role","This role is invalid, please select another role for continue");
		return;
	}

	for(role : role_list){
		if(role.get(0).equals(role_id)){
			roleName=role.get(1);
			break;
		}
	}

	if(isNull(roleName)){
		showWarning("Invalid role","This role is invalid, please select another role for continue");
		return;
	}

	roleInfo.add(role_id);
	roleInfo.add(roleName);

	checkRoleIntroQuery="SELECT measure from latestNonDeletedAentValue WHERE "+
		"latestNonDeletedAentValue.AttributeID="+
		"(select AttributeID from AttributeKey where AttributeKey.AttributeName='RoleIntroAnsRequired') "+
		"AND latestNonDeletedAentValue.uuid='"+role_id+"';";

	checkRolePhotoQuery="SELECT measure from latestNonDeletedAentValue WHERE "+
		"latestNonDeletedAentValue.AttributeID="+
		"(select AttributeID from AttributeKey where AttributeKey.AttributeName='RolePhotoRequired') "+
		"AND latestNonDeletedAentValue.uuid='"+role_id+"';";

	fetchOne(checkRoleIntroQuery,new FetchCallback() {
		onFetch(result) {
			if(!isNull(result)){
				if(result.get(0).equals("Yes")){
					propertyInfo.put("I","Y");
				}
				else{
					propertyInfo.put("I","N");
				}
				fetchOne(checkRolePhotoQuery,new FetchCallback() {
					onFetch(result) {
						if(!isNull(result)){
							if(result.get(0).equals("Yes")){
								propertyInfo.put("P","Y");
							}
							else{
								propertyInfo.put("P","N");
							}
							newPersonWithIntro(roleInfo,propertyInfo);
						}
						else{
							showWarning("Invalid role","This role may not be using anymore\n"+" please contact the admin for details");
							return;
						}
					 
					}  
				});
			}
			else{
				showWarning("Invalid role","This role may not be using anymore\n"+" please contact the admin for details");
				return;
			}
		 
		}  
	});	
}


createPersonPage(){
	if(!hasView("person/personInfoHide/personID")){
		removeAllViewsAndContainers("person");
	
		executeViewTask(new ViewTask() {
    	doTask() { 	

    		//personInfoHide page
    		psRoleIdViewDef = createViewDef().createTextField().setLabel("psRole").setAttributeName("PersonRole").setAttributeType("measure");
    		createView("person/personInfoHide/personRoleId", psRoleIdViewDef,"person/personInfoHide");
    		
    		//personInfo page
    		personIDViewDef= createViewDef().createTextField().setLabel("Person label").setAttributeName("PersonID").setAttributeType("measure").setAnnotationEnabled(true).setReadOnly(true);  		
    		personNameViewDef=createViewDef().createTextField().setLabel("Person name").setAttributeName("PersonName").setAttributeType("measure").setAnnotationEnabled(true).setStyleCss("required");	
    		personOtherNamesViewDef=createViewDef().createTextField().setLabel("Person Other Names").setAttributeName("PersonOtherNames").setAttributeType("measure").setAnnotationEnabled(true);
    		personDOBViewDef=createViewDef().createTextField().setLabel("Person DOB").setAttributeName("PersonDOB").setAttributeType("measure").setAnnotationEnabled(true);
    		personRoleViewDef=createViewDef().createTextField().setLabel("Person general role").setReadOnly(true);
   			personPhotoViewDef=createViewDef().createCameraGallery(true).setAttributeName("PersonPhoto").setAttributeType("measure").setAnnotationEnabled(true);
   			takePhotoViewDef=createViewDef().createButton().setLabel("Take Photo").setStyleCss("faims-blue");
    		psPhotoDescViewDef=createViewDef().createTextField().setLabel("Photo decription").setAttributeName("PersonPhotoDescription").setAttributeType("measure").setAnnotationEnabled(true);
    		takeIntroQuesnirViewDef=createViewDef().createButton().setLabel("Intro Questionnaire").setStyleCss("faims-blue");
    		introDescViewDef=createViewDef().createTextField().setLabel("Intro quesnir description").setAttributeName("PersonIntroQuenirDesp").setAttributeType("measure").setAnnotationEnabled(true);
	        finishNewPsViewDef=createViewDef().createButton().setLabel("Save Person").setStyleCss("faims-blue");
		
			createView("person/personInfoHide/personID", personIDViewDef,"person/personInfoHide");
			createView("person/personInfoHide/personRoleName", personRoleViewDef,"person/personInfoHide");
			createView("person/personInfo/personName", personNameViewDef,"person/personInfo");
			createView("person/personInfo/personOtherNames", personOtherNamesViewDef,"person/personInfo");
			createView("person/personInfo/personDOB", personDOBViewDef,"person/personInfo");
			createView("person/personInfo/personPhoto", personPhotoViewDef,"person/personInfo");
			createView("person/personInfo/Take_Photo", takePhotoViewDef,"person/personInfo");
			createView("person/personInfo/personPhotoDesc", psPhotoDescViewDef,"person/personInfo");
			createView("person/personInfo/Take_Intro_Quesnir", takeIntroQuesnirViewDef,"person/personInfo");
			createView("person/personInfo/personIntroDesc", introDescViewDef,"person/personInfo");
			createView("person/personInfo/Finish_New_Person", finishNewPsViewDef,"person/personInfo");

	        refreshTabgroupCSS("person");

	        onEvent("person/personInfo/Finish_New_Person","click","savePersonCheck(\"save\")");
			onEvent("person/personInfo/Take_Intro_Quesnir","click","checkPersonIntroSession()");
			onEvent("person/personInfo/Take_Photo","click","attachPictureTo(\"person/personInfo/personPhoto\")");
	        }
		});

	}
}

newPersonWithIntro(ArrayList roleflag, Hashtable propertyFlag){
	createPersonPage();
	person_id=null;
	newTabGroup("person");
	setFieldValue("person/personInfoHide/personRoleId",roleflag.get(0));
	setFieldValue("person/personInfoHide/personRoleName",roleflag.get(1));
	savePersonWfProperty.clear();
	savePersonWfProperty.add(propertyFlag.get("I"));
	savePersonWfProperty.add(propertyFlag.get("P"));
}

savePersonCheck(String typeflag){
	if((isNull(getFieldValue("person/personInfo/personName"))) || (isNull(getFieldValue("person/personInfo/personDOB")))){
		showWarning("Validation Error", "You must fill in the Person Name and Person DOB before you can continue");
        return;
	}
	if(!timeValidation(getFieldValue("person/personInfo/personDOB"))){
		showWarning("Invalid DOB","1.Datetime format should be yyyy-MM-dd \n"+"2.The value for date should be valid");
		return;
	}
	if(savePersonWfProperty.get(1).equals("Y")){
		if((isNull(getFieldValue("person/personInfo/personPhoto"))) && (isNull(getFieldValue("person/personInfo/personPhotoDesc")))){
			showWarning("Validation Error", "You must either take person photo or write the reason of not taking photo");
    		return;
		}
	}
	//"save" click saving
	if(!typeflag.equals("intro")){
		if(savePersonWfProperty.get(0).equals("Y")){
			if(person_id==null && (isNull(getFieldValue("person/personInfo/personIntroDesc")))){
				showWarning("Validation Error", "You must either take person introductory questionnaire \n"+"or write the reason of not taking introductory questionnaire");
        		return;
			}
			else if(person_id==null){
				savePersonData(typeflag);
			}
			if(person_id!=null&&(isNull(getFieldValue("person/personInfo/personIntroDesc")))){
				checkPsIntrSssQuery="select uuid,measure from latestNonDeletedArchEntIdentifiers "+
					"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionID') "+
					"and uuid in ( select uuid from AentReln "+
						"where RelationshipID in(select RelationshipID from AentReln "+
							"where RelationshipID in (select RelationshipID from latestNonDeletedRelationship "+
								"where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Answer and Session' ) "+
								"and latestNonDeletedRelationship.Deleted IS NULL) "+
					"and uuid in (select uuid from latestNonDeletedAentValue "+
						"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionnaireID') "+
						"and latestNonDeletedAentValue.measure in(select uuid from latestNonDeletedAentValue "+
							"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionnaireType') "+
							"and measure=(select uuid from latestNonDeletedAentValue "+
								"where AttributeID= (select AttributeID from AttributeKey "+
									"where AttributeName='QuesnirTypeName') and measure = 'Introductory'))))) "+
					"and uuid in (select measure from latestNonDeletedArchEntIdentifiers "+
						"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionIDforPerson') "+
						"and uuid in (select uuid from latestNonDeletedAentValue "+
							"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionPersonRole') "+
							"and measure=(select uuid from latestNonDeletedAentValue "+
								"where AttributeID=(select AttributeID from AttributeKey where AttributeName='PersonRoleName') "+
								"and measure='consultant') "+
					"and uuid in (select uuid from latestNonDeletedAentValue "+
						"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionPersonName') "+
						"and measure ='"+person_id+"')));";
	
				fetchAll(checkPsIntrSssQuery,new FetchCallback() {
		        	onFetch(result) {					        	
						if(isNull(result)){
							showWarning("Validation Error", "You must either take person introductory questionnaire \n"+"or write the reason of not taking introductory questionnaire");
							return;
						}
						else{
							savePersonData(typeflag);
						}
			        }
			        onError(message) {
			            showToast(message);
			           
			        }
			    });
			}
			else{
				savePersonData(typeflag);
			}
			
		}
		else{
			savePersonData(typeflag);
		}
	}
	else{
		savePersonData(typeflag);
	}
}

nameCamCaseConverter(String originName){
	String camCase=null;
	String [] originNameSplit=originName.split("\\s+");
	StringBuffer sb=new StringBuffer();
	for (part : originNameSplit){
		if(part.length()>1){
			sb.append(Character.toUpperCase(part.charAt(0))).append(part.substring(1));
		}
		else{
			sb.append(Character.toUpperCase(part.charAt(0)));
		}
	}
	camCase=sb.toString().trim();
	return camCase;
}

savePersonData(String typeflag){
	String personNameOrigin=getFieldValue("person/personInfo/personName");
	String personNameCamCase=nameCamCaseConverter(personNameOrigin);
	String personLabel=personNameCamCase+"_"+getFieldValue("person/personInfo/personDOB");

	if(person_id!=null){
		changedPersonInfo.clear();
		changedPersonInfo.add(personLabel);
		changedPersonInfo.add(personNameOrigin);
		changedPersonInfo.add(getFieldValue("person/personInfo/personOtherNames"));
		changedPersonInfo.add(getFieldValue("person/personInfo/personDOB"));
		changedPersonInfo.add(getFieldValue("person/personInfo/personPhoto"));
		changedPersonInfo.add(getFieldValue("person/personInfo/personPhotoDesc"));
		changedPersonInfo.add(getFieldValue("person/personInfo/personIntroDesc"));

		Hashtable personInfoChange=listChange(changedPersonInfo,originPersonInfo);
		//NOTE THIS CASE IS NOT TESTED
		if((personInfoChange.containsKey("EQUAL"))&& (typeflag.equals("intro"))){
			newPersonIntro=new ArrayList();
      		newPersonIntro.add(person_id);
			newPersonIntro.add(personNameOrigin);
			newSessionForAnswer("intro",newPersonIntro);
			//TODO:  test for the new added return statement
			return;
		}
		
		else if((personInfoChange.containsKey("EQUAL"))&& (!typeflag.equals("intro"))){
			showWarning("No changes","All data are saved");
			return;
		}
	}
	psDuplicateQuery=null;
	if(person_id==null){
		psDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
				"where AttributeID=(select AttributeID from AttributeKey where AttributeName='PersonID') "+
				"and (measure = '"+personLabel+"' or measure like '"+personLabel+"(%)')";
	}
	else{
		psDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
				"where AttributeID=(select AttributeID from AttributeKey where AttributeName='PersonID') "+
				"and uuid<>"+person_id+" "+
				"and (measure = '"+personLabel+"' or measure like '"+personLabel+"(%)')";
	}

	fetchAll(psDuplicateQuery,new FetchCallback() {
		onFetch(result) {
			if(!isNull(result)){
				personLabel=nonDupLabelGen(result,personLabel,"Person","PersonID",true);
			}
			setFieldValue("person/personInfoHide/personID",personLabel);

			saveTabGroup("person", person_id, null, null, new SaveCallback() {
			    onSave(uuid, newRecord) {
			      person_id = uuid;
			      if(newRecord) {
			      	newPersonIntro=new ArrayList();
			      	newPersonIntro.add(person_id);
					newPersonIntro.add(personNameOrigin);

			      	if(typeflag.equals("intro")){
			      		originPersonInfo.clear();
			      		originPersonInfo.add(getFieldValue("person/personInfoHide/personID"));
			        	originPersonInfo.add(getFieldValue("person/personInfo/personName"));
			        	originPersonInfo.add(getFieldValue("person/personInfo/personOtherNames"));
			        	originPersonInfo.add(getFieldValue("person/personInfo/personDOB"));
			        	originPersonInfo.add(getFieldValue("person/personInfo/personPhoto"));
						originPersonInfo.add(getFieldValue("person/personInfo/personPhotoDesc"));
						originPersonInfo.add(getFieldValue("person/personInfo/personIntroDesc"));
						//showWarning("originPersonInfo","originPersonInfo");
						newSessionForAnswer("intro",newPersonIntro);
					}

					else{
			        	showToast("New record created");
			        	cancelTabGroup("person",true);
			     	    showTab("control/user_control");
			    	}
			      }
				  else{
					showToast("Record changed");	
					if(typeflag.equals("intro")){
						newPersonIntro=new ArrayList();
			      		newPersonIntro.add(person_id);
						newPersonIntro.add(personNameOrigin);
						newSessionForAnswer("intro",newPersonIntro);
					}
				  }
				  
			    }
			    onError(message) {
			        showWarning("Error",message);
			    }  
			});
		}
		onError(message){
			showWarning("Error",message);
		}

	});
}

//Get the intro session list for a person
checkPersonIntroSession(){
	if(person_id!=null){
		checkPsIntrSssQuery="select uuid,measure from latestNonDeletedArchEntIdentifiers "+
		"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionID') "+
		"and uuid in ( select uuid from AentReln "+
			"where RelationshipID in(select RelationshipID from AentReln "+
				"where RelationshipID in (select RelationshipID from latestNonDeletedRelationship "+
					"where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Answer and Session' ) "+
					"and latestNonDeletedRelationship.Deleted IS NULL) "+
		"and uuid in (select uuid from latestNonDeletedAentValue "+
			"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionnaireID') "+
			"and latestNonDeletedAentValue.measure in(select uuid from latestNonDeletedAentValue "+
				"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionnaireType') "+
				"and measure=(select uuid from latestNonDeletedAentValue "+
					"where AttributeID= (select AttributeID from AttributeKey "+
						"where AttributeName='QuesnirTypeName') and measure = 'Introductory'))))) "+
		"and uuid in (select measure from latestNonDeletedArchEntIdentifiers "+
			"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionIDforPerson') "+
			"and uuid in (select uuid from latestNonDeletedAentValue "+
				"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionPersonRole') "+
				"and measure=(select uuid from latestNonDeletedAentValue "+
					"where AttributeID=(select AttributeID from AttributeKey where AttributeName='PersonRoleName') "+
					"and measure='consultant') "+
		"and uuid in (select uuid from latestNonDeletedAentValue "+
			"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionPersonName') "+
			"and measure ='"+person_id+"')));";

		fetchAll(checkPsIntrSssQuery, new FetchCallback() {
	        onFetch(result) {
	        		if(!isNull(result)){
						personIntroSss.clear();
						personIntroSss.addAll(result);
						createPsInTroSssPage();
						showTabGroup("introSssList");
						populateList("introSssList/introSssInfo/intrSessionList",personIntroSss);
						currentPersonInfo.clear();
						currentPersonInfo.add(person_id);
						currentPersonInfo.add(getFieldValue("person/personInfo/personName"));
	        		}
	        		else{
	        			newPersonIntro=new ArrayList();
			      		newPersonIntro.add(person_id);
						newPersonIntro.add(getFieldValue("person/personInfo/personName"));
	        			newSessionForAnswer("intro",newPersonIntro);
	        		}
	        	}
	            
	        onError(message) {
	            showToast(message);
	        }
	    });
	}
	else{
		savePersonCheck("intro");
	}
}
/*** Person Intro Session ***/
/*** Person Intro Session UI ***/
createPsInTroSssPage(){
	if(!hasView("introSssList/introSssInfo/intrSessionList")){
		removeAllViewsAndContainers("introSssList");
		executeViewTask(new ViewTask() {
    	doTask() { 	
   			newIntroSssViewDef=createViewDef().createButton().setLabel("New Session").setStyleCss("faims-blue");
    
    		psIntroSssListDef=createViewDef().createList().setLabel("Session").setStyleCss("survey-list");

			createView("introSssList/introSssInfo/new_intro_sss", newIntroSssViewDef,"introSssList/introSssInfo");
			createView("introSssList/introSssInfo/intrSessionList", psIntroSssListDef,"introSssList/introSssInfo");

	        refreshTabgroupCSS("introSssList");
	        }
		});

	}
}

/*** Commom methods ***/
/* 
** Getting the (\\d+) number suffix of a string
** inputString: the input string
*/
getNumSuffix(String inputString){
	String returnSuffix=null;
	Pattern numberPat = Pattern.compile("\\(\\d+\\)");
	Matcher numMatcher = numberPat.matcher(inputString);
	Boolean suffixFind=numMatcher.find();
	if(suffixFind){
		String [] patternSplit=inputString.split("\\(");
		Pattern numberPat2 = Pattern.compile("\\d+\\)");
		Matcher numMatcher2 = numberPat2.matcher(patternSplit[patternSplit.length-1]);
		if(numMatcher2.find()){
			returnSuffix="("+patternSplit[patternSplit.length-1];
		}
	}
	return returnSuffix;
}

/* 
** Generating a non-dup label
** dupList: the duplicate query result 
** tempLbl: the label to be checking for duplicate
** tableName: the table name for the label's update
** attriName: the attribute name for the label's update
** dataSaving: indicating if the old data should be updated to the database
*/
nonDupLabelGen(ArrayList dupList, String tempLbl, String tableName, String attriName, Boolean dataSaving){
	String rtnLbl=tempLbl;
	int sizeOfDup=0;
	Pattern numberPat = Pattern.compile("\\(\\d+\\)");
	sizeOfDup=dupList.size();

	if(sizeOfDup==0){
		return rtnLbl;
	}

	if(sizeOfDup==1){
		duplicateOldLabel=dupList.get(0).get(1);
		Matcher numMatcher = numberPat.matcher(duplicateOldLabel);

		String newLabel=null;
		if(numMatcher.find()){
			suffix=getNumSuffix(duplicateOldLabel);
			if(suffix!=null){
				if(!suffix.equals("(1)"))
					{
						int sLen=suffix.length();
						newLabel=duplicateOldLabel.substring(0,duplicateOldLabel.length()-sLen)+"(1)";
					}
			}
			else{
				newLabel=duplicateOldLabel+"(1)";
			}
		}
		else{
			newLabel=duplicateOldLabel+"(1)";

		}
		if(dataSaving){
			if(newLabel!=null){
				showWarning("newLabel",newLabel);
				attributes = createAttributeList();
				attributes.add(createEntityAttribute(attriName, null, null, newLabel, null));
				entityId=dupList.get(0).get(0);
				showWarning("entityId",entityId);
				saveArchEnt(entityId, tableName, null, attributes);
			}
		}
		rtnLbl=rtnLbl+"(2)";
		if(!dataSaving){
			if(newLabel!=null){
				rtnLbl=rtnLbl+"|"+newLabel;
			}
		}
	}

	else{
		int maxSuffix=0;
		for(temp: dupList){
			tempLabel=temp.get(1);
			Matcher numMatcher = numberPat.matcher(tempLabel);
			if(numMatcher.find()){
				tempSuffix=getNumSuffix(tempLabel);
				tempSuffixStr=null;
					if(tempSuffix!=null){
						int tempSuffixNum=Integer.parseInt(tempSuffix.replaceAll("[^0-9]", ""));
						if(tempSuffixNum>maxSuffix){
							maxSuffix=tempSuffixNum;
						}
				}
			}
		}
		maxSuffix=maxSuffix+1;
		rtnLbl=rtnLbl+"("+maxSuffix+")";
	}
	return rtnLbl;
}

labelDeduplicate(String originLabel, String attriName, String fieldRef, String typeflag, Boolean dataUpdate, ArrayList tempUpdateList ){
	duplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
	"where AttributeID=(select AttributeID from AttributeKey where AttributeName='"+attriName+"') "+
	"and (measure = '"+originLabel+"' or measure like '"+originLabel+"(%)')";

	fetchAll(duplicateQuery,new FetchCallback() {
		onFetch(result) {			
			if(!isNull(result)){
				String tempLabel=nonDupLabelGen(result,originLabel, null, null, false);
				if(result.size()==1){
					String newLabel=null;
					ArrayList tempLabels=extractLabelToList(tempLabel);
					if(tempLabels !=null && !tempLabels.isEmpty()){
						originLabel=tempLabels.get(0);
						if(tempLabels.size()>1){
							newLabel=tempLabels.get(1);
							dataUpdate=true;
							tempUpdateList.add(result.get(0).get(0));
							tempUpdateList.add(newLabel);
						}
					}
				}
				else{
					originLabel=tempLabel;
				}
				setFieldValue(fieldRef,originLabel);
			}
			else{
				setFieldValue(fieldRef,originLabel);
			}		
		}
		
	});
}
extractLabelForNewEntity(String inputString){
	String [] labelSplit=inputString.split("\\|"); 
	return labelSplit[0];	
}

extractLabelForUpdateEntity(String inputString){
	String [] labelSplit=inputString.split("\\|"); 
	if(labelSplit.length>1){
		return labelSplit[1];
	}
	return null;
}
extractLabelToList(String inputString){
	ArrayList rtnList=new ArrayList();
	rtnList.clear();

	String [] labelSplit=inputString.split("\\|"); 
	rtnList.add(labelSplit[0]);

	if(labelSplit.length>1){
		rtnList.add(labelSplit[1]);
	}
	return rtnList;
}
/*
** Basic arraylist difference checking 
** targetList: the updated list
** sourceList: the old list
*/

listChange(ArrayList targetList,ArrayList sourceList){
	Hashtable listChanges=new Hashtable();
	target_list=new ArrayList();
	source_list=new ArrayList();
	target_diff_on_source=new ArrayList();
	source_diff_on_target=new ArrayList();

	target_list.addAll(targetList);
	source_list.addAll(sourceList);

	target_list.removeAll(source_list);
	target_diff_on_source.addAll(target_list);//target - source

	target_list.clear();
	target_list.addAll(targetList);
	source_list.removeAll(target_list);
	source_diff_on_target.addAll(source_list);//source - target

	if((target_diff_on_source.isEmpty()) && (source_diff_on_target.isEmpty())){
		listChanges.put("EQUAL",targetList);//here can not put ("EQUAL",null)
	}
	else if((!target_diff_on_source.isEmpty()) && (source_diff_on_target.isEmpty())){
		listChanges.put("PUREADD",target_diff_on_source);
	}

	else if((target_diff_on_source.isEmpty()) && (!source_diff_on_target.isEmpty())){
		listChanges.put("PUREDELETE",source_diff_on_target);
	}

	else {
		listChanges.put("ADD",target_diff_on_source);
		listChanges.put("DELETE",source_diff_on_target);
	}
	return listChanges;
}
/*
** check if time is valid
** startDateTime: the start date time
** endDateTime: the end date time
** flag: indicating the cases, which brings different requirements on time validation
*/
timeValidation(String startDateTime, String endDateTime, String flag){
	switch(flag){
		case ("sessionTime"):
			DateFormat df=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			df.setLenient(false);
			try{
				Date sdt=df.parse(startDateTime);
				Date edt=df.parse(endDateTime);	
				if(sdt.getTime()>edt.getTime()){
					return false;
				}
				
			
				else{
					String [] startTime=startDateTime.split("\\s+");
					String [] endTime=endDateTime.split("\\s+");
					if(startTime[0].equals(endTime[0])){
						return true;
					}
					else{
						return false;
					}
				}
			}
			catch(Exception ex){
				Log.e("error", ex.getMessage().toString());
				return false;
			}
			break;
			
		case ("fieldTripTime"):
			DateFormat df=new SimpleDateFormat("yyyy-MM-dd");
			try{
				Date sdt=df.parse(startDateTime);
				Date edt=df.parse(endDateTime);
				if(sdt.getTime()>edt.getTime()){
					return false;
				}
			
				else{
					return true;
				}
			}
			catch(Exception excption){
				return false;
			}
			break;
		}
}
/*
** check if time is in valid format
** startDateTime: input date time
*/
timeValidation(String startDateTime){	
	String hyphenDateRegex="^\\d{4}[-]\\d{2}[-]\\d{2}$";
	Pattern hyphenDatePattern=Pattern.compile(hyphenDateRegex);
	Matcher hyphenDateMatcher=hyphenDatePattern.matcher(startDateTime);
	if (hyphenDateMatcher.find()){		
		DateFormat df=new SimpleDateFormat("yyyy-MM-dd");
		df.setLenient(false);
		Date sdt=null;
		try{
			sdt=df.parse(startDateTime);	
		}
		catch(Exception ex){
			return false;
		}
		return true;
	}
return false;
}
/*
** get the current data through the system function of getCurrentTime()
*/
getCurrentDate(){
	String currentTime=getCurrentTime();
    currentDateTimeArray=currentTime.toString().split("\\s+");
    String currentDate=currentDateTimeArray[0];
    return currentDate;
}

dateParser(String sourceDate){
	//convert dd/mm/yyyy to yyyy-mm-dd
	String slashDateRegex="^\\d{2}[/]\\d{2}[/]\\d{4}$";
	Pattern slashDatePattern=Pattern.compile(slashDateRegex);
	Matcher slashDateMatcher=slashDatePattern.matcher(sourceDate);
	if (slashDateMatcher.find()){
		String [] dateParts=sourceDate.split("/");
		String targetDate=dateParts[2]+"-"+dateParts[1]+"-"+dateParts[0];
		return targetDate;
	}
	
	String hyphenDateRegex="^\\d{4}[-]\\d{2}[-]\\d{2}$";
	Pattern hyphenDatePattern=Pattern.compile(hyphenDateRegex);
	Matcher hyphenDateMatcher=hyphenDatePattern.matcher(sourceDate);
	if (hyphenDateMatcher.find()){
		String [] hyphenDateParts=sourceDate.split("-");
		String targetDate=hyphenDateParts[2]+"/"+hyphenDateParts[1]+"/"+hyphenDateParts[0];
		return targetDate;
	}
	//convert yyyy-mm-dd to dd/mm/yy
}

dateCompare(String beginDate, String middleDate, String endDate){
	DateFormat df=new SimpleDateFormat("yyyy-MM-dd");
	try{
		Date sdt=df.parse(beginDate);
		Date edt=df.parse(endDate);
		Date mdt=df.parse(middleDate);
		if((sdt.getTime()<=mdt.getTime()) && (mdt.getTime()<=edt.getTime())){
			return true;
		}
	
		else{
			return false;
		}
	}
	catch(Exception excption){
		//exception.printStackTrace();
		return false;
	}
	return false;
}

extractLatestTime(ArrayList timeList){
	Collections.sort(timeList);
	return timeList.get(timeList.size()-1);
}

stayInCurrentPage()
{
	return;
}
deleteItemFromTargetList(){

}
buildQuerySetCondition(ArrayList itemList){
	StringBuilder sb=new StringBuilder();
	sb.append("(");
	for (String s: itemList){
		String str="'"+s+"'";
		if(sb.length()>1){
			sb.append(",");
		}
		sb.append(str);
	}
	sb.append(")");
	return sb.toString();
}

updateDupLabel(ArrayList dupInfoList, String tableName, String attrName){
	//showWarning("updateDupLabel",tableName+attrName);
	if(dupInfoList!=null && !dupInfoList.isEmpty()){
		//showWarning("dupInfoList","dupInfoList");
		dupAttributes = createAttributeList();
		dupAttributes.add(createEntityAttribute(attrName, null, null, dupInfoList.get(1), null));
		saveArchEnt(dupInfoList.get(0), tableName, null, dupAttributes);
		dupInfoList.clear();
	}
}

saveEntitiesToRel(String type, String entity1, String entity2) {
	if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(reln_id, newRecord) {
            addReln(entity1, reln_id, null);
            addReln(entity2, reln_id, null);
        }
        onError(message) {
        	saveEntitiesToRelFailSafe(type,entity1,entity2,0);
        }
    });
}

saveEntitiesToRelFailSafe(String type, String entity1, String entity2, int loopCount) {
	if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(reln_id, newRecord) {
            addReln(entity1, reln_id, null);
            addReln(entity2, reln_id, null);
        }
        onError(message) {
        	if(loopCount<3){
        		loopCount++;
				saveEntitiesToRelFailSafe(type, entity1, entity2,loopCount);  		
        	}
        	else{
        		showWarning("Saving fail","Saving failed on" +type +"\n Plese try to save again if you can\n"+"and report the error to the admin");
        	}	
        }
    });
}


nextQuestion(String curntQuesId, ArrayList questionList){
	int idxCrntQues=-1;
	String nextQuesContent=null;
	String nextQuesId=null;
	for(int i=0;i<questionList.size();i++){
		if(curntQuesId.equals(questionList.get(i).get(0))){
			idxCrntQues=i;
			break;
		}
	}
	if(idxCrntQues!=questionList.size()-1){
		nextQuesId=questionList.get(idxCrntQues+1).get(0);
		nextQuesContent=questionList.get(idxCrntQues+1).get(1);
		showAlert("Next question","Do you want to go to the next question:\n"+nextQuesContent,"checkPersonAns(\""+nextQuesId+"\")","stayInCurrentPage()");
	}
	else{
		if(hasView("survey/answerBasic/radioGrp")){
			cancelTabGroup("survey",true);
		}
	}
}

extractOriginLbl(ArrayList inputList){
	extrList=new ArrayList();
	extrList.clear();
	//showWarning("extrAnsList","extrAnsList");
	Pattern numberPat = Pattern.compile("\\(\\d+\\)");
	//showWarning("numberPat","numberPat");
	for (input: inputList){
		tempLblId=input.get(0);
		//showWarning("tempAnsLblId",tempLblId);
		tempLbl=input.get(1);
		//showWarning("tempAnsLbl",tempLbl);
		Matcher numMatcher = numberPat.matcher(tempLbl);
		//showWarning("numMatcher","numMatcher");
		Boolean suffixFind=numMatcher.find();
		//showWarning("suffixFind",suffixFind.toString());
		//if there's no number suffix of the current label, then it can be directly added to exrAnsList
		if(!suffixFind){
			extrList.add(input);
			//showWarning("extrList3","add3");
		}
		else{
			//showWarning("else","else");
			String [] patternSplit=tempLbl.split("\\(");
			//showWarning("patternSplit",patternSplit.length.toString());
			Pattern numberPat2 = Pattern.compile("\\d+\\)");
			//showWarning("numberPat2","numberPat2");
			Matcher numMatcher2 = numberPat2.matcher(patternSplit[patternSplit.length-1]);
			//showWarning("numMatcher2",patternSplit[patternSplit.length-1]);
			if(numMatcher2.find()){
				StringBuilder sb=new StringBuilder();
				for (lbl : patternSplit){
					if (sb.length()>0)
						{sb.append("(");}
					sb.append(lbl);
				}
				String orgnSub=sb.toString();
				//showWarning("orgnSub",orgnSub);
				orgn=new ArrayList();
				orgn.add(tempLblId);
				orgn.add(orgnSub);
				extrList.add(orgn);
				//showWarning("extrList1","add1");
			}
			else{
				extrList.add(input);
				//showWarning("extrList2","add2");
			}

		}
	}
	return extrList;
}

extractOriginLbl(String inputLabel){
	String rtnLabel=inputLabel;
	Pattern numberPat = Pattern.compile("\\(\\d+\\)");
	Matcher numMatcher = numberPat.matcher(inputLabel);
	if(numMatcher.find()){
		//session label has only this patter at the end of the string
		rtnLabel=rtnLabel.substring(0,rtnLabel.indexOf("("));
	}
	return rtnLabel;
}