import java.util.concurrent.Callable;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import android.util.Log;
import java.io.File;
import java.lang.Character;
import java.lang.StringBuffer;

//import java.lang.*;
/*** 'Editable' - you can edit the code below based on the needs ***/
User user; // don't touch
String userid;

loadAllUserQuery="select userid, fname || ' ' || lname from user where userdeleted is null";

loadAllSessionIDQuery="SELECT uuid,measure FROM latestNonDeletedArchEntIdentifiers " +
		"WHERE AttributeID "+
		"= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='SessionID') "+
		"GROUP BY uuid;";

/***User***/
onEvent("user/usertab/users", "click", "login()");
loadUsers() {
    fetchAll(loadAllUserQuery, new FetchCallback() {
        onFetch(result) {
            populateList("user/usertab/users", result);
        }
    });
}

loadUsers();

String username = "";
String device = "";

login() {
    fetchOne("select userid,fname,lname,email from user where userid='" + getListItemValue() + "';", new FetchCallback() {
        onFetch(result) {
            user = new User(result.get(0),result.get(1),result.get(2),result.get(3));
            setUser(user);
            username = result.get(1) + " " + result.get(2);
            userid=result.get(0);
            showTabGroup("control");
            createControlGroupView();
        }
    });
}
addActionBarItem("sync", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "Disable Sync";
    }
    actionOn() {
        setSyncEnabled(false);
        setFileSyncEnabled(false);
        showToast("Sync disabled.");
    }
    isActionOff() {
        isSyncEnabled();
    } 
    actionOffLabel() {
        "Enable Sync";
    }
    actionOff() {
        setSyncEnabled(true);
        setFileSyncEnabled(true);
        showToast("Sync enabled.");
    }
});

addActionBarItem("internal_gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{Internal_GPS_Enabled}";
    }
    actionOn() {
        stopGPS();
        showToast("{GPS_Disabled}");
    }
    isActionOff() {
        isInternalGPSOn();
    }
    actionOffLabel() {
        "{Internal_GPS_Disabled}";
    }
    actionOff() {
        if(isExternalGPSOn()) {
            stopGPS();
        }
        startInternalGPS();
        showToast("{GPS_Enabled}");
    }
});

startInternalGPS();
onSyncEvent("onSyncStart()", "onSyncSuccess()", "onSyncFailure()");


onSyncStart() {
    showToast("sync started");
}
 
onSyncSuccess() {
    showToast("sync success");
}
 
onSyncFailure() {
    showToast("sync failed");
}

createControlGroupView(){
	createSurveyControlPage();
	createFieldTripControlPage();
	createPersonControlPage();
	createLanguageControlPage();
	createFileControlPage();
	createQueryControlPage();
}
createSurveyControlPage(){
	if(!hasView("control/survey_control/surveyList")){
		executeViewTask(new ViewTask() {
    	doTask() { 
    		style1 = "orientation";
	        style2 = "even";
	    	createContainer("control/survey_control/surveyButtonCtn", "orientation");
	    	createContainer("control/survey_control/surveyButtonChild1", "even", "control/survey_control/surveyButtonCtn");
	        createContainer("control/survey_control/surveyButtonChild2", "even", "control/survey_control/surveyButtonCtn");

	    	createContainer("control/survey_control/surveySearchCtn", "orientation");  	
			createContainer("control/survey_control/surveySearchChild1", "even", "control/survey_control/surveySearchCtn");
	        createContainer("control/survey_control/surveySearchChild2", "even", "control/survey_control/surveySearchCtn");
	        createContainer("control/survey_control/surveySearchChild3", "even", "control/survey_control/surveySearchCtn");

	        emrSssButtonDef = createViewDef().createButton().setLabel("Emr").setStyleCss("faims-blue");
	        newSssButtonDef = createViewDef().createButton().setLabel("New").setStyleCss("faims-blue");

	        createView("control/survey_control/EMR_Survey", emrSssButtonDef,"control/survey_control/surveyButtonChild1");
	        createView("control/survey_control/New_Survey", newSssButtonDef,"control/survey_control/surveyButtonChild2");

	        searchKeywordViewDef=createViewDef().createTextField().setLabel("keyword").setAnnotationEnabled(false);
	       	sssTypeViewDef=createViewDef().createDropDown().setLabel("Type").setAnnotationEnabled(false);
	       	searchButtonDef = createViewDef().createButton().setLabel("Search").setStyleCss("faims-blue");
	        sssListDef=createViewDef().createList().setLabel("Session").setAnnotationEnabled(false).setStyleCss("file-list");

	        createView("control/survey_control/survey_keyword", searchKeywordViewDef,"control/survey_control/surveySearchChild1");
	        createView("control/survey_control/survey_type", sssTypeViewDef,"control/survey_control/surveySearchChild2");
	        createView("control/survey_control/Survey_Search", searchButtonDef,"control/survey_control/surveySearchChild3");

			createView("control/survey_control/surveyList", sssListDef,"control/survey_control");

	        refreshTabgroupCSS("control");
			}
	    
		});
	}
}

createFieldTripControlPage(){
	if(!hasView("control/other_control/fieldTripList")){
		executeViewTask(new ViewTask() {
    	doTask() { 
    		style1 = "orientation";
	        style2 = "even";

	

	        newFTButtonDef = createViewDef().createButton().setLabel("New").setStyleCss("faims-blue");

	        createView("control/other_control/fieldTrip_New_bn", newFTButtonDef,"control/other_control");

	        createContainer("control/other_control/fieldTripSearchCtn", "orientation");  	
			createContainer("control/other_control/fieldTripSearchChild1", "even", "control/other_control/fieldTripSearchCtn");
	        createContainer("control/other_control/fieldTripSearchChild2", "even", "control/other_control/fieldTripSearchCtn");

	        searchKeywordViewDef=createViewDef().createTextField().setLabel("keyword").setAnnotationEnabled(false);
	       	searchButtonDef = createViewDef().createButton().setLabel("Search").setStyleCss("faims-blue");

	        fTListDef=createViewDef().createList().setLabel("FieldTrip").setAnnotationEnabled(false).setStyleCss("survey-list");

	        createView("control/other_control/fieldTrip_Search_kw", searchKeywordViewDef,"control/other_control/fieldTripSearchChild1");
	        createView("control/other_control/fieldTrip_Search_bn", searchButtonDef,"control/other_control/fieldTripSearchChild2");

			createView("control/other_control/fieldTripList", fTListDef,"control/other_control");

	        refreshTabgroupCSS("control");

	        onEvent("control/other_control/fieldTrip_New_bn","click","createFieldTripInfoPage(\"new\")");
			}
	    
		});
	}
}

createPersonControlPage(){
	if(!hasView("control/user_control/userList")){
		executeViewTask(new ViewTask() {
    	doTask() { 
    		style1 = "orientation";
	        style2 = "even";

	        newPsButtonDef = createViewDef().createButton().setLabel("New").setStyleCss("faims-blue");

	        createView("control/user_control/New_User", newPsButtonDef,"control/user_control");

	        createContainer("control/user_control/psSearchCtn", "orientation");  	
			createContainer("control/user_control/psSearchChild1", "even", "control/user_control/psSearchCtn");
	        createContainer("control/user_control/psSearchChild2", "even", "control/user_control/psSearchCtn");

	        searchKeywordViewDef=createViewDef().createTextField().setLabel("keyword").setAnnotationEnabled(false);
	       	searchButtonDef = createViewDef().createButton().setLabel("Search").setStyleCss("faims-blue");

	        pSListDef=createViewDef().createList().setLabel("Person").setAnnotationEnabled(false).setStyleCss("file-list");

	        createView("control/user_control/person_keyword", searchKeywordViewDef,"control/user_control/psSearchChild1");
	        createView("control/user_control/Person_Search", searchButtonDef,"control/user_control/psSearchChild2");

			createView("control/user_control/userList", pSListDef,"control/user_control");

	        refreshTabgroupCSS("control");
			}
	    
		});
	}
}

createLanguageControlPage(){
	if(!hasView("control/language_control/languageList")){
		executeViewTask(new ViewTask() {
    	doTask() { 
    		style1 = "orientation";
	        style2 = "even";

	        newLangButtonDef = createViewDef().createButton().setLabel("New").setStyleCss("faims-blue");

	        createView("control/language_control/New_Language", newLangButtonDef,"control/language_control");

	        createContainer("control/language_control/langSearchCtn", "orientation");  	
			createContainer("control/language_control/langSearchChild1", "even", "control/language_control/langSearchCtn");
	        createContainer("control/language_control/langSearchChild2", "even", "control/language_control/langSearchCtn");

	        searchKeywordViewDef=createViewDef().createTextField().setLabel("keyword").setAnnotationEnabled(false);
	       	searchButtonDef = createViewDef().createButton().setLabel("Search").setStyleCss("faims-blue");

	        langListDef=createViewDef().createList().setLabel("Language").setAnnotationEnabled(false).setStyleCss("file-list");

	        createView("control/language_control/person_keyword", searchKeywordViewDef,"control/language_control/langSearchChild1");
	        createView("control/language_control/Person_Search", searchButtonDef,"control/language_control/langSearchChild2");

			createView("control/language_control/languageList", langListDef,"control/language_control");

	        refreshTabgroupCSS("control");

	        onEvent("control/language_control/New_Language","click","newLanguage()");
	        onEvent("control/language_control","show","loadLanguage()");
			onEvent("control/language_control/languageList","click","loadLanguageInfo()");
			}
	    
		});
	}
}

createFileControlPage(){
	if(!hasView("control/file_control/fileList")){
		executeViewTask(new ViewTask() {
    	doTask() { 
    		style1 = "orientation";
	        style2 = "even";

	        createContainer("control/file_control/fileSearchCtn", "orientation");  	
			createContainer("control/file_control/fileSearchChild1", "even", "control/file_control/fileSearchCtn");
	        createContainer("control/file_control/fileSearchChild2", "even", "control/file_control/fileSearchCtn");
	        createContainer("control/file_control/fileSearchChild3", "even", "control/file_control/fileSearchCtn");
			
			fileTypeViewDef=createViewDef().createDropDown().setLabel("Type").setAnnotationEnabled(false);
	        searchKeywordViewDef=createViewDef().createTextField().setLabel("keyword").setAnnotationEnabled(false);
	       	searchButtonDef = createViewDef().createButton().setLabel("Search").setStyleCss("faims-blue");

	        fileListDef=createViewDef().createList().setLabel("File").setAnnotationEnabled(false).setStyleCss("file-list");

	        createView("control/file_control/fileCategorySelect", fileTypeViewDef,"control/file_control/fileSearchChild1");
	        createView("control/file_control/file_keyword", searchKeywordViewDef,"control/file_control/fileSearchChild2");
	        createView("control/file_control/File_Search", searchButtonDef,"control/file_control/fileSearchChild3");

			createView("control/file_control/fileList", fileListDef,"control/file_control");

	        refreshTabgroupCSS("control");
			}
	    
		});
	}
}

/**********Temp function, to be remove for official version************/
createQueryControlPage(){
	if(!hasView("control/querytest/Submit")){
			executeViewTask(new ViewTask() {
	    	doTask() { 
				queryViewDef=createViewDef().createTextField().setLabel("query").setAnnotationEnabled(false);
				queryButtonDef = createViewDef().createButton().setLabel("Submit").setStyleCss("faims-blue");

				createView("control/querytest/query", queryViewDef,"control/querytest");
				createView("control/querytest/Submit", queryButtonDef,"control/querytest");
				refreshTabgroupCSS("control");
			}
	    
		});
	}

}
/**********Temp function, to be remove for official version************/
/*** Session questionnaire list***/

createQuesnirList(){
	if(!hasView("questionnaireListAll/questionnaireListInfo/questionnaireListInDB")){
		removeAllViewsAndContainers("questionnaireListAll");
		executeViewTask(new ViewTask() {
    	doTask() { 	
	        style1 = "orientation";
	        style2 = "even";
	    	createContainer("questionnaireListAll/questionnaireListInfo/quesnirLsCt", "orientation");
	    	createContainer("questionnaireListAll/questionnaireListInfo/child1", "even", "questionnaireListAll/questionnaireListInfo/quesnirLsCt");
	        createContainer("questionnaireListAll/questionnaireListInfo/child2", "even", "questionnaireListAll/questionnaireListInfo/quesnirLsCt");

	        searchTextViewDef = createViewDef().createTextField().setLabel("Keyword").setInfoEnabled(true);
	        searchButtonDef = createViewDef().createButton().setLabel("Search").setStyleCss("faims-blue");
	        
	        quesnirListDef=createViewDef().createList().setLabel("Questionnaires").setStyleCss("questionnaire-list");

	        createView("questionnaireListAll/questionnaireListInfo/quesnir_keyword", searchTextViewDef,"questionnaireListAll/questionnaireListInfo/child1");
	        createView("questionnaireListAll/questionnaireListInfo/quesnir_Search", searchButtonDef,"questionnaireListAll/questionnaireListInfo/child2");
	   
	        createView("questionnaireListAll/questionnaireListInfo/questionnaireListInDB", quesnirListDef,"questionnaireListAll/questionnaireListInfo");

	        refreshTabgroupCSS("questionnaireListAll");

	        onEvent("questionnaireListAll","show","loadAllQuesnir()");

	        onEvent("questionnaireListAll/questionnaireListInfo/questionnaireListInDB","click","loadQuesnirInfo()");
	    }
		});
	}
}

createQuesSel(){
	if(!hasView("questionnaireInfo/surveyQuesnirHidden/surveyQuestionnaireID")){
		removeAllViewsAndContainers("questionnaireInfo");
		executeViewTask(new ViewTask() {
	    doTask() {
	    	hideQuesnirId=createViewDef().createTextField().setLabel("currentQuesnirID").setReadOnly(true);
	    	idTextViewDef = createViewDef().createTextField().setLabel("Questionnaire label").setAttributeName("QuestionnaireID").setAttributeType("measure").setAnnotationEnabled(false).setReadOnly(true);
	    	nameTextViewDef=createViewDef().createTextField().setLabel("Questionnaire name").setAttributeName("QuestionnaireName").setAttributeType("measure").setAnnotationEnabled(false).setReadOnly(true);
	    	typeTextViewDef=createViewDef().createTextField().setLabel("Questionnaire type").setAnnotationEnabled(false).setReadOnly(true);
	    	descTextViewDef=createViewDef().createTextField().setLabel("Questionnaire description").setAttributeName("QuestionnaireDescription").setAttributeType("measure").setAnnotationEnabled(false).setReadOnly(true);
	    	createView("questionnaireInfo/surveyQuesnirHidden/currentQuesnirID",hideQuesnirId,"questionnaireInfo/surveyQuesnirHidden");
	    	createView("questionnaireInfo/surveyQuesnirHidden/surveyQuestionnaireID",idTextViewDef,"questionnaireInfo/surveyQuesnirHidden");
	        createView("questionnaireInfo/surveyQuesnirHidden/surveyQuestionnaireName",nameTextViewDef,"questionnaireInfo/surveyQuesnirHidden");
	        createView("questionnaireInfo/surveyQuesnirHidden/surveyQuestionnaireType",typeTextViewDef,"questionnaireInfo/surveyQuesnirHidden");
	        createView("questionnaireInfo/surveyQuesnirHidden/surveyQuestionnaireDescription", descTextViewDef,"questionnaireInfo/surveyQuesnirHidden");
	    		    	

	        quesSelListDef=createViewDef().createList().setLabel("Questions").setStyleCss("questionQuestionnaire-list");

	        style1 = "orientation";
	        style2 = "even";
	        createContainer("questionnaireInfo/surveyQuestionnaire/quesSelCt", "orientation");
	    	createContainer("questionnaireInfo/surveyQuestionnaire/child1", "even", "questionnaireInfo/surveyQuestionnaire/quesSelCt");
	        createContainer("questionnaireInfo/surveyQuestionnaire/child2", "even", "questionnaireInfo/surveyQuestionnaire/quesSelCt");

	    	searchTextViewDef = createViewDef().createTextField().setLabel("Keyword").setInfoEnabled(true);
	        searchButtonDef = createViewDef().createButton().setLabel("Search").setStyleCss("faims-blue");

			createView("questionnaireInfo/surveyQuestionnaire/ques_keyword", searchTextViewDef,"questionnaireInfo/surveyQuestionnaire/child1");
	        createView("questionnaireInfo/surveyQuestionnaire/ques_Search", searchButtonDef,"questionnaireInfo/surveyQuestionnaire/child2");
	        createView("questionnaireInfo/surveyQuestionnaire/surveyQuestionInQuestionnaire", quesSelListDef,"questionnaireInfo/surveyQuestionnaire");
	    	 
	        refreshTabgroupCSS("questionnaireInfo");
	        //showTabGroup("fieldTrip");
	        onEvent("questionnaireInfo/surveyQuestionnaire/surveyQuestionInQuestionnaire","click","checkClickValidity(null)");
	        onEvent("questionnaireInfo/surveyQuestionnaire/ques_Search","click","searchQuesInCrtQuesnir()");
	   		}
		});
	}
}

/*** session ui ***/
createMainSessionPage(String typeflag){
	if(!hasView("sessionForAnswer/sssHidden/sssID")){
		removeAllViewsAndContainers("sessionForAnswer");
		executeViewTask(new ViewTask() {
    	doTask() { 
    		//sssHidden page
    		sssIdViewDef= createViewDef().createTextField().setLabel("Session label").setAttributeName("SessionID").setAttributeType("measure").setAnnotationEnabled(true).setReadOnly(true);
    		sssStartTimeViewDef=createViewDef().createTextField().setLabel("Start time").setAttributeName("SessionStartTimestamp").setAttributeType("measure").setAnnotationEnabled(true).setReadOnly(true);
    		sssEndTimeViewDef=createViewDef().createTextField().setLabel("End time").setAttributeName("SessionEndTimestamp").setAttributeType("measure").setAnnotationEnabled(true).setReadOnly(true);
    		sssNameViewDef=createViewDef().createTextField().setLabel("Session name").setAttributeName("SessionName").setAttributeType("measure").setAnnotationEnabled(true);
    		createView("sessionForAnswer/sssHidden/sssID",sssIdViewDef,"sessionForAnswer/sssHidden"); 
    		createView("sessionForAnswer/sssHidden/sssStartTimetamp",sssStartTimeViewDef,"sessionForAnswer/sssHidden");
    		createView("sessionForAnswer/sssHidden/sssEndTimestamp",sssEndTimeViewDef,"sessionForAnswer/sssHidden");
    		createView("sessionForAnswer/sssHidden/sssName",sssNameViewDef,"sessionForAnswer/sssHidden");		
    		//sssAnsBasicInfo page   
    		
    		sssLocViewDef=createViewDef().createTextField().setLabel("GPS").setAttributeName("SessionLocation").setAttributeType("measure").setAnnotationEnabled(true).setReadOnly(true);
    		sssDescViewDef=createViewDef().createTextField().setLabel("Description").setAttributeName("SessionDescription").setAttributeType("measure").setAnnotationEnabled(true);

    		createView("sessionForAnswer/sssAnsBasicInfo/sssLocation",sssLocViewDef,"sessionForAnswer/sssAnsBasicInfo");	
    		createView("sessionForAnswer/sssAnsBasicInfo/sssDescription",sssDescViewDef,"sessionForAnswer/sssAnsBasicInfo");
    		
    		if(typeflag.equals("s")){
    			sssTypeViewDef=createViewDef().createTextField().setLabel("Type").setAnnotationEnabled(false).setReadOnly(true);
    			createView("sessionForAnswer/sssAnsBasicInfo/sssType",sssTypeViewDef,"sessionForAnswer/sssAnsBasicInfo");
    		} 
    		
    		//sssPersonInfo page
	        style1 = "orientation";
	        style2 = "even";
	    	createContainer("sessionForAnswer/sssPersonInfo/sssPsSelCt", "orientation");
	    	createContainer("sessionForAnswer/sssPersonInfo/sssPsSelCtchild1", "even", "sessionForAnswer/sssPersonInfo/sssPsSelCt");
	        createContainer("sessionForAnswer/sssPersonInfo/sssPsSelCtchild2", "even", "sessionForAnswer/sssPersonInfo/sssPsSelCt");

	    	createContainer("sessionForAnswer/sssPersonInfo/sssPsBtnCt", "orientation");  	
			createContainer("sessionForAnswer/sssPersonInfo/sssPsBtnCtchild1", "even", "sessionForAnswer/sssPersonInfo/sssPsBtnCt");
	        createContainer("sessionForAnswer/sssPersonInfo/sssPsBtnCtchild2", "even", "sessionForAnswer/sssPersonInfo/sssPsBtnCt");
			
		
	        psRoleListDef=createViewDef().createDropDown().setLabel("Role in session").setAnnotationEnabled(false);
	        psNameListDef=createViewDef().createDropDown().setLabel("Person name").setAnnotationEnabled(false);

	        addPsButtonDef = createViewDef().createButton().setLabel("Add").setStyleCss("faims-blue");
	        newPsButtonDef = createViewDef().createButton().setLabel("New").setStyleCss("faims-blue");
	        
	        psListDef=createViewDef().createList().setLabel("Session person list").setAnnotationEnabled(false).setStyleCss("session-list");

	        createView("sessionForAnswer/sssPersonInfo/sssPersonRole", psRoleListDef,"sessionForAnswer/sssPersonInfo/sssPsSelCtchild1");
	        createView("sessionForAnswer/sssPersonInfo/sssPersonName", psNameListDef,"sessionForAnswer/sssPersonInfo/sssPsSelCtchild2");
	   
	        createView("sessionForAnswer/sssPersonInfo/Add_New_Person", newPsButtonDef,"sessionForAnswer/sssPersonInfo/sssPsBtnCtchild1");
			createView("sessionForAnswer/sssPersonInfo/Add_Person", addPsButtonDef,"sessionForAnswer/sssPersonInfo/sssPsBtnCtchild2");

			createView("sessionForAnswer/sssPersonInfo/sssPersonList", psListDef,"sessionForAnswer/sssPersonInfo");
			
			//sssAnsList page
			saveSssButtonDef = createViewDef().createButton().setLabel("Save Session").setStyleCss("faims-blue");
			newAnsButtonDef = createViewDef().createButton().setLabel("New Answer").setStyleCss("faims-blue");

			//ansSelListDef=createViewDef().createList().setLabel("Selectable Answers").setAnnotationEnabled(false).setStyleCss("session-file-list");
			ansListDef=createViewDef().createList().setLabel("Answers").setAnnotationEnabled(false).setStyleCss("session-file-list");

			createView("sessionForAnswer/sssAnsList/Save_Session", saveSssButtonDef,"sessionForAnswer/sssAnsList");
	        createView("sessionForAnswer/sssAnsList/New_Answer_In_Session", newAnsButtonDef,"sessionForAnswer/sssAnsList");

	        //createView("sessionForAnswer/sssAnsList/sssAnsSelList", ansSelListDef,"sessionForAnswer/sssAnsList");
	        createView("sessionForAnswer/sssAnsList/sssAnswerList", ansListDef,"sessionForAnswer/sssAnsList");

	        refreshTabgroupCSS("sessionForAnswer");

	        onEvent("sessionForAnswer/sssAnsList/New_Answer_In_Session","click","checkNewAnsTime()");
			onEvent("sessionForAnswer/sssAnsList/Save_Session","click","saveSession(\"answer\")");
			onEvent("sessionForAnswer/sssPersonInfo/Add_Person","click","addPersonToSession()");
			onEvent("sessionForAnswer/sssPersonInfo/sssPersonList","click","deletePersonInSession()");
			onEvent("sessionForAnswer/sssPersonInfo/Add_New_Person","click","createPersonRolePage()");
			onEvent("sessionForAnswer/sssPersonInfo","show","refreshPsAndRole()");
			//onEvent("sessionForAnswer/sssAnsList/sssAnsSelList","click","addItemToTargetList(candidate_files_session,\"sessionFile\",null)");
			onEvent("sessionForAnswer/sssAnsList/sssAnswerList","click","checkDelOrView()");

			}
	    
		});
	}
}

/*** Answer UI***/
createAnswerPage(){
	if(!hasView("survey/answerHidden/answerLabel")){
		removeAllViewsAndContainers("survey");
		executeViewTask(new ViewTask() {
	    doTask() {
	  		//answerHidden page
	    	hideQuesnirId=createViewDef().createTextField().setLabel("Questionnaire id").setAttributeName("AnswerQuestionnaireID").setAttributeType("measure").setReadOnly(true);
	    	hideQuesId=createViewDef().createTextField().setLabel("Question id").setAttributeName("AnswerQuestionID").setAttributeType("measure").setReadOnly(true);
	    	ansLabelViewDef = createViewDef().createTextField().setLabel("Answer label").setAttributeName("AnswerLabel").setAttributeType("measure").setAnnotationEnabled(true).setReadOnly(true);
	    	ansStartTimeViewDef=createViewDef().createTextField().setLabel("Start timestamp").setAttributeName("AnswerStartTime").setAttributeType("measure").setAnnotationEnabled(true).setReadOnly(true);
	    	ansEndTimeViewDef=createViewDef().createTextField().setLabel("End timestamp").setAttributeName("AnswerEndTime").setAttributeType("measure").setAnnotationEnabled(true).setReadOnly(true);
	    	createView("survey/answerHidden/answerQuestionnaireID",hideQuesnirId,"survey/answerHidden");
	    	createView("survey/answerHidden/answerQuestionID",hideQuesId,"survey/answerHidden");
	    	createView("survey/answerHidden/answerLabel",ansLabelViewDef,"survey/answerHidden");
	        createView("survey/answerHidden/answerStartTimestamp",ansStartTimeViewDef,"survey/answerHidden");
	        createView("survey/answerHidden/answerEndTimestamp",ansEndTimeViewDef,"survey/answerHidden");
	    	//answerBasic page
	    	
	    	ansTextViewDef=createViewDef().createTextField().setLabel("Answer text").setAttributeName("AnswerText").setAttributeType("measure").setAnnotationEnabled(true);
			createView("survey/answerBasic/answerText",ansTextViewDef,"survey/answerBasic");
	    	
	        
	        //answerFile page
			newAnsBtnDef = createViewDef().createButton().setLabel("Save Answer").setStyleCss("faims-blue");
			fileCateDef = createViewDef().createDropDown().setLabel("File Category");
			newFileBtnDef = createViewDef().createButton().setLabel("New File").setStyleCss("faims-blue");
			fileListDef=createViewDef().createList().setLabel("Answer files").setStyleCss("answerFile-list");
			createView("survey/answerFile/Finish_New_Answer",newAnsBtnDef,"survey/answerFile");
	    	createView("survey/answerFile/file_Category",fileCateDef,"survey/answerFile");
	        createView("survey/answerFile/Add_New_File",newFileBtnDef,"survey/answerFile");
	        createView("survey/answerFile/answerFileList",fileListDef,"survey/answerFile");
	        refreshTabgroupCSS("survey");
			/**Events for answer**/
			onEvent("survey/answerFile/Finish_New_Answer","click","saveNewAnswer()");
			onEvent("survey/answerFile/Add_New_File","click","newFile(\"answer\",null)");
			onEvent("survey/answerFile/answerFileList","click","viewOrDeleteFileReln()");
	   		}
			});
	}
}

/*** Sociolingustic quesnir UI ***/
createLoopQuesList(){
	if(!hasView("langIntroQues/langIntroQuesInfo/loopQues")){
	removeAllViewsAndContainers("langIntroQues");
	executeViewTask(new ViewTask() {
    doTask() {
        quesSelListDef=createViewDef().createList().setLabel("Questions").setStyleCss("questionQuestionnaire-list");
        createView("langIntroQues/langIntroQuesInfo/loopQues", quesSelListDef,"langIntroQues/langIntroQuesInfo");
        refreshTabgroupCSS("langIntroQues");
        onEvent("langIntroQues/langIntroQuesInfo/loopQues","click","checkAnsweredLangQues()");
       
   		}
		});
	}

}

createLangIntroPage(String tempQuesnirId,String tempQuesId, String typeflag, ArrayList tempLangDeg){
	fetchAll(loadAllLanguageQuery,new FetchCallback() {
		onFetch(result) {
			canLangList.clear();
			canLangList.addAll(result);
			newTempLangList.clear();
			int langCount=0;
			int langSize=canLangList.size();
			crntLangIntroId=null;
			langIntroAnsLabel=null;
			newLangInLangIntro=0;

			removeAllViewsAndContainers("langIntroAns");
			
			for(lang:canLangList){
				String langID=lang.get(0);
				String langName=lang.get(1);

				style1="orientation";
				style2="even";
				style3="large";

				executeViewTask(new ViewTask(){
					doTask(){
						createContainer("langIntroAns/langIntroAnsInfo/lang_c"+langCount, "orientation","langIntroAns/langIntroAnsInfo");
						createContainer("langIntroAns/langIntroAnsInfo/langName_c" + langCount, "even", "langIntroAns/langIntroAnsInfo/lang_c" + langCount);
						createContainer("langIntroAns/langIntroAnsInfo/degree_c" + langCount, "even", "langIntroAns/langIntroAnsInfo/lang_c" + langCount);
        				createContainer("langIntroAns/langIntroAnsInfo/quesInput_c" + langCount, "even", "langIntroAns/langIntroAnsInfo/lang_c" + langCount);

    					
  						createView("langIntroAns/langIntroAnsInfo/langc" + langCount, createViewDef().createCheckboxGroup().addChoice(langName, langID), "langIntroAns/langIntroAnsInfo/langName_c" + langCount);  
  						createView("langIntroAns/langIntroAnsInfo/dec" + langCount, createViewDef().createDropDown(), "langIntroAns/langIntroAnsInfo/degree_c" + langCount); 					
    					createView("langIntroAns/langIntroAnsInfo/quesc" + langCount, createViewDef().createButton().setLabel("Next").setStyleCss("faims-blue"), "langIntroAns/langIntroAnsInfo/quesInput_c" + langCount);
    					onEvent("langIntroAns/langIntroAnsInfo/quesc" + langCount,"click","startLoopQues(\""+langID+"\")");
        				
						if(langCount==langSize-1){
							createView("langIntroAns/langIntroAnsInfo/Finish_LangIntro", createViewDef().createButton().setLabel("Finish").setStyleCss("faims-blue"), "langIntroAns/langIntroAnsInfo");
							createView("langIntroAns/langIntroAnsInfo/new_langInIntro", createViewDef().createButton().setLabel("New Language").setStyleCss("faims-blue"), "langIntroAns/langIntroAnsInfo");	
							onEvent("langIntroAns/langIntroAnsInfo/new_langInIntro","click","reConstructLangIntro()");	
							onEvent("langIntroAns/langIntroAnsInfo/Finish_LangIntro","click","saveLangIntroQuesAnswer(null,\""+tempQuesnirId+"\",\""+tempQuesId+"\",null)");	
						}
						
					}
				});
				langCount++;
				
			}
			refreshTabgroupCSS("langIntroAns");
			tempChoice=new ArrayList();
			for(int i=1;i<=5;i++){
				tempChoice.add(new NameValuePair(i.toString(), i.toString()));
			}
			for(int i=0; i<langSize;i++){
				populateDropDown("langIntroAns/langIntroAnsInfo/dec"+i, tempChoice);
			}
			if(typeflag.equals("L")){
				showLangIntroAnsPage(tempLangDeg);
			}
		}  
	});
}

showLangIntroAnsPage(ArrayList langDegList){
	showTabGroup("langIntroAns");
	//step 4: analyze the answerText and map it to the ui

	for(lang: langDegList){
		//showWarning("lang",lang.get(0));
		for(int i=0;i<canLangList.size();i++){
			//showWarning("canlang",canLangList.get(i).get(0));
			setFieldValue("langIntroAns/langIntroAnsInfo/langc" + i, lang.get(0));
			//showWarning("langID",lang.get(0));
		}
	}
	for(int i=0;i<canLangList.size();i++){
		if(!isNull(getFieldValue("langIntroAns/langIntroAnsInfo/langc" + i))){
			String templangID=getFieldValue("langIntroAns/langIntroAnsInfo/langc" + i).get(0).getName();
			for(lang:langDegList){
				if(lang.get(0).equals(templangID)){
					setFieldValue("langIntroAns/langIntroAnsInfo/dec" + i,lang.get(1));
					//showWarning("langDeg",lang.get(1));
				}
			}
		}
	}

}
/*** Language ***/
/*** Language UI ***/
createLanguageGroupPage(){
	if(!hasView("language/languageInfo/Finish_New_Language")){
		executeViewTask(new ViewTask() {
    	doTask() {

    		langIDViewDef=createViewDef().createTextField().setAttributeName("LanguageID").setAttributeType("measure").setLabel("Language code").setAnnotationEnabled(true).setStyleCss("required");
    		langNameViewDef=createViewDef().createTextField().setAttributeName("LanguageName").setAttributeType("measure").setLabel("Language name").setAnnotationEnabled(true).setStyleCss("required");
			langotherNameViewDef=createViewDef().createTextField().setAttributeName("LanguageOtherNames").setAttributeType("measure").setLabel("Language other name(s)").setAnnotationEnabled(true);
			langTypeViewDef=createViewDef().createDropDown().setLabel("Language type").setAnnotationEnabled(false);
	        
	       	finButtonDef = createViewDef().createButton().setLabel("Save").setStyleCss("faims-blue");

	        createView("language/languageInfo/languageID", langIDViewDef,"language/languageInfo/");
	        createView("language/languageInfo/languageName", langNameViewDef,"language/languageInfo/");
	        createView("language/languageInfo/languageOtherNames", langotherNameViewDef,"language/languageInfo/");
			createView("language/languageInfo/languageType", langTypeViewDef,"language/languageInfo/");
			createView("language/languageInfo/Finish_New_Language", finButtonDef,"language/languageInfo/");

	        refreshTabgroupCSS("language");

	        onEvent("language/languageInfo/Finish_New_Language","click","saveLanguage()");
			}
	    
		});
	}
}

/*** Language variables ***/
language_id=null;
originLangProp=new ArrayList();
newLangProp=new ArrayList();
candLangProp=new ArrayList();

/*** Language queries ***/
/***usage: scocialinguistic questionnaire answer, language * search, load language list ***/ 
loadAllLanguageQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
	"WHERE latestNonDeletedAentValue.AttributeID "+
	"= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='LanguageName') "+
	"and uuid in "+
	"(select uuid from latestNonDeletedArchEntIdentifiers "+
	"where AttributeID=(select AttributeID from AttributeKey where AttributeName='LanguageID')) "+
	"GROUP BY uuid;";
/*** usage: language creation and update ***/
loadAllLangTypeQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
		"WHERE latestNonDeletedAentValue.AttributeID "+
		"= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='LangTypeName') "+
		"GROUP BY uuid;";

/*** Language events ***/

initializeLangVar(){
	language_id=null;
	candLangProp.clear();
	originLangProp.clear();
	newLangProp.clear();
}

newLanguage(){
	initializeLangVar();
	createLanguageGroupPage();
	newTabGroup("language");
	fetchAll(loadAllLangTypeQuery, new FetchCallback() {
		onFetch(result) {
			candLangProp.clear();
			candLangProp.addAll(result);
			populateDropDown("language/languageInfo/languageType", candLangProp);

		}
		onError(message) {
			showToast(message);
		}
	}); 
}

loadLanguage(){
	initializeLangVar();
	fetchAll(loadAllLanguageQuery, new FetchCallback() {
        onFetch(result) {
            populateList("control/language_control/languageList", result);
        }
        onError(message) {
            showToast(message);
        }
    });
}

loadLanguageInfo(){
	createLanguageGroupPage();
	language_id=getListItemValue();
	if(isNull(language_id)){
		showToast("No Language selected");
		return;
	}
	showTabGroup("language", language_id, new FetchCallback() {
        onFetch(result) {
            language=result;

            loadLangPropQuery="select lProp.measure from latestNonDeletedAentValue as lProp "+
            "where lProp.AttributeID=(select AttributeID from AttributeKey where AttributeName='LanguageTypeID') "+
            "and lProp.uuid='"+language_id+"'";
           	
           	fetchOne(loadLangPropQuery,new FetchCallback() {
				onFetch(propResult) {
					if(!isNull(propResult)){
						String tempProp=propResult.get(0);
						originLangProp.clear();
						originLangProp.addAll(propResult);
						newLangProp.clear();    

						fetchAll(loadAllLangTypeQuery, new FetchCallback() {
							onFetch(result) {
								candLangProp.clear();
								candLangProp.addAll(result);

								tempPropList=new ArrayList();
								tempPropList.addAll(result);

								for(int i=0;i<tempPropList.size();i++){
									if(tempPropList.get(i).get(0).equals(tempProp)){
										Collections.swap(tempPropList,0,i);
										break;
									}
								}
								populateDropDown("language/languageInfo/languageType", tempPropList);

							}
							onError(message) {
    							showToast(message);
  							}
						}); 
		        	}
		        	else{
						showWarning("Out-of-date data","The property of the language is not using anymore");
					}
   				 }
		   		onError(message) {
	            	showToast(message);
	        	}
			});
       		showToast("Loaded language"+language.getId());            
       	}
        onError(message) {
            showToast(message);
        }
    });
}


saveLanguage(){

	if(isNull(getFieldValue("language/languageInfo/languageName"))){
		showWarning("Validation Error", "You must fill in the Language Name before you can continue");
        return;
	}
	if(isNull(getFieldValue("language/languageInfo/languageID"))){
		showWarning("Validation Error", "You must fill in the Language ID before you can continue");
        return;
	}
	tempLangLabel=getFieldValue("language/languageInfo/languageID");
	langDuplicateQuery=null;
	if(language_id==null){
		langDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
				"where AttributeID=(select AttributeID from AttributeKey where AttributeName='LanguageID') "+
				"and measure ='"+tempLangLabel+"' or measure like '"+tempLangLabel+"(%)'";
	}
	
	else{
		langDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
				"where AttributeID=(select AttributeID from AttributeKey where AttributeName='LanguageID') "+
				"and uuid<>'"+language_id+"' "+
				"and measure ='"+tempLangLabel+"' or measure like '"+tempLangLabel+"(%)'";
	}

    fetchAll(langDuplicateQuery,new FetchCallback() {
		onFetch(result) {
			if(!isNull(result)){
				tempLangLabel=nonDupLabelGen(result,tempLangLabel,"Language","LanguageID");
				setFieldValue("language/languageInfo/languageID",tempLangLabel);
			}

			crntLangTypeId=getFieldValue("language/languageInfo/languageType");
			saveTabGroup("language", language_id, null, null, new SaveCallback() {
			    onSave(uuid, newRecord) {
			      language_id = uuid;
			      if (newRecord) {
			      	attributes=createAttributeList();
			    	attributes.add(createEntityAttribute("LanguageTypeID", null, null, crntLangTypeId, null));
			    	saveArchEnt(language_id, "Language", null, attributes);
					cancelTabGroup("language",true);
			        showToast("New record created");
			      }
				  else{
					showToast("Record changed");
				  }
			    }
			    onError(message) {
			        showWarning("error",message);
			    }  
			});
			if((language_id!=null) && (!isNull(originLangProp))){
				newLangProp.add(crntLangTypeId);
				Hashtable langPropChange=listChange(newLangProp,originLangProp);
				if(langPropChange.containsKey("ADD")){
					attributes=createAttributeList();
			    	attributes.add(createEntityAttribute("LanguageTypeID", null, null, crntLangTypeId, null));
			    	saveArchEnt(language_id, "Language", null, attributes);
			    	showToast("language type changed");
				}
			}
		}
	});
	
}

/*** FieldTrip ***/
/*** FieldTrip UI ***/
createFieldTripInfoPage(String typeflag){
	if(!hasView("fieldTrip/fieldTripBasicInfo/fieldTripID")){
		removeAllViewsAndContainers("fieldTrip");
		executeViewTask(new ViewTask() {
	    doTask() {
	    	
	    	//basic info page
	    	idTextViewDef = createViewDef().createTextField().setLabel("FieldTrip label").setAttributeName("FieldTripID").setAttributeType("measure").
	    	setAnnotationEnabled(true).setReadOnly(true);
	    	nameTextViewDef=createViewDef().createTextField().setLabel("FieldTrip name").setAttributeName("FieldTripName").setAttributeType("measure").
	    	setAnnotationEnabled(true);
	    	descTextViewDef=createViewDef().createTextField().setLabel("Description").setAttributeName("FieldTripDescription").setAttributeType("measure").
	    	setAnnotationEnabled(true);
	    	startDateDef = createViewDef().createDatePicker().setLabel("Start Date");
	    	endDateDef = createViewDef().createDatePicker().setLabel("End Date");
	    	createView("fieldTrip/fieldTripBasicInfo/fieldTripID", idTextViewDef,"fieldTrip/fieldTripBasicInfo");
	        createView("fieldTrip/fieldTripBasicInfo/fieldTripName", nameTextViewDef,"fieldTrip/fieldTripBasicInfo");
	        createView("fieldTrip/fieldTripBasicInfo/fieldTripDesc", descTextViewDef,"fieldTrip/fieldTripBasicInfo");
	        createView("fieldTrip/fieldTripBasicInfo/fieldTripStartDatePicker", startDateDef,"fieldTrip/fieldTripBasicInfo");
	        createView("fieldTrip/fieldTripBasicInfo/fieldTripEndDatePicker", endDateDef,"fieldTrip/fieldTripBasicInfo");

	    	//session page
	        style1 = "orientation";
	        style2 = "even";
	    	createContainer("fieldTrip/fieldTripSession/field_session_ct", "orientation");
	    	createContainer("fieldTrip/fieldTripSession/child1", "even", "fieldTrip/fieldTripSession/field_session_ct");
	        createContainer("fieldTrip/fieldTripSession/child2", "even", "fieldTrip/fieldTripSession/field_session_ct");
	        
	        ftFileListDef=createViewDef().createList().setLabel("Session").setStyleCss("session-file-list");
	        ftSelFileListDef=createViewDef().createList().setLabel("Select session").setStyleCss("session-file-list");
	        ftSaveBtnDef=createViewDef().createButton().setLabel("Save").setStyleCss("faims-blue");
	        createView("fieldTrip/fieldTripSession/fieldTripFileList", ftFileListDef,"fieldTrip/fieldTripSession/child1");
	        createView("fieldTrip/fieldTripSession/fieldTripFileSelectionList", ftSelFileListDef,"fieldTrip/fieldTripSession/child2");
	        createView("fieldTrip/fieldTripSession/Finish_New_FieldTrip", ftSaveBtnDef,"fieldTrip/fieldTripSession");
	        refreshTabgroupCSS("fieldTrip");

	        onEvent("fieldTrip/fieldTripSession/fieldTripFileSelectionList","click","addItemToTargetList(candidate_session_fieldTrip,\"fieldTripSession\",null)");
	        //No delete function for client
	        onEvent("fieldTrip/fieldTripSession/fieldTripFileList","click","deleteItemFromTargetList(selected_session_fieldTrip,\"fieldTripSession\",null)");
	        onEvent("fieldTrip/fieldTripSession/Finish_New_FieldTrip","click","saveFieldTrip()");
	        //fieldTripBasicInfoHidden page
	        startdateViewDef = createViewDef().createTextField().setLabel("startdate").setAttributeName("FieldTripStartTime").setAttributeType("measure");
	        enddateViewDef = createViewDef().createTextField().setLabel("enddate").setAttributeName("FieldTripEndTime").setAttributeType("measure");
	        createView("fieldTrip/fieldTripBasicInfoHidden/fieldTripStartTimetamp", startdateViewDef,"fieldTrip/fieldTripBasicInfoHidden");
	        createView("fieldTrip/fieldTripBasicInfoHidden/fieldTripEndTimestamp", enddateViewDef,"fieldTrip/fieldTripBasicInfoHidden");
	        
	   		}
			});

		if(typeflag.equals("new")){
			startNewFieldTrip();
		}

	}
	else{
		//showTabGroup("fieldTrip");
		if(typeflag.equals("new")){
			startNewFieldTrip();
		}
	}
}

fieldTrip_id=null;
selected_session_fieldTrip=new ArrayList();
candidate_session_fieldTrip=new ArrayList();
original_session_fieldTrip=new ArrayList();
fieldTripInfoOrigin=new ArrayList();
fieldTripInfoNew=new ArrayList();

startNewFieldTrip(){
	fieldTrip_id=null;
	selected_session_fieldTrip.clear();
	candidate_session_fieldTrip.clear();
	original_session_fieldTrip.clear();
	fieldTripInfoOrigin.clear();
	fieldTripInfoNew.clear();
	currentDateTimeArray=new ArrayList();
	
	newTabGroup("fieldTrip");
	
	fetchAll(loadAllSessionIDQuery, new FetchCallback() {
        onFetch(result) {
        	candidate_session_fieldTrip.addAll(result);
            populateList("fieldTrip/fieldTripSession/fieldTripFileSelectionList", candidate_session_fieldTrip);
            populateList("fieldTrip/fieldTripSession/fieldTripFileList", selected_session_fieldTrip);
        }

        onError(message) {
            showToast(message);
        }
    });
}

/*** Person ***/ 
/*** Person UI ***/
createPersonRolePage(){
	if(!hasView("personRoleSelect/personRoleSelectInfo/SearchRole")){
		removeAllViewsAndContainers("personRoleSelect");
	
		executeViewTask(new ViewTask() {
    	doTask() { 	
	        style1 = "orientation";
	        style2 = "even";
	    	createContainer("personRoleSelect/personRoleSelectInfo/psRoleSelCtn", "orientation");
	    	createContainer("personRoleSelect/personRoleSelectInfo/child1", "even", "personRoleSelect/personRoleSelectInfo/psRoleSelCtn");
	        createContainer("personRoleSelect/personRoleSelectInfo/child2", "even", "personRoleSelect/personRoleSelectInfo/psRoleSelCtn");
		
			searchTextViewDef = createViewDef().createTextField().setLabel("Keyword");
			searchButtonDef = createViewDef().createButton().setLabel("Search").setStyleCss("faims-blue");
			psRoleListDef=createViewDef().createDropDown().setLabel("Role List");
			newPsBtnDef=createViewDef().createButton().setLabel("New Person").setStyleCss("faims-blue");
			createView("personRoleSelect/personRoleSelectInfo/keywordOfRole", searchTextViewDef,"personRoleSelect/personRoleSelectInfo/child1");
			createView("personRoleSelect/personRoleSelectInfo/SearchRole", searchButtonDef,"personRoleSelect/personRoleSelectInfo/child2");
			createView("personRoleSelect/personRoleSelectInfo/PersonRoleSelectList", psRoleListDef,"personRoleSelect/personRoleSelectInfo");
			createView("personRoleSelect/personRoleSelectInfo/CreateNewPerson", newPsBtnDef,"personRoleSelect/personRoleSelectInfo");
	        refreshTabgroupCSS("personRoleSelect");
	        onEvent("personRoleSelect/personRoleSelectInfo","show","loadRoles(\"newPerson\",\"personRoleSelect/personRoleSelectInfo/PersonRoleSelectList\")");
			onEvent("personRoleSelect/personRoleSelectInfo/CreateNewPerson","click","newPersonByRole()");
	        }
		});

	}
	showTabGroup("personRoleSelect");
}

createPersonPage(){
	if(!hasView("person/personInfoHide/personID")){
		removeAllViewsAndContainers("person");
	
		executeViewTask(new ViewTask() {
    	doTask() { 	

    		//personInfoHide page
    		psRoleIdViewDef = createViewDef().createTextField().setLabel("psRole").setAttributeName("PersonRole").setAttributeType("measure");
    		createView("person/personInfoHide/personRoleId", psRoleIdViewDef,"person/personInfoHide");
    		
    		//personInfo page
    		personIDViewDef= createViewDef().createTextField().setLabel("Person label").setAttributeName("PersonID").setAttributeType("measure").setAnnotationEnabled(true).setReadOnly(true);
    		
    		personNameViewDef=createViewDef().createTextField().setLabel("Person name").setAttributeName("PersonName").setAttributeType("measure").setAnnotationEnabled(true).setStyleCss("required");
  			
    		personOtherNamesViewDef=createViewDef().createTextField().setLabel("Person Other Names").setAttributeName("PersonOtherNames").setAttributeType("measure").setAnnotationEnabled(true);
   
    		personDOBViewDef=createViewDef().createTextField().setLabel("Person DOB").setAttributeName("PersonDOB").setAttributeType("measure").setAnnotationEnabled(true);
    	
    		personRoleViewDef=createViewDef().createTextField().setLabel("Person general role").setReadOnly(true);
   		
   			personPhotoViewDef=createViewDef().createCameraGallery(true).setAttributeName("PersonPhoto").setAttributeType("measure").setAnnotationEnabled(true);
   		
   			takePhotoViewDef=createViewDef().createButton().setLabel("Take Photo").setStyleCss("faims-blue");
    
    		psPhotoDescViewDef=createViewDef().createTextField().setLabel("Photo decription").setAttributeName("PersonPhotoDescription").setAttributeType("measure").setAnnotationEnabled(true);

    		takeIntroQuesnirViewDef=createViewDef().createButton().setLabel("Intro Questionnaire").setStyleCss("faims-blue");

    		introDescViewDef=createViewDef().createTextField().setLabel("Intro quesnir description").setAttributeName("PersonIntroQuenirDesp").setAttributeType("measure").setAnnotationEnabled(true);

	        finishNewPsViewDef=createViewDef().createButton().setLabel("Save Person").setStyleCss("faims-blue");

		
			createView("person/personInfoHide/personID", personIDViewDef,"person/personInfoHide");
			createView("person/personInfoHide/personRoleName", personRoleViewDef,"person/personInfoHide");

			createView("person/personInfo/personName", personNameViewDef,"person/personInfo");
			createView("person/personInfo/personOtherNames", personOtherNamesViewDef,"person/personInfo");
			createView("person/personInfo/personDOB", personDOBViewDef,"person/personInfo");
			createView("person/personInfo/personPhoto", personPhotoViewDef,"person/personInfo");
			createView("person/personInfo/Take_Photo", takePhotoViewDef,"person/personInfo");
			createView("person/personInfo/personPhotoDesc", psPhotoDescViewDef,"person/personInfo");
			createView("person/personInfo/Take_Intro_Quesnir", takeIntroQuesnirViewDef,"person/personInfo");
			createView("person/personInfo/personIntroDesc", introDescViewDef,"person/personInfo");
			createView("person/personInfo/Finish_New_Person", finishNewPsViewDef,"person/personInfo");

	        refreshTabgroupCSS("person");

	        onEvent("person/personInfo/Finish_New_Person","click","saveNewPerson(\"save\")");
			onEvent("person/personInfo/Take_Intro_Quesnir","click","checkPersonIntroSession()");
			onEvent("person/personInfo/Take_Photo","click","attachPictureTo(\"person/personInfo/personPhoto\")");
	        }
		});

	}
}

/*** Person Intro Session ***/
/*** Person Intro Session UI ***/
createPsInTroSssPage(){
	if(!hasView("introSssList/introSssInfo/intrSessionList")){
		removeAllViewsAndContainers("introSssList");
		executeViewTask(new ViewTask() {
    	doTask() { 	
   			newIntroSssViewDef=createViewDef().createButton().setLabel("New Session").setStyleCss("faims-blue");
    
    		psIntroSssListDef=createViewDef().createList().setLabel("Session").setStyleCss("survey-list");

			createView("introSssList/introSssInfo/new_intro_sss", newIntroSssViewDef,"introSssList/introSssInfo");
			createView("introSssList/introSssInfo/intrSessionList", psIntroSssListDef,"introSssList/introSssInfo");

	        refreshTabgroupCSS("introSssList");
	        }
		});

	}
}

/*** Commom methods ***/
getNumSuffix(String inputString){
	String returnSuffix=null;
	Pattern numberPat = Pattern.compile("\\(\\d+\\)");
	Matcher numMatcher = numberPat.matcher(inputString);
	Boolean suffixFind=numMatcher.find();
	if(suffixFind){
		String [] patternSplit=inputString.split("\\(");
		Pattern numberPat2 = Pattern.compile("\\d+\\)");
		Matcher numMatcher2 = numberPat2.matcher(patternSplit[patternSplit.length-1]);
		if(numMatcher2.find()){
			returnSuffix="("+patternSplit[patternSplit.length-1];
		}
	}
	return returnSuffix;
}

//this function saves updated label for affected data
nonDupLabelGen(ArrayList dupList, String tempLbl, String tableName, String attriName){
	String rtnLbl=tempLbl;
	int sizeOfDup=0;
	Pattern numberPat = Pattern.compile("\\(\\d+\\)");
	sizeOfDup=dupList.size();
	//showWarning("size",sizeOfDup.toString());

	if(sizeOfDup==0){
		return rtnLbl;
	}

	if(sizeOfDup==1){
		duplicateOldLabel=dupList.get(0).get(1);
		Matcher numMatcher = numberPat.matcher(duplicateOldLabel);

		String newLabel=null;
		if(numMatcher.find()){
			suffix=getNumSuffix(duplicateOldLabel);
			if(suffix!=null){
				if(!suffix.equals("(1)"))
					{
						int sLen=suffix.length();
						newLabel=duplicateOldLabel.substring(0,duplicateOldLabel.length()-sLen)+"(1)";
					}
			}
			else{
				newLabel=duplicateOldLabel+"(1)";
			}
		}
		else{
			newLabel=duplicateOldLabel+"(1)";
			//showWarning("newLabel",newLabel);
		}
		if(newLabel!=null){
			attributes = createAttributeList();
			attributes.add(createEntityAttribute(attriName, null, null, newLabel, null));
			entityId=dupList.get(0).get(0);
			saveArchEnt(entityId, tableName, null, attributes);
			//showWarning("attriName",attriName+tableName);
		}
		rtnLbl=rtnLbl+"(2)";
	}

	else{
		int maxSuffix=0;
		for(temp: dupList){
			tempLabel=temp.get(1);
			Matcher numMatcher = numberPat.matcher(tempLabel);
			if(numMatcher.find()){
				tempSuffix=getNumSuffix(tempLabel);
				tempSuffixStr=null;
					if(tempSuffix!=null){
						int tempSuffixNum=Integer.parseInt(tempSuffix.replaceAll("[^0-9]", ""));
						if(tempSuffixNum>maxSuffix){
							maxSuffix=tempSuffixNum;
						}
				}
			}
		}
		maxSuffix=maxSuffix+1;
		rtnLbl=rtnLbl+"("+maxSuffix+")";
	}
	//showWarning("rtnLbl",rtnLbl);
	return rtnLbl;
}
/*
** Basic arraylist difference checking 
** targetList: the updated list
** sourceList: the old list
*/

listChange(ArrayList targetList,ArrayList sourceList){
	Hashtable listChanges=new Hashtable();
	target_list=new ArrayList();
	source_list=new ArrayList();
	target_diff_on_source=new ArrayList();
	source_diff_on_target=new ArrayList();

	target_list.addAll(targetList);
	source_list.addAll(sourceList);

	target_list.removeAll(source_list);
	target_diff_on_source.addAll(target_list);//target - source

	target_list.clear();
	target_list.addAll(targetList);
	source_list.removeAll(target_list);
	source_diff_on_target.addAll(source_list);//source - target

	if((target_diff_on_source.isEmpty()) && (source_diff_on_target.isEmpty())){
		listChanges.put("EQUAL",targetList);//here can not put ("EQUAL",null)
	}
	else if((!target_diff_on_source.isEmpty()) && (source_diff_on_target.isEmpty())){
		listChanges.put("PUREADD",target_diff_on_source);
	}

	else if((target_diff_on_source.isEmpty()) && (!source_diff_on_target.isEmpty())){
		listChanges.put("PUREDELETE",source_diff_on_target);
	}

	else {
		listChanges.put("ADD",target_diff_on_source);
		listChanges.put("DELETE",source_diff_on_target);
	}
	return listChanges;
}