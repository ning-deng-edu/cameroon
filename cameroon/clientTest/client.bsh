import java.util.concurrent.Callable;
import java.util.*;
/*** 'Editable' - you can edit the code below based on the needs ***/
User user; // don't touch
String userid;

/***query***/
loadAllQuestionnaireQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
	"WHERE latestNonDeletedAentValue.AttributeID "+
	"IN (SELECT AttributeID FROM AttributeKey WHERE AttributeName='QuestionnaireName') "+
	"GROUP BY uuid;";

loadAllPersonQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
	"WHERE latestNonDeletedAentValue.AttributeID "+
	"IN (SELECT AttributeID FROM AttributeKey WHERE AttributeName='PersonName') "+
	"GROUP BY uuid;";
/***Enable data and file syncing***/
addActionBarItem("sync", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "Disable Sync";
    }
    actionOn() {
        setSyncEnabled(false);
        setFileSyncEnabled(false);
        showToast("Sync disabled.");
    }
    isActionOff() {
        isSyncEnabled();
    }
    actionOffLabel() {
        "Enable Sync";
    }
    actionOff() {
        setSyncEnabled(true);
        setFileSyncEnabled(true);
        showToast("Sync enabled.");
    }
});
/***Save relationships among entities***/
saveEntitiesToRel(String type, String entity1, String entity2) {
    if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(rel_id, newRecord) {
            addReln(entity1, rel_id, null);
            addReln(entity2, rel_id, null);
        }
    });
}

onEvent("user/usertab/users", "click", "login()");

loadUsers() {
    fetchAll("select userid, fname || ' ' || lname from user where userdeleted is null", new FetchCallback() {
        onFetch(result) {
            populateList("user/usertab/users", result);
        }
    });
}

loadUsers();

String username = "";
String device = "";

login() {
    fetchOne("select userid,fname,lname,email from user where userid='" + getListItemValue() + "';", new FetchCallback() {
        onFetch(result) {
            user = new User(result.get(0),result.get(1),result.get(2),result.get(3));
            setUser(user);
            username = result.get(1) + " " + result.get(2);
            showTabGroup("control");
        }
    });
}

onEvent("control/survey_control/New_Survey","click","showQuestionnaireList()");
//onEvent("questionnaireListAll","show","loadAllQuesnir()");
onEvent("questionnaireListAll/questionnaireListInfo/questionnaireListInDB","click","loadQuesnirInfo()");


survey_id=null;
current_quesnir_id=null;
current_question_id=null;

showQuestionnaireList(){
	newTabGroup("questionnaireListAll");
	onEvent("questionnaireListAll","show","loadAllQuesnir()");
	survey_id=null;
	current_quesnir_id=null;
	current_question_id=null;
}

loadAllQuesnir(){
	fetchAll(
		loadAllQuestionnaireQuery,
		new FetchCallback() {
        	onFetch(result) {
				if (!isNull(result)) {
					populateList("questionnaireListAll/questionnaireListInfo/questionnaireListInDB", result);	
				}	
				else{
			    	showWarning("No questionnaire","No questionnaire is available, please contact the admin");
					return;
				}
       	 }

        	onError(message) {
            	showToast(message);
        	}
    	});
}

loadQuesnirInfo(){
	current_quesnir_id=getListItemValue();
	ques_in_current_quesnir=new ArrayList();
	if(isNull(current_quesnir_id)){
		showWarning("No questionnaire selected","No questionnaire is selected, please select a questionnaire");
		return;
	}
	if(current_quesnir_id.equals("placeholder")){
		showWarning("No questionnaire available","No questionnaire available, please contact the admin");
		return;
	}

		questionnaire_question_query="SELECT uuid, measure "+
		"from latestNonDeletedAentValue "+
		"where latestNonDeletedAentValue.AttributeID in "+
		"(select AttributeID from AttributeKey where AttributeName='QuestionContent') "+
		"and uuid in "+
		"(select AEntReln.uuid from AEntReln where AEntReln.uuid<>"+current_quesnir_id+" "+
		"and AEntReln.RelationshipID IN "+
		"(select  relationshipID from AEntReln aer "+
		"inner join "+
		"(select max(AEntRelnTimestamp) as maxtime from AEntReln where AEntReln.uuid ="+current_quesnir_id+") tm "+
		"on aer.AentRelnTimestamp=tm.maxtime group by relationshipID)) "+
		"group by uuid;";
		
		fetchAll(questionnaire_question_query,
				new FetchCallback() {
					onFetch(result) {
						if (!isNull(result)) {		
						ques_in_current_quesnir.addAll(result);
						}
						else{
							showWarning("No question in this questionnaire","This questionnaire is not ready yet");
							return;
						}
					}
			       
				onError(message) {
					showToast(message);
				}
				});
				
		showTabGroup("questionnaireInfo", current_quesnir_id, new FetchCallback() {
        	onFetch(result) {	
        		populateList("questionnaireInfo/surveyQuestionnaire/surveyQuestionInQuestionnaire", ques_in_current_quesnir);
            	showToast("Loaded questionnaire"+result.getId());   	
        	}
        	onError(message) {
            showToast(message);
        	}
   	 });
}

onEvent("questionnaireInfo/surveyQuestionnaire/surveyQuestionInQuestionnaire","click","startNewAnswer()");


current_answer_interviewer=new ArrayList();
selected_answer_interviewer=new ArrayList();
candidate_answer_interviewer=new ArrayList();

current_answer_interviewee=new ArrayList();
selected_answer_interviewee=new ArrayList();
candidate_answer_interviewee=new ArrayList();
categoryTypes=new ArrayList();
categoryTypes.add(new NameValuePair("{Audio}", "Audio"));
categoryTypes.add(new NameValuePair("{Video}", "Video"));
categoryTypes.add(new NameValuePair("{Photo}", "Photo"));
categoryTypes.add(new NameValuePair("{Other}", "Other"));

startNewAnswer(){
	current_question_id=getListItemValue();
	String current_start_time=getCurrentTime();
	
	
	current_answer_interviewer.clear();
	selected_answer_interviewer.clear();
	candidate_answer_interviewer.clear();

	current_answer_interviewee.clear();
	selected_answer_interviewee.clear();
	candidate_answer_interviewee.clear();

	
	newTabGroup("survey");
	setFieldValue("survey/answer/answerQuestionnaireID", current_quesnir_id);
	setFieldValue("survey/answer/answerQuestionID", current_question_id);
	setFieldValue("survey/answer/answerStartTimestamp", current_start_time);
	populateDropDown("survey/answer/file_Category",categoryTypes);
	
	fetchAll(loadAllPersonQuery,
				new FetchCallback() {
					onFetch(result) {
						if (!isNull(result)) {	
							//candidate_answer_interviewer.clear();	
							candidate_answer_interviewer.addAll(result);
							//candidate_answer_interviewee.clear();
							candidate_answer_interviewee.addAll(result);
							populateList("survey/answer/answerInterviewerSelectionList",candidate_answer_interviewer);
							populateList("survey/answer/answerIntervieweeSelectionList",candidate_answer_interviewee);
						}
						else{
							showWarning("No person info available","No person info available\n"+"Please add person info first");
						}
					}
			       
				onError(message) {
					showToast(message);
				}
			});
}

onEvent("survey/answer/answerInterviewerSelectionList","click","addItemToTargetList(candidate_answer_interviewer,\"interviewer\")");
onEvent("survey/answer/answerIntervieweeSelectionList","click","addItemToTargetList(candidate_answer_interviewee,\"interviewee\")");

addItemToTargetList(ArrayList sourceList, String type_flag){	
	itemId=getListItemValue();	
	int idx_item=-1;
		
	if(isNull(itemId)){
		showToast("No Item selected");
		return;
	}
	if(itemId.equals("placeholder")){
		showToast("Invalid item");
		return;
	}
	else{	
		for (int i=0; i<sourceList.size();i++){
			if (sourceList.get(i).get(0).equals(itemId)) {
				idx_item=i;
				break;
			}
		}
		
		if (idx_item>=0) {
			switch (type_flag){
			case "interviewer":		
					selected_answer_interviewer.add(sourceList.get(idx_item));
					candidate_answer_interviewer.remove(idx_item);
					populateList("survey/answer/answerInterviewerList", selected_answer_interviewer);
					populateList("survey/answer/answerInterviewerSelectionList", candidate_answer_interviewer);
					break;
			case "interviewee":
					selected_answer_interviewee.add(sourceList.get(idx_item));
					candidate_answer_interviewee.remove(idx_item);
					populateList("survey/answer/answerIntervieweeList", selected_answer_interviewee);
					populateList("survey/answer/answerIntervieweeSelectionList", candidate_answer_interviewee);
					break;
			
			}
		}
		else{
			showWarning("Item Not Found","Oops! Can't find this item, it could be not valid anymore, please contact the Admin");
		}
		
	}
}
onEvent("survey/answer/answerInterviewerList","click","deleteItemFromTargetList(selected_answer_interviewer,\"interviewer\")");
onEvent("survey/answer/answerIntervieweeList","click","deleteItemFromTargetList(selected_answer_interviewee,\"interviewee\")");

deleteItemFromTargetList(ArrayList targetList, String type_flag){
	deleteItemId=getListItemValue();
	int idx_delete=-1;
	if(isNull(deleteItemId)){
		showToast("No Item selected");
		return;
	}
	if(deleteItemId.equals("placeholder")){
		showToast("Invalid item");
		return;
	}
	else{	
		for (int i=0; i<targetList.size();i++){
			if (targetList.get(i).get(0).equals(deleteItemId)) {
				idx_delete=i;
				break;
			}
		}
		
		if (idx_delete>=0) {
			switch (type_flag){
			case "interviewer":		
				candidate_answer_interviewer.add(targetList.get(idx_delete));
				selected_answer_interviewer.remove(idx_delete);
				populateList("survey/answer/answerInterviewerList", selected_answer_interviewer);
				populateList("survey/answer/answerInterviewerSelectionList", candidate_answer_interviewer);
				break;
			case "interviewee":
				candidate_answer_interviewee.add(targetList.get(idx_delete));
				selected_answer_interviewee.remove(idx_delete);
				populateList("survey/answer/answerIntervieweeList", selected_answer_interviewee);
				populateList("survey/answer/answerIntervieweeSelectionList", candidate_answer_interviewee);
				break;
			
			}
		}
		else{
			showWarning("Item Not Found","Oops! Can't find this item, it could be not valid anymore, please contact the Admin");
		}
		
	}
}

onEvent("survey/answer/Add_New_File","click","newFileFromQuestion()");
newFileFromQuestion(){
	String fileCategory=getFieldValue("survey/answer/file_Category");
	switch (fileCategory){
	case "Audio":		
		newTabGroup("audioFile");
		setFieldValue("audioFile/audioFileInfo/audioFileCreator",username);
		setFieldValue("audioFile/audioFileInfo/audioFileType","Audio");
		break;
	case "Video":
		newTabGroup("videoFile");
		setFieldValue("videoFile/videoFileInfo/videoFileCreator",username);
		setFieldValue("videoFile/videoFileInfo/videoFileType","Video");
		break;
	case "Photo":
		newTabGroup("photoFile");
		setFieldValue("photoFile/photoFileInfo/photoFileCreator",username);
		setFieldValue("photoFile/photoFileInfo/photoFileType","Photo");
		break;
	case "Other":
		newTabGroup("sketchFile");
		setFieldValue("sketchFile/sketchFileInfo/sketchFileCreator",username);
		setFieldValue("sketchFile/sketchFileInfo/sketchFileType","Sketch");
		break;
	}
}
/*******Person********/
onEvent("control/user_control/New_User","click","newPerson()");
onEvent("control/user_control","show","loadPerson()");
onEvent("control/user_control/userList","click","loadPersonInfo()");
onEvent("person/personInfo/Finish_New_Person","click","saveNewPerson()");
onEvent("person/personInfo/Take_Photo","click","attachPictureTo(\"person/personInfo/personPhoto\")");

person_id=null;
newPerson(){
	person_id=null;
	newTabGroup("person");
	onEvent("person", "show", "showTab(\"person/personInfo\");");  
}

loadPerson(){
	person_id=null;
	fetchAll("SELECT uuid, group_concat(coalesce(measure, ''),' - ') as response " +
    "FROM (select * from latestNonDeletedArchentIdentifiers) " +
    "WHERE aenttypename = 'Person' " +
    "GROUP BY uuid " +
    "order by response;", new FetchCallback() {
        onFetch(result) {
            populateList("control/user_control/userList", result);
        }

        onError(message) {
            showToast(message);
        }
    });
}

loadPersonInfo(){
person_id=getListItemValue();
	if(isNull(person_id)){
		showToast("No Person selected");
		return;
	}
	showTabGroup("person", person_id, new FetchCallback() {
        onFetch(result) {
            person=result;
            showToast("Loaded person"+person.getId());            
        }
        onError(message) {
            showToast(message);
        }
    });
}

saveNewPerson(){

	if(isNull(getFieldValue("person/personInfo/personName"))){
		showWarning("Validation Error", "You must fill in the Person Name before you can continue");
        return;
	}
	setFieldValue("person/personInfo/personID", getFieldValue("person/personInfo/personName")+getCurrentTime());
	
	saveTabGroup("person", person_id, null, null, new SaveCallback() {
    onSave(uuid, newRecord) {
      person_id = uuid;
      if (newRecord) {
		newPerson();
		//person_id=null;
        showToast("New record created");
      }
	  else{
		showToast("Record changed");	
	  }
	  
    }
    onError(message) {
        showWarning("error",message);
    }  
  });
}


/*** Language ***/
onEvent("control/language_control/New_Language","click","newLanguage()");
onEvent("language/languageInfo/Finish_New_Language","click","saveNewLanguage()");
onEvent("control/language_control","show","loadLanguage()");
onEvent("control/language_control/languageList","click","loadLanguageInfo()");
language_id=null;
newLanguage(){
	language_id=null;
	newTabGroup("language");
	onEvent("language", "show", "showTab(\"language/languageInfo\");");  
}
saveNewLanguage(){

	if(isNull(getFieldValue("language/languageInfo/languageName"))){
		showWarning("Validation Error", "You must fill in the Language Name before you can continue");
        return;
	}
	if(isNull(getFieldValue("language/languageInfo/languageID"))){
		showWarning("Validation Error", "You must fill in the Language ID before you can continue");
        return;
	}
	//setFieldValue("person/personInfo/personID", getFieldValue("person/personInfo/personName")+getCurrentTime());
	
	saveTabGroup("language", language_id, null, null, new SaveCallback() {
    onSave(uuid, newRecord) {
      language_id = uuid;
      if (newRecord) {
		newLanguage();
        showToast("New record created");
      }
	  else{
		//language_id=null;
		showToast("Record changed");
	  }
    }
    onError(message) {
        showWarning("error",message);
    }  
  });
}

loadLanguage(){
	language_id=null;
	//"SELECT uuid, group_concat(coalesce(measure, ''),' - ') as response " +
    //"FROM (select * from latestNonDeletedArchentIdentifiers) " +
    //"WHERE aenttypename = 'Language' " +
    //"GROUP BY uuid " +
    //"order by response;"
	fetchAll(loadAllLanguageQuery, new FetchCallback() {
        onFetch(result) {
            populateList("control/language_control/languageList", result);
        }

        onError(message) {
            showToast(message);
        }
    });
}
loadLanguageInfo(){
language_id=getListItemValue();
	if(isNull(language_id)){
		showToast("No Language selected");
		return;
	}
	showTabGroup("language", language_id, new FetchCallback() {
        onFetch(result) {
            language=result;
            showToast("Loaded language"+language.getId());            
        }
        onError(message) {
            showToast(message);
        }
    });
}