import java.util.concurrent.Callable;
import java.util.*;
/*** 'Editable' - you can edit the code below based on the needs ***/
User user; // don't touch
String userid;

addActionBarItem("sync", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "Disable Sync";
    }
    actionOn() {
        setSyncEnabled(false);
        setFileSyncEnabled(false);
        showToast("Sync disabled.");
    }
    isActionOff() {
        isSyncEnabled();
    }
    actionOffLabel() {
        "Enable Sync";
    }
    actionOff() {
        setSyncEnabled(true);
        setFileSyncEnabled(true);
        showToast("Sync enabled.");
    }
});
/*** USER ***/
onEvent("user/usertab/users", "click", "login()");

loadUsers() {
    fetchAll("select userid, fname || ' ' || lname from user where userdeleted is null", new FetchCallback() {
        onFetch(result) {
            populateList("user/usertab/users", result);
        }
    });
}

loadUsers();

String username = "";
String device = "";

login() {
    fetchOne("select userid,fname,lname,email from user where userid='" + getListItemValue() + "';", new FetchCallback() {
        onFetch(result) {
            user = new User(result.get(0),result.get(1),result.get(2),result.get(3));
            setUser(user);
            username = result.get(1) + " " + result.get(2);
            showTabGroup("control");
        }
    });
}

/***Questionnaire***/
onEvent("control/questionnaire_control/New_Questionnaire","click","newQuestionnaire()");
//onEvent("questionnaire/questionnaire_info/Finish_Questionnaire_Creation","click","finishCreateQuestionnaire()");

newQuestionnaire(){
    newTabGroup("questionnaire");
    onEvent("questionnaire", "show", "showTab(\"questionnaire/questionnaire_info\");");   
}
/*
questionSelection(){   
    if(isNull(getFieldValue("questionnaire/questionnaire_info/questionnaireName"))) {
            showWarning("Validation Error", "You must fill in the Questionnaire Name before you can continue");
            return;
        } else {
        	String questionnaire_name;
            questionnaire_name = getFieldValue("questionnaire/questionnaire_info/questionnaireName");
            showTab("questionnaire/questionnaire_questionSelect");
            //cancelTab(\"questionnaire/questionnaire_info\", false);
            setFieldValue("questionnaire/questionnaire_questionSelect/questionnaire_name", questionnaire_name);
        }
}
*/
//TODO: DYNAMIC UI, QUESTION SELECTION
/*
finishCreateQuestionnaire(){
    List question_ids=getFieldValue("questionnaire/questionnaire_questionSelect/questionList");
    String questionnaire_name;
    if(question_ids_array==null || question_ids_array.size()==0)
    {
        showWarning("Validation Error", "You must fill in the Questionnaire Name before you can continue");
        return;
    }
    if(isNull(getFieldValue("questionnaire/questionnaire_questionSelect/questionnaire_name"))){
        showWarning("Validation Error", "You must fill in the Questionnaire Name before you can continue");
        
    }else{
    question_ids=question_ids_array;
    //TODO:SUBMIT QUESTIONNAIRE HERE
    dialog = showBusy("Saving {Questionnaire}", "Please wait.");
    saveTabGroup("questionnaire", questionnaire_id, null, null, new SaveCallback() {
        onSave(uuid, newRecord) {
            questionnaire_id = uuid;
            if(newRecord) {
            for (question_id : question_ids)
                saveEntitiesToRel("Questionnaire", questionnaire_id, question_id);
            }
            dialog.dismiss();
        }
        onError(message) {
            showToast(message);
        }
    });
    }
}
*/


/*** QuestionBank ***/
question_id=null;
onEvent("control/question_control/New_Question","click","newQuestion()");
onEvent("questionBank/questionInfo/Finish_New_Question","click","saveNewQuestion()");
onEvent("control/question_control","show","loadQuestionBank()");
onEvent("questionBank/questionInfo/","show","autoQuestionID()");

newQuestion(){
	newTabGroup("questionBank");
	onEvent("questionBank", "show", "showTab(\"questionBank/questionInfo\");");  
}

saveNewQuestion(){
	if(isNull(getFieldValue("questionBank/questionInfo/questionContent"))){
		showWarning("Validation Error", "You must fill in the Question Content before you can continue");
        return;
	}
	saveTabGroup("questionBank", question_id, null, null, new SaveCallback() {
    onSave(uuid, newRecord) {
      question_id = uuid;
	  //setFieldValue("questionBank/questionInfo/questionID", question_id);
      if (newRecord) {
        showToast("New record created");
      }
    }
    onError(message) {
        showWarning("error",message);
    }  
  });
  /*
	pushDatabaseToServer("onComplete()");
	onComplete() {
	    showToast("finished pushing database");
	}
	*/
}

autoQuestionID(){
String autoQuestionId=username+getCurrentTime();
setFieldValue("questionBank/questionInfo/questionID", autoQuestionId);
}

loadQuestionBank(){

	fetchAll("SELECT uuid, group_concat(coalesce(measure, ''),' - ') as response " +
    "FROM (select * from latestNonDeletedArchentIdentifiers) " +
    "WHERE aenttypename = 'QuestionBank' " +
    "GROUP BY uuid " +
    "order by response;", new FetchCallback() {
        onFetch(result) {
            populateList("control/question_control/questionList", result);
        }

        onError(message) {
            showToast(message);
        }
    });
}

/*** Person ***/
onEvent("control/user_control/New_User","click","newPerson()");
onEvent("person/personInfo/Finish_New_Person","click","saveNewPerson()");
onEvent("control/user_control","show","loadPerson()");
onEvent("person/personInfo/Take_Photo","click","attachPictureTo(\"person/personInfo/personPhoto\")");
person_id=null;
newPerson(){
	newTabGroup("person");
	onEvent("person", "show", "showTab(\"person/personInfo\");");  
}
saveNewPerson(){
	if(isNull(getFieldValue("person/personInfo/personName"))){
		showWarning("Validation Error", "You must fill in the Person Name before you can continue");
        return;
	}
	setFieldValue("person/personInfo/personID", getFieldValue("person/personInfo/personName")+getCurrentTime());
	
	saveTabGroup("person", person_id, null, null, new SaveCallback() {
    onSave(uuid, newRecord) {
      person_id = uuid;
      if (newRecord) {
        showToast("New record created");
      }
    }
    onError(message) {
        showWarning("error",message);
    }  
  });
}

loadPerson(){

	fetchAll("SELECT uuid, group_concat(coalesce(measure, ''),' - ') as response " +
    "FROM (select * from latestNonDeletedArchentIdentifiers) " +
    "WHERE aenttypename = 'Person' " +
    "GROUP BY uuid " +
    "order by response;", new FetchCallback() {
        onFetch(result) {
            populateList("control/user_control/userList", result);
        }

        onError(message) {
            showToast(message);
        }
    });
}
/*** Language ***/
onEvent("control/language_control/New_Language","click","newLanguage()");
onEvent("language/languageInfo/Finish_New_Language","click","saveNewLanguage()");
onEvent("control/language_control","show","loadLanguage()");
language_id=null;
newLanguage(){
	newTabGroup("language");
	onEvent("language", "show", "showTab(\"language/languageInfo\");");  
}
saveNewLanguage(){
	if(isNull(getFieldValue("language/languageInfo/languageName"))){
		showWarning("Validation Error", "You must fill in the Language Name before you can continue");
        return;
	}
	if(isNull(getFieldValue("language/languageInfo/languageID"))){
		showWarning("Validation Error", "You must fill in the Language ID before you can continue");
        return;
	}
	//setFieldValue("person/personInfo/personID", getFieldValue("person/personInfo/personName")+getCurrentTime());
	
	saveTabGroup("language", language_id, null, null, new SaveCallback() {
    onSave(uuid, newRecord) {
      language_id = uuid;
      if (newRecord) {
        showToast("New record created");
      }
    }
    onError(message) {
        showWarning("error",message);
    }  
  });
}

loadLanguage(){

	fetchAll("SELECT uuid, group_concat(coalesce(measure, ''),' - ') as response " +
    "FROM (select * from latestNonDeletedArchentIdentifiers) " +
    "WHERE aenttypename = 'Language' " +
    "GROUP BY uuid " +
    "order by response;", new FetchCallback() {
        onFetch(result) {
            populateList("control/language_control/languageList", result);
        }

        onError(message) {
            showToast(message);
        }
    });
}