saveSession(String typeflag){
	switch(typeflag){
		case "session":
		break;

		case "answer":	
		showWarning("case answer","case answer");	
			if(isNull(sss_id)){//create new session
				if((isNull(getFieldValue("sessionForAnswer/sssAnsBasicInfo/sssName"))) || 
						(isNull(getFieldValue("sessionForAnswer/sssAnsBasicInfo/sssStartTimetamp"))) || 
						(isNull(sss_answer_list)))
				{
					showWarning("Incomplete Data","Please make sure that data is complete");
					return;
				}

				psRoleInfo=checkRolesInSession();

				showWarning("checkRolesInSession","checkRolesInSession done");
				if(!psRoleInfo.contains("consultant")){
					showWarning("No consultant","No consultant selected, please add consultant");
					return;
				}
				else{
					if(!psRoleInfo.contains("interviewer")){
						showWarning("No interviewer","No interviewer selected, please add interviewer");
						return;
					}
				}
				//check answer label
				Iterator itConsultant=sssConsultantList.iterator();
			    firstConsultant=itConsultant.next();
			    ansConsultant=firstConsultant;
			    showWarning("ansConsultant",ansConsultant);
			    if(sssConsultantList.size()>1){
					ansConsultant=ansConsultant+"EtAl";
					showWarning("ansConsultantEtal",ansConsultant);
			    }
			    //generate session label
				//else{
				interviwerPrefix=null;
				Iterator inveIt=sssInterviewerList.iterator();
				interviwerPrefix=inveIt.next();
				showWarning("interviwerPrefix",interviwerPrefix);
				if (sssInterviewerList.size()>1){
					interviwerPrefix=interviwerPrefix+"EtAl";
					showWarning("interviwerPrefixEtal",interviwerPrefix);
				}

				setFieldValue("sessionForAnswer/sssAnsBasicInfo/sssID",interviwerPrefix+sssLabel);
				showWarning("labelSet",interviwerPrefix+sssLabel);
				String endTimeAuto=getCurrentTime();
				setFieldValue("sessionForAnswer/sssAnsBasicInfo/sssEndTimestamp",endTimeAuto);
				String startTimeStamp=getFieldValue("sessionForAnswer/sssAnsBasicInfo/sssStartTimetamp");
				String endTimeStamp=endTimeAuto;
				if(timeValidation(startTimeStamp,endTimeStamp,"sessionTime")){
					saveTabGroup("sessionForAnswer", sss_id, null, null, new SaveCallback() {
					    onSave(uuid, newRecord) {
					    	sss_id = uuid;
					      	if (newRecord) {
					    	  for(answer:sss_answer_list){
					    		  saveEntitiesToRel("Answer and Session",sss_id,answer.get(0));
					    	  }
					    	  showWarning("answer","answer save done");
					    	  //below is saving roles in Session
					    	  for(person: sssPersonRoleandNameList){
					    	  		String psInfoId=person.get(0);
					    	  		String psInfoIdSplit=psInfoId.split("_");
					    	  		String psInSssId=null;
					    	  		sssPsRoleAttributes= createAttributeList();
					    	  		sssPsRoleAttributes.add(createEntityAttribute("SessionIDforPerson", null, null, sss_id, null));
					    	  		sssPsRoleAttributes.add(createEntityAttribute("SessionPersonID", null, null, psInfoIdSplit[1], null));
					    	  		sssPsRoleAttributes.add(createEntityAttribute("SessionPersonRole", null, null, psInfoIdSplit[0], null));
					    	  		saveArchEnt(psInSssId, "SessionPerson", null, sssPsRoleAttributes, new SaveCallback() {
							            onSave(psUuid,newRecord) {
							            	showWarning("psInSss",psUuid+"person role save Done");
							            }  
							        });
					    	  }
					    	  showWarning("psInSssAll","All person role save Done");
					    	  //below is checking answer labels
					    	  for(ans : sss_answer_list){
					    	  	 String ansLabel=ans.get(1);
					    	  	 String ansLabelSplit=ansLabel.split("_");
					    	  	 String ansOldPs=ansLabelSplit[2];
					    	  	 showWarning("ansOldPs",ansOldPs);
					    	  	 if(!ansOldPs.equals(ansConsultant)){
					    	  	 	//change answer label
					    	  	 	ansLabelSplit[2]=ansConsultant;
					    	  	 	StringBuilder sb=new StringBuilder();
									for (ansLabelComp : ansLabelSplit){
										if (sb.length()>0)
											{sb.append("_");}
										sb.append(ansLabelComp);
									}

									String newAnsLabelSss=sb.toString();
									showWarning("newAnsLabelSss",newAnsLabelSss);
					    	  	 	attributes = createAttributeList();
		    						attributes.add(createEntityAttribute("AnswerLabel", null, null, newAnsLabelSss, null));
									entityId=ans.get(0);
									saveArchEnt(entityId, "AnswerToQuestionnaire", null, attributes, new SaveCallback() {
		            					onSave(answerUuid,newRecord) {
		            						//below is changing the filelabel
		            						showWarning("answerLabel change done",entityId+"answer label change done");
		            						loadFileForAnswerQuery="select uuid,measure from latestNonDeletedAentValue "+ 
											"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='FileID') "+
											"and uuid in "+
	 										"(select uuid from AentReln where RelationshipID in "+
											"(select RelationshipID from AEntReln where AEntReln.uuid="+entityId+" "+
	 										"AND RelationshipID in "+
											"(select RelationshipID from latestNonDeletedRelationship where RelnTypeID="+
	 										"(select RelnTypeID from RelnType where RelnTypeName='Answer and File') "+
											"and latestNonDeletedRelationship.Deleted IS NULL)))";
											fetchAll(loadFileForAnswerQuery, new FetchCallback() {
										        onFetch(result) {
										        	fileListForAns=new ArrayList();
										        	fileListForAns.clear();
										        	fileListForAns.addAll(result);
										        	showWarning("answerFileFetchDone","answerFileFetchDone");
										        	for (file: fileListForAns){
										        		String fileEntityId=file.get(0);
										        		String oldFileLabel=file.get(1);
										        		String oldFileLabelSplit=oldFileLabel.split("_");
										        		String oldFileLabelType=oldFileLabelSplit[oldFileLabelSplit.length-1];
										        		showWarning("oldFileLabelType",oldFileLabelType);
										        		String newFileLabel=newAnsLabelSss+"_"+oldFileLabelType;
										        		showWarning("newFileLabel",newFileLabel);
										        		attributesForFile = createAttributeList();
		    											attributesForFile.add(createEntityAttribute("FileID", null, null, newFileLabel, null));
		    											saveArchEnt(fileEntityId, "File", null, attributesForFile, new SaveCallback() {
							            					onSave(fileuuid,newRecord) {
							            						showWarning("answerFileLable change done",fileEntityId+"answer file label change done");
							            					}  
							        					});    
										        	}
										        }

										        onError(message) {
										            showToast(message);
										        }
										    });
		            					}  
		        					});    
									}	
					    	  	 }
					    	  
					        showToast("New session contains answer(s) created");
					        cancelTabGroup("sessionForAnswer",true);
					        showTab("control/survey_control");
					      }
					    }
					    onError(message) {
					        showWarning("error",message);
					    }  
					  });
				}
					else{
						showWarning("Invalid timestamp","1. Datetime format should be yyyy-MM-dd HH:mm:ss \n"
					+"2.Datetime input should be valid \n"+
								"3.Start timestamp should be before end timestamp \n"+
											"4.Two dates should be the same");
						return;
					}
			}
			else{//change session info
				//loadSessionInterviewer();
				String endTimeAuto=getCurrentTime();
				//loadSessionInterviewer("answer");
				//showWarning("size",sssAnswerInterviewerOrigin.size().toString());
				sssNewInfo.add(getFieldValue("sessionForAnswer/sssAnsBasicInfo/sssID"));
				sssNewInfo.add(getFieldValue("sessionForAnswer/sssAnsBasicInfo/sssName"));
				sssNewInfo.add(getFieldValue("sessionForAnswer/sssAnsBasicInfo/sssStartTimetamp"));
				//sssNewInfo.add(endTimeAuto);
				sssNewInfo.add(getFieldValue("sessionForAnswer/sssAnsBasicInfo/sssEndTimestamp"));
				//showWarning("sssNewInfo","sssNewInfo added");
				Hashtable sssInfoChange=listChange(sssNewInfo,sssOriginInfo);
				//showWarning("sssInfoChange","sssInfoChange added");
				Hashtable sssAnsChange=listChange(sss_answer_list,original_sss_answer_list);
				//showWarning("sssAnsChange","sssAnsChange added");
				if((sssInfoChange.containsKey("EQUAL")) && (sssAnsChange.containsKey("EQUAL"))){
					//showWarning("sssInfoChange","EQUAL");
					//if(sssAnsChange.containsKey("EQUAL")){
						showWarning("No change","No data changed");
						return;
					//}
					
				}

				else if((!sssInfoChange.containsKey("EQUAL"))&& (sssAnsChange.containsKey("EQUAL"))){
					String startTimeStamp=getFieldValue("sessionForAnswer/sssAnsBasicInfo/sssStartTimetamp");
					//String endTimeStamp=endTimeAuto;
					String endTimeStamp=getFieldValue("sessionForAnswer/sssAnsBasicInfo/sssEndTimestamp");
					if(timeValidation(startTimeStamp,endTimeStamp,"sessionTime")){
						//showWarning("timeValidation","pass");
					saveTabGroup("sessionForAnswer", sss_id, null, null, new SaveCallback() {
					    onSave(uuid, newRecord) {
					    	//showWarning("saveTabGroup","sessionForAnswer");
					    	for(ansDelete:sssAnsOrigin){
								 deleteRel(ansDelete.get(0));
								 //showWarning("deleteRel",ansDelete.get(0));
					    	  }
					    	
					    	 for(answer:sss_answer_list){
					    		  saveEntitiesToRel("Answer and Session",sss_id,answer.get(0));
					    	  }
					        showToast("Session info changed");

					    }
					    onError(message) {
					        showWarning("error",message);
					    }  
					  });
					}
					else{
						showWarning("Invalid timestamp","1. Datetime format should be yyyy-MM-dd HH:mm:ss \n"
								+"2.Datetime input should be valid \n"+
											"3.Start timestamp should be before end timestamp \n"+
														"4.Two dates should be the same");
						return;
					}

				}

				else {//if((sssInfoChange.containsKey("EQUAL"))&& (!sssAnsChange.containsKey("EQUAL"))) {//
					setFieldValue("sessionForAnswer/sssAnsBasicInfo/sssEndTimestamp",endTimeAuto);
					String startTimeStamp=getFieldValue("sessionForAnswer/sssAnsBasicInfo/sssStartTimetamp");
					String endTimeStamp=endTimeAuto;
					if(timeValidation(startTimeStamp,endTimeStamp,"sessionTime")){
						//showWarning("timeValidation","pass");
					saveTabGroup("sessionForAnswer", sss_id, null, null, new SaveCallback() {
					    onSave(uuid, newRecord) {
					    	//showWarning("saveTabGroup","sessionForAnswer");
					    	for(ansDelete:sssAnsOrigin){
								 deleteRel(ansDelete.get(0));
								 //showWarning("deleteRel",ansDelete.get(0));
					    	  }
					    	
					    	 for(answer:sss_answer_list){
					    		  saveEntitiesToRel("Answer and Session",sss_id,answer.get(0));
					    	  }
					        showToast("Session info changed");

					    }
					    onError(message) {
					        showWarning("error",message);
					    }  
					  });
					}
					else{
						showWarning("Invalid timestamp","1. Datetime format should be yyyy-MM-dd HH:mm:ss \n"
								+"2.Answers created on different days are not allowed in the same session \n"+
											"3.Start timestamp should be before end timestamp \n"+
														"4.Two dates should be the same");
						return;
					}
				}

			}
			
			break;
		
	}
}