import java.util.concurrent.Callable;
import java.util.*;
/*** 'Editable' - you can edit the code below based on the needs ***/

/*TODO:
/*Search function: search person and languages should allow searching in "other names"
/*basically the other names should be stored using a string with a seperator ','
*/
User user; // don't touch
String userid;
/*Common queries*/
loadAllQuestionQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
	"WHERE latestNonDeletedAentValue.AttributeID "+
	"IN (SELECT AttributeID FROM AttributeKey WHERE AttributeName='QuestionContent') "+
	"GROUP BY uuid;";

loadAllQuestionnaireQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
	"WHERE latestNonDeletedAentValue.AttributeID "+
	"IN (SELECT AttributeID FROM AttributeKey WHERE AttributeName='QuestionnaireName') "+
	"GROUP BY uuid;";
	
loadAllPersonQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
	"WHERE latestNonDeletedAentValue.AttributeID "+
	"IN (SELECT AttributeID FROM AttributeKey WHERE AttributeName='PersonName') "+
	"GROUP BY uuid;";

loadAllLanguageQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
	"WHERE latestNonDeletedAentValue.AttributeID "+
	"IN (SELECT AttributeID FROM AttributeKey WHERE AttributeName='LanguageName') "+
	"GROUP BY uuid;";
/*Common queries end*/

	//SELECT uuid,measure FROM latestNonDeletedAentValue  WHERE latestNonDeletedAentValue.AttributeID  IN (SELECT AttributeID FROM AttributeKey WHERE AttributeName='QuestionContent')  GROUP BY uuid
/*Adding the sync button on the action bar*/
addActionBarItem("sync", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "Disable Sync";
    }
    actionOn() {
        setSyncEnabled(false);
        setFileSyncEnabled(false);
        showToast("Sync disabled.");
    }
    isActionOff() {
        isSyncEnabled();
    }
    actionOffLabel() {
        "Enable Sync";
    }
    actionOff() {
        setSyncEnabled(true);
        setFileSyncEnabled(true);
        showToast("Sync enabled.");
    }
});
/*Saving questionnaire-question usage*/
saveEntitiesToRel(String type, String entity1, String entity2) {
    if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(rel_id, newRecord) {
            addReln(entity1, rel_id, null);
            addReln(entity2, rel_id, null);
        }
    });
}

/*** USER ***/
onEvent("user/usertab/users", "click", "login()");

loadUsers() {
    fetchAll("select userid, fname || ' ' || lname from user where userdeleted is null", new FetchCallback() {
        onFetch(result) {
            populateList("user/usertab/users", result);
        }
    });
}

loadUsers();

String username = "";
String device = "";

login() {
    fetchOne("select userid,fname,lname,email from user where userid='" + getListItemValue() + "';", new FetchCallback() {
        onFetch(result) {
            user = new User(result.get(0),result.get(1),result.get(2),result.get(3));
            setUser(user);
            username = result.get(1) + " " + result.get(2);
            showTabGroup("control");
        }
    });
}

/***Questionnaire***/

onEvent("control/questionnaire_control/New_Questionnaire","click","newQuestionnaire()");
onEvent("control/questionnaire_control/New_Questionnaire","show","loadQuestionnaire()");
onEvent("control/questionnaire_control/questionnaireList","click","loadQuestionnaireInfo()");
onEvent("questionnaire/questionnaire_info/Start_Question_Selection","click","startQuestionSelection()");
onEvent("questionnaire_question/questionnaire_question_info","show","initializeQuestionSelect()");
onEvent("questionnaire_question/questionnaire_question_info/questionList","click","questionSelection()");
onEvent("questionnaire_question/questionnaire_question_info/questionInQuestionnaire","click","deleteSelectedQuestion()");
onEvent("questionnaire_question/questionnaire_question_info/New_Question","click","newQuestion()");
onEvent("questionnaire_question/questionnaire_question_info/Finish_Questionnaire_Creation","click","finishCreateQuestionnaire(questionSelected)");

//indicate if any questionnaire is selected
finished_questionnaire_id=null;

//original questions to be selected in questionnaire
questionCandidates=new ArrayList();

//manipulatable question list to be selected in questionnaire
questionCandidatesContent=new ArrayList();

//questions selected in questionnaire
questionSelected=new ArrayList();

//create new questionnaire starting point
newQuestionnaire(){
    newTabGroup("questionnaire");
    onEvent("questionnaire", "show", "showTab(\"questionnaire/questionnaire_info\");");   
}

//load all questionnaire names
loadQuestionnaire(){
	finished_questionnaire_id=null;
	existing_questionnaires=new ArrayList();
	/*The fetchAll query returns the uuid and the question content of all the questions*/
//select uuid, group_concat(coalesce(measure,' '),'-') as response from AentValue where AentValue.AttributeID in (select AttributeID from AttributeKey where AttributeName="QuestionContent")
	fetchAll(/*"SELECT uuid, measure as response " +
	//fetchAll("SELECT * " +
    "FROM AentValue " +
    "WHERE AentValue.AttributeID IN " +
    "(SELECT AttributeID FROM AttributeKey WHERE AttributeName='QuestionnaireName') " +
	"GROUP BY uuid " +
    "order by response;"*/
	loadAllQuestionnaireQuery,
	new FetchCallback() {
        onFetch(result) {
			if (!isNull(result)) {
				for (re:result) {
				existing_questionnaires.add(re);
			}
			populateList("control/questionnaire_control/questionnaireList", existing_questionnaires);
			}
			
        }

        onError(message) {
            showToast(message);
        }
    });
}

//load the questionnaire basic info to the page
loadQuestionnaireInfo(){
	finished_questionnaire_id=getListItemValue();
	if(isNull(finished_questionnaire_id)){
		showToast("No Questionnaire selected");
		return;
	}
	//showWarning("questionnaireID",finished_questionnaire_id.toString());
	showTabGroup("questionnaire", finished_questionnaire_id, new FetchCallback() {
        onFetch(result) {
            questionnaire=result;		
            showToast("Loaded questionnaire"+questionnaire.getId());            
        }
        onError(message) {
            showToast(message);
        }
    });
}

//preparation for the question selection
startQuestionSelection(){   
    if((isNull(getFieldValue("questionnaire/questionnaire_info/questionnaireName")))||(isNull(getFieldValue("questionnaire/questionnaire_info/questionnaireID")))) {
            showWarning("Validation Error", "You must fill in the Questionnaire ID/Name before you can continue");
            return;
        } else {
        	questionnaire_id=getFieldValue("questionnaire/questionnaire_info/questionnaireID");
            questionnaire_name = getFieldValue("questionnaire/questionnaire_info/questionnaireName");
            showTabGroup("questionnaire_question");
            //cancelTab(\"questionnaire/questionnaire_info\", false);
            setFieldValue("questionnaire_question/questionnaire_question_info/questionnaireID", questionnaire_id);
            setFieldValue("questionnaire_question/questionnaire_question_info/questionnaireName", questionnaire_name);
        }
}

//when there is a selected questionnaire, basically show all the data in this questionnaire
//when there is no selected questionnaire, populate question candidate list for selection
initializeQuestionSelect(){
	//the query result is an ArrayList, and each item in query result is an ArrayList too
	if(isNull(finished_questionnaire_id)){
		//showWarning("no id","new questionnaire");
		questionCandidates.clear();
		questionCandidatesContent.clear();
		questionSelected.clear();
		//showWarning("list cleared",finished_questionnaire_id);
		populateList("questionnaire_question/questionnaire_question_info/questionInQuestionnaire", questionSelected);
	/*"SELECT uuid, measure as response " +
    "FROM AentValue " +
    "WHERE AentValue.AttributeID IN " +
    "(SELECT AttributeID FROM AttributeKey WHERE AttributeName='QuestionContent') " +
	"GROUP BY uuid " +
    "order by response;"*/
		fetchAll(loadAllQuestionQuery,
		new FetchCallback() {
			//showWarning("fetched",finished_questionnaire_id);
			onFetch(result) {
				if (!isNull(result)) {
					//showWarning("fetch result is not null",finished_questionnaire_id);
					questionCandidates=result;
					for (re:result) {
					questionCandidatesContent.add(re);
				//showWarning("resultclass",result.getClass().getName());
				//showWarning("class",re.get(0).toString());
				//questionBankList.add(re);
				}
				populateList("questionnaire_question/questionnaire_question_info/questionList", questionCandidatesContent);
			}
			
        }

		onError(message) {
            showToast(message);
        }
		});
	}
	
	else{
		//showWarning("has id",finished_questionnaire_id);
		//Show questions in this questionnaire
		current_questionnaire_id=finished_questionnaire_id;
		tempPopulateQuestionList=new ArrayList();
		tempPopulateQuestionList.clear();
		if(isNull(current_questionnaire_id))
		{
			showWarning("Message","Something went wrong!");
			return;
		}
		/*
		select uuid,measure from latestNonDeletedAentValue
		where latestNonDeletedAentValue.AttributeID in
		(select AttributeID from AttributeKey where AttributeName='QuestionContent')
		and uuid in
		( select AEntReln.uuid from AEntReln where AEntReln.uuid <> "1000011435155888113"
		 and AEntReln.RelationshipID in (select AEntReln.RelationshipID from AEntReln where AEntReln.uuid="1000011435155888113"))
		questionList_show_in_questionnaire=new ArrayList();*/
		questionnaire_question_query="SELECT uuid, measure "+
		"FROM latestNonDeletedAentValue "+
		"WHERE latestNonDeletedAentValue.AttributeID IN "+
		"(SELECT AttributeID FROM AttributeKey WHERE AttributeName='QuestionContent') " +
		"AND uuid IN "+
		"(SELECT AEntReln.UUID FROM AEntReln WHERE AEntReln.UUID <> "+ current_questionnaire_id +" "+
		"AND AEntReln.RelationshipID IN "+
		"(SELECT AEntReln.RelationshipID FROM AEntReln WHERE AEntReln.uuid="+current_questionnaire_id+")) " +
		"GROUP BY uuid;";
		fetchAll(questionnaire_question_query,
		new FetchCallback() {
			//showWarning("fetched corresponding questions",current_questionnaire_id);
        onFetch(result) {
			if (!isNull(result)) {
				//showWarning("fetched result is not null",current_questionnaire_id);
				questionList_show_in_questionnaire=result;
				//showWarning("resultclass",result.getClass().getName());
				//showWarning("class",re.get(0).toString());
				//questionBankList.add(re);
				}
			populateList("questionnaire_question/questionnaire_question_info/questionInQuestionnaire", questionList_show_in_questionnaire);
			populateList("questionnaire_question/questionnaire_question_info/questionList", tempPopulateQuestionList);
			}
			       
			onError(message) {
				showToast(message);
				}
			});
		}

	
}


//after selected a question, add this question to questionSelected, and remove it from questionCandidatesContent
questionSelection(){
	questionnaire_question_id=getListItemValue();
	int idx_question=-1;
	if(isNull(questionnaire_question_id)){
		showToast("No Question selected");
		return;
	}
	else{
		//showWarning("start",questionCandidatesContent.size().toString());
		//showWarning("startsize",questionSelected.size().toString());
		for (int i=0; i<questionCandidatesContent.size();i++){
			if (questionCandidatesContent.get(i).toString().contains(questionnaire_question_id)) {
				idx_question=i;
				//showWarning("get",questionCandidatesContent.get(idx_question).toString());
				break;
			}
		}
		if (idx_question>=0) {
			//showWarning("index",idx_question.toString());
		//showWarning("get",questionCandidatesContent.get(idx_question).toString());
		questionSelected.add(questionCandidatesContent.get(idx_question));
		//showWarning("questionSelectedadded",questionSelected.size().toString());
		questionCandidatesContent.remove(idx_question);
		//showWarning("questionCandidatesContent",questionCandidatesContent.size().toString());
		populateList("questionnaire_question/questionnaire_question_info/questionList", questionCandidatesContent);
		populateList("questionnaire_question/questionnaire_question_info/questionInQuestionnaire", questionSelected);
			//code
		}
		else{
			showWarning("Question Not Found","Oops! Can't find this question, it could be not valid anymore, please contact the Admin");
		}
		
	}
}

//after unselected a question, add this question to questionCandidatesContent, and remove it from questionSelected
deleteSelectedQuestion(){
	question_in_questionnaire_id=getListItemValue();
	int idx_question_in_questionnaire=-1;
	if(isNull(question_in_questionnaire_id)){
		showToast("No Question selected");
		return;
	}
	else{
		//showWarning("start",questionCandidatesContent.size().toString());
		//showWarning("startsize",questionSelected.size().toString());
		for (int i=0; i<questionSelected.size();i++){
			if (questionSelected.get(i).toString().contains(question_in_questionnaire_id)) {
				idx_question_in_questionnaire=i;
				//showWarning("get",questionCandidatesContent.get(idx_question).toString());
				break;
			}
		}
		if (idx_question_in_questionnaire>=0) {
			//code
		//showWarning("index",idx_question.toString());
		//showWarning("get",questionCandidatesContent.get(idx_question).toString());
		//questionSelected.add(questionCandidatesContent.get(idx_question_in_questionnaire));
		questionCandidatesContent.add(questionSelected.get(idx_question_in_questionnaire));
		questionSelected.remove(idx_question_in_questionnaire);
		//showWarning("questionSelectedadded",questionSelected.size().toString());
		//questionCandidatesContent.remove(idx_question_in_questionnaire);
		//showWarning("questionCandidatesContent",questionCandidatesContent.size().toString());
		populateList("questionnaire_question/questionnaire_question_info/questionList", questionCandidatesContent);
		populateList("questionnaire_question/questionnaire_question_info/questionInQuestionnaire", questionSelected);
		}
		else{
			showWarning("Question Not Found","Oops! You can't manupulate this question,please contact the Admin");
		}
		
	}
}


//if there is selected questionnaire, then change the info, else create a new questionnaire
finishCreateQuestionnaire(ArrayList questionSelectedInQuestionnaire){
	if(isNull(finished_questionnaire_id)){
		if(questionSelectedInQuestionnaire.isEmpty())
		{
			showWarning("No question selected","No question selected in this questionnaire");
			return;
		}
	}
	//showWarning("save started","started");
		saveTabGroup("questionnaire", finished_questionnaire_id, null, null, new SaveCallback() {
		//showWarning("saveTabGroup()","started");
		onSave(uuid, newRecord) {
		//showWarning("onSave()","started");
		finished_questionnaire_id = uuid;
	  //showWarning("finished_questionnaire_id()",finished_questionnaire_id);
		if (newRecord) {
			for (question : questionSelectedInQuestionnaire){
			 //showWarning("insertrelation()",question.get(0).toString());
			saveEntitiesToRel("Questionnare and Question",finished_questionnaire_id,question.get(0));
			//showWarning("savedrel()",question.get(0).toString());
			}
			showToast("New record created");
			finished_questionnaire_id=null;
		 }
		else{
			showWarning("Attention!","Only questionnaire basic info is changed, \n, Questions in quesitonnaire are not changeable!");
		//finished_questionnaire_id=null;
		}
		}
		onError(message) {
			showWarning("error",message);
		}  
		});
	
	
}



/*** QuestionBank ***/

onEvent("control/question_control/New_Question","click","newQuestion()");
onEvent("questionBank/questionInfo/Finish_New_Question","click","saveNewQuestion()");
onEvent("control/question_control","show","loadQuestionBank()");
//onEvent("control/querytest/Submit","click","testQuery()");
onEvent("questionBank/questionInfo/","show","autoQuestionID()");
onEvent("control/question_control/questionList","click","loadQuestionInfo()");

//indicates of there is selected question
question_id=null;
/*
testQuery(){
	query=getFieldValue("control/querytest/query");
	//fetchAll("SELECT sql FROM sqlite_master WHERE name='archentity';",
	fetchAll(query.toString()+";",
	new FetchCallback() {
        onFetch(result) {
			if (isNull(result)) {
				//code
				showWarning("no","no result");
			}
			else{
			for (re : result) {
				
				showWarning("yes",re.toString());
				//showWarning("me",re.toString());
				
			}		    
            //populateList("control/question_control/questionList", result);
        }
		}
        onError(message) {
            showToast(message);
        }
    });
	
}
*/
newQuestion(){
	newTabGroup("questionBank");
	onEvent("questionBank", "show", "showTab(\"questionBank/questionInfo\");");  
}

saveNewQuestion(){

	if(isNull(getFieldValue("questionBank/questionInfo/questionContent"))){
		showWarning("Validation Error", "You must fill in the Question Content before you can continue");
        return;
	}
	saveTabGroup("questionBank", question_id, null, null, new SaveCallback() {
    onSave(uuid, newRecord) {
      question_id = uuid;
	  //setFieldValue("questionBank/questionInfo/questionID", question_id);
      if (newRecord) {
		question_id=null;
        showToast("New record created");
      }
	  else{
		showToast("Record changed");
		question_id=null;
	  }
    }
    onError(message) {
        showWarning("error",message);
    }  
  });
  /*
	pushDatabaseToServer("onComplete()");
	onComplete() {
	    showToast("finished pushing database");
	}
	*/
}

autoQuestionID(){
String autoQuestionId=username+getCurrentTime();
setFieldValue("questionBank/questionInfo/questionID", autoQuestionId);
}


loadQuestionBank(){
	question_id=null;
	questionBankList=new ArrayList();
	
	//deprecated query: SELECT uuid, measure as response FROM AentValue WHERE AentValue.AttributeID IN (SELECT AttributeID FROM AttributeKey WHERE AttributeName='QuestionContent') GROUP BY uuid order by response;
	/*The fetchAll query returns the uuid and the question content of all the questions*/
//select uuid, group_concat(coalesce(measure,' '),'-') as response from AentValue where AentValue.AttributeID in (select AttributeID from AttributeKey where AttributeName="QuestionContent")
	fetchAll(loadAllQuestionQuery,
	new FetchCallback() {
        onFetch(result) {
			if (!isNull(result)) {
				for (re:result) {
				questionBankList.add(re);
			}
			populateList("control/question_control/questionList", questionBankList);
			}
			
        }

        onError(message) {
            showToast(message);
        }
    });
	
	//select uuid, measure as response from AentValue where AentValue.AttributeID in(select attributeID from AttributeKey where AttributeName='QuestionContent') AND uuid in (select AEntReln.UUID from AEntReln where AEntReln.UUID <> ' 1000011435168833835' AND AEntReln.RelationshipID in (select AEntReln.RelationshipID from AEntReln where AEntReln.uuid='1000011435168833835')) group by uuid order by response

	/*fetchAll("SELECT uuid, group_concat(coalesce(measure, ''),' - ') as response " +
	//fetchAll("SELECT * " +
    "FROM (select * from latestNonDeletedArchentIdentifiers) " +
    "WHERE aenttypename = 'QuestionBank' " +
    "GROUP BY uuid;" +
    "order by response;",
	new FetchCallback() {
        onFetch(result) {
			for (re : result) {
				showWarning("yes",re.toString());
				//showWarning("me",re.toString());
				//code
			}		    
            //populateList("control/question_control/questionList", result);
        }

        onError(message) {
            showToast(message);
        }
    });
    */
}
loadQuestionInfo(){
question_id=getListItemValue();
	if(isNull(question_id)){
		showToast("No Question selected");
		return;
	}
	showTabGroup("questionBank", question_id, new FetchCallback() {
        onFetch(result) {
            question=result;
            showToast("Loaded question"+question.getId());            
        }
        onError(message) {
            showToast(message);
        }
    });
}
/*** Person ***/
onEvent("control/user_control/New_User","click","newPerson()");
onEvent("person/personInfo/Finish_New_Person","click","saveNewPerson()");
onEvent("control/user_control","show","loadPerson()");
onEvent("person/personInfo/Take_Photo","click","attachPictureTo(\"person/personInfo/personPhoto\")");
onEvent("control/user_control/userList","click","loadPersonInfo()");
person_id=null;
newPerson(){
	newTabGroup("person");
	onEvent("person", "show", "showTab(\"person/personInfo\");");  
}
saveNewPerson(){

	if(isNull(getFieldValue("person/personInfo/personName"))){
		showWarning("Validation Error", "You must fill in the Person Name before you can continue");
        return;
	}
	setFieldValue("person/personInfo/personID", getFieldValue("person/personInfo/personName")+getCurrentTime());
	
	saveTabGroup("person", person_id, null, null, new SaveCallback() {
    onSave(uuid, newRecord) {
      person_id = uuid;
      if (newRecord) {
		person_id=null;
        showToast("New record created");
      }
	  else{
		person_id=null;
		showToast("Record changed");
	  }
	  
    }
    onError(message) {
        showWarning("error",message);
    }  
  });
}

loadPerson(){
	person_id=null;
	fetchAll("SELECT uuid, group_concat(coalesce(measure, ''),' - ') as response " +
    "FROM (select * from latestNonDeletedArchentIdentifiers) " +
    "WHERE aenttypename = 'Person' " +
    "GROUP BY uuid " +
    "order by response;", new FetchCallback() {
        onFetch(result) {
            populateList("control/user_control/userList", result);
        }

        onError(message) {
            showToast(message);
        }
    });
}

loadPersonInfo(){
person_id=getListItemValue();
	if(isNull(person_id)){
		showToast("No Person selected");
		return;
	}
	showTabGroup("person", person_id, new FetchCallback() {
        onFetch(result) {
            person=result;
            showToast("Loaded person"+person.getId());            
        }
        onError(message) {
            showToast(message);
        }
    });
}
/*** Language ***/
onEvent("control/language_control/New_Language","click","newLanguage()");
onEvent("language/languageInfo/Finish_New_Language","click","saveNewLanguage()");
onEvent("control/language_control","show","loadLanguage()");
onEvent("control/language_control/languageList","click","loadLanguageInfo()");
language_id=null;
newLanguage(){
	newTabGroup("language");
	onEvent("language", "show", "showTab(\"language/languageInfo\");");  
}
saveNewLanguage(){

	if(isNull(getFieldValue("language/languageInfo/languageName"))){
		showWarning("Validation Error", "You must fill in the Language Name before you can continue");
        return;
	}
	if(isNull(getFieldValue("language/languageInfo/languageID"))){
		showWarning("Validation Error", "You must fill in the Language ID before you can continue");
        return;
	}
	//setFieldValue("person/personInfo/personID", getFieldValue("person/personInfo/personName")+getCurrentTime());
	
	saveTabGroup("language", language_id, null, null, new SaveCallback() {
    onSave(uuid, newRecord) {
      language_id = uuid;
      if (newRecord) {
		language_id=null;
        showToast("New record created");
      }
	  else{
		language_id=null;
		showToast("Record changed");
	  }
    }
    onError(message) {
        showWarning("error",message);
    }  
  });
}

loadLanguage(){
	language_id=null;
	fetchAll("SELECT uuid, group_concat(coalesce(measure, ''),' - ') as response " +
    "FROM (select * from latestNonDeletedArchentIdentifiers) " +
    "WHERE aenttypename = 'Language' " +
    "GROUP BY uuid " +
    "order by response;", new FetchCallback() {
        onFetch(result) {
            populateList("control/language_control/languageList", result);
        }

        onError(message) {
            showToast(message);
        }
    });
}
loadLanguageInfo(){
language_id=getListItemValue();
	if(isNull(language_id)){
		showToast("No Language selected");
		return;
	}
	showTabGroup("language", language_id, new FetchCallback() {
        onFetch(result) {
            language=result;
            showToast("Loaded person"+language.getId());            
        }
        onError(message) {
            showToast(message);
        }
    });
}