import java.util.concurrent.Callable;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import android.util.Log;
import java.io.File;
import java.lang.Character;
import java.lang.StringBuffer;
import com.nutiteq.utils.WkbRead;

//import java.lang.*;
/*** 'Editable' - you can edit the code below based on the needs ***/
User user; // don't touch
String userid;

/***query***/
loadAllQuestionnaireQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
	"WHERE latestNonDeletedAentValue.AttributeID "+
	"= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='QuestionnaireName') "+
	"GROUP BY uuid;";

loadAllRegQuesnirQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
	"WHERE latestNonDeletedAentValue.AttributeID = "+
	"(SELECT AttributeID FROM AttributeKey WHERE AttributeName='QuestionnaireName') "+
	"AND latestNonDeletedAentValue.uuid IN "+
	"(SELECT uuid from latestNonDeletedAentValue WHERE latestNonDeletedAentValue.AttributeID= "+
		"(select AttributeID from AttributeKey where AttributeName='QuestionnaireType') "+
		"AND latestNonDeletedAentValue.measure <> "+
		"(select uuid from latestNonDeletedAentValue where latestNonDeletedAentValue.AttributeID="+
			"(select AttributeID from AttributeKey where AttributeName='QuesnirTypeName') "+
			"and latestNonDeletedAentValue.measure = 'Introductory')) GROUP BY uuid;";

loadAllIntrQuesnirQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
	"WHERE latestNonDeletedAentValue.AttributeID = "+
	"(SELECT AttributeID FROM AttributeKey WHERE AttributeName='QuestionnaireName') "+
	"AND latestNonDeletedAentValue.uuid IN "+
	"(SELECT uuid from latestNonDeletedAentValue WHERE latestNonDeletedAentValue.AttributeID= "+
		"(select AttributeID from AttributeKey where AttributeName='QuestionnaireType') "+
		"AND latestNonDeletedAentValue.measure = "+
		"(select uuid from latestNonDeletedAentValue where latestNonDeletedAentValue.AttributeID="+
			"(select AttributeID from AttributeKey where AttributeName='QuesnirTypeName') "+
			"and latestNonDeletedAentValue.measure = 'Introductory')) GROUP BY uuid;";

loadAllPersonQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
	"WHERE latestNonDeletedAentValue.AttributeID "+
	"= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='PersonName') "+
	"GROUP BY uuid;";

loadAllPersonIDQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
		"WHERE latestNonDeletedAentValue.AttributeID "+
		"IN (SELECT AttributeID FROM AttributeKey WHERE AttributeName='PersonID') "+
		"GROUP BY uuid;";

loadAllLanguageQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
		"WHERE latestNonDeletedAentValue.AttributeID "+
		"= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='LanguageName') "+
		"GROUP BY uuid;";

loadAllSurveyQuery="select uuid,measure from "+
		"((select measure as quesnirid from latestNonDeletedAentValue where AttributeID = "+
			"(select AttributeID from AttributeKey where AttributeName='AnswerQuestionnaireID') group by measure) t1 "+
		"inner join "+
		"(select uuid, measure from latestNonDeletedAentValue where AttributeID= "+
			"(select AttributeID from AttributeKey where AttributeName='QuestionnaireName')) t2 "+
		"on t2.uuid=t1.quesnirid );";


loadAllFileQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
		"WHERE latestNonDeletedAentValue.AttributeID "+
		"= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='FileName') "+
		"GROUP BY uuid;";

loadAllFileIDQuery="SELECT uuid,measure FROM latestNonDeletedArchEntIdentifiers " +
		"WHERE AttributeID "+
		"= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='FileID') "+
		"GROUP BY uuid;";

loadAllSessionQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
		"WHERE latestNonDeletedAentValue.AttributeID "+
		"= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='SessionName') "+
		"GROUP BY uuid;";

loadAllSessionIDQuery="SELECT uuid,measure FROM latestNonDeletedArchEntIdentifiers " +
		"WHERE AttributeID "+
		"= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='SessionID') "+
		"GROUP BY uuid;";

loadAllFieldTripQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
		"WHERE latestNonDeletedAentValue.AttributeID "+
		"= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='FieldTripName') "+
		"GROUP BY uuid;";

loadAllAnswerQuery="SELECT uuid,measure FROM latestNonDeletedArchEntIdentifiers " +
		"WHERE AttributeID "+
		"= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='AnswerLabel') "+
		"GROUP BY uuid;";

loadAllIntroAnsQuery="select uuid,measure from latestNonDeletedArchEntIdentifiers "+
	"where AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerLabel') "+
	"and uuid in (select uuid from latestNonDeletedAentValue "+
	"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionnaireID') "+
	"and latestNonDeletedAentValue.measure in(select uuid from latestNonDeletedAentValue "+
		"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionnaireType') "+
		"and measure=(select uuid from latestNonDeletedAentValue "+
			"where AttributeID= (select AttributeID from AttributeKey where AttributeName='QuesnirTypeName') and measure = 'Introductory')))";

loadAllNonIntroAnsQuery="select uuid,measure from latestNonDeletedArchEntIdentifiers "+
	"where AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerLabel') "+
	"and uuid NOT IN (select uuid from latestNonDeletedAentValue "+
	"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionnaireID') "+
	"and latestNonDeletedAentValue.measure in(select uuid from latestNonDeletedAentValue "+
		"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionnaireType') "+
		"and measure=(select uuid from latestNonDeletedAentValue "+
			"where AttributeID= (select AttributeID from AttributeKey where AttributeName='QuesnirTypeName') and measure = 'Introductory')))";

loadAllAnsNotInSssQuery="select uuid,measure from latestNonDeletedArchEntIdentifiers "+
	"where AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerLabel') "+
	"and uuid NOT IN(select uuid from AentReln "+
		"where RelationshipID in (select RelationshipID from latestNonDeletedRelationship "+
			"where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Answer and Session') "+
			"and latestNonDeletedRelationship.Deleted IS NULL))";

loadAllIntroAnsNotInSssQuery="select uuid,measure from latestNonDeletedArchEntIdentifiers "+
"where AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerLabel') "+
"and uuid in (select uuid from latestNonDeletedAentValue "+
	"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionnaireID') "+
	"and latestNonDeletedAentValue.measure in(select uuid from latestNonDeletedAentValue "+
		"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionnaireType') "+
		"and measure=(select uuid from latestNonDeletedAentValue "+
			"where AttributeID= (select AttributeID from AttributeKey where AttributeName='QuesnirTypeName') and measure = 'Introductory'))) "+
"and uuid NOT IN(select uuid from AentReln "+
	"where RelationshipID in (select RelationshipID from latestNonDeletedRelationship "+
		"where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Answer and Session') "+
		"and latestNonDeletedRelationship.Deleted IS NULL))";

loadAllNonIntroAnsNotInSssQuery="select uuid,measure from latestNonDeletedArchEntIdentifiers "+
"where AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerLabel') "+
"and uuid NOT IN (select uuid from latestNonDeletedAentValue "+
	"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionnaireID') "+
	"and latestNonDeletedAentValue.measure in(select uuid from latestNonDeletedAentValue "+
		"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionnaireType') "+
		"and measure=(select uuid from latestNonDeletedAentValue "+
			"where AttributeID= (select AttributeID from AttributeKey where AttributeName='QuesnirTypeName') and measure = 'Introductory'))) "+
"and uuid NOT IN(select uuid from AentReln "+
	"where RelationshipID in (select RelationshipID from latestNonDeletedRelationship "+
		"where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Answer and Session') "+
		"and latestNonDeletedRelationship.Deleted IS NULL))";

loadAllRoleQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
		"WHERE latestNonDeletedAentValue.AttributeID =( SELECT AttributeID FROM AttributeKey WHERE AttributeName='PersonRoleName') "+
		"AND uuid in (SELECT uuid FROM latestNonDeletedAentValue "+
			"WHERE AttributeID= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='RoleDataOnClient') AND measure ='Yes');";

loadAllUserQuery="select userid, fname || ' ' || lname from user where userdeleted is null";


//loadFilesForAnswer="select uuid, measure from AentValue where AentValue.AttributeID =(select AttributeID from AttributeKey where AttributeKey.AttributeName='AnswerText') and AentValue.uuid in (select uuid from (SELECT uuid FROM AEntValue where AEntValue.AttributeID=(select AttributeKey.AttributeID from AttributeKey where AttributeKey.AttributeName='AnswerQuestionID') and AEntValue.freetext='1000011437080460685') t1 inner join (SELECT uuid FROM AEntValue where AEntValue.AttributeID=(select AttributeKey.AttributeID from AttributeKey where AttributeKey.AttributeName='AnswerQuestionnaireID') and AEntValue.freetext='1000011437080512135') t2 using(uuid))"
/***Enable data and file syncing***/
addActionBarItem("sync", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "Disable Sync";
    }
    actionOn() {
        setSyncEnabled(false);
        setFileSyncEnabled(false);
        showToast("Sync disabled.");
    }
    isActionOff() {
        isSyncEnabled();
    } 
    actionOffLabel() {
        "Enable Sync";
    }
    actionOff() {
        setSyncEnabled(true);
        setFileSyncEnabled(true);
        showToast("Sync enabled.");
    }
});
addActionBarItem("internal_gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{Internal_GPS_Enabled}";
    }
    actionOn() {
        stopGPS();
        showToast("{GPS_Disabled}");
        updateGPSStatus();
    }
    isActionOff() {
        isInternalGPSOn();
    }
    actionOffLabel() {
        "{Internal_GPS_Disabled}";
    }
    actionOff() {
        if(isExternalGPSOn()) {
            stopGPS();
        }
        startInternalGPS();
        showToast("{GPS_Enabled}");
        updateGPSStatus();
    }
});

addActionBarItem("external_gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{External_GPS_Enabled}";
    }
    actionOn() {
        stopGPS();
        showToast("{GPS_Disabled}");
        updateGPSStatus();

    }
    isActionOff() {
        isExternalGPSOn();
    }
    actionOffLabel() {
        "{External_GPS_Disabled}";
    }
    actionOff() {
        if(isInternalGPSOn()) {
            stopGPS();
        }
        startExternalGPS();
        if(isBluetoothConnected()) {
            showToast("{GPS_Enabled}");
        } else {
            showToast("{Please_Enable_Bluetooth}");
            this.isActionOff();
        }
        updateGPSStatus();
    }
});

startInternalGPS();
onSyncEvent("onSyncStart()", "onSyncSuccess()", "onSyncFailure()");


onSyncStart() {
    showToast("sync started");
}
 
onSyncSuccess() {
    showToast("sync success");
}
 
onSyncFailure() {
    showToast("sync failed");
}

/***Save relationships among entities***/
saveEntitiesToRel(String type, String entity1, String entity2) {
	
	 if (isNull(entity1) || isNull(entity2)) return;
	    saveRel(null, type, null, null, new SaveCallback() {
	        onSave(reln_id, newRecord) {
	            addReln(entity1, reln_id, null);
	            addReln(entity2, reln_id, null);
	        }
	        onError(message) {
	            //Log.e("saveEntitiesToHierRel", message);
	        	showWarning("error saveEntitiesToRel",message);
	        }
	    });
}

/***User***/
onEvent("user/usertab/users", "click", "login()");
onEvent("user/usertab/user_Search", "click", "userSearch()");
loadUsers() {
    fetchAll(loadAllUserQuery, new FetchCallback() {
        onFetch(result) {
            populateList("user/usertab/users", result);
        }
    });
}

loadUsers();

String username = "";
String device = "";

login() {
    fetchOne("select userid,fname,lname,email from user where userid='" + getListItemValue() + "';", new FetchCallback() {
        onFetch(result) {
            user = new User(result.get(0),result.get(1),result.get(2),result.get(3));
            setUser(user);
            username = result.get(1) + " " + result.get(2);
            showTabGroup("control");
        }
    });
}
userSearch(){
	String userKeyword=getFieldValue("user/usertab/user_keyword");
	if((isNull(userKeyword)) || userKeyword.equals("*")){
		 fetchAll(loadAllUserQuery, new FetchCallback() {
		        onFetch(result) {
		            populateList("user/usertab/users", result);
		        }
		    });
	}
	else{
		searchUserQuery="select userid, fname || ' ' || lname from user where userdeleted is null and fname like '%"
						+userKeyword+"%'or lname like '%"+userKeyword+"%'";
		fetchAll(searchUserQuery, new FetchCallback() {
	        onFetch(result) {
	            populateList("user/usertab/users", result);
	        }
	    });
	}
}
/***Survey Control***/
onEvent("control/survey_control/New_Survey","click","newSessionForAnswer(\"answer\",null)");
onEvent("control/survey_control","show","loadSessionList(\"answer\")");
//onEvent("control/survey_control/surveyList","click","loadAnswersForQuestionnaire(\"New\")");
onEvent("control/survey_control/surveyList","click","loadSessionInfo(\"answer\")");
//onEvent("sessionForAnswer/sssAnsList/sssAnswerList","click","loadAnswerInfo()");
onEvent("sessionForAnswer/sssAnsList/sssAnswerList","click","checkDelOrView()");
//onEvent("sessionForAnswer/sssAnsList/sssAnswerList","delayclick","deleteAnsFromList()");
/***session for answer***/
onEvent("sessionForAnswer/sssAnsList/New_Answer_In_Session","click","showQuestionnaireList()");
onEvent("sessionForAnswer/sssAnsList/Save_Session","click","saveSession(\"answer\")");
onEvent("sessionForAnswer/sssPersonInfo/Add_Person","click","addPersonToSession()");
onEvent("sessionForAnswer/sssPersonInfo/sssPersonList","click","deletePersonInSession()");
onEvent("sessionForAnswer/sssPersonInfo/Add_New_Person","click","newPerson()");
onEvent("sessionForAnswer/sssPersonInfo","show","refreshPsAndRole()");
onEvent("sessionForAnswer/sssAnsList/sssAnsSelList","click","addItemToTargetList(candidate_files_session,\"sessionFile\",null)");

//onEvent("sessionForAnswer/sssAnsList/Add_Del_Ans","click","addOrDelAnsInSss()");
/***variables for answers***/
answer_id=null;//new answer_id
survey_id=null;
current_quesnir_id=null;
current_question_id=null;
current_quesnir_name=null;
current_question_content=null;
current_question_label=null;//label for generating answerID
current_answer_file_id=null;
current_answer_id=null;
toAddIntervieweeID=null;

questionnaire_list=new ArrayList();
ques_in_current_quesnir=new ArrayList();
queslabel_current_quesnir=new ArrayList();
survey_list=new ArrayList();
//all_quesnir_list=new ArrayList();
answer_quesnir_list=new ArrayList();
/***variables for sessions when creating answer***/
sss_id=null;
sss_answer_list=new ArrayList();
sss_interviewer_list=new ArrayList();//for recording interviewer list when creating session
sssOriginInfo=new ArrayList();
sssNewInfo=new ArrayList();
original_sss_answer_list=new ArrayList();
sssAnsOrigin=new ArrayList();
String sssLabel=null;//This is used for sssID interviewee changing
sssAnswerInterviewerOrigin=new LinkedHashSet();
sssAnswerInterviewerNew=new LinkedHashSet();//This is for generating sss label
String sssLabelOld=null;
sessionAnswerInterviewer=new LinkedHashSet();
Boolean introAns=false;//mark if a session is for introductory questionnaire answer collecting or not
ArrayList newPersonForIntro=new ArrayList(); 

sssPsInfoRelnOrigin=new ArrayList();
sssPsInfoRelnNew=new ArrayList();
sssPersonRoleNameListOrigin=new ArrayList();
sssPersonRoleandNameList=new ArrayList();//selected person role
personRoleList=new ArrayList();
personList=new ArrayList();
sssConsultantList=new LinkedHashSet();
sssInterviewerList=new LinkedHashSet();
String introPsMark=null;//use for check if an intro ps is deleted from his/her intro session
/***Starting from creating a session***/


newSessionForAnswer(String typeflag, ArrayList newAddedPerson){
	if(typeflag.equals("answer")){
		introAns=false;
		introPsMark=null;
	}
	//TODO: WHEN INTRO SESSION, ADD PERSONROLE AND PERSON NAME TO LIST
	else{
		introAns=true;
		newPersonForIntro.clear();
		newPersonForIntro.add(newAddedPerson);
		//showWarning("newPersonForIntro",newPersonForIntro.size().toString());
	}

	sss_id=null;
	sssLabel=null;
	sssLabelOld=null;
	sss_answer_list.clear();
	sssOriginInfo.clear();
	sssNewInfo.clear();	
	original_sss_answer_list.clear();
	sssAnsOrigin.clear();
	sss_interviewer_list.clear();
	sssConsultantList.clear();
	sssInterviewerList.clear();
	sssPersonRoleandNameList.clear();
	currentPosition=new ArrayList();
	currentPosition.clear();
	currentPosition=takePoint();
	newTabGroup("sessionForAnswer");
	String currentTime=getCurrentTime();
    currentDateTimeArray=currentTime.toString().split("\\s+");
    String currentDate=currentDateTimeArray[0];
    setFieldValue("sessionForAnswer/sssAnsBasicInfo/sssStartTimetamp",currentTime);           
    setFieldValue("sessionForAnswer/sssAnsBasicInfo/sssEndTimestamp",currentDate+" 23:59:59");
    if (!isNull(currentPosition)){
    	sssLabel="_"+currentPosition.get(1)+"_"+currentPosition.get(2)+"_"+currentDate;}
    else{
    	sssLabel="_"+"unknownLat"+"_"+"unknownLong"+"_"+currentDate;
    }
    
    String tempSssLabelNew=username+sssLabel;
    labelDeduplicate(tempSssLabelNew,"SessionID","sessionForAnswer/sssAnsBasicInfo/sssID");
    //setFieldValue("sessionForAnswer/sssAnsBasicInfo/sssID",username+sssLabel);
    setFieldValue("sessionForAnswer/sssAnsBasicInfo/sssLocation",currentPosition.get(0));
    populateList("sessionForAnswer/sssAnsList/sssAnswerList",sss_answer_list); 
    populateList("sessionForAnswer/sssPersonInfo/sssPersonList",sssPersonRoleandNameList);

    personRoleList.clear();
    personList.clear();
    sssPersonRoleandNameList.clear();

    fetchAll(loadAllRoleQuery, new FetchCallback() {
        	onFetch(result) {
				if (!isNull(result)) {
					personRoleList.addAll(result);
					populateDropDown("sessionForAnswer/sssPersonInfo/sssPersonRole", personRoleList);	
					if(introAns){//if intro ans, add the current person to the list
						//showWarning("introAns",introAns.toString());
						for (psRole:personRoleList){
							//showWarning("psRole",psRole.get(1));
							if(psRole.get(1).equals("consultant")){
								String cosId=psRole.get(0);
								//showWarning("cosId",cosId);
								introPsMark=cosId+"_"+newPersonForIntro.get(0).get(0);
								//showWarning("introPsMark",introPsMark);
								introPs=new ArrayList();
								introPs.add(introPsMark);
								introPs.add(psRole.get(1)+"_"+newPersonForIntro.get(0).get(1));
								sssPersonRoleandNameList.add(introPs);
								populateList("sessionForAnswer/sssPersonInfo/sssPersonList",sssPersonRoleandNameList);
								break; 
							}
							
						}
					}
					fetchAll(loadAllPersonQuery,new FetchCallback() {
			        	onFetch(fetchResult) {
							if (!isNull(fetchResult)) {
								personList.addAll(fetchResult);
								populateDropDown("sessionForAnswer/sssPersonInfo/sssPersonName", personList);	
								
							}	
							else{
						    	showWarning("No person data","No person data is available, please contact the admin");
								return;
							}
			       	 }

			        	onError(message) {
			            	showToast(message);
			        	}
			    	});
				}	
				else{
			    	showWarning("No Role data","No role data is available, please contact the admin");
					return;
				}
       	    }

        	onError(message) {
            	showToast(message);
        	}
    });

	if(!introAns){
		//query exist answers and prepare for answer selection
		//loadAllNonIntroAnsNotInSssQuery
		fetchAll(loadAllNonIntroAnsNotInSssQuery, new FetchCallback() {
        onFetch(result) {
        	candidate_files_session.clear();
        	candidate_files_session.addAll(result);
            populateList("sessionForAnswer/sssAnsList/sssAnsSelList", candidate_files_session);
        }

	        onError(message) {
	            showToast(message);
	        }
    	});

	}
	else{
		fetchAll(loadAllIntroAnsNotInSssQuery, new FetchCallback() {
        onFetch(result) {
        	candidate_files_session.clear();
        	candidate_files_session.addAll(result);
            populateList("sessionForAnswer/sssAnsList/sssAnsSelList", candidate_files_session);
        }

	        onError(message) {
	            showToast(message);
	        }
    	});
	}
	
}

refreshPsAndRole(){
	fetchAll(loadAllRoleQuery, new FetchCallback() {
        	onFetch(result) {
				if (!isNull(result)) {
					personRoleList.clear();
					personRoleList.addAll(result);
					populateDropDown("sessionForAnswer/sssPersonInfo/sssPersonRole", personRoleList);	
					fetchAll(loadAllPersonQuery,new FetchCallback() {
			        	onFetch(fetchResult) {
							if (!isNull(fetchResult)) {
								personList.clear();
								personList.addAll(fetchResult);
								populateDropDown("sessionForAnswer/sssPersonInfo/sssPersonName", personList);	
								
							}	
							else{
						    	showWarning("No person data","No person data is available, please contact the admin");
								return;
							}
			       	 }

			        	onError(message) {
			            	showToast(message);
			        	}
			    	});
				}	
				else{
			    	showWarning("No Role data","No role data is available, please contact the admin");
					return;
				}
       	    }

        	onError(message) {
            	showToast(message);
        	}
    });
}
checkDelOrView(){
	current_answer_id=null;
	current_answer_id=getListItemValue();

	if(isNull(current_answer_id)){
		showWarning("Error","Can't find this answer, please contact the admin");
		return;
	}
	showAlert("View File Info","Do you want to view answer info?","loadAnswerInfo()","delAnsInSssAlert(\""+current_answer_id+"\")");
}
delAnsInSssAlert(String toDelId){
	showAlert("Delete File","Do you want to delete this answer from this session?","deleteItemFromTargetList(sss_answer_list,\"sessionFile\",\""+toDelId+"\")","returnToCurrentPage()");
}

addPersonToSession(){
	String selectedRoleID=getFieldValue("sessionForAnswer/sssPersonInfo/sssPersonRole");
	String selectedPersonID=getFieldValue("sessionForAnswer/sssPersonInfo/sssPersonName");
	if((isNull(selectedRoleID))||(isNull(selectedPersonID))){
		showWarning("Invalid data","Invalid role data or person data\n"+"you could be using stale data, please contact the Admin");
		return;
	}
	rolePerson=new ArrayList();
	String psRoleNameId=selectedRoleID+"_"+selectedPersonID;
	rolePerson.add(psRoleNameId);
	String selectedRoleName=null;
	String selectedPersonName=null;
	//check duplication
	for (existPs: sssPersonRoleandNameList){
		if (existPs.get(0).equals(psRoleNameId)){
			showWarning("Duplicate data","This person with this role is already in the list");
			return;
		}
	}

	for(role:personRoleList){
		if(role.get(0).equals(selectedRoleID)){
			selectedRoleName=role.get(1);
			break;
		}
	}
	for(person:personList){
		if(person.get(0).equals(selectedPersonID)){
			selectedPersonName=person.get(1);
			break;
		}

	}
	if((isNull(selectedRoleName))||(isNull(selectedPersonName))){
		showWarning("Invalid data","Invalid role data or person data\n"+"you might be using stale data, please contact the Admin");
		return;
	}
	rolePerson.add(selectedRoleName+"_"+selectedPersonName);

	
	if(selectedRoleName.equals("consultant")){
		checkPersonIntro(selectedPersonID,rolePerson);
	}
	else{
		sssPersonRoleandNameList.add(rolePerson);
		populateList("sessionForAnswer/sssPersonInfo/sssPersonList",sssPersonRoleandNameList);
	}
	

}

deletePersonInSession(){
	String toDelPerson=getListItemValue();
	if(introAns){
		if (toDelPerson.equals(introPsMark)){
			showWarning("Invalid operation","This person can not be deleted from this session");
			return;
		}
	}
	for(psInfo : sssPersonRoleandNameList){
		if(psInfo.get(0).equals(toDelPerson)){
			sssPersonRoleandNameList.remove(psInfo);
			break;
		}
	}
	populateList("sessionForAnswer/sssPersonInfo/sssPersonList",sssPersonRoleandNameList);
}

checkRolesInSession(){
	psRoleSum=new LinkedHashSet();
	psRoleSum.clear();
	sssConsultantList.clear();
	sssInterviewerList.clear();

	for(person : sssPersonRoleandNameList) {
		String [] psInfo=person.get(1).split("_");
		if(psInfo[0].equals("consultant")){
			psRoleSum.add("consultant");
			sssConsultantList.add(psInfo[1]);
		}
		else if(psInfo[0].equals("interviewer")){
			psRoleSum.add("interviewer");
			sssInterviewerList.add(psInfo[1]);
		}
	}
	return psRoleSum;
}

showQuestionnaireList(){
	sssRoleInfo=checkRolesInSession();
	if(!sssRoleInfo.contains("consultant")){
		showWarning("No consultant","No consultant selected, please add consultant");
		return;
	}
	else{
		if(!sssRoleInfo.contains("interviewer")){
			showWarning("No interviewer","No interviewer selected, please add interviewer");
			return;
		}
	}

	survey_id=null;
	current_quesnir_id=null;
	current_question_id=null;
	current_quesnir_name=null;
	current_question_content=null;
	current_answer_file_id=null;
	current_answer_id=null;
	current_question_label=null;
	
	ques_in_current_quesnir.clear();
	answer_quesnir_list.clear();
	survey_list.clear();
	questionnaire_list.clear();
	queslabel_current_quesnir.clear();
	
	newTabGroup("questionnaireListAll");
	onEvent("questionnaireListAll","show","loadAllQuesnir()");

}

loadAllQuesnir(){
	if(!introAns){
		fetchAll(
		//loadAllQuestionnaireQuery,
		loadAllRegQuesnirQuery,
		new FetchCallback() {
        	onFetch(result) {
				if (!isNull(result)) {
					//questionnaire_list.addAll(result);
					populateList("questionnaireListAll/questionnaireListInfo/questionnaireListInDB", result);	
					setFieldValue("questionnaireListAll/questionnaireListInfo/quesnir_keyword","*");
				}	
				else{
			    	showWarning("No questionnaire","No questionnaire is available, please contact the admin");
					return;
				}
       	 }

        	onError(message) {
            	showToast(message);
        	}
    	});
	}
	else{
		fetchAll(
		loadAllIntrQuesnirQuery,
		new FetchCallback() {
        	onFetch(result) {
				if (!isNull(result)) {
					populateList("questionnaireListAll/questionnaireListInfo/questionnaireListInDB", result);	
					setFieldValue("questionnaireListAll/questionnaireListInfo/quesnir_keyword","*");
				}	
				else{
			    	showWarning("No questionnaire","No questionnaire is available, please contact the admin");
					return;
				}
       	 }

        	onError(message) {
            	showToast(message);
        	}
    	});
	}
}

loadExistSurvey(){
	survey_list.clear();
	setFieldValue("control/survey_control/survey_keyword","*");
	fetchAll(loadAllSurveyQuery,
			new FetchCallback() {
	        	onFetch(result) {
					if (!isNull(result)) {
						survey_list.addAll(result);	
						}
					populateList("control/survey_control/surveyList", survey_list);	
	       	 }
	        	onError(message) {
	            	showToast(message);
	        	}
	    	});
}

onEvent("questionnaireListAll/questionnaireListInfo/questionnaireListInDB","click","loadQuesnirInfo()");
loadQuesnirInfo(){
	current_quesnir_id=getListItemValue();
	if(isNull(current_quesnir_id)){
		showWarning("No questionnaire selected","No questionnaire is selected, please select a questionnaire");
		return;
	}
	if(current_quesnir_id.equals("placeholder")){
		showWarning("No questionnaire available","No questionnaire available, please contact the admin");
		return;
	}
	else{

		quesnir_ques_reln_query="select uuid from latestNonDeletedArchEntIdentifiers "+
		"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesnirID') "+
		"and measure='"+current_quesnir_id+"' ";

		showTabGroup("questionnaireInfo", current_quesnir_id, new FetchCallback() {
        	onFetch(result) {
	        		setFieldValue("questionnaireInfo/surveyQuesnirHidden/currentQuesnirID",current_quesnir_id);
	        		//showWarning("setFieldValue","setFieldValue");
	        		fetchAll(quesnir_ques_reln_query, new FetchCallback() {
						onFetch(relnResult) {
							if(!isNull(relnResult)){
								//showWarning("relnResult","relnResult");
								quesListRelnOrigin=new ArrayList();
								quesListRelnOrigin.clear();
								quesListRelnOrigin.addAll(relnResult);

								queslabel_current_quesnir.clear();
								ques_in_current_quesnir.clear();
								for(reln:quesListRelnOrigin){
				        			String relnId=reln.get(0);

									loadQuesContentQuery="select uuid,measure from latestNonDeletedAentValue "+
								                		"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionContent') "+
								                		"and uuid=(select measure from latestNonDeletedAentValue where AttributeID="+
								                			"(select AttributeID from AttributeKey where AttributeName='QuesID') "+
								                			"and uuid='"+relnId+"')";

			        				fetchOne(loadQuesContentQuery,new FetchCallback() {
													onFetch(quesResult) {
														if (!isNull(quesResult)) {			
															//showWarning("quesResult","quesResult");
			        						   				ques_in_current_quesnir.add(quesResult);
															populateList("questionnaireInfo/surveyQuestionnaire/surveyQuestionInQuestionnaire", ques_in_current_quesnir);

															loadQuesLabelQuery="select uuid,measure from latestNonDeletedAentValue "+
									                		"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionID') "+
									                		"and uuid=(select measure from latestNonDeletedAentValue where AttributeID="+
									                			"(select AttributeID from AttributeKey where AttributeName='QuesID') "+
									                			"and uuid='"+relnId+"')";

									        				fetchOne(loadQuesLabelQuery,new FetchCallback() {
																	onFetch(labelResult) {
																		if (!isNull(labelResult)) {	
																			//showWarning("labelResult","labelResult");
																			queslabel_current_quesnir.add(labelResult);
																		}
																	}
															       
																	onError(message) {
																		showToast(message);
																	}
																});
															}
														else{
																showWarning("Out-of-date Data","Some questions may not be using anymore\n"+"Please contact the admin for further information");
															}
													}
																       
													onError(message) {
														showToast(message);
														}
													});	
								}
								current_quesnir_name=getFieldValue("questionnaireInfo/surveyQuestionnaire/surveyQuestionnaireName");
	            				showToast("Loaded questionnaire"+result.getId());   
							}
							else{
								showWarning("Out-of-date Data","Some questions in this questionnaire may not be using anymore\n"+"Please contact the admin for further information");
		        			}
							
						}
					});
        	}
        	onError(message) {
            	showToast(message);
        	}
       
   	 	});
		
		
	}
}

//onEvent("answerToQuestionnaire/answerQuesnirInfo/answerInQuesnir","click","loadAnswerInfo()");
//onEvent("answerToQuestionnaire/answerQuesnirInfo/quesInQuesnirList","click","ViewAnswersOfQuestion()");
//onEvent("answerToQuestionnaire/answerQuesnirInfo/View_All_Answer","click","loadAnswersForQuestionnaire(\"Refresh\")");

files_in_current_ques=new ArrayList();
files_origin=new ArrayList();

loadAnswerInfo(){

	current_answer_id=null;
	current_answer_id=getListItemValue();

	if(isNull(current_answer_id)){
		showWarning("Error","Can't find this answer, please contact the admin");
		return;
	}
	else{
	
	loadFileAnsRelnQuery="select RelationshipID from AentReln where AentReln.uuid="+current_answer_id+" "+
				"and RelationshipID in "+
				"(select RelationshipID from latestNonDeletedRelationship where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Answer and File') "+
				"and latestNonDeletedRelationship.Deleted IS NULL)";
	
	fetchAll(loadFileAnsRelnQuery, new FetchCallback() {
        onFetch(result) {
        	ansFileOriginReln.clear();
        	ansFileOriginReln.addAll(result);
        }

        onError(message) {
            showToast(message);
        }
    });
	
	loadFileForAnswerQuery="select uuid,measure from latestNonDeletedAentValue "+ 
			"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='FileName') "+
			"and uuid in "+
 			"(select uuid from AentReln where RelationshipID in "+
			"(select RelationshipID from AEntReln where AEntReln.uuid="+current_answer_id+" "+
 			"AND RelationshipID in "+
			"(select RelationshipID from latestNonDeletedRelationship where RelnTypeID="+
 			"(select RelnTypeID from RelnType where RelnTypeName='Answer and File') "+
			"and latestNonDeletedRelationship.Deleted IS NULL)))";

	loadFileTypeQuery="select uuid,measure from latestNonDeletedAentValue "+ 
			"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='FileType') "+
			"and uuid in "+
 			"(select uuid from AentReln where RelationshipID in "+
			"(select RelationshipID from AEntReln where AEntReln.uuid="+current_answer_id+" "+
 			"AND RelationshipID in "+
			"(select RelationshipID from latestNonDeletedRelationship where RelnTypeID="+
 			"(select RelnTypeID from RelnType where RelnTypeName='Answer and File') "+
			"and latestNonDeletedRelationship.Deleted IS NULL)))";
	
	fetchAll(loadFileForAnswerQuery, new FetchCallback() {
        onFetch(result) {
        	files_in_current_ques.clear();
        	files_origin.clear();
        	files_in_current_ques.addAll(result);
        	files_origin.addAll(result);
        }

        onError(message) {
            showToast(message);
        }
    });

    fetchAll(loadFileTypeQuery, new FetchCallback() {
        onFetch(result) {
        	file_and_fileType.clear();     	
        	file_and_fileType.addAll(result);
        }
        onError(message) {
            showToast(message);
        }
    });

	showTabGroup("survey", current_answer_id, new FetchCallback() {
        onFetch(result) {
			answerInfoOriginal.clear();
        	populateList("survey/answerFile/answerFileList", files_in_current_ques);   	
        	populateDropDown("survey/answerFile/file_Category",categoryTypes);
        	answerInfoOriginal.add(getFieldValue("survey/answerBasic/answerLabel"));
        	answerInfoOriginal.add(getFieldValue("survey/answerBasic/answerText"));
            showToast("Loaded answer"+result.getId());            
        }
        onError(message) {
            showToast(message);
        }
    });
	}
}

onEvent("answerToQuestion/answerInfo/Create_New_Answer","click","startNewAnswer()");
onEvent("answerToQuestion/answerInfo","show","loadAnswerListForQuesion()");
onEvent("answerToQuestion/answerInfo/answerList","click","loadAnswerInfo()");

origin_selected_interviewer=new ArrayList();
selected_answer_interviewer=new ArrayList();
candidate_answer_interviewer=new ArrayList();

origin_selected_interviewee=new ArrayList();
selected_answer_interviewee=new ArrayList();
candidate_answer_interviewee=new ArrayList();
answerInfoOriginal=new ArrayList();
answerInfoNew=new ArrayList();

ansInterviewerOriginReln=new ArrayList();
ansIntervieweeOriginReln=new ArrayList();
ansFileOriginReln=new ArrayList();

ansListForQues=new ArrayList();//Store answers for current question in questionnaire, used for checking if one person has already answered this question or not
categoryTypes=new ArrayList();
categoryTypes.add(new NameValuePair("{Audio}", "Audio"));
categoryTypes.add(new NameValuePair("{Video}", "Video"));
categoryTypes.add(new NameValuePair("{Photo}", "Photo"));
categoryTypes.add(new NameValuePair("{Other}", "Other"));

ansLabelFstPart=null;//QuestionID+"Answer"
ansLabelMidPart=null;//Interviewee("EtAl")
ansLabelSndPart=null;//Date of interview

tempAnsLabel=null;//tempAnsLabel, for trigger of changing answer label
file_and_fileType=new ArrayList();//Keep track of file types, used for changing file labels

startNewAnswer(){

	String current_start_time=getCurrentTime();
	
	//origin_selected_interviewer.clear();
	selected_answer_interviewer.clear();
	//candidate_answer_interviewer.clear();

	//origin_selected_interviewee.clear();
	selected_answer_interviewee.clear();
	//candidate_answer_interviewee.clear();
	
	answerInfoOriginal.clear();
	answerInfoNew.clear();
	
	files_in_current_ques.clear();
	file_and_fileType.clear();
	files_origin.clear();
	
	answer_id=null;
	current_answer_file_id=null;
	current_answer_id=null;
	answerFile=true;
	toAddIntervieweeID=null;
	ansLabelFstPart=null;
	ansLabelSndPart=null;
	ansLabelMidPart=null;
	tempAnsLabel=null;
	
    currentDateTimeArray=current_start_time.toString().split("\\s+");
    String currentDate=currentDateTimeArray[0];
   
    ansLabelFstPart=current_question_label+"_"+"Answer_";
    ansLabelSndPart="_"+currentDate;

    Iterator itConsultant=sssConsultantList.iterator();
    firstConsultant=itConsultant.next();
    ansLabelMidPart=firstConsultant;

    if(sssConsultantList.size()>1){
		ansLabelMidPart=ansLabelMidPart+"EtAl";
    }

	newTabGroup("survey");
	setFieldValue("survey/answerHidden/answerQuestionnaireID", current_quesnir_id);
	setFieldValue("survey/answerHidden/answerQuestionID", current_question_id);
	setFieldValue("survey/answerHidden/answerChoice", "N/A");
	setFieldValue("survey/answerBasic/answerStartTimestamp", current_start_time);
	setFieldValue("survey/answerBasic/answerEndTimestamp", "placeholder");
	tempAnsLabel=ansLabelFstPart+ansLabelMidPart+ansLabelSndPart;
	labelDeduplicate(tempAnsLabel,"AnswerLabel","survey/answerBasic/answerLabel");
	//setFieldValue("survey/answerBasic/answerLabel", tempAnsLabel);
	populateList("survey/answerFile/answerFileList",files_in_current_ques);
	populateDropDown("survey/answerFile/file_Category",categoryTypes);
	
}

loadAnswerListForQuesion(){
	
	loadAnswersForQuesion="SELECT uuid, measure FROM latestNonDeletedAentValue "+
			"WHERE latestNonDeletedAentValue.AttributeID = "+
			"(SELECT AttributeID FROM AttributeKey WHERE AttributeKey.AttributeName='AnswerLabel') "+
			"AND latestNonDeletedAentValue.uuid IN "+
			"(select uuid from "+
				"(SELECT uuid FROM latestNonDeletedAentValue where latestNonDeletedAentValue.AttributeID="+
					"(select AttributeKey.AttributeID from AttributeKey "+
					"where AttributeKey.AttributeName='AnswerQuestionnaireID') "+
					"and latestNonDeletedAentValue.measure="+current_quesnir_id+") t1 "+
			 "inner join "+
			 	"(SELECT uuid FROM latestNonDeletedAentValue where latestNonDeletedAentValue.AttributeID="+
			 		"(select AttributeKey.AttributeID from AttributeKey "+
			 		"where AttributeKey.AttributeName='AnswerQuestionID') "+
			 		"and latestNonDeletedAentValue.measure="+current_question_id+") t2 "+
			 		"using(uuid))";
	if(!isNull(sss_id)){
		answerForSessionTemp=new ArrayList();
		answerForQuestionTemp=new ArrayList();
		
	loadAnswerForSessionQuery="select uuid,measure from latestNonDeletedAentValue "+ 
			"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerLabel') "+
			"and uuid in "+
 			"(select uuid from AentReln where RelationshipID in "+
			"(select RelationshipID from AEntReln where AEntReln.uuid="+sss_id+" "+
 			"AND RelationshipID in "+
			"(select RelationshipID from latestNonDeletedRelationship where RelnTypeID="+
 			"(select RelnTypeID from RelnType where RelnTypeName='Answer and Session') "+
			"and latestNonDeletedRelationship.Deleted IS NULL)))";
	
	fetchAll(loadAnswerForSessionQuery,
			new FetchCallback() {
		        onFetch(result) {
					if (!isNull(result)) {
		        	answerForSessionTemp.clear();
		        	answerForSessionTemp.addAll(result);
		        	
		        	fetchAll(loadAnswersForQuesion,
		        			new FetchCallback() {
		        		        onFetch(result) {
		        					if (!isNull(result)) {
		        						answerForQuestionTemp.clear();
		        						answerForQuestionTemp.addAll(result);
		        						answerForSessionTemp.retainAll(answerForQuestionTemp);
		        						ansListForQues.clear();
		        						ansListForQues.addAll(result);//Answer list for a question in a questionnaire stored
		        						
		        						populateList("answerToQuestion/answerInfo/answerList", answerForSessionTemp);	
		        					}
		        					
		        		        }

		        		        onError(message) {
		        		        	Log.e("error",message);
		        		            showToast(message);
		        		        }
		        		    });
		        	
						//populateList("answerToQuestion/answerInfo/answerList", result);	
					}
					
		        }

		        onError(message) {
		        	Log.e("error",message);
		            showToast(message);
		        }
		    });
	
	
	}
	else{
	
	fetchAll(loadAnswersForQuesion,
			new FetchCallback() {
		        onFetch(result) {
					//if (!isNull(result)) {
						populateList("answerToQuestion/answerInfo/answerList", result);	
						ansListForQues.clear();
						ansListForQues.addAll(result);
					//}
					
		        }

		        onError(message) {
		        	Log.e("error",message);
		            showToast(message);
		        }
		    });
	}
}

onEvent("questionnaireInfo/surveyQuestionnaire/surveyQuestionInQuestionnaire","click","loadAnswerFromQuesInQuesnir()");
onEvent("questionnaireInfo/surveyQuestionnaire/ques_Search","click","searchQuesInCrtQuesnir()");

searchQuesInCrtQuesnir(){
	String toSearchQuesnirID=null;
	
	toSearchQuesnirID=getFieldValue("questionnaireInfo/surveyQuesnirHidden/currentQuesnirID");

	String quesKeyword=null;

	quesKeyword=getFieldValue("questionnaireInfo/surveyQuestionnaire/ques_keyword");


	if(isNull(quesKeyword) || quesKeyword.equals("*")){
	
		quesnir_question_all_query="select uuid,measure from latestNonDeletedAentValue "+ 
				"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionContent') "+
				"and uuid in "+
	 			"(select uuid from AentReln where RelationshipID in "+
				"(select RelationshipID from AEntReln where AEntReln.uuid="+toSearchQuesnirID+" "+
	 			"AND RelationshipID in "+
				"(select RelationshipID from latestNonDeletedRelationship where RelnTypeID="+
	 			"(select RelnTypeID from RelnType where RelnTypeName='Questionnaire and Question') "+
				"and latestNonDeletedRelationship.Deleted IS NULL))) group by uuid";

		fetchAll(quesnir_question_all_query,new FetchCallback() {
        					onFetch(result) {
        						if (!isNull(result)) {	
        							ques_in_current_quesnir.clear();	
        						    ques_in_current_quesnir.addAll(result);
        						    populateList("questionnaireInfo/surveyQuestionnaire/surveyQuestionInQuestionnaire", ques_in_current_quesnir);

        						}
        						else{
        							showWarning("No question in this questionnaire","This questionnaire is not ready yet");
        							return;
        						}
        
        					}
        			       
        				onError(message) {
        					showToast(message);
        				}
        				});
	}
	
	else{

	quesnir_question_search_query="select uuid,measure from latestNonDeletedAentValue "+ 
				"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionContent') "+
				"and measure like '%"+quesKeyword+"%' "+
				"and uuid in "+
	 			"(select uuid from AentReln where RelationshipID in "+
				"(select RelationshipID from AEntReln where AEntReln.uuid="+toSearchQuesnirID+" "+
	 			"AND RelationshipID in "+
				"(select RelationshipID from latestNonDeletedRelationship where RelnTypeID="+
	 			"(select RelnTypeID from RelnType where RelnTypeName='Questionnaire and Question') "+
				"and latestNonDeletedRelationship.Deleted IS NULL))) group by uuid";

	fetchAll(quesnir_question_search_query,new FetchCallback() {
        					onFetch(result) {
        						populateList("questionnaireInfo/surveyQuestionnaire/surveyQuestionInQuestionnaire",result);
        						//showWarning("populateList done","populateList done");
        					}
        			       
        				onError(message) {
        					showToast(message);
        				}
        				});

	}
	
}

loadAnswerFromQuesInQuesnir(){
	if(isNull(current_quesnir_name)){
		showWarning("No questionnaire name available","Can't get the questionnaire name, please contact the admin");
		return;
	}
	current_question_id=getListItemValue();
	Boolean quesLabelRead=false;
	for(ques: ques_in_current_quesnir){
		if(ques.get(0).equals(current_question_id))
		{
			current_question_content=ques.get(1);
			break;
		}
	}
	if(isNull(current_question_content)){
		showWarning("No question content available","Can't get the question content, please contact the admin");
		return;
	}
	for(quesLabel: queslabel_current_quesnir){
		if(quesLabel.get(0).equals(current_question_id))
		{
			current_question_label=quesLabel.get(1);
			quesLabelRead=true;
			break;
		}
	}
	if(quesLabelRead){
		newTabGroup("answerToQuestion");
		setFieldValue("answerToQuestion/answerInfoHidden/answerListQuestionnaireID", current_quesnir_id);
		setFieldValue("answerToQuestion/answerInfoHidden/answerListQuestionID", current_question_id);
		setFieldValue("answerToQuestion/answerInfo/answerListQuestionnaireName", current_quesnir_name);
		setFieldValue("answerToQuestion/answerInfo/answerListQuestionContent", current_question_content);
	}
	
	else{
		queslabel_quesnir_query="select uuid,measure from latestNonDeletedAentValue "+ 
				"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionID') "+
				"and uuid in "+
	 			"(select uuid from AentReln where RelationshipID in "+
				"(select RelationshipID from AEntReln where AEntReln.uuid="+current_quesnir_id+" "+
	 			"AND RelationshipID in "+
				"(select RelationshipID from latestNonDeletedRelationship where RelnTypeID="+
	 			"(select RelnTypeID from RelnType where RelnTypeName='Questionnaire and Question') "+
				"and latestNonDeletedRelationship.Deleted IS NULL))) group by uuid";
			fetchAll(queslabel_quesnir_query,
        				new FetchCallback() {
        					onFetch(result) {
        						if (!isNull(result)) {	
        							queslabel_current_quesnir.clear();
        							queslabel_current_quesnir.addAll(result);

									for(quesLabel: queslabel_current_quesnir){
										if(quesLabel.get(0).equals(current_question_id))
										{
											current_question_label=quesLabel.get(1);
											quesLabelRead=true;
											break;
										}
									}

									if(quesLabelRead){
										newTabGroup("answerToQuestion");
										setFieldValue("answerToQuestion/answerInfoHidden/answerListQuestionnaireID", current_quesnir_id);
										setFieldValue("answerToQuestion/answerInfoHidden/answerListQuestionID", current_question_id);
										setFieldValue("answerToQuestion/answerInfo/answerListQuestionnaireName", current_quesnir_name);
										setFieldValue("answerToQuestion/answerInfo/answerListQuestionContent", current_question_content);
									}
									else{
											showWarning("The data is outdated","Please exit the module and retry");
									}
        						}
        						else{
        							showWarning("Something wrong with getting data","Please exit the module and retry");
        							return;
        						}
        					}
        			       
        				onError(message) {
        					showToast(message);
        				}
        				});
	

	}
}


onEvent("survey/answerFile/Finish_New_Answer","click","saveNewAnswer()");
onEvent("survey/answerFile/Add_New_File","click","newFile(\"answer\")");
onEvent("survey/answerFile/answerFileList","click","viewOrDeleteFileReln()");

personTypes = new ArrayList();
personTypes.add(new NameValuePair("Interviewer", "Interviewer"));
personTypes.add(new NameValuePair("Interviewee", "Interviewee"));


addItemToTargetList(ArrayList sourceList, String type_flag, String intervieweeID){	
	if(isNull(intervieweeID))
	{
		itemId=getListItemValue();	
	}
	else
	{
		itemId=intervieweeID;
	}
	int idx_item=-1;
		
	if(isNull(itemId)){
		showToast("No Item selected");
		return;
	}
	if(itemId.equals("placeholder")){
		showToast("Invalid item");
		return;
	}
	else{	
		
		
		for (int i=0; i<sourceList.size();i++){
			if (sourceList.get(i).get(0).equals(itemId)) {
				idx_item=i;
				break;
			}
		}
		
		if (idx_item>=0) {
			switch (type_flag){
			case "sessionFile":
				sss_answer_list.add(sourceList.get(idx_item));
				candidate_files_session.remove(idx_item);
				//loadSessionInterviewer("session");
				populateList("sessionForAnswer/sssAnsList/sssAnswerList", sss_answer_list);
				populateList("sessionForAnswer/sssAnsList/sssAnsSelList", candidate_files_session);
				
				break;
			
			case "fieldTripSession":
				selected_session_fieldTrip.add(sourceList.get(idx_item));
				candidate_session_fieldTrip.remove(idx_item);
				populateList("fieldTrip/fieldTripSession/fieldTripFileList", selected_session_fieldTrip);
				populateList("fieldTrip/fieldTripSession/fieldTripFileSelectionList", candidate_session_fieldTrip);
				break;
			
			}
		}
		else{
			showWarning("Item Not Found","Oops! Can't find this item, it could be not valid anymore, please contact the Admin");
		}
		
	}
}


deleteItemFromTargetList(ArrayList targetList, String type_flag, String toDelId){
	if(type_flag.equals("sessionFile")){
		deleteItemId=toDelId;
	}
	else{
		deleteItemId=getListItemValue();
	}
	int idx_delete=-1;
	if(isNull(deleteItemId)){
		showToast("No Item selected");
		return;
	}
	if(deleteItemId.equals("placeholder")){
		showToast("Invalid item");
		return;
	}
	else{	
		
		for (int i=0; i<targetList.size();i++){
			if (targetList.get(i).get(0).equals(deleteItemId)) {
				idx_delete=i;
				break;
			}
		}
		
		if (idx_delete>=0) {
			switch (type_flag){
			case "sessionFile":
				candidate_files_session.add(targetList.get(idx_delete));
				sss_answer_list.remove(idx_delete);
				//loadSessionInterviewer("session");
				populateList("sessionForAnswer/sssAnsList/sssAnswerList", sss_answer_list);
				populateList("sessionForAnswer/sssAnsList/sssAnsSelList", candidate_files_session);
				break;
			case "fieldTripSession":
				candidate_session_fieldTrip.add(targetList.get(idx_delete));
				selected_session_fieldTrip.remove(idx_delete);
				populateList("fieldTrip/fieldTripSession/fieldTripFileList", selected_session_fieldTrip);
				populateList("fieldTrip/fieldTripSession/fieldTripFileSelectionList", candidate_session_fieldTrip);
				break;
			}
		}
		else{
			showWarning("Item Not Found","Oops! Can't find this item, it could be not valid anymore, please contact the Admin");
		}
		
	}
}

addInterviewee(){
	toAddIntervieweeID=null;
	toAddIntervieweeID=getListItemValue();
	if(isNull(toAddIntervieweeID)){
		showWarning("Invalid person","Invalid person, please choose another person");
		return;
	}
	checkPersonIntro(toAddIntervieweeID);
}
confirmAddInterviewee(){
	addItemToTargetList(candidate_answer_interviewee,"interviewee",toAddIntervieweeID);
	//personCheckFlag="FAL";
}
stayInCurrentPage()
{
	return;
}

checkPersonAns(){
	ansListPerson=new ArrayList();
	loadIntervieweeAnsQuery="select uuid,measure from latestNonDeletedAentValue "+ 
			"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerLabel') "+
			"and uuid in "+
 			"(select uuid from AentReln where RelationshipID in "+
			"(select RelationshipID from AEntReln where AEntReln.uuid="+toAddIntervieweeID+" "+
 			"AND RelationshipID in "+
			"(select RelationshipID from latestNonDeletedRelationship where RelnTypeID="+
 			"(select RelnTypeID from RelnType where RelnTypeName='Answer and Interviewee') "+
			"and latestNonDeletedRelationship.Deleted IS NULL)))";
	fetchAll(loadIntervieweeAnsQuery,
			new FetchCallback() {
		        onFetch(result) {
		        	//showWarning("fetchAll","fetchAll");
					//if (!isNull(result)) {
						ansListPerson.clear();
						ansListPerson.addAll(result);
						//showWarning("ansListPerson","ansListPerson");
						ansListPerson.retainAll(ansListForQues);
						if(isNull(ansListPerson)){
							//showWarning("not answered","not answered");
							addItemToTargetList(candidate_answer_interviewee,"interviewee",toAddIntervieweeID);
						}
						else
						{
							
							showAlert("alert", "This person has already answered this question \n"+"Do you still want to add this person?", "confirmAddInterviewee()", "stayInCurrentPage()");

						}
				
		        }

		        onError(message) {
		        	Log.e("error",message);
		            showToast(message);
		           
		        }
		    });

}

checkPersonIntro(String personID, ArrayList toAddPerson){
	String person_id=personID;
	checkPsIntrSssQuery="select uuid,measure from latestNonDeletedArchEntIdentifiers "+
			"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionID') "+
			"and uuid in ( select uuid from AentReln "+
				"where RelationshipID in(select RelationshipID from AentReln "+
					"where RelationshipID in (select RelationshipID from latestNonDeletedRelationship "+
						"where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Answer and Session' ) "+
						"and latestNonDeletedRelationship.Deleted IS NULL) "+
			"and uuid in (select uuid from latestNonDeletedAentValue "+
				"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionnaireID') "+
				"and latestNonDeletedAentValue.measure in(select uuid from latestNonDeletedAentValue "+
					"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionnaireType') "+
					"and measure=(select uuid from latestNonDeletedAentValue "+
						"where AttributeID= (select AttributeID from AttributeKey "+
							"where AttributeName='QuesnirTypeName') and measure = 'Introductory'))))) "+
			"and uuid in (select measure from latestNonDeletedArchEntIdentifiers "+
				"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionIDforPerson') "+
				"and uuid in (select uuid from latestNonDeletedAentValue "+
					"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionPersonRole') "+
					"and measure=(select uuid from latestNonDeletedAentValue "+
						"where AttributeID=(select AttributeID from AttributeKey where AttributeName='PersonRoleName') "+
						"and measure='consultant') "+
			"and uuid in (select uuid from latestNonDeletedAentValue "+
				"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionPersonName') "+
				"and measure ='"+person_id+"')));";
	
	fetchAll(checkPsIntrSssQuery,new FetchCallback() {
						        	onFetch(result) {					        	
									if(isNull(result)){
										String toAddPsIdInfo=toAddPerson.get(0);
										String toAddPsInfo=toAddPerson.get(1);

										showAlert("alert", "This person has not answered introductory questionnaire \n"+"Do you still want to add this person?", 
											"addPsToSssConfirm(\""+toAddPsIdInfo+"\", \""+toAddPsInfo+"\")", "addPersonIntro(\""+person_id+"\")");
									}
									else
									{	
										sssPersonRoleandNameList.add(toAddPerson);
										populateList("sessionForAnswer/sssPersonInfo/sssPersonList",sssPersonRoleandNameList);

									}
								
						        }

						        onError(message) {
						        	Log.e("error",message);
						            showToast(message);
						           
						        }
						    });

}

addPsToSssConfirm(String toAddPersonID, String toAddPersonName){
	toAddPersonTemp=new ArrayList();
	toAddPersonTemp.clear();
	toAddPersonTemp.add(toAddPersonID);
	toAddPersonTemp.add(toAddPersonName);
	sssPersonRoleandNameList.add(toAddPersonTemp);
	populateList("sessionForAnswer/sssPersonInfo/sssPersonList",sssPersonRoleandNameList);
}

addPersonIntro(String toAddIntroPersonId){
	showAlert("alert", "Do you want to add introductory answer for this person?", "addPersonIntroAnswer(\""+toAddIntroPersonId+"\")", "stayInCurrentPage()");
}

addPersonIntroAnswer(String toAddIntroPersonId){
	loadPersonInfo("sss",toAddIntroPersonId);
}

saveNewAnswer(){
	
	if(isNull(getFieldValue("survey/answerBasic/answerText"))){
		if(isNull(files_in_current_ques)){
			showWarning("Warning","Please input answer text or adding an answer file");
			return;
		}
		else if((files_in_current_ques.size()==1) && files_in_current_ques.get(0).get(0).equals("0000")){
			showWarning("Warning","Please input answer text or adding an answer file");
			return;
		}
		
	}
	
	if(isNull(current_answer_id)){//create new answer
	setFieldValue("survey/answerBasic/answerEndTimestamp",getCurrentTime());
	String newAnsLabel=getFieldValue("survey/answerBasic/answerLabel");
	saveTabGroup("survey", answer_id, null, null, new SaveCallback() {
		onSave(uuid, newRecord) {
			answer_id = uuid;
			current_answer_id=answer_id;
			if (newRecord) {
				for(file : files_in_current_ques){
					saveEntitiesToRel("Answer and File",answer_id,file.get(0));		
				}
				//showWarning("file saving","file ans reln save done");
				newAnswer=new ArrayList();
				newAnswer.add(answer_id);
				newAnswer.add(newAnsLabel);
				//showWarning("newAnswer","newAnswer array created");
				sss_answer_list.add(newAnswer);
				//showWarning("sss_answer_list",sss_answer_list.size().toString());
				populateList("sessionForAnswer/sssAnsList/sssAnswerList",sss_answer_list);
				//showWarning("populateList","populateList done");
				showToast("new answer created");
				cancelTabGroup("survey", true);
				cancelTabGroup("answerToQuestion", true);
				autoSaveSession("head");
			}
		}
		onError(message) {
			showWarning("error",message);
		}  
		});
	}

	else{//this is changing answerInfo		
			//saveChangedAnswer();
		answerInfoNew.clear();
		answerInfoNew.add(getFieldValue("survey/answerBasic/answerLabel"));
		answerInfoNew.add(getFieldValue("survey/answerBasic/answerText"));
		Hashtable fileListChange=listChange(files_in_current_ques,files_origin);
		Hashtable answerBasicInfoChange=listChange(answerInfoNew,answerInfoOriginal);
		//case1: Nothing changed
		if((fileListChange.containsKey("EQUAL"))&&(answerBasicInfoChange.containsKey("EQUAL"))){
				showWarning("Answer Modification","No data is changed");
				return;
			}
		//case2: only fileList changed
		else if((!fileListChange.containsKey("EQUAL"))&&(answerBasicInfoChange.containsKey("EQUAL"))){
				for(fileDelete:ansFileOriginReln){
					deleteRel(fileDelete.get(0));
				}
				
				for(file : files_in_current_ques){
					saveEntitiesToRel("Answer and File",current_answer_id,file.get(0));		
				}

				if(isNull(sss_id)){
					populateList("sessionForAnswer/sssAnsList/sssAnswerList",sss_answer_list);
				}
				
				showToast("file list changed");
				cancelTabGroup("survey", true);
			}
		else{//case 3: both answer basic info and file list are changed
				saveTabGroup("survey", current_answer_id, null, null, new SaveCallback() {
						onSave(uuid, newRecord) {
							answer_id = uuid;	//not sure how it's working

							for(fileDelete:ansFileOriginReln){
								deleteRel(fileDelete.get(0));
							}
							for(file : files_in_current_ques){
								saveEntitiesToRel("Answer and File",current_answer_id,file.get(0));		
							}
		
							showToast("Answer Info Changed");
							cancelTabGroup("survey", true);
							
					}
					onError(message) {
						showWarning("error",message);
					}  
					});
		}

	}

}

interviewerChangeNewSession(){
	for(interviewerDelete:ansInterviewerOriginReln){
		deleteRel(interviewerDelete.get(0));
	}
	for(interviewer : selected_answer_interviewer){
		saveEntitiesToRel("Answer and Interviewer",current_answer_id,interviewer.get(0));	
	}

	tempInterviewerPrefix=null;
	int interviewerSize=selected_answer_interviewer.size();
	firstInterviewer=selected_answer_interviewer.get(0).get(1);
	if (interviewerSize==1){
		tempInterviewerPrefix=firstInterviewer;
	}
	else{
		tempInterviewerPrefix=firstInterviewer+"EtAl";
	}
	//showWarning("tempInterviewerPrefix",tempInterviewerPrefix);
	newInterviwer=new ArrayList();
	newInterviwer.add(current_answer_id);
	newInterviwer.add(tempInterviewerPrefix);
	for (person: sss_interviewer_list){
		String personUuid=person.get(0);
		if (personUuid.equals(current_answer_id)) {
			sss_interviewer_list.remove(person);
			break;
		}
	}
	sss_interviewer_list.add(newInterviwer);
	//showWarning("sss_interviewer_list","sss_interviewer_list");
	populateList("sessionForAnswer/sssAnsList/sssAnswerList",sss_answer_list);
	//showWarning("populateList",sss_answer_list.size().toString());
}

//measure whether two arraylists are identical, if not, recording what kinds of operation have been done
listChange(ArrayList targetList,ArrayList sourceList){
	Hashtable listChanges=new Hashtable();
	target_list=new ArrayList();
	source_list=new ArrayList();
	target_diff_on_source=new ArrayList();
	source_diff_on_target=new ArrayList();
	listChanges.clear();
	target_list.clear();
	source_list.clear();
	target_diff_on_source.clear();
	source_diff_on_target.clear();
	target_list.addAll(targetList);
	source_list.addAll(sourceList);
	target_list.removeAll(source_list);
	target_diff_on_source.addAll(target_list);//target - source
	target_list.clear();
	target_list.addAll(targetList);
	source_list.removeAll(target_list);
	source_diff_on_target.addAll(source_list);//source - target
	if((target_diff_on_source.isEmpty()) && (source_diff_on_target.isEmpty())){
		listChanges.put("EQUAL",targetList);//here can not put ("EQUAL",null)
	}
	else if((!target_diff_on_source.isEmpty()) && (source_diff_on_target.isEmpty())){
		listChanges.put("PUREADD",target_diff_on_source);

	}
	else if((target_diff_on_source.isEmpty()) && (!source_diff_on_target.isEmpty())){
		listChanges.put("PUREDELETE",source_diff_on_target);
	}
	else {
		listChanges.put("ADD",target_diff_on_source);
		listChanges.put("DELETE",source_diff_on_target);
	}
	return listChanges;
}

newFile(String typeFlag){
	String fileCategory=null;
	String tempAnsID=null;
	switch (typeFlag){
		case "answer":
			fileCategory=getFieldValue("survey/answerFile/file_Category");
			answerFile=true;
			current_answer_file_id=null;	
			tempAnsID=getFieldValue("survey/answerBasic/answerLabel");

			switch (fileCategory){
				case "Audio":		
					newTabGroup("audioFile");
					String tempAudioID=tempAnsID+"_Audio";
					labelDeduplicate(tempAudioID,"FileID","audioFile/audioFileInfo/audioFileID");
					//setFieldValue("audioFile/audioFileInfo/audioFileID",tempAnsID+"_Audio");
					setFieldValue("audioFile/audioFileInfo/audioFileCreator",username);
					setFieldValue("audioFile/audioFileInfo/audioFileType","Audio");
				break;
				case "Video":
					newTabGroup("videoFile");
					String tempVideoID=tempAnsID+"_Video";
					//showWarning("tempVideoID",tempVideoID);
					labelDeduplicate(tempVideoID,"FileID","videoFile/videoFileInfo/videoFileID");
					//showWarning("videoLabelIDNum",videoLabelIDNum.toString());	
					setFieldValue("videoFile/videoFileInfo/videoFileCreator",username);
					setFieldValue("videoFile/videoFileInfo/videoFileType","Video");
				break;
				case "Photo":
					newTabGroup("photoFile");
					String tempPhotoID=tempAnsID+"_Photo";
					labelDeduplicate(tempPhotoID,"FileID","photoFile/photoFileInfo/photoFileID");
					//setFieldValue("photoFile/photoFileInfo/photoFileID",tempAnsID+"_Photo");
					setFieldValue("photoFile/photoFileInfo/photoFileCreator",username);
					setFieldValue("photoFile/photoFileInfo/photoFileType","Photo");
				break;
				case "Other":
					newTabGroup("sketchFile");
					String tempSketchID=tempAnsID+"_Recording";
					labelDeduplicate(tempSketchID,"FileID","sketchFile/sketchFileInfo/sketchFileID");
					//setFieldValue("sketchFile/sketchFileInfo/sketchFileID",tempAnsID+"_Recording");
					setFieldValue("sketchFile/sketchFileInfo/sketchFileCreator",username);
					setFieldValue("sketchFile/sketchFileInfo/sketchFileType","Sketch");
					break;
				default:
					showWarning("Invalid category","Please select a valid file category");
				break;
			}
		break;
	}
	
}

viewOrDeleteFileReln(){
	select_file_id=getListItemValue();
	if(isNull(select_file_id) || select_file_id.equals("0000")){
		showWarning("Invalid file","File not exist");
		return;
	}
	showAlert("View File Info","Do you want to view file info?","loadAnswerFileInfo(\"answer\")","deleteRelnAlert()");
}
deleteRelnAlert(){
	showAlert("Delete File","Do you want to delete this file from this answer?","deleteFileRelation()","returnToCurrentPage()");
}
deleteFileRelation(){		
	delete_file_id=getListItemValue();
	if(isNull(delete_file_id)){
		showWarning("Error","No file selected or file is not available,please contact the admin");
		return;
	}
	if(files_in_current_ques.size()==1){
		placeholder=new ArrayList();
		placeholder.add("0000");
		placeholder.add("No-file-placeholder");
		files_in_current_ques.add(placeholder);
	}
	for(deleteFile:files_in_current_ques){
		if(deleteFile.get(0).equals(delete_file_id))
		{
			files_in_current_ques.remove(deleteFile);
			populateList("survey/answerFile/answerFileList",files_in_current_ques);
			break;
		}
	}
	for(fileToDelete:file_and_fileType){
		if(fileToDelete.get(0).equals(delete_file_id))
		{
			file_and_fileType.remove(deleteFile);
			break;
		}
	}

}
Boolean answerFile=false;//flag of whether user is viewing file from answer page
loadAnswerFileInfo(String typeFlag){
	String view_file_id=null;
	if(typeFlag.equals("answer")){
		current_answer_file_id=getListItemValue();
		if(isNull(current_answer_file_id)){
			showWarning("No file chosen","No file is selected, or the file is not available");
			return;
		}
		answerFile=true;
		view_file_id=current_answer_file_id;
	}
	else{
		file_id=getListItemValue();
		if(isNull(file_id)){
			showWarning("No file chosen","No file is selected, or the file is not available");
			return;
		}
		answerFile=false;
		view_file_id=file_id;
	}
	//showWarning("answerfile",answerFile.toString());
	checkFileTypeQuery="select measure from latestNonDeletedAentValue where latestNonDeletedAentValue.uuid="+view_file_id+" "+
	"and latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeKey.AttributeName='FileType');";
	//showWarning("checkFileTypeQuery",checkFileTypeQuery);
	fetchAll(checkFileTypeQuery,
			new FetchCallback() {
		        onFetch(result) {
					if (!isNull(result)) {
						//showWarning("fetchAll",result.getClass.getName());				
						String currentType=result.get(0).get(0);
						//showWarning("fetchAll",currentType);
						switch (currentType){
						case "Audio":		
							showTabGroup("audioFile", view_file_id, new FetchCallback() {
						        onFetch(result) {						  
						            showToast("Loaded audio file"+result.getId());            
						        }
						        onError(message) {
						            showToast(message);
						        }
						    });
							break;
						case "Video":
							showTabGroup("videoFile", view_file_id, new FetchCallback() {
						        onFetch(result) {						  
						            showToast("Loaded video file"+result.getId());            
						        }
						        onError(message) {
						            showToast(message);
						        }
						    });
							break;
						case "Photo":
							showTabGroup("photoFile", view_file_id, new FetchCallback() {
						        onFetch(result) {						  
						            showToast("Loaded photo file"+result.getId());            
						        }
						        onError(message) {
						            showToast(message);
						        }
						    });
							break;
						case "Sketch":
							showTabGroup("sketchFile", view_file_id, new FetchCallback() {
						        onFetch(result) {						  
						            showToast("Loaded sketch file"+result.getId());            
						        }
						        onError(message) {
						            showToast(message);
						        }
						    });
							break;
						}
					}
					
		        }

		        onError(message) {
		            showToast(message);
		        }
		    });
	
}

onEvent("audioFile/audioFileInfo/Take_Audio_File","click","attachAudioToField(\"audioFile/audioFileInfo/audioFileContent\")");
onEvent("audioFile/audioFileInfo/Save_New_Audio","click","saveFileFromAnswer(\"audioFile/audioFileInfo/audioFileName\",\"audioFile/audioFileInfo/audioFileContent\",\"audioFile\",\"Audio\")");

saveFileFromAnswer(String ref, String fileListViewRef, String tabGroupRef, String fileType){
	if(isNull(getFieldValue(ref))){
		showWarning("Warning","File name can not be null");
		return;
	}
	if(isNull(getFieldValue(fileListViewRef))){	
		showWarning("Warning","File not recorded");
		return;
	}
	else{
		//showWarning("answerfile",answerFile.toString());
		if(answerFile){
		saveTabGroup(tabGroupRef,current_answer_file_id, null, null, new SaveCallback() {
			onSave(uuid, newRecord) {
				current_answer_file_id = uuid;
				if (newRecord) {	
					newFile=new ArrayList();
					newFile.add(current_answer_file_id);
					newFile.add(getFieldValue(ref));
					files_in_current_ques.add(newFile);
					for(file:files_in_current_ques){
						if(file.get(0).equals("0000")){
							files_in_current_ques.remove(file);
							break;
						}
					}
					//showWarning("add file",files_in_current_ques.size().toString());
					populateList("survey/answerFile/answerFileList",files_in_current_ques);
					//Adding new file and file type for changing fileID
					newFileType=new ArrayList();
					newFileType.add(current_answer_file_id);
					newFileType.add(fileType);
					file_and_fileType.add(newFileType);
					//saveEntitiesToRel("Answer and File",answer_id,current_answer_file_id);			
					showToast("New file record for answer created");
					cancelTabGroup(tabGroupRef, true);
					showTab("survey/answerFile");
				}
				else{
					for(changeFile:files_in_current_ques){
						if(changeFile.get(0).equals(current_answer_file_id)){
							newFile=new ArrayList();
							newFile.add(current_answer_file_id);
							newFile.add(getFieldValue(ref));
							files_in_current_ques.remove(changeFile);
							files_in_current_ques.add(newFile);
							populateList("survey/answerFile/answerFileList",files_in_current_ques);
							break;
						}
					}
					showToast("file record for answer changed");
					cancelTabGroup(tabGroupRef, true);
					showTab("survey/answerFile");
				}
			}
			onError(message) {
				showWarning("error",message);
			}  
			});
		}
		else{
			saveTabGroup(tabGroupRef,file_id, null, null, new SaveCallback() {
				onSave(uuid, newRecord) {
					file_id = uuid;
					if (newRecord) {				
						showToast("New file record created");
					}
					else{
						showToast("file record changed");
					}
				}
				onError(message) {
					showWarning("error",message);
				}  
				});
		}
	}
}

returnToCurrentPage(){
	return;
}

attachAudioToField(String ref) {
	if(!isNull(getFieldValue(ref))){
		showWarning("File exists","File exists, please Create New File");
		return;
	}
	recordAudio("setAudioToField(\""+ref+"\")");
}

/**
  */
setAudioToField(String ref) {
	String filePath = getLastAudioFilePath();
	List selectedFiles = null;
    if (isNull(getFieldValue(ref))) {
    	selectedFiles = new ArrayList();
    	selectedFiles.add(filePath);
    	addFile(ref, filePath);  	
    } else {
    	//selectedFiles = _convertPairsToList(getFieldValue(ref));
    	showWarning("File exists","File exists, please Create New File");
    }
    setFieldValue(ref, _convertListToPairs(selectedFiles));
    setFieldValue("audioFile/audioFileInfo/audioFilePath",filePath);
}

onEvent("videoFile/videoFileInfo/Take_Video_File","click","attachVideoToField(\"videoFile/videoFileInfo/videoFileContent\")");
onEvent("videoFile/videoFileInfo/Save_New_Video","click","saveFileFromAnswer(\"videoFile/videoFileInfo/videoFileName\",\"videoFile/videoFileInfo/videoFileContent\",\"videoFile\",\"Video\")");

attachVideoToField(String ref) {
	if(!isNull(getFieldValue(ref))){
		showWarning("File exists","File exists, please Create New File");
		return;
	}
	openVideo("setVideoToField(\""+ref+"\")");
}


setVideoToField(String ref) {
	String filePath = getLastVideoFilePath();
	List selectedFiles = null;
    if (isNull(getFieldValue(ref))) {
    	selectedFiles = new ArrayList();
    	selectedFiles.add(filePath);
    	addVideo(ref, filePath);
    } else {
    	//selectedFiles = _convertPairsToList(getFieldValue(ref));
    	showWarning("File exists","File exists, please Create New File");
    }
    setFieldValue(ref, _convertListToPairs(selectedFiles));
    setFieldValue("videoFile/videoFileInfo/videoFilePath",filePath);
}

onEvent("photoFile/photoFileInfo/Take_Photo_File","click","attachPictureToField(\"photoFile/photoFileInfo/photoFileContent\")");
onEvent("photoFile/photoFileInfo/Save_New_Photo","click","saveFileFromAnswer(\"photoFile/photoFileInfo/photoFileName\",\"photoFile/photoFileInfo/photoFileContent\",\"photoFile\",\"Photo\")");

attachPictureToField(String ref) {
	if(!isNull(getFieldValue(ref))){
		showWarning("File exists","File exists, please Create New File");
		return;
	}
	openCamera("setPictureToField(\""+ref+"\")");
}

/**
  */
setPictureToField(String ref) {
	String filePath = getLastPictureFilePath();
	List selectedFiles = null;
    if (isNull(getFieldValue(ref))) {
    	selectedFiles = new ArrayList();
    	selectedFiles.add(filePath);
    	addPicture(ref, filePath);
    } else {
    	//selectedFiles = _convertPairsToList(getFieldValue(ref));
    	showWarning("File exists","File exists, please Create New File");
    }
    setFieldValue(ref, _convertListToPairs(selectedFiles));
    setFieldValue("photoFile/photoFileInfo/photoFilePath",filePath);
}

onEvent("sketchFile/sketchFileInfo/Take_Sketch_File","click","attachFileToField(\"sketchFile/sketchFileInfo/sketchFileContent\")");
onEvent("sketchFile/sketchFileInfo/Save_New_Sketch","click","saveFileFromAnswer(\"sketchFile/sketchFileInfo/sketchFileName\",\"sketchFile/sketchFileInfo/sketchFileContent\",\"sketchFile\",\"Recording\")");
attachFileToField(String ref) {
	if(!isNull(getFieldValue(ref))){
		showWarning("File exists","File exists, please Create New File");
		return;
	}
	showFileBrowser("setFileToField(\""+ref+"\")");
}


setFileToField(String ref) {
	String filePath = getLastSelectedFilepath();
	List selectedFiles = null;
    if (isNull(getFieldValue(ref))) {
    	selectedFiles = new ArrayList();
    	selectedFiles.add(filePath);
    	addFile(ref, filePath);
    } else {
    	//selectedFiles = _convertPairsToList(getFieldValue(ref));
    	showWarning("File exists","File exists, please Create New File");
    }
    setFieldValue(ref, _convertListToPairs(selectedFiles));
    setFieldValue("sketchFile/sketchFileInfo/sketchFilePath",filePath);
}



/*******Person********/
onEvent("control/user_control/New_User","click","newPerson()");
onEvent("control/user_control","show","loadPerson()");
onEvent("control/user_control/userList","click","loadPersonInfo(\"person\",null)");
onEvent("person/personInfo/Finish_New_Person","click","saveNewPerson(\"save\")");
onEvent("person/personInfo/Take_Intro_Quesnir","click","checkPersonIntroSession()");
onEvent("person/personInfo/Take_Photo","click","attachPictureTo(\"person/personInfo/personPhoto\")");
onEvent("introSssList/introSssInfo/intrSessionList","click","loadSessionInfo(\"answer\")");
onEvent("introSssList/introSssInfo/new_intro_sss","click","newSessionForAnswer(\"intro\",currentPersonInfo)");
onEvent("personRoleSelect/personRoleSelectInfo/","show","loadRoles(\"newPerson\",\"personRoleSelect/personRoleSelectInfo/PersonRoleSelectList\")");
onEvent("personRoleSelect/personRoleSelectInfo/CreateNewPerson","click","newPersonByRole()");

personIntroSss=new ArrayList();
currentPersonInfo=new ArrayList();//for creating intro session for a new added person or existing person
originPersonInfo =new ArrayList();//for recording original loaded person info so that we can tell if a person's info has changed
changedPersonInfo=new ArrayList();//for recording newest edited person info so that we can tell if a person's info has been changed
role_list=new ArrayList();
savePersonWfProperty=new ArrayList();
role_id=null;

person_id=null;

newPerson(){
	showTabGroup("personRoleSelect");
}

loadRoles(String typeFlag, String populateRef){
	fetchAll(loadAllRoleQuery,new FetchCallback() {
				onFetch(result) {
					role_list.clear();
					role_list.addAll(result);
					if(typeFlag.equals("newPerson")){
						populateDropDown(populateRef, role_list);
					}
					else{
						populateList(populateRef,role_list);
					}
					
				}  
		});

}
newPersonByRole(){
	role_id=getFieldValue("personRoleSelect/personRoleSelectInfo/PersonRoleSelectList");
	roleInfo=new ArrayList();
	roleInfo.clear();
	propertyInfo=new ArrayList();
	propertyInfo.clear();
	String roleName=null;
	if(isNull(role_id)){
		showWarning("Invalid role","This role is invalid, please select another role for continue");
		return;
	}
	for(role : role_list){
		if(role.get(0).equals(role_id)){
			roleName=role.get(1);
			break;
		}
	}
	if(isNull(roleName)){
		showWarning("Invalid role","This role is invalid, please select another role for continue");
		return;
	}
	roleInfo.add(role_id);
	roleInfo.add(roleName);
	checkRoleIntroQuery="SELECT measure from latestNonDeletedAentValue WHERE "+
	"latestNonDeletedAentValue.AttributeID="+
	"(select AttributeID from AttributeKey where AttributeKey.AttributeName='RoleIntroAnsRequired') "+
	"AND latestNonDeletedAentValue.uuid='"+role_id+"';";

	checkRolePhotoQuery="SELECT measure from latestNonDeletedAentValue WHERE "+
	"latestNonDeletedAentValue.AttributeID="+
	"(select AttributeID from AttributeKey where AttributeKey.AttributeName='RolePhotoRequired') "+
	"AND latestNonDeletedAentValue.uuid='"+role_id+"';";

	fetchOne(checkRoleIntroQuery,new FetchCallback() {
				onFetch(result) {
					if(!isNull(result)){
						if(result.get(0).equals("Yes")){
							propertyInfo.add("Y");
							fetchOne(checkRolePhotoQuery,new FetchCallback() {
								onFetch(result) {
									if(!isNull(result)){
										if(result.get(0).equals("Yes")){
											propertyInfo.add("Y");
											newPersonWithIntro(roleInfo,propertyInfo);
										}
										else{
											propertyInfo.add("N");
											newPersonWithIntro(roleInfo,propertyInfo);
										}
									}
									else{
										showWarning("Invalid role","This role may not be using anymore\n"+" please contact the admin for details");
										return;
									}
								 
								}  
						});
						}
						else{
							propertyInfo.add("N");
							fetchOne(checkRolePhotoQuery,new FetchCallback() {
								onFetch(result) {
									if(!isNull(result)){
										if(result.get(0).equals("Yes")){
											propertyInfo.add("Y");
											newPersonWithIntro(roleInfo,propertyInfo);
										}
										else{
											propertyInfo.add("N");
											newPersonWithIntro(roleInfo,propertyInfo);
										}
									}
									else{
										showWarning("Invalid role","This role may not be using anymore\n"+" please contact the admin for details");
										return;
									}
								 
								}  
						});
						}
					}

					else{
						showWarning("Invalid role","This role may not be using anymore\n"+" please contact the admin for details");
										return;
					}
				 
				}  
		});

}

newPersonWithIntro(ArrayList roleflag, ArrayList propertyFlag){
	person_id=null;
	newTabGroup("person");
	onEvent("person", "show", "showTab(\"person/personInfo\");");  
	setFieldValue("person/personInfoHide/personRoleId",roleflag.get(0));
	setFieldValue("person/personInfo/personRoleName",roleflag.get(1));
	savePersonWfProperty.clear();
	savePersonWfProperty.addAll(propertyFlag);
}

loadPerson(){
	person_id=null;
	fetchAll(loadAllPersonIDQuery, new FetchCallback() {
        onFetch(result) {
            populateList("control/user_control/userList", result);
        }

        onError(message) {
            showToast(message);
        }
    });
}
loadPersonInfo(String typeflag, String toShowPsId){
if(typeflag.equals("person")){
	person_id=getListItemValue();
}
else{
	person_id=toShowPsId;
}
	if(isNull(person_id)){
		showToast("No Person selected");
		return;
	}
	showTabGroup("person", person_id, new FetchCallback() {
        onFetch(result) {
      
        	String roleUuid=getFieldValue("person/personInfoHide/personRoleId");
            checkPersonRoleQuery="SELECT measure from latestNonDeletedAentValue "+
											"WHERE latestNonDeletedAentValue.uuid='"+roleUuid+"' "+
											"AND latestNonDeletedAentValue.AttributeID="+
											"(select AttributeID from AttributeKey where AttributeName='PersonRoleName');";

			checkRoleIntroQuery="SELECT measure from latestNonDeletedAentValue "+
								"WHERE latestNonDeletedAentValue.uuid='"+roleUuid+"' "+
								"AND latestNonDeletedAentValue.AttributeID="+
								"(select AttributeID from AttributeKey where AttributeName='RoleIntroAnsRequired');";

			checkRolePhotoQuery="SELECT measure from latestNonDeletedAentValue "+
								"WHERE latestNonDeletedAentValue.uuid='"+roleUuid+"' "+
								"AND latestNonDeletedAentValue.AttributeID="+
								"(select AttributeID from AttributeKey where AttributeName='RolePhotoRequired');";

        	fetchOne(checkPersonRoleQuery,new FetchCallback() {
								onFetch(result) {
									if(!isNull(result)){
										setFieldValue("person/personInfo/personRoleName",result.get(0));
										
									}
									else{
										showWarning("Invalid role","This role may not be using anymore\n"+" please contact the admin for details");
									}
								 
								}  
						});

        	fetchOne(checkRoleIntroQuery,new FetchCallback() {
								onFetch(result) {
									if(!isNull(result)){
										savePersonWfProperty.clear();
										if(result.get(0).equals("Yes")){
											savePersonWfProperty.add("Y");
										}
										else{
											savePersonWfProperty.add("N");
										}
										fetchOne(checkRolePhotoQuery,new FetchCallback() {
											onFetch(result) {
												if(!isNull(result)){
													if(result.get(0).equals("Yes")){
														savePersonWfProperty.add("Y");
													}
													else{
														savePersonWfProperty.add("N");
													}
													
												}
												else{
													showWarning("Invalid role","This role may not be using anymore\n"+" please contact the admin for details");
												}
											 
											}  
										});
									}
									else{
										showWarning("Invalid role","This role may not be using anymore\n"+" please contact the admin for details");
									}
								 
								}  
						});
        	originPersonInfo.clear();
        	originPersonInfo.add(getFieldValue("person/personInfo/personID"));
        	originPersonInfo.add(getFieldValue("person/personInfo/personName"));
        	originPersonInfo.add(getFieldValue("person/personInfo/personOtherNames"));
        	originPersonInfo.add(getFieldValue("person/personInfo/personDOB"));
        	originPersonInfo.add(getFieldValue("person/personInfo/personPhoto"));
			originPersonInfo.add(getFieldValue("person/personInfo/personPhotoDesc"));
			originPersonInfo.add(getFieldValue("person/personInfo/personIntroDesc"));

            person=result;
            showToast("Loaded person"+person.getId());            
        }
        onError(message) {
            showToast(message);
        }
    });
}
timeValidation(String startDateTime){	
	String hyphenDateRegex="^\\d{4}[-]\\d{2}[-]\\d{2}$";
	Pattern hyphenDatePattern=Pattern.compile(hyphenDateRegex);
	Matcher hyphenDateMatcher=hyphenDatePattern.matcher(startDateTime);
	if (hyphenDateMatcher.find()){		
			DateFormat df=new SimpleDateFormat("yyyy-MM-dd");
			df.setLenient(false);
			Date sdt=null;
			try{
				sdt=df.parse(startDateTime);	
			}
			catch(Exception ex){
				//Log.e("error", ex.getMessage().toString());
				//showWarning("ex","ex");
				return false;
			}
		return true;
	}
return false;
}

nameCamCaseConverter(String originName){
	String camCase=null;
	String [] originNameSplit=originName.split("\\s+");
	//showWarning("originNameSplit",originNameSplit[0]);
	StringBuffer sb=new StringBuffer();
	//showWarning("StringBuffer","originNameSplit[0]");
	for (part : originNameSplit){
		if(part.length()>1){
			sb.append(Character.toUpperCase(part.charAt(0))).append(part.substring(1));
		}
		else{
			sb.append(Character.toUpperCase(part.charAt(0)));
		}
	}
	camCase=sb.toString().trim();
	return camCase;
	//showWarning("camCase",camCase);
}
saveNewPerson(String typeflag){

	if((isNull(getFieldValue("person/personInfo/personName")))|| (isNull(getFieldValue("person/personInfo/personDOB")))){
		showWarning("Validation Error", "You must fill in the Person Name and Person DOB before you can continue");
        return;
	}

	if((savePersonWfProperty.get(1).equals("Y"))&&(savePersonWfProperty.get(0).equals("N"))){
			if((isNull(getFieldValue("person/personInfo/personPhoto")))&& (isNull(getFieldValue("person/personInfo/personPhotoDesc")))){
				showWarning("Validation Error", "You must either take person photo or write the reason of not taking photo");
        		return;
			}

	}
	if(!typeflag.equals("intro"))//normal saving
	{
		if((savePersonWfProperty.get(1).equals("Y"))&&(savePersonWfProperty.get(0).equals("Y"))){
			if((isNull(getFieldValue("person/personInfo/personPhoto"))) && (isNull(getFieldValue("person/personInfo/personPhotoDesc")))){
				showWarning("Saving Error", "You must either take person photo or write the reason of not taking photo");
        		return;
			}
			if((isNull(person_id)) && (isNull(getFieldValue("person/personInfo/personIntroDesc")))){
				showWarning("Validation Error", "You must either take person introductory questionnaire \n"+"or write the reason of not taking introductory questionnaire");
        		return;
			}
			if((!isNull(person_id))&&(isNull(getFieldValue("person/personInfo/personIntroDesc")))){
				checkPsIntrSssQuery="select uuid,measure from latestNonDeletedArchEntIdentifiers "+
					"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionID') "+
					"and uuid in ( select uuid from AentReln "+
						"where RelationshipID in(select RelationshipID from AentReln "+
							"where RelationshipID in (select RelationshipID from latestNonDeletedRelationship "+
								"where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Answer and Session' ) "+
								"and latestNonDeletedRelationship.Deleted IS NULL) "+
					"and uuid in (select uuid from latestNonDeletedAentValue "+
						"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionnaireID') "+
						"and latestNonDeletedAentValue.measure in(select uuid from latestNonDeletedAentValue "+
							"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionnaireType') "+
							"and measure=(select uuid from latestNonDeletedAentValue "+
								"where AttributeID= (select AttributeID from AttributeKey "+
									"where AttributeName='QuesnirTypeName') and measure = 'Introductory'))))) "+
					"and uuid in (select measure from latestNonDeletedArchEntIdentifiers "+
						"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionIDforPerson') "+
						"and uuid in (select uuid from latestNonDeletedAentValue "+
							"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionPersonRole') "+
							"and measure=(select uuid from latestNonDeletedAentValue "+
								"where AttributeID=(select AttributeID from AttributeKey where AttributeName='PersonRoleName') "+
								"and measure='consultant') "+
					"and uuid in (select uuid from latestNonDeletedAentValue "+
						"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionPersonName') "+
						"and measure ='"+person_id+"')));";
	
				fetchAll(checkPsIntrSssQuery,new FetchCallback() {
						        	onFetch(result) {					        	
									if(isNull(result)){
										showWarning("Validation Error", "You must either take person introductory questionnaire \n"+"or write the reason of not taking introductory questionnaire");
        								return;
									}
								
						        }
						        onError(message) {
						        	Log.e("error",message);
						            showToast(message);
						           
						        }
						    });
			}

		}
	}
    
	String personNameOrigin=getFieldValue("person/personInfo/personName");
	String personNameCamCase=nameCamCaseConverter(personNameOrigin);
	String personLabel=personNameCamCase+"_"+getFieldValue("person/personInfo/personDOB");
	setFieldValue("person/personInfo/personID", personLabel);
	String personDOB=getFieldValue("person/personInfo/personDOB");
	changedPersonInfo.clear();
	changedPersonInfo.add(personLabel);
	changedPersonInfo.add(personNameOrigin);
	changedPersonInfo.add(getFieldValue("person/personInfo/personOtherNames"));
	changedPersonInfo.add(personDOB);
	changedPersonInfo.add(getFieldValue("person/personInfo/personPhoto"));
	changedPersonInfo.add(getFieldValue("person/personInfo/personPhotoDesc"));
	changedPersonInfo.add(getFieldValue("person/personInfo/personIntroDesc"));

	if(timeValidation(personDOB)){

		Hashtable personInfoChange=listChange(changedPersonInfo,originPersonInfo);
		if((personInfoChange.containsKey("EQUAL"))&& (typeflag.equals("intro"))){
				newPersonIntro=new ArrayList();
	      		newPersonIntro.add(person_id);
				newPersonIntro.add(personNameOrigin);
				newSessionForAnswer("intro",newPersonIntro);
		}
		
		else if((personInfoChange.containsKey("EQUAL"))&& (!typeflag.equals("intro"))){
			showWarning("No changes","All data are saved");
			return;
		}

		else{

		saveTabGroup("person", person_id, null, null, new SaveCallback() {
	    onSave(uuid, newRecord) {
	      person_id = uuid;
	      if (newRecord) {
	      	newPersonIntro=new ArrayList();
	      	newPersonIntro.add(person_id);
			newPersonIntro.add(personNameOrigin);

	      	if(typeflag.equals("intro")){
				newSessionForAnswer("intro",newPersonIntro);
			}
			else{
	        	showToast("New record created");
	        	cancelTabGroup("person",true);
	     	    showTab("control/user_control");
	    	}
	      }
		  else{
			showToast("Record changed");	
			if(typeflag.equals("intro")){
				newPersonIntro=new ArrayList();
	      		newPersonIntro.add(person_id);
				newPersonIntro.add(personNameOrigin);
				newSessionForAnswer("intro",newPersonIntro);
			}
		  }
		  
	    }
	    onError(message) {
	        showWarning("error",message);
	    }  
	  	});
		}
		}
		else{
			showWarning("Invalid DOB","1.Datetime format should be yyyy-MM-dd \n"+"2.The value for date should be valid");
						return;
		}

}

//Get the intro session list for a person
checkPersonIntroSession(){

checkPsIntrSssQuery="select uuid,measure from latestNonDeletedArchEntIdentifiers "+
	"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionID') "+
	"and uuid in ( select uuid from AentReln "+
		"where RelationshipID in(select RelationshipID from AentReln "+
			"where RelationshipID in (select RelationshipID from latestNonDeletedRelationship "+
				"where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Answer and Session' ) "+
				"and latestNonDeletedRelationship.Deleted IS NULL) "+
	"and uuid in (select uuid from latestNonDeletedAentValue "+
		"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionnaireID') "+
		"and latestNonDeletedAentValue.measure in(select uuid from latestNonDeletedAentValue "+
			"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionnaireType') "+
			"and measure=(select uuid from latestNonDeletedAentValue "+
				"where AttributeID= (select AttributeID from AttributeKey "+
					"where AttributeName='QuesnirTypeName') and measure = 'Introductory'))))) "+
	"and uuid in (select measure from latestNonDeletedArchEntIdentifiers "+
		"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionIDforPerson') "+
		"and uuid in (select uuid from latestNonDeletedAentValue "+
			"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionPersonRole') "+
			"and measure=(select uuid from latestNonDeletedAentValue "+
				"where AttributeID=(select AttributeID from AttributeKey where AttributeName='PersonRoleName') "+
				"and measure='consultant') "+
	"and uuid in (select uuid from latestNonDeletedAentValue "+
		"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionPersonName') "+
		"and measure ='"+person_id+"')));";

fetchAll(checkPsIntrSssQuery, new FetchCallback() {
        onFetch(result) {
        		if(!isNull(result)){
					personIntroSss.clear();
					personIntroSss.addAll(result);
					showTabGroup("introSssList");
					populateList("introSssList/introSssInfo/intrSessionList",personIntroSss);
					currentPersonInfo.clear();
					currentPersonInfo.add(person_id);
					currentPersonInfo.add(getFieldValue("person/personInfo/personName"));

        		}
        		else{
        			saveNewPerson("intro");
        		}
        	}
            
        onError(message) {
            showToast(message);
        }
    });

}
/*** Language ***/
onEvent("control/language_control/New_Language","click","newLanguage()");
onEvent("language/languageInfo/Finish_New_Language","click","saveNewLanguage()");
onEvent("control/language_control","show","loadLanguage()");
onEvent("control/language_control/languageList","click","loadLanguageInfo()");
language_id=null;
newLanguage(){
	language_id=null;
	newTabGroup("language");
	onEvent("language", "show", "showTab(\"language/languageInfo\");");  

}
saveNewLanguage(){

	if(isNull(getFieldValue("language/languageInfo/languageName"))){
		showWarning("Validation Error", "You must fill in the Language Name before you can continue");
        return;
	}
	if(isNull(getFieldValue("language/languageInfo/languageID"))){
		showWarning("Validation Error", "You must fill in the Language ID before you can continue");
        return;
	}
	//setFieldValue("person/personInfo/personID", getFieldValue("person/personInfo/personName")+getCurrentTime());
	
	saveTabGroup("language", language_id, null, null, new SaveCallback() {
    onSave(uuid, newRecord) {
      language_id = uuid;
      if (newRecord) {
		newLanguage();
        showToast("New record created");
      }
	  else{
		//language_id=null;
		showToast("Record changed");
	  }
    }
    onError(message) {
        showWarning("error",message);
    }  
  });
}

loadLanguage(){
	language_id=null;
	
	fetchAll(loadAllLanguageQuery, new FetchCallback() {
        onFetch(result) {
            populateList("control/language_control/languageList", result);
        }

        onError(message) {
            showToast(message);
        }
    });
}
loadLanguageInfo(){
language_id=getListItemValue();
	if(isNull(language_id)){
		showToast("No Language selected");
		return;
	}
	showTabGroup("language", language_id, new FetchCallback() {
        onFetch(result) {
            language=result;
            showToast("Loaded language"+language.getId());            
        }
        onError(message) {
            showToast(message);
        }
    });
}
/*** File ***/
onEvent("control/file_control","show","loadFile()");
//onEvent("control/file_control/New_File","click","newFile(\"file\")");
onEvent("control/file_control/fileList","click","loadAnswerFileInfo(\"fileView\")");
file_id=null;
fileCategory=new ArrayList();
fileCategory.add(new NameValuePair("{All}", "All"));
fileCategory.add(new NameValuePair("{Audio}", "Audio"));
fileCategory.add(new NameValuePair("{Video}", "Video"));
fileCategory.add(new NameValuePair("{Photo}", "Photo"));
fileCategory.add(new NameValuePair("{Other}", "Other"));

loadFile(){
	file_id=null;
	populateDropDown("control/file_control/fileCategorySelect",fileCategory);
	setFieldValue("control/file_control/file_keyword","*");
	fetchAll(loadAllFileIDQuery, new FetchCallback() {
        onFetch(result) {
            populateList("control/file_control/fileList", result);
        }

        onError(message) {
            showToast(message);
        }
    });
}


session_id=null;
selected_files_session=new ArrayList();
candidate_files_session=new ArrayList();
original_files_session=new ArrayList();
sessionInfoOrigin=new ArrayList();
sessionInfoNew=new ArrayList();
sessionAnswerRelnOrigin=new ArrayList();
sessionInterviewerOrigin=new ArrayList();
sessionInterviewerNew=new ArrayList();
sessionLabel=null;

/***session position***/
takePoint() {

    Object position = getGPSPosition();

    if (position == null) {
        showWarning("Warning","{GPS_Not_Initialised}");
        return null;
    }
    //Object projPosition = getGPSPositionProjected();
    Double latitude = position.getLatitude();
    Double longitude = position.getLongitude();

    //String northing = projPosition.getLatitude();
    //String easting = projPosition.getLongitude();
    ArrayList currentPosition=new ArrayList();
    String latitudeString=latitude.toString();
    String longitudeString=longitude.toString();
    String currentPositionLong="lat:"+latitudeString+"long:"+longitudeString;
    String latitudeShort=latitudeString.substring(0,6);
    String longitudeShort=longitudeString.substring(0,6);
    
    currentPosition.add(currentPositionLong);
    currentPosition.add(latitudeShort);
    currentPosition.add(longitudeShort);
    //showWarning("currentPosition",currentPosition);
    return currentPosition;
}

showSession(){
	showTabGroup("sessionGroup");
}

loadSessionList(String typeflag){
	fetchAll(loadAllSessionIDQuery, new FetchCallback() {
        onFetch(result) {
        	switch(typeflag){
        	case "session":
        		populateList("sessionGroup/sessionInfo/sessionList", result);
        		break;
        	case "answer":
        		populateList("control/survey_control/surveyList", result);
        		break;
        	}
            
        }

        onError(message) {
            showToast(message);
        }
    });
}

loadSessionInfo(String typeFlag){
	switch (typeFlag){
	case "session":
	break;
	//TODO:CHANGE THE QUERY FOR ANSWER AND SESSION RELN
	case "answer":
		sss_id=getListItemValue();
		if(isNull(sss_id)){
			showWarning("Invalid session","No session is selected or session is not available");
			return;
		}
		
		loadAnswerForSessionQuery="select uuid,measure from latestNonDeletedAentValue "+ 
				"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerLabel') "+
				"and uuid in "+
	 			"(select uuid from AentReln where RelationshipID in "+
				"(select RelationshipID from AEntReln where AEntReln.uuid="+sss_id+" "+
	 			"AND RelationshipID in "+
				"(select RelationshipID from latestNonDeletedRelationship where RelnTypeID="+
	 			"(select RelnTypeID from RelnType where RelnTypeName='Answer and Session') "+
				"and latestNonDeletedRelationship.Deleted IS NULL)))";
	 	
		loadAnsSssRelnQuery="select RelationshipID from AentReln where AentReln.uuid="+sss_id+" "+
	 					"and RelationshipID in "+
	 					"(select RelationshipID from latestNonDeletedRelationship where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Answer and Session') "+
	 					"and latestNonDeletedRelationship.Deleted IS NULL)";
		//Query out the reln id of person and person roles in a session
		loadSssPersonRelnQuery="select uuid from latestNonDeletedArchEntIdentifiers "+
		"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionIDforPerson') "+
		"and measure='"+sss_id+"' ";



		fetchAll(loadAnsSssRelnQuery, new FetchCallback() {
	        onFetch(result) {
	        	sssAnsOrigin.clear();
	        	sssAnsOrigin.addAll(result);
	        }
	        onError(message) {
	            showToast(message);
	        }
	    });
		
		showTabGroup("sessionForAnswer", sss_id, new FetchCallback() {
	        onFetch(result) {
	        	sssLabelOld=getFieldValue("sessionForAnswer/sssAnsBasicInfo/sssID");
	        	sssOriginInfo.add(sssLabelOld);
	        	sssOriginInfo.add(getFieldValue("sessionForAnswer/sssAnsBasicInfo/sssName"));
	        	sssOriginInfo.add(getFieldValue("sessionForAnswer/sssAnsBasicInfo/sssStartTimetamp"));
	        	sssOriginInfo.add(getFieldValue("sessionForAnswer/sssAnsBasicInfo/sssEndTimestamp"));  
	        	fetchAll(loadAnswerForSessionQuery, new FetchCallback() {
	                onFetch(answers) {
	                	original_sss_answer_list.clear();
	                	original_sss_answer_list.addAll(answers);
	                	sss_answer_list.clear();
	                	sss_answer_list.addAll(answers);
	                	populateList("sessionForAnswer/sssAnsList/sssAnswerList",original_sss_answer_list);
	                	checkSssQuesnirType("answer");
	                }

	                onError(message) {
	                    showToast(message);
	                }
	            });
				sssPersonRoleNameListOrigin.clear();
	            sssPersonRoleandNameList.clear();
	            sssPsInfoRelnOrigin.clear();
	            fetchAll(loadSssPersonRelnQuery, new FetchCallback() {
	                onFetch(sssPsReln) {
	                	if(!isNull(sssPsReln)){
	                	//sssPsInfoRelnOrigin.addAll(sssPsReln);
	                	sssPsRelnList=new ArrayList();
	                	sssPsRelnList.clear();
	                	sssPsRelnList.addAll(sssPsReln);
	                	for (psReln: sssPsRelnList){
	                		String psRelnId=psReln.get(0);

	                		loadSssPersonRoleQuery="select uuid,measure from latestNonDeletedAentValue "+
	                		"where AttributeID=(select AttributeID from AttributeKey where AttributeName='PersonRoleName') "+
	                		"and uuid=(select measure from latestNonDeletedAentValue where AttributeID="+
	                			"(select AttributeID from AttributeKey where AttributeName='SessionPersonRole') "+
	                			"and uuid='"+psRelnId+"')";
							
	            			fetchOne(loadSssPersonRoleQuery,new FetchCallback() {
								onFetch(sssPsRoleInfo) {
									if(!isNull(sssPsRoleInfo)){
										sssPsRoleInfoList=new ArrayList();
										sssPsRoleInfoList.clear();
										sssPsRoleInfoList.addAll(sssPsRoleInfo);
										String psRoleID=sssPsRoleInfoList.get(0);
										String psRoleName=sssPsRoleInfoList.get(1);

				            			loadSssPersonNameQuery="select uuid,measure from latestNonDeletedAentValue "+
				                		"where AttributeID=(select AttributeID from AttributeKey where AttributeName='PersonName') "+
				                		"and uuid=(select measure from latestNonDeletedAentValue where AttributeID="+
				                			"(select AttributeID from AttributeKey where AttributeName='SessionPersonName') "+
				                			"and uuid='"+psRelnId+"')";

										fetchOne(loadSssPersonNameQuery,new FetchCallback() {
											onFetch(sssPsNameInfo) {
												if(!isNull(sssPsNameInfo)){
													sssPsNameInfoList=new ArrayList();
													sssPsNameInfoList.clear();
													sssPsNameInfoList.addAll(sssPsNameInfo);
													String psNameID=sssPsNameInfoList.get(0);
													String psName=sssPsNameInfoList.get(1);
													psRoleNamePair=new ArrayList();
													psRoleNamePair.clear();
													psRoleNamePair.add(psRoleID+"_"+psNameID);
													psRoleNamePair.add(psRoleName+"_"+psName);
													psInfTriplePair=new ArrayList();
													psInfTriplePair.clear();
													psInfTriplePair.add(psRelnId);
													psInfTriplePair.add(psRoleID+"_"+psNameID);	
													sssPersonRoleNameListOrigin.add(psRoleNamePair);
													sssPersonRoleandNameList.add(psRoleNamePair);
													populateList("sessionForAnswer/sssPersonInfo/sssPersonList",sssPersonRoleandNameList);
													sssPsInfoRelnOrigin.add(psInfTriplePair);
												}
												else{
													populateList("sessionForAnswer/sssPersonInfo/sssPersonList",sssPersonRoleandNameList);
													showWarning("Out-of-date Data","Some person in this session may not be used anymore\n"+"Please contact the admin for further information");
												}
												
											    }  
										    });
								    }
								    else{
								    	populateList("sessionForAnswer/sssPersonInfo/sssPersonList",sssPersonRoleandNameList);
								    	showWarning("Out-of-date Data","Some person roles in this session may not be used anymore\n"+"Please contact the admin for further information");
								    }
								}  
							});
	                	}
	                  }

	                  else{
	                  	populateList("sessionForAnswer/sssPersonInfo/sssPersonList",sssPersonRoleandNameList);
	                  	showWarning("Out-of-date Data","This session may not be used anymore\n"+"Please contact the admin for further information");
	                  }
	                }

	                onError(message) {
	                    showToast(message);
	                }
	            });

				fetchAll(loadAllRoleQuery, new FetchCallback() {
		        	onFetch(result) {
						if (!isNull(result)) {
							personRoleList.clear();
							personRoleList.addAll(result);
							populateDropDown("sessionForAnswer/sssPersonInfo/sssPersonRole", personRoleList);	

							fetchAll(loadAllPersonQuery,new FetchCallback() {
					        	onFetch(fetchResult) {
									if (!isNull(fetchResult)) {
										personList.clear();
										personList.addAll(fetchResult);
										populateDropDown("sessionForAnswer/sssPersonInfo/sssPersonName", personList);	
										
									}	
									else{
								    	showWarning("No person data","No person data is available, please contact the admin");
										return;
									}
					       	 }

					        	onError(message) {
					            	showToast(message);
					        	}
					    	});
						}	
						else{
					    	showWarning("No Role data","No role data is available, please contact the admin");
							return;
						}
		       	    }

		        	onError(message) {
		            	showToast(message);
		        	}
		    	});

	        	
	            showToast("Loaded session"+result.getId());            
	        }
	        onError(message) {
	            showToast(message);
	        }
	    });
		//loadSessionInterviewer("answer");
		
		break;

	}
}

//check if a session is for intro quesnir or regular quesnir
checkSssQuesnirType(String typeflag){
	 //showWarning("checkSssQuesnirType","checkSssQuesnirType");
	String checkAnsId=null;
	if(typeflag.equals("answer")){
		checkAnsId=original_sss_answer_list.get(0).get(0);
	}
	
	checkAnsQuesnirTypeQuery="select uuid,measure from latestNonDeletedAentValue "+
		"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesnirTypeName') "+
		"and uuid=(select measure from latestNonDeletedAentValue "+
			"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionnaireType') "+
			"and uuid=(select measure from latestNonDeletedAentValue where uuid='"+checkAnsId+"' "+
				"and AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionnaireID')))";

		fetchAll(checkAnsQuesnirTypeQuery, new FetchCallback() {
        onFetch(quesnirTypeResult) {
              String quesnirType=quesnirTypeResult.get(0).get(1);
              if(quesnirType.equals("Introductory")){
              	introAns=true;
              	fetchAll(loadAllIntroAnsNotInSssQuery, new FetchCallback() {
    	                onFetch(result) {
    	                	candidate_files_session.clear();
    	                	candidate_files_session.addAll(result);
    	                	candidate_files_session.removeAll(original_sss_answer_list);
    	                	populateList("sessionForAnswer/sssAnsList/sssAnsSelList",candidate_files_session);
    	                }
    	                

    	                onError(message) {
    	                    showToast(message);
    	                	}
            			});
              }
              else{
              	introAns=false;
              	fetchAll(loadAllNonIntroAnsNotInSssQuery, new FetchCallback() {
    	                onFetch(result) {
    	                	candidate_files_session.clear();
    	                	candidate_files_session.addAll(result);
    	                	candidate_files_session.removeAll(original_sss_answer_list);
    	                	populateList("sessionForAnswer/sssAnsList/sssAnsSelList",candidate_files_session);
    	                }
    	                

    	                onError(message) {
    	                    showToast(message);
    	                	}
            			});
              }
       		 }
   		 });
}

loadSessionInterviewer(String typeflag){
	//For session for answer page, TODO: add session group page entry
	switch(typeflag){
	case "answer":
	tempAnsList=new ArrayList();
	sssAnswerInterviewerNew.clear();
	sssAnswerInterviewerOrigin.clear();
	
	loadAnswerUuidForSessionQuery="select uuid from latestNonDeletedAentValue "+ 
			"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerLabel') "+
			"and uuid in "+
 			"(select uuid from AentReln where RelationshipID in "+
			"(select RelationshipID from AEntReln where AEntReln.uuid="+sss_id+" "+
 			"AND RelationshipID in "+
			"(select RelationshipID from latestNonDeletedRelationship where RelnTypeID="+
 			"(select RelnTypeID from RelnType where RelnTypeName='Answer and Session') "+
			"and latestNonDeletedRelationship.Deleted IS NULL)))";
	
	fetchAll(loadAnswerUuidForSessionQuery, new FetchCallback() {
        onFetch(result) {
        	tempAnsList.clear();
        	tempAnsList.addAll(result);
        	//showWarning("tempAnsList",tempAnsList.size().toString());
        	if(!isNull(tempAnsList)){
        		for (ans:tempAnsList){
        			String tempAnsID=ans.get(0);
        			loadInterviewerForAnswerQuery="select uuid,measure from latestNonDeletedAentValue "+ 
            				"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='PersonName') "+
            				"and uuid in "+
            	 			"(select uuid from AentReln where RelationshipID in "+
            				"(select RelationshipID from AEntReln where AEntReln.uuid="+tempAnsID+" "+
            	 			"AND RelationshipID in "+
            				"(select RelationshipID from latestNonDeletedRelationship where RelnTypeID="+
            	 			"(select RelnTypeID from RelnType where RelnTypeName='Answer and Interviewer') "+
            				"and latestNonDeletedRelationship.Deleted IS NULL)))";
        			fetchAll(loadInterviewerForAnswerQuery, new FetchCallback() {
    	                onFetch(result) {
    	                	for(res:result){
    	                		newInterviewer=new ArrayList();
    	                		newInterviewer.add(tempAnsID);
    	                		newInterviewer.add(res.get(1));
    	                		sssAnswerInterviewerOrigin.add(newInterviewer);
    	                	}
    	                	
    	                	//sssAnswerInterviewerOrigin.addAll(result);
    	                }
    	                

    	                onError(message) {
    	                    showToast(message);
    	                	}
            			});
        		}
        	}
        	
        }

        onError(message) {
            showToast(message);
        }
    });
	break;
	case "session":
			if(isNull(selected_files_session)){
				showWarning("invalid data","No answer selected");
				return;
			}	
			sessionAnswerInterviewer.clear();
			for (ans : selected_files_session){
				String tempAnsID=ans.get(0);
				//showWarning("loadSessionInterviewer tempAnsID",tempAnsID);
				loadInterviewerForAnswerQuery="select uuid,measure from latestNonDeletedAentValue "+ 
            				"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='PersonName') "+
            				"and uuid in "+
            	 			"(select uuid from AentReln where RelationshipID in "+
            				"(select RelationshipID from AEntReln where AEntReln.uuid="+tempAnsID+" "+
            	 			"AND RelationshipID in "+
            				"(select RelationshipID from latestNonDeletedRelationship where RelnTypeID="+
            	 			"(select RelnTypeID from RelnType where RelnTypeName='Answer and Interviewer') "+
            				"and latestNonDeletedRelationship.Deleted IS NULL)))";
				fetchAll(loadInterviewerForAnswerQuery, new FetchCallback() {
    	                onFetch(result) {
    	                	for(res:result){
    	                		//newInterviewer=new ArrayList();
    	                		//newInterviewer.add(tempAnsID);
    	                		//newInterviewer.add(res.get(1));
    	                		sessionAnswerInterviewer.add(res.get(1));

    	                	}
    	                	//showWarning("sessionAnswerInterviewer",sessionAnswerInterviewer.size().toString());
    	                }
    	                onError(message) {
    	                    showToast(message);
    	                	}
            			});
			}
	break;

	}
}
//Boolean autoSssSave=false;
autoSaveSession(String typeFlag){
	switch(typeFlag){
		case "head":
			int listSize=sss_answer_list.size();
			if(listSize%5==0){
				//autoSssSave=true;
				saveSession("answer");
			}
		break;
		case "tail":
			sssOriginInfo.clear();
			sssOriginInfo.addAll(sssNewInfo);
			original_sss_answer_list.clear();
			original_sss_answer_list.addAll(sss_answer_list);
			sssPersonRoleNameListOrigin.clear();
			sssPersonRoleNameListOrigin.addAll(sssPersonRoleandNameList);
		break;
	}
	
}

saveSession(String typeflag){
	switch(typeflag){

		case "answer":	
			if(isNull(sss_id)){
				if((isNull(getFieldValue("sessionForAnswer/sssAnsBasicInfo/sssName"))) || 
						(isNull(getFieldValue("sessionForAnswer/sssAnsBasicInfo/sssStartTimetamp"))) || 
						(isNull(sss_answer_list)))
				{
					showWarning("Incomplete Data","Data can't be saved\n"+"Please make sure basic session data is complete");
					return;
				}

				psRoleInfo=checkRolesInSession();
				//showWarning("checkRolesInSession","checkRolesInSession done");

				if(!psRoleInfo.contains("consultant")){
					showWarning("No consultant","No consultant selected, please add consultant");
					return;
				}
				if(!psRoleInfo.contains("interviewer")){
					showWarning("No interviewer","No interviewer selected, please add interviewer");
					return;
				}
				//check answer label
				Iterator itConsultant=sssConsultantList.iterator();
			    firstConsultant=itConsultant.next();
			    ansConsultant=firstConsultant;
			    //showWarning("ansConsultant",ansConsultant);
			    if(sssConsultantList.size()>1){
					ansConsultant=ansConsultant+"EtAl";
					//showWarning("ansConsultantEtal",ansConsultant);
			    }

			    //generate session label
				interviwerPrefix=null;
				Iterator inveIt=sssInterviewerList.iterator();
				interviwerPrefix=inveIt.next();
				//showWarning("interviwerPrefix",interviwerPrefix);
				if (sssInterviewerList.size()>1){
					interviwerPrefix=interviwerPrefix+"EtAl";
					//showWarning("interviwerPrefixEtal",interviwerPrefix);
				}
				String tempSssLabel=interviwerPrefix+sssLabel;
				tempDuplicateList=new ArrayList();
				tempDuplicateList.clear();
				int sizeOfDup=0;
				sssDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
				"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionID') "+
				"and measure like '"+tempSssLabel+"' or measure like '"+tempSssLabel+"(%)'";

				fetchAll(sssDuplicateQuery,new FetchCallback() {
						onFetch(result) {
							if(!isNull(result)){
								tempDuplicateList.addAll(result);
								sizeOfDup=tempDuplicateList.size();
								tempSssLabel=tempSssLabel+"("+sizeOfDup.toString()+")";
								setFieldValue("sessionForAnswer/sssAnsBasicInfo/sssID",tempSssLabel);
							}
							else{
								setFieldValue("sessionForAnswer/sssAnsBasicInfo/sssID",tempSssLabel);
							}
							//setFieldValue("sessionForAnswer/sssAnsBasicInfo/sssID",interviwerPrefix+sssLabel);
							String endTimeAuto=getCurrentTime();
							setFieldValue("sessionForAnswer/sssAnsBasicInfo/sssEndTimestamp",endTimeAuto);
							String startTimeStamp=getFieldValue("sessionForAnswer/sssAnsBasicInfo/sssStartTimetamp");
							String endTimeStamp=endTimeAuto;
							if(timeValidation(startTimeStamp,endTimeStamp,"sessionTime")){
								saveTabGroup("sessionForAnswer", sss_id, null, null, new SaveCallback() {
								    onSave(uuid, newRecord) {
								    	sss_id = uuid;
								      	if (newRecord) {
								    	  for(answer:sss_answer_list){
								    		  saveEntitiesToRel("Answer and Session",sss_id,answer.get(0));
								    	  }
								    	  //showWarning("answer","answer save done");
								    	  //below is saving roles in Session
								    	  for(personInSss: sssPersonRoleandNameList){
								    	  		String psInfoId=personInSss.get(0);
								    	  		String [] psInfoIdSplit=psInfoId.split("_");
								    	  		sssPsRoleAttributes= createAttributeList();
								    	  		sssPsRoleAttributes.add(createEntityAttribute("SessionIDforPerson", null, null, sss_id, null));
								    	  		sssPsRoleAttributes.add(createEntityAttribute("SessionPersonName", null, null, psInfoIdSplit[1], null));
								    	  		sssPsRoleAttributes.add(createEntityAttribute("SessionPersonRole", null, null, psInfoIdSplit[0], null));
								    	  		saveArchEnt(null, "SessionPerson", null, sssPsRoleAttributes);
								    	  }
								    	  //showWarning("psInSssAll","All person role save Done");
								    	  //below is updating answer label and file labels
								    	  for(ans : sss_answer_list){
								    	  	 String ansLabel=ans.get(1);
								    	  	 String [] ansLabelSplit=ansLabel.split("_");
								    	  	 String ansOldPs=ansLabelSplit[2];
								    	  	 //showWarning("ansOldPs",ansOldPs);
								    	  	 if(!ansOldPs.equals(ansConsultant)){
								    	  	 	ansLabelSplit[2]=ansConsultant;
								    	  	 	StringBuilder sb=new StringBuilder();
												for (ansLabelComp : ansLabelSplit){
													if (sb.length()>0)
														{sb.append("_");}
													sb.append(ansLabelComp);
												}

												String newAnsLabelSss=sb.toString();
												//showWarning("newAnsLabelSss",newAnsLabelSss);
												attributes = createAttributeList();
					    						attributes.add(createEntityAttribute("AnswerLabel", null, null, newAnsLabelSss, null));
												entityId=ans.get(0);
												saveArchEnt(entityId, "AnswerToQuestionnaire", null, attributes, new SaveCallback() {
					            					onSave(answerUuid,newRecord) {
					            						//below is changing the filelabel
					            						//showWarning("answerLabel change done",entityId+"answer label change done");
					            						loadFileForAnswerQuery="select uuid,measure from latestNonDeletedAentValue "+ 
														"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='FileID') "+
														"and uuid in "+
				 										"(select uuid from AentReln where RelationshipID in "+
														"(select RelationshipID from AEntReln where AEntReln.uuid="+entityId+" "+
				 										"AND RelationshipID in "+
														"(select RelationshipID from latestNonDeletedRelationship where RelnTypeID="+
				 										"(select RelnTypeID from RelnType where RelnTypeName='Answer and File') "+
														"and latestNonDeletedRelationship.Deleted IS NULL)))";
														fetchAll(loadFileForAnswerQuery, new FetchCallback() {
													        onFetch(result) {
													        	fileListForAns=new ArrayList();
													        	fileListForAns.clear();
													        	fileListForAns.addAll(result);
													        	//showWarning("answerFileFetchDone","answerFileFetchDone");
													        	for (file: fileListForAns){
													        		String fileEntityId=file.get(0);
													        		String oldFileLabel=file.get(1);
													        		String [] oldFileLabelSplit=oldFileLabel.split("_");
													        		String oldFileLabelType=oldFileLabelSplit[oldFileLabelSplit.length-1];
													        		//showWarning("oldFileLabelType",oldFileLabelType);
													        		String newFileLabel=newAnsLabelSss+"_"+oldFileLabelType;
													        		//showWarning("newFileLabel",newFileLabel);
													        		attributesForFile = createAttributeList();
					    											attributesForFile.add(createEntityAttribute("FileID", null, null, newFileLabel, null));
					    											saveArchEnt(fileEntityId, "File", null, attributesForFile);
													        	}
													        }

													        onError(message) {
													            showToast(message);
													        }
													    });
					            					}  
					        						});    //saveArchEnt(entityId, "AnswerToQuestionnaire"
												}//if(!ansOldPs.equals(ansConsultant))
								    	  }// for(ans : sss_answer_list)
								    
								        showToast("New session contains answer(s) created");
								        autoSaveSession("tail");
								      }
								    }
								    onError(message) {
								        showWarning("error",message);
								    }  
								  });
							}
							else{
								showWarning("Invalid timestamp","1. Datetime format should be yyyy-MM-dd HH:mm:ss \n"
								+"2.Datetime input should be valid \n"+
											"3.Start timestamp should be before end timestamp \n"+
														"4.Two dates should be the same");
									return;
							}

						}  
					});

				
			}//if(isNull(sss_id))

			else{//Changing session Info
				if((isNull(getFieldValue("sessionForAnswer/sssAnsBasicInfo/sssName"))) || 
						(isNull(getFieldValue("sessionForAnswer/sssAnsBasicInfo/sssStartTimetamp"))) || 
						(isNull(sss_answer_list)))
				{
					showWarning("Incomplete Data","Please make sure that data is complete");
					return;
				}

				String endTimeAuto=getCurrentTime();
				sssNewInfo.clear();
				sssNewInfo.add(getFieldValue("sessionForAnswer/sssAnsBasicInfo/sssID"));
				sssNewInfo.add(getFieldValue("sessionForAnswer/sssAnsBasicInfo/sssName"));
				sssNewInfo.add(getFieldValue("sessionForAnswer/sssAnsBasicInfo/sssStartTimetamp"));
				sssNewInfo.add(getFieldValue("sessionForAnswer/sssAnsBasicInfo/sssEndTimestamp"));
				//setFieldValue("sessionForAnswer/sssAnsBasicInfo/sssEndTimestamp",);
				Hashtable sssInfoChange=listChange(sssNewInfo,sssOriginInfo);
				Hashtable sssAnsChange=listChange(sss_answer_list,original_sss_answer_list);
				Hashtable sssPsChange=listChange(sssPersonRoleandNameList,sssPersonRoleNameListOrigin);
				//showWarning("listChange done","listChange check done");
				//case 0: nothing changed PASS
				if((sssInfoChange.containsKey("EQUAL")) && (sssAnsChange.containsKey("EQUAL")) && (sssPsChange.containsKey("EQUAL"))){
					showWarning("No change","No data changed");
					return;				
				}
				//when sssPsInfo does not change
				
				else if (sssPsChange.containsKey("EQUAL")){
					//case 1: sssInfoChanged only PASS
					if((!sssInfoChange.containsKey("EQUAL")) && (sssAnsChange.containsKey("EQUAL"))){
						String startTimeStamp=getFieldValue("sessionForAnswer/sssAnsBasicInfo/sssStartTimetamp");
						String endTimeStamp=getFieldValue("sessionForAnswer/sssAnsBasicInfo/sssEndTimestamp");
						if(timeValidation(startTimeStamp,endTimeStamp,"sessionTime")){
						saveTabGroup("sessionForAnswer", sss_id, null, null, new SaveCallback() {
						    onSave(uuid, newRecord) {
						        showToast("Session basic info changed");
						    }
						    onError(message) {
						        showWarning("error",message);
						    }  
						  });
						}
						else{
							showWarning("Invalid timestamp","1. Datetime format should be yyyy-MM-dd HH:mm:ss \n"
									+"2.Datetime input should be valid \n"+
												"3.Start timestamp should be before end timestamp \n"+
															"4.Two dates should be the same");
							return;
						}

					}
					//case 2: sssAns changed only PASS (prob: allow to add session that is not taken in the same day?)
					//TODO:ADD time validation for new answer's time
					else if((sssInfoChange.containsKey("EQUAL")) && (!sssAnsChange.containsKey("EQUAL"))){
						if(sssAnsChange.containsKey("PUREADD")){
							sssNewAddedAns= sssAnsChange.get("PUREADD");
							for(answer:sssNewAddedAns){
						    	saveEntitiesToRel("Answer and Session",sss_id,answer.get(0));
							}//for(answer:sss_answer_list)
						}
						else if (sssAnsChange.containsKey("PUREDELETE")){
							sssDelAns=sssAnsChange.get("PUREDELETE");
							for(ansDelete:sssDelAns){
								deleteRel(ansDelete.get(0));
						    }
						}
						else{
							sssAddChange=sssAnsChange.get("ADD");
							sssDelChange=sssAnsChange.get("DELETE");
							for(ansDelete:sssDelChange){
								deleteRel(ansDelete.get(0));
						    }
						    	
							for(answer:sssAddChange){
							    saveEntitiesToRel("Answer and Session",sss_id,answer.get(0));
							}//for(answer:sss_answer_list)
						}
						showToast("Session answer data changed");
					}
					//case 3: both sssInfo and sssAns changed PASS
					//TODO:ADD time validation for new answer's time
					else{
						String startTimeStamp=getFieldValue("sessionForAnswer/sssAnsBasicInfo/sssStartTimetamp");
						String endTimeStamp=getFieldValue("sessionForAnswer/sssAnsBasicInfo/sssEndTimestamp");
						if(timeValidation(startTimeStamp,endTimeStamp,"sessionTime")){
						saveTabGroup("sessionForAnswer", sss_id, null, null, new SaveCallback() {
						    onSave(uuid, newRecord) {
						    	if(sssAnsChange.containsKey("PUREADD")){
									sssNewAddedAns= sssAnsChange.get("PUREADD");
									for(answer:sssNewAddedAns){
								    	saveEntitiesToRel("Answer and Session",sss_id,answer.get(0));
									}//for(answer:sss_answer_list)
								}
								else if (sssAnsChange.containsKey("PUREDELETE")){
									sssDelAns=sssAnsChange.get("PUREDELETE");
									for(ansDelete:sssDelAns){
										deleteRel(ansDelete.get(0));
								    }
								}
								else{
									sssAddChange=sssAnsChange.get("ADD");
									sssDelChange=sssAnsChange.get("DELETE");
									for(ansDelete:sssDelChange){
										deleteRel(ansDelete.get(0));
								    }
								    	
									for(answer:sssAddChange){
									    saveEntitiesToRel("Answer and Session",sss_id,answer.get(0));
									}//for(answer:sss_answer_list)
								}
						        showToast("Session data changed");

						    }
						    onError(message) {
						        showWarning("error",message);
						    }  
						  });
						}
						else{
							showWarning("Invalid timestamp","1. Datetime format should be yyyy-MM-dd HH:mm:ss \n"
									+"2.Datetime input should be valid \n"+
												"3.Start timestamp should be before end timestamp \n"+
															"4.Two dates should be the same");
							return;
						}
					}
					if(!sssAnsChange.containsKey("EQUAL")){
						psRoleInfo=checkRolesInSession();//for building consultant list
						if(!psRoleInfo.contains("consultant")){
							showWarning("No consultant","No consultant selected, please add consultant");
							return;
						}
						if(!psRoleInfo.contains("interviewer")){
							showWarning("No interviewer","No interviewer selected, please add interviewer");
							return;
						}

						Iterator itConsultant=sssConsultantList.iterator();
						firstConsultant=itConsultant.next();
						ansConsultant=firstConsultant;
						//showWarning("ansConsultant",ansConsultant);

						if(sssConsultantList.size()>1){
							ansConsultant=ansConsultant+"EtAl";
							//showWarning("ansConsultantEtal",ansConsultant);
						}

						for(answer: sss_answer_list){
					    	String ansLabel=answer.get(1);
					    	String [] ansLabelSplit=ansLabel.split("_");
					    	String ansOldPs=ansLabelSplit[2];
					    	//showWarning("ansOldPs",ansOldPs);
					    	if(!ansOldPs.equals(ansConsultant)){
					    	  	ansLabelSplit[2]=ansConsultant;
					    	  	StringBuilder sb=new StringBuilder();
								for (ansLabelComp : ansLabelSplit){
									if (sb.length()>0)
										{sb.append("_");}
									sb.append(ansLabelComp);
								}

								String newAnsLabelSss=sb.toString();
								//showWarning("newAnsLabelSss",newAnsLabelSss);
								attributes = createAttributeList();
		    					attributes.add(createEntityAttribute("AnswerLabel", null, null, newAnsLabelSss, null));
								entityId=answer.get(0);
								saveArchEnt(entityId, "AnswerToQuestionnaire", null, attributes, new SaveCallback() {
		            				onSave(answerUuid,newRecord) {
		            						//below is changing the filelabel
		            					showWarning("answerLabel change done",entityId+"answer label change done");
		            					loadFileForAnswerQuery="select uuid,measure from latestNonDeletedAentValue "+ 
											"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='FileID') "+
											"and uuid in "+
	 										"(select uuid from AentReln where RelationshipID in "+
											"(select RelationshipID from AEntReln where AEntReln.uuid="+entityId+" "+
	 										"AND RelationshipID in "+
											"(select RelationshipID from latestNonDeletedRelationship where RelnTypeID="+
	 										"(select RelnTypeID from RelnType where RelnTypeName='Answer and File') "+
											"and latestNonDeletedRelationship.Deleted IS NULL)))";
										fetchAll(loadFileForAnswerQuery, new FetchCallback() {
										        onFetch(result) {
										        	fileListForAns=new ArrayList();
										        	fileListForAns.clear();
										        	fileListForAns.addAll(result);
										        	//showWarning("answerFileFetchDone","answerFileFetchDone");
										        	for (file: fileListForAns){
										        		String fileEntityId=file.get(0);
										        		String oldFileLabel=file.get(1);
										        		String [] oldFileLabelSplit=oldFileLabel.split("_");
										        		String oldFileLabelType=oldFileLabelSplit[oldFileLabelSplit.length-1];
										        		//showWarning("oldFileLabelType",oldFileLabelType);
										        		String newFileLabel=newAnsLabelSss+"_"+oldFileLabelType;
										        		//showWarning("newFileLabel",newFileLabel);
										        		attributesForFile = createAttributeList();
		    											attributesForFile.add(createEntityAttribute("FileID", null, null, newFileLabel, null));
		    											saveArchEnt(fileEntityId, "File", null, attributesForFile);
										        	}
										        }

										        onError(message) {
										            showToast(message);
										        }
										    });
		            					}  
		        					});    //saveArchEnt(entityId, "AnswerToQuestionnaire"
								}//if(!ansOldPs.equals(ansConsultant))
							}//for loop
					}//if(!sssAnsChange.containsKey("EQUAL"))

				}
				
				//when sssPsInfo changed
				
				else{// need to test case by case
					psRoleInfo=checkRolesInSession();
					//showWarning("checkRolesInSession","checkRolesInSession done");

					if(!psRoleInfo.contains("consultant")){
						showWarning("No consultant","No consultant selected, please add consultant");
						return;
					}
					if(!psRoleInfo.contains("interviewer")){
						showWarning("No interviewer","No interviewer selected, please add interviewer");
						return;
					}
					//check answer label
					Iterator itConsultant=sssConsultantList.iterator();
				    firstConsultant=itConsultant.next();
				    ansConsultant=firstConsultant;
				    //showWarning("ansConsultant",ansConsultant);
				    if(sssConsultantList.size()>1){
						ansConsultant=ansConsultant+"EtAl";
						//showWarning("ansConsultantEtal",ansConsultant);
				    }
				    
				    //generate session label
					interviwerPrefix=null;
					Iterator inveIt=sssInterviewerList.iterator();
					interviwerPrefix=inveIt.next();
					//showWarning("interviwerPrefix",interviwerPrefix);
					if (sssInterviewerList.size()>1){
						interviwerPrefix=interviwerPrefix+"EtAl";
						//showWarning("interviwerPrefixEtal",interviwerPrefix);
					}

					Boolean sssLabelChange=false;
				    String oldSssLabel=getFieldValue("sessionForAnswer/sssAnsBasicInfo/sssID");
					String [] oldSssLabelSplit=oldSssLabel.split("_");
					String sssOldInv=oldSssLabelSplit[0];
					//showWarning("sssOldInv",sssOldInv);
					String newSssLabel=oldSssLabel;
					if(!sssOldInv.equals(interviwerPrefix)){
						oldSssLabelSplit[0]=interviwerPrefix;
						StringBuilder sb=new StringBuilder();
						for (sssLabelComp : oldSssLabelSplit){
							if (sb.length()>0)
								{sb.append("_");}
							sb.append(sssLabelComp);
						}
						newSssLabel=sb.toString();
						//showWarning("newSssLabel",newSssLabel);
						
						sssLabelChange=true;
						//showWarning("setDone",sssLabelChange.toString());
					}

				    
				    //showWarning("newSssLabel",newSssLabel);
					//change session label
					if(sssLabelChange){
						String tempNewSssLabel=newSssLabel;
						tempDuplicateList=new ArrayList();
						tempDuplicateList.clear();
						int sizeOfDup=0;
						sssDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
						"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionID') "+
						"and measure like '"+tempNewSssLabel+"' or measure like '"+tempNewSssLabel+"(%)'";

						fetchAll(sssDuplicateQuery,new FetchCallback() {
							onFetch(result) {
								if(!isNull(result)){
									tempDuplicateList.addAll(result);
									sizeOfDup=tempDuplicateList.size();
									tempNewSssLabel=tempNewSssLabel+"("+sizeOfDup.toString()+")";
									setFieldValue("sessionForAnswer/sssAnsBasicInfo/sssID",tempNewSssLabel);
								}
								else{
									setFieldValue("sessionForAnswer/sssAnsBasicInfo/sssID",tempNewSssLabel);
								}
								saveTabGroup("sessionForAnswer", sss_id, null, null, new SaveCallback() {
						    		onSave(uuid, newRecord) {
						    		if(!(sssAnsChange.containsKey("EQUAL"))){//case0: answer list changed
						    			if(sssAnsChange.containsKey("PUREADD")){
										sssNewAddedAns= sssAnsChange.get("PUREADD");
										for(answer:sssNewAddedAns){
									    	saveEntitiesToRel("Answer and Session",sss_id,answer.get(0));
										}//for(answer:sss_answer_list)
									}
									else if (sssAnsChange.containsKey("PUREDELETE")){
										sssDelAns=sssAnsChange.get("PUREDELETE");
										for(ansDelete:sssDelAns){
											deleteRel(ansDelete.get(0));
									    }
									}
									else{
										sssAddChange=sssAnsChange.get("ADD");
										sssDelChange=sssAnsChange.get("DELETE");
										for(ansDelete:sssDelChange){
											deleteRel(ansDelete.get(0));
									    }
									    	
										for(answer:sssAddChange){
										    saveEntitiesToRel("Answer and Session",sss_id,answer.get(0));
										}//for(answer:sss_answer_list)
									}

						    		}
						    		
						    		}//onSave(uuid, newRecord)

								});

							}

						});
						//labelDeduplicate(tempNewSssLabel,"SessionID","sessionForAnswer/sssAnsBasicInfo/sssID");
						//setFieldValue("sessionForAnswer/sssAnsBasicInfo/sssID",newSssLabel);
						//showWarning("sssLabelChange",sssLabelChange.toString());
						
					}//if sssLabelChange
					else{
						if(sssInfoChange.containsKey("EQUAL")){
							if(!sssAnsChange.containsKey("EQUAL")){
								if(sssAnsChange.containsKey("PUREADD")){
									sssNewAddedAns= sssAnsChange.get("PUREADD");
									for(answer:sssNewAddedAns){
								    	saveEntitiesToRel("Answer and Session",sss_id,answer.get(0));
									}//for(answer:sss_answer_list)
								}
								else if (sssAnsChange.containsKey("PUREDELETE")){
									sssDelAns=sssAnsChange.get("PUREDELETE");
									for(ansDelete:sssDelAns){
										deleteRel(ansDelete.get(0));
								    }
								}
								else{
									sssAddChange=sssAnsChange.get("ADD");
									sssDelChange=sssAnsChange.get("DELETE");
									for(ansDelete:sssDelChange){
										deleteRel(ansDelete.get(0));
								    }
								    	
									for(answer:sssAddChange){
									    saveEntitiesToRel("Answer and Session",sss_id,answer.get(0));
									}//for(answer:sss_answer_list)
								}

							}
						}
						else{
							String startTimeStamp=getFieldValue("sessionForAnswer/sssAnsBasicInfo/sssStartTimetamp");
							String endTimeStamp=getFieldValue("sessionForAnswer/sssAnsBasicInfo/sssEndTimestamp");
							if(timeValidation(startTimeStamp,endTimeStamp,"sessionTime")){
							saveTabGroup("sessionForAnswer", sss_id, null, null, new SaveCallback() {
							    onSave(uuid, newRecord) {
							    	if(!sssAnsChange.containsKey("EQUAL")){
							    		if(sssAnsChange.containsKey("PUREADD")){
										sssNewAddedAns= sssAnsChange.get("PUREADD");
										for(answer:sssNewAddedAns){
									    	saveEntitiesToRel("Answer and Session",sss_id,answer.get(0));
										}//for(answer:sss_answer_list)
									}
									else if (sssAnsChange.containsKey("PUREDELETE")){
										sssDelAns=sssAnsChange.get("PUREDELETE");
										for(ansDelete:sssDelAns){
											deleteRel(ansDelete.get(0));
									    }
									}
									else{
										sssAddChange=sssAnsChange.get("ADD");
										sssDelChange=sssAnsChange.get("DELETE");
										for(ansDelete:sssDelChange){
											deleteRel(ansDelete.get(0));
									    }
									    	
										for(answer:sssAddChange){
										    saveEntitiesToRel("Answer and Session",sss_id,answer.get(0));
										}//for(answer:sss_answer_list)
									}
							    	}
							    }
							    onError(message) {
							        showWarning("error",message);
							    }  
							  });
							}
							else{
								showWarning("Invalid timestamp","1. Datetime format should be yyyy-MM-dd HH:mm:ss \n"
										+"2.Datetime input should be valid \n"+
													"3.Start timestamp should be before end timestamp \n"+
																"4.Two dates should be the same");
								return;
							}

						}//if sssInfo changed 
					}//! sssLabelChange
					//below is answer and answer file label change
					//showWarning("BEGIN ANSWER LABEL CHANGE","BEGIN ANSWER LABEL CHANGE");
					//below is changing role info
					    		if (sssPsChange.containsKey("PUREADD")){
					    			//showWarning("PUREADD","PUREADD");
					    			sssNewAddedPs=sssPsChange.get("PUREADD");
					    			for(personInSss: sssNewAddedPs){
						    	  		String psInfoId=personInSss.get(0);
						    	  		String [] psInfoIdSplit=psInfoId.split("_");
						    	  		sssPsRoleAttributes= createAttributeList();
						    	  		sssPsRoleAttributes.add(createEntityAttribute("SessionIDforPerson", null, null, sss_id, null));
						    	  		sssPsRoleAttributes.add(createEntityAttribute("SessionPersonName", null, null, psInfoIdSplit[1], null));
						    	  		sssPsRoleAttributes.add(createEntityAttribute("SessionPersonRole", null, null, psInfoIdSplit[0], null));
						    	  		saveArchEnt(null, "SessionPerson", null, sssPsRoleAttributes);
						    	  	}
						    	  	//showWarning("PUREADD changing role info","PUREADD changing role info");

					    		}//if (sssPsChange.containsKey("PUREADD"))
					    		else if (sssPsChange.containsKey("PUREDELETE")){
					    			//showWarning("PUREDELETE","PUREDELETE");
					    			sssNewDelPs=sssPsChange.get("PUREDELETE");
					    			for(personInSss: sssNewDelPs){
						    	  		String toDelPsID=personInSss.get(0);
						    	  		for(oldPs: sssPsInfoRelnOrigin){
						    	  			if (toDelPsID.equals(oldPs.get(1))){
						    	  				String toDelPsRelnID=oldPs.get(0);
						    	  				//showWarning("toDelPsRelnID",toDelPsRelnID);
						    	  				deleteArchEnt(toDelPsRelnID, new DeleteCallback() {
												    onDelete(uuid) {
												      //showWarning("Record deleted",toDelPsRelnID);
												    }
												  });
						    	  				//deleteArchEnt(toDelPsRelnID);
						    	  			}
						    	  		}
						    	  	}
						    	  	//showWarning("PUREDELETE changing role info","PUREDELETE changing role info");

					    		}//else if (sssPsChange.containsKey("PUREDELETE"))
					    		else{
					    			//showWarning("DELETE","DELETE");
						    	  	sssToDelPs=sssPsChange.get("DELETE");
						    	  	for(personInSss: sssToDelPs){
						    	  		String toDelPsID=personInSss.get(0);
						    	  		for(oldPs: sssPsInfoRelnOrigin){
						    	  			if (toDelPsID.equals(oldPs.get(1))){
						    	  				String toDelPsRelnID=oldPs.get(0);
						    	  				deleteArchEnt(toDelPsRelnID);
						    	  			}
						    	  		}
						    	  	}
					    			sssToAddPs=sssPsChange.get("ADD");
					    			//showWarning("ADD","ADD");
					    			for(personInSss: sssToAddPs){
						    	  		String psInfoId=personInSss.get(0);
						    	  		String [] psInfoIdSplit=psInfoId.split("_");
						    	  		sssPsRoleAttributes= createAttributeList();
						    	  		sssPsRoleAttributes.add(createEntityAttribute("SessionIDforPerson", null, null, sss_id, null));
						    	  		sssPsRoleAttributes.add(createEntityAttribute("SessionPersonName", null, null, psInfoIdSplit[1], null));
						    	  		sssPsRoleAttributes.add(createEntityAttribute("SessionPersonRole", null, null, psInfoIdSplit[0], null));
						    	  		saveArchEnt(null, "SessionPerson", null, sssPsRoleAttributes);
						    	  	}
									
						    	  	//showWarning("ADD+DELETE","ADD+DELETE");
					    		}//sssPsChange containsKey("ADD") and "DELETE"
							for(ans : sss_answer_list){
					    	  	 String ansLabel=ans.get(1);
					    	  	 String [] ansLabelSplit=ansLabel.split("_");
					    	  	 String ansOldPs=ansLabelSplit[2];
					    	  	 //showWarning("ansOldPs",ansOldPs);
					    	  	 if(!ansOldPs.equals(ansConsultant)){
					    	  	 	ansLabelSplit[2]=ansConsultant;
					    	  	 	StringBuilder sb=new StringBuilder();
									for (ansLabelComp : ansLabelSplit){
										if (sb.length()>0)
											{sb.append("_");}
										sb.append(ansLabelComp);
									}

									String newAnsLabelSss=sb.toString();
									//showWarning("newAnsLabelSss",newAnsLabelSss);
									attributes = createAttributeList();
		    						attributes.add(createEntityAttribute("AnswerLabel", null, null, newAnsLabelSss, null));
									entityId=ans.get(0);
									saveArchEnt(entityId, "AnswerToQuestionnaire", null, attributes, new SaveCallback() {
		            					onSave(answerUuid,newRecord) {
		            						//below is changing the filelabel
		            						//showWarning("answerLabel change done",entityId+"answer label change done");
		            						loadFileForAnswerQuery="select uuid,measure from latestNonDeletedAentValue "+ 
											"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='FileID') "+
											"and uuid in "+
	 										"(select uuid from AentReln where RelationshipID in "+
											"(select RelationshipID from AEntReln where AEntReln.uuid="+entityId+" "+
	 										"AND RelationshipID in "+
											"(select RelationshipID from latestNonDeletedRelationship where RelnTypeID="+
	 										"(select RelnTypeID from RelnType where RelnTypeName='Answer and File') "+
											"and latestNonDeletedRelationship.Deleted IS NULL)))";
											fetchAll(loadFileForAnswerQuery, new FetchCallback() {
										        onFetch(result) {
										        	fileListForAns=new ArrayList();
										        	fileListForAns.clear();
										        	fileListForAns.addAll(result);
										        	//showWarning("answerFileFetchDone","answerFileFetchDone");
										        	for (file: fileListForAns){
										        		String fileEntityId=file.get(0);
										        		String oldFileLabel=file.get(1);
										        		String [] oldFileLabelSplit=oldFileLabel.split("_");
										        		String oldFileLabelType=oldFileLabelSplit[oldFileLabelSplit.length-1];
										        		//showWarning("oldFileLabelType",oldFileLabelType);
										        		String newFileLabel=newAnsLabelSss+"_"+oldFileLabelType;
										        		//showWarning("newFileLabel",newFileLabel);
										        		attributesForFile = createAttributeList();
		    											attributesForFile.add(createEntityAttribute("FileID", null, null, newFileLabel, null));
		    											saveArchEnt(fileEntityId, "File", null, attributesForFile);
										        	}
										        }

										        onError(message) {
										            showToast(message);
										        }
										    });
		            					}  
		        					});    //saveArchEnt(entityId, "AnswerToQuestionnaire"
								}//if(!ansOldPs.equals(ansConsultant))
					    	  }// for(ans : sss_answer_list)
					showToast("Session info updated");
					autoSaveSession("tail");
					//cancelTabGroup("sessionForAnswer",true);
					//showTab("control/survey_control");

				}//when sssPsInfo changed
				
			}//Changing session Info
		break;
		
	}
}

timeValidation(String startDateTime, String endDateTime, String flag){
	switch(flag){
	case ("sessionTime"):
		DateFormat df=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		df.setLenient(false);
		try{
			
			Date sdt=df.parse(startDateTime);
			Date edt=df.parse(endDateTime);	
			if(sdt.getTime()>edt.getTime()){
				//showWarning("std<edt","sdt<edt");
					return false;
					}
			
		
			else{
				String [] startTime=startDateTime.split("\\s+");
				String [] endTime=endDateTime.split("\\s+");
				if(startTime[0].equals(endTime[0])){
					return true;
				}
				else{
					//showWarning("std!=etd","std!=etd");
					return false;
				}
			}
		}
		catch(Exception ex){
			Log.e("error", ex.getMessage().toString());
			//String message = getStackTrace(excption);
			//exception.printStackTrace();
			return false;
		}
		break;
		
	case ("fieldTripTime"):
		DateFormat df=new SimpleDateFormat("yyyy-MM-dd");
	try{
		Date sdt=df.parse(startDateTime);
		Date edt=df.parse(endDateTime);
		if(sdt.getTime()>edt.getTime()){
			return false;
		}
	
		else{
			return true;
		}
	}
	catch(Exception excption){
		//exception.printStackTrace();
		return false;
	}
		break;
	}
}
/***fieldTrip***/

//onEvent("control/fileGroup_control/fieldTripGroup","click","showFieldTrip()");
onEvent("control/fieldTrip_control","show","loadFieldTripList()");
onEvent("control/fieldTrip_control/fieldTripList","click","loadFieldTripInfo()");
onEvent("control/fieldTrip_control/New_FieldTrip","click","startNewFieldTrip()");
onEvent("fieldTrip/fieldTripSession/Finish_New_FieldTrip","click","saveFieldTrip()");
onEvent("fieldTrip/fieldTripSession/fieldTripFileSelectionList","click","addItemToTargetList(candidate_session_fieldTrip,\"fieldTripSession\",null)");
onEvent("fieldTrip/fieldTripSession/fieldTripFileList","click","deleteItemFromTargetList(selected_session_fieldTrip,\"fieldTripSession\",null)");
fieldTrip_id=null;
selected_session_fieldTrip=new ArrayList();
candidate_session_fieldTrip=new ArrayList();
original_session_fieldTrip=new ArrayList();
fieldTripInfoOrigin=new ArrayList();
fieldTripInfoNew=new ArrayList();
/*
showFieldTrip(){
	showTabGroup("fileGroup_control");
}
*/
loadFieldTripList(){
	fetchAll(loadAllFieldTripQuery, new FetchCallback() {
        onFetch(result) {
            populateList("control/fieldTrip_control/fieldTripList", result);
        }

        onError(message) {
            showToast(message);
        }
    });
}

loadFieldTripInfo(){
	fieldTrip_id=getListItemValue();
	if(isNull(fieldTrip_id)){
		showWarning("Invalid fieldTrip","No fieldTrip is selected or fieldTrip is not available");
		return;
	}
	loadSessionForFieldTripQuery="select uuid,measure from latestNonDeletedAentValue "+ 
			"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionName') "+
			"and uuid in "+
 			"(select uuid from AentReln where RelationshipID in "+
 				"(select RelationshipID from "+
 					"(select RelationshipID, AEntRelnTimestamp from AentReln where AentReln.uuid="+fieldTrip_id+" "+
 					"and RelationshipID in "+
 						"(select RelationshipID from Relationship where RelnTypeID="+
 							"(select RelnTypeID from RelnType where RelnTypeName='Session and FieldTrip'))) t1 "+
 					"inner join "+
 					"(select max(AEntRelnTimestamp) as maxtime from AEntReln where AEntReln.uuid ="+fieldTrip_id+" "+
 					"and AentReln.RelationshipID in (select RelationshipID from Relationship where RelnTypeID="+
 					"(select RelnTypeID from RelnType where RelnTypeName='Session and FieldTrip'))) t2 "+
 					"on t1.AentRelnTimestamp=t2.maxtime group by relationshipID))";
	
	showTabGroup("fieldTrip", fieldTrip_id, new FetchCallback() {
        onFetch(result) {
        	String startTimeOrigin=getFieldValue("fieldTrip/fieldTripBasicInfoHidden/fieldTripStartTimetamp");
        	String endTimeOrigin=getFieldValue("fieldTrip/fieldTripBasicInfoHidden/fieldTripEndTimestamp");
        	fieldTripInfoOrigin.add(getFieldValue("fieldTrip/fieldTripBasicInfo/fieldTripID"));
        	fieldTripInfoOrigin.add(getFieldValue("fieldTrip/fieldTripBasicInfo/fieldTripName"));
        	fieldTripInfoOrigin.add(startTimeOrigin);
        	fieldTripInfoOrigin.add(endTimeOrigin);  
        	String startTimeForPicker=dateParser(startTimeOrigin);
        	String endTimeForPicker=dateParser(endTimeOrigin);
        	setFieldValue("fieldTrip/fieldTripBasicInfo/fieldTripStartDatePicker",startTimeForPicker);
        	setFieldValue("fieldTrip/fieldTripBasicInfo/fieldTripEndDatePicker",endTimeForPicker);
        	fetchAll(loadSessionForFieldTripQuery, new FetchCallback() {
                onFetch(result) {
                	selected_session_fieldTrip.clear();
                	selected_session_fieldTrip.addAll(result);
                	original_session_fieldTrip.clear();
                	original_session_fieldTrip.addAll(result);

                	fetchAll(loadAllSessionIDQuery, new FetchCallback() {
                        onFetch(result) {
                        	candidate_session_fieldTrip.clear();
                        	candidate_session_fieldTrip.addAll(result);
                        	candidate_session_fieldTrip.removeAll(selected_session_fieldTrip);
                        	populateList("fieldTrip/fieldTripSession/fieldTripFileSelectionList", candidate_session_fieldTrip);
                            populateList("fieldTrip/fieldTripSession/fieldTripFileList", selected_session_fieldTrip);
                        }
                        onError(message) {
                            showToast(message);
                        }
                    });
                }

                onError(message) {
                    showToast(message);
                }
            });
        	
        	
            showToast("Loaded fieldTrip"+result.getId());            
        }
        onError(message) {
            showToast(message);
        }
    });
}

startNewFieldTrip(){
	fieldTrip_id=null;
	selected_session_fieldTrip.clear();
	candidate_session_fieldTrip.clear();
	original_session_fieldTrip.clear();
	fieldTripInfoOrigin.clear();
	fieldTripInfoNew.clear();
	currentDateTimeArray=new ArrayList();
	
	newTabGroup("fieldTrip");
	
	fetchAll(loadAllSessionIDQuery, new FetchCallback() {
        onFetch(result) {
        	candidate_session_fieldTrip.addAll(result);
            populateList("fieldTrip/fieldTripSession/fieldTripFileSelectionList", candidate_session_fieldTrip);
            populateList("fieldTrip/fieldTripSession/fieldTripFileList", selected_session_fieldTrip);
        }

        onError(message) {
            showToast(message);
        }
    });
	
}

saveFieldTrip(){
	
	String startDateToConvert=getFieldValue("fieldTrip/fieldTripBasicInfo/fieldTripStartDatePicker");
	String startDate=dateParser(startDateToConvert);
	
	String endDateToConvert=getFieldValue("fieldTrip/fieldTripBasicInfo/fieldTripEndDatePicker");
	String endDate=dateParser(endDateToConvert);
	
	if(isNull(fieldTrip_id)){//create new session
		if(isNull(getFieldValue("fieldTrip/fieldTripBasicInfo/fieldTripName")))
		{
			showWarning("Incomplete Data","Please make sure that data is complete");
			return;
		}
		else{
			setFieldValue("fieldTrip/fieldTripBasicInfo/fieldTripID",username+"_FieldTrip_"+startDate);
			setFieldValue("fieldTrip/fieldTripBasicInfoHidden/fieldTripStartTimetamp",startDate);
			setFieldValue("fieldTrip/fieldTripBasicInfoHidden/fieldTripEndTimestamp",endDate);
			if(timeValidation(startDate,endDate,"fieldTripTime")){
			saveTabGroup("fieldTrip", fieldTrip_id, null, null, new SaveCallback() {
			    onSave(uuid, newRecord) {
			    	fieldTrip_id = uuid;
			      if (newRecord) {
			    	  for(session:selected_session_fieldTrip){
			    		  saveEntitiesToRel("Session and FieldTrip",fieldTrip_id,session.get(0));
			    	  }
			        showToast("New fieldtrip record created");
			        cancelTabGroup("fieldTrip",true);
			      }
			    }
			    onError(message) {
			        showWarning("error",message);
			    }  
			  });
		}
			else{
				showWarning("Invalid date","Start date should before end date");
				return;
			}
		}
	}
	else{//change session info
		setFieldValue("fieldTrip/fieldTripBasicInfo/fieldTripID",username+"_FieldTrip_"+startDate);
		fieldTripInfoNew.add(getFieldValue("fieldTrip/fieldTripBasicInfo/fieldTripID"));
		fieldTripInfoNew.add(getFieldValue("fieldTrip/fieldTripBasicInfo/fieldTripName"));
		fieldTripInfoNew.add(startDate);
		fieldTripInfoNew.add(endDate);
		Hashtable fieldTripInfoChange=listChange(fieldTripInfoNew,fieldTripInfoOrigin);
		Hashtable fieldTripSessionChange=listChange(selected_session_fieldTrip,original_session_fieldTrip);
		if(fieldTripInfoChange.containsKey("EQUAL")){
			if(fieldTripSessionChange.containsKey("EQUAL")){
				showWarning("No change","No data changed");
				return;
			}
			else{
				//showWarning("yes change","beginingchange file");
				for(session:selected_session_fieldTrip){
		    		  saveEntitiesToRel("Session and FieldTrip",fieldTrip_id,session.get(0));
		    	  }
				showToast("session in FieldTrip changed");
				cancelTabGroup("fieldTrip",true);
			}
		}
		else{
			setFieldValue("fieldTrip/fieldTripBasicInfoHidden/fieldTripStartTimetamp",startDate);
			setFieldValue("fieldTrip/fieldTripBasicInfoHidden/fieldTripEndTimestamp",endDate);
			if(timeValidation(startDate,endDate,"fieldTripTime")){
			saveTabGroup("fieldTrip", fieldTrip_id, null, null, new SaveCallback() {
			    onSave(uuid, newRecord) {
			    	for(session:selected_session_fieldTrip){
			    		  saveEntitiesToRel("Session and FieldTrip",fieldTrip_id,session.get(0));
			    	  }
			        showToast("fieldTrip data changed");
			        cancelTabGroup("fieldTrip",true);

			    }
			    onError(message) {
			        showWarning("error",message);
			    }  
			  });
		}
			else{
				showWarning("Invalid date","Start date should before end date");
				return;
			}
		}
	}
}

dateParser(String sourceDate){
	//convert dd/mm/yyyy to yyyy-mm-dd
	String slashDateRegex="^\\d{2}[/]\\d{2}[/]\\d{4}$";
	Pattern slashDatePattern=Pattern.compile(slashDateRegex);
	Matcher slashDateMatcher=slashDatePattern.matcher(sourceDate);
	if (slashDateMatcher.find()){
		String [] dateParts=sourceDate.split("/");
		String targetDate=dateParts[2]+"-"+dateParts[1]+"-"+dateParts[0];
		return targetDate;
	}
	
	String hyphenDateRegex="^\\d{4}[-]\\d{2}[-]\\d{2}$";
	Pattern hyphenDatePattern=Pattern.compile(hyphenDateRegex);
	Matcher hyphenDateMatcher=hyphenDatePattern.matcher(sourceDate);
	if (hyphenDateMatcher.find()){
		String [] hyphenDateParts=sourceDate.split("-");
		String targetDate=hyphenDateParts[2]+"/"+hyphenDateParts[1]+"/"+hyphenDateParts[0];
		return targetDate;
	}
	//convert yyyy-mm-dd to dd/mm/yy
}

/***Duplicate label checker***/
labelDeduplicate(String originLabel, String attriName, String fieldRef){
	//Here we can't use regexp, so we use naive LIKE condition
	tempDuplicateList=new ArrayList();
	tempDuplicateList.clear();
	int sizeOfDup=0;
	duplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
	"where AttributeID=(select AttributeID from AttributeKey where AttributeName='"+attriName+"') "+
	"and measure like '"+originLabel+"' or measure like '"+originLabel+"(%)'";

	fetchAll(duplicateQuery,
					new FetchCallback() {
					onFetch(result) {
						if(!isNull(result)){
							tempDuplicateList.addAll(result);
							sizeOfDup=tempDuplicateList.size();
							originLabel=originLabel+"("+sizeOfDup.toString()+")";
							setFieldValue(fieldRef,originLabel);
						}
						else{
							setFieldValue(fieldRef,originLabel);
						}
					}  
			});



}
/***Search button ***/
onEvent("control/survey_control/Survey_Search","click","entitySearch(\"session\",\"control/survey_control/survey_keyword\",\"control/survey_control/surveyList\",null)");
onEvent("control/user_control/Person_Search","click","entitySearch(\"person\",\"control/user_control/person_keyword\",\"control/user_control/userList\",null)");
onEvent("control/language_control/Language_Search","click","entitySearch(\"language\",\"control/language_control/language_keyword\",\"control/language_control/languageList\",null)");
onEvent("control/file_control/File_Search","click","entitySearch(\"file\",\"control/file_control/file_keyword\",\"control/file_control/fileList\",\"control/file_control/fileCategorySelect\")");
//onEvent("sessionGroup/sessionInfo/Session_Search","click","entitySearch(\"session\",\"sessionGroup/sessionInfo/session_Name\",\"sessionGroup/sessionInfo/sessionList\",null)");
onEvent("questionnaireListAll/questionnaireListInfo/quesnir_Search","click","entitySearch(\"questionnaire\",\"questionnaireListAll/questionnaireListInfo/quesnir_keyword\",\"questionnaireListAll/questionnaireListInfo/questionnaireListInDB\",null)");

entitySearch(String entityNameRef, String keywordRef, String listRef, String fileTypeRef){
	String entityName= entityNameRef;
	String keywordOfEntity= getFieldValue(keywordRef).trim();
	if((isNull(keywordOfEntity)) || (keywordOfEntity.equals("*"))){
		switch (entityName){
		case "survey":		
			
			fetchAll(loadAllSurveyQuery,
					new FetchCallback() {
					onFetch(result) {
						if(!isNull(result)){
					populateList(listRef, result);}
						else{
							showWarning("No result","No record matches the keyword");
						}
					}  
			});
			break;
		
		case "person":
			loadAllPersonIDQuery="SELECT uuid, group_concat(coalesce(measure, ''),' - ') as response " +
				    "FROM (select * from latestNonDeletedArchentIdentifiers) " +
				    "WHERE aenttypename = 'Person' " +
				    "GROUP BY uuid " +
				    "order by response;";
			fetchAll(loadAllPersonIDQuery,
					new FetchCallback() {
					onFetch(result) {
						if(!isNull(result)){
					populateList(listRef, result);}
						else{
							showWarning("No result","No record matches the keyword");
						}
					}  
			});
			break;
			
		case "language":	
			fetchAll(loadAllLanguageQuery,
					new FetchCallback() {
					onFetch(result) {
						if(!isNull(result)){
					populateList(listRef, result);}
						else{
							showWarning("No result","No record matches the keyword");
						}
					}  
			});
			break;
			
		case "session":	
			fetchAll(loadAllSessionIDQuery,
					new FetchCallback() {
					onFetch(result) {
						if(!isNull(result)){
					populateList(listRef, result);}
						else{
							showWarning("No result","No record matches the keyword");
						}
					}  
			});
			break;
			
		case "questionnaire":
			fetchAll(loadAllQuestionnaireQuery,
					new FetchCallback() {
			        	onFetch(result) {
							if (!isNull(result)) {
								populateList(listRef, result);}	
							else{
								showWarning("No result","No record matches the keyword");
							}
			       	 }

			        	onError(message) {
			            	showToast(message);
			        	}
			    	});
			break;
			
		case "file":
			String fileType=getFieldValue(fileTypeRef);
			switch (fileType){
			case "Audio":
				searchAudioFileQuery="select uuid,measure from "+
						"((select uuid as fileID from latestNonDeletedAentValue where latestNonDeletedAentValue.measure='Audio' and AttributeID = "+
							"(select AttributeID from AttributeKey where AttributeName='FileType') group by fileID) t1 "+
						"inner join "+
						"(select uuid,measure from latestNonDeletedAentValue where AttributeID= "+
							"(select AttributeID from AttributeKey where AttributeName='FileID')) t2 "+
							"on t1.fileID=t2.uuid );";
				fetchAll(searchAudioFileQuery,
						new FetchCallback() {
						onFetch(result) {
							if(!isNull(result)){
						populateList(listRef, result);}
							else{
								showWarning("No result","No record matches the keyword");
							}
						}  
				});
				
				break;
			case "Video":
				searchVideoFileQuery="select uuid,measure from "+
						"((select uuid as fileID from latestNonDeletedAentValue where latestNonDeletedAentValue.measure='Video' and AttributeID = "+
							"(select AttributeID from AttributeKey where AttributeName='FileType') group by fileID) t1 "+
						"inner join "+
						"(select uuid,measure from latestNonDeletedAentValue where AttributeID= "+
							"(select AttributeID from AttributeKey where AttributeName='FileID')) t2 "+
							"on t1.fileID=t2.uuid );";
				fetchAll(searchVideoFileQuery,
						new FetchCallback() {
						onFetch(result) {
							if(!isNull(result)){
						populateList(listRef, result);}
							else{
								showWarning("No result","No record matches the keyword");
							}
						}  
				});
				break;
			case "Photo":
				searchPhotoFileQuery="select uuid,measure from "+
						"((select uuid as fileID from latestNonDeletedAentValue where latestNonDeletedAentValue.measure='Photo' and AttributeID = "+
							"(select AttributeID from AttributeKey where AttributeName='FileType') group by fileID) t1 "+
						"inner join "+
						"(select uuid,measure from latestNonDeletedAentValue where AttributeID= "+
							"(select AttributeID from AttributeKey where AttributeName='FileID')) t2 "+
							"on t1.fileID=t2.uuid );";
				fetchAll(searchPhotoFileQuery,
						new FetchCallback() {
						onFetch(result) {
							if(!isNull(result)){
						populateList(listRef, result);}
							else{
								showWarning("No result","No record matches the keyword");
							}
						}  
				});
				break;
			case "Other":
				searchOtherFileQuery="select uuid,measure from "+
						"((select uuid as fileID from latestNonDeletedAentValue where latestNonDeletedAentValue.measure='Other' and AttributeID = "+
							"(select AttributeID from AttributeKey where AttributeName='FileType') group by fileID) t1 "+
						"inner join "+
						"(select uuid,measure from latestNonDeletedAentValue where AttributeID= "+
							"(select AttributeID from AttributeKey where AttributeName='FileID')) t2 "+
							"on t1.fileID=t2.uuid );";
				fetchAll(searchOtherFileQuery,
						new FetchCallback() {
						onFetch(result) {
							if(!isNull(result)){
						populateList(listRef, result);}
							else{
								showWarning("No result","No record matches the keyword");
							}
						}  
				});
				
				break;
			case "All":
				fetchAll(loadAllFileIDQuery,
						new FetchCallback() {
						onFetch(result) {
							if(!isNull(result)){
						populateList(listRef, result);}
							else{
								showWarning("No result","No record matches the keyword");
							}
						}  
				});
				break;
			}
			
			break;
		}
			
			
		}
	
	else{
		
		switch (entityName){
		case "survey":		
			searchSureyQuery="select uuid,measure from "+
			"((select measure as quesnirid from latestNonDeletedAentValue where AttributeID = "+
				"(select AttributeID from AttributeKey where AttributeName='AnswerQuestionnaireID') group by measure) t1 "+
			"inner join "+
			"(select uuid, measure from latestNonDeletedAentValue where AttributeID= "+
				"(select AttributeID from AttributeKey where AttributeName='QuestionnaireName') AND latestNonDeletedAentValue.Measure like '%"+
				keywordOfEntity+ "%') t2 "+
				"on t2.uuid=t1.quesnirid );";
			fetchAll(searchSureyQuery,
					new FetchCallback() {
					onFetch(result) {
						if(!isNull(result)){
							populateList(listRef, result);}
						else{
							showWarning("No result","No record matches the keyword");
						}
					}  
			});
			break;
			
		case "person":		
			searchPersonQuery="select uuid, measure from latestNonDeletedAentValue where " +
					"latestNonDeletedAentValue.Measure like '%"+ keywordOfEntity +
					"%' and latestNonDeletedAentValue.AttributeID = "+
					"(select AttributeID from AttributeKey where AttributeName='PersonID')";
			fetchAll(searchPersonQuery,
					new FetchCallback() {
					onFetch(result) {
						if(!isNull(result)){
							populateList(listRef, result);}
						else{
							showWarning("No result","No record matches the keyword");
						}
					}  
			});
			break;
			
		case "language":		
			searchPersonQuery="select uuid, measure from latestNonDeletedAentValue where " +
					"latestNonDeletedAentValue.Measure like '%"+ keywordOfEntity +
					"%' and latestNonDeletedAentValue.AttributeID = "+
					"(select AttributeID from AttributeKey where AttributeName='LanguageName')";
			fetchAll(searchPersonQuery,
					new FetchCallback() {
					onFetch(result) {
						if(!isNull(result)){
							populateList(listRef, result);}
						else{
							showWarning("No result","No record matches the keyword");
						}
					}  
			});
			break;
			
		case "session":		
			searchSessionQuery="select uuid, measure from latestNonDeletedAentValue where " +
					"latestNonDeletedAentValue.Measure like '%"+ keywordOfEntity +
					"%' and latestNonDeletedAentValue.AttributeID = "+
					"(select AttributeID from AttributeKey where AttributeName='SessionID')";
			fetchAll(searchSessionQuery,
					new FetchCallback() {
					onFetch(result) {
						if(!isNull(result)){
							populateList(listRef, result);}
						else{
							showWarning("No result","No record matches the keyword");
						}
					}  
			});
			break;
		case "questionnaire":
			searchQuesnirQuery="select uuid, measure from latestNonDeletedAentValue where " +
					"latestNonDeletedAentValue.Measure like '%"+ keywordOfEntity +
					"%' and latestNonDeletedAentValue.AttributeID = "+
					"(select AttributeID from AttributeKey where AttributeName='QuestionnaireName')";
			fetchAll(searchQuesnirQuery,
					new FetchCallback() {
					onFetch(result) {
						if(!isNull(result)){
							populateList(listRef, result);}
						else{
							showWarning("No result","No record matches the keyword");
						}
					}  
			});

			break;
		case "file":
			String fileType=getFieldValue(fileTypeRef);
			switch (fileType){
			case "Audio":
				searchAudioFileQuery="select uuid,measure from "+
						"((select uuid as fileID from latestNonDeletedAentValue where latestNonDeletedAentValue.measure='Audio' and AttributeID = "+
							"(select AttributeID from AttributeKey where AttributeName='FileType') group by fileID) t1 "+
						"inner join "+
						"(select uuid,measure from latestNonDeletedAentValue where AttributeID= "+
							"(select AttributeID from AttributeKey where AttributeName='FileID') and measure like '%"+keywordOfEntity+"%') t2 "+
							"on t1.fileID=t2.uuid );";
				fetchAll(searchAudioFileQuery,
						new FetchCallback() {
						onFetch(result) {
							if(!isNull(result)){
						populateList(listRef, result);}
							else{
								showWarning("No result","No record matches the keyword");
							}
						}  
				});
				
				break;
			case "Video":
				searchVideoFileQuery="select uuid,measure from "+
						"((select uuid as fileID from latestNonDeletedAentValue where latestNonDeletedAentValue.measure='Video' and AttributeID = "+
							"(select AttributeID from AttributeKey where AttributeName='FileType') group by fileID) t1 "+
						"inner join "+
						"(select uuid,measure from latestNonDeletedAentValue where AttributeID= "+
						"(select AttributeID from AttributeKey where AttributeName='FileID') and measure like '%"+keywordOfEntity+"%') t2 "+
							"on t1.fileID=t2.uuid );";
				fetchAll(searchVideoFileQuery,
						new FetchCallback() {
						onFetch(result) {
							if(!isNull(result)){
						populateList(listRef, result);}
							else{
								showWarning("No result","No record matches the keyword");
							}
						}  
				});
				break;
			case "Photo":
				searchPhotoFileQuery="select uuid,measure from "+
						"((select uuid as fileID from latestNonDeletedAentValue where latestNonDeletedAentValue.measure='Photo' and AttributeID = "+
							"(select AttributeID from AttributeKey where AttributeName='FileType') group by fileID) t1 "+
						"inner join "+
						"(select uuid,measure from latestNonDeletedAentValue where AttributeID= "+
						"(select AttributeID from AttributeKey where AttributeName='FileID') and measure like '%"+keywordOfEntity+"%') t2 "+
							"on t1.fileID=t2.uuid );";
				fetchAll(searchPhotoFileQuery,
						new FetchCallback() {
						onFetch(result) {
							if(!isNull(result)){
						populateList(listRef, result);}
							else{
								showWarning("No result","No record matches the keyword");
							}
						}  
				});
				break;
			case "Other":
				searchOtherFileQuery="select uuid,measure from "+
						"((select uuid as fileID from latestNonDeletedAentValue where latestNonDeletedAentValue.measure='Other' and AttributeID = "+
							"(select AttributeID from AttributeKey where AttributeName='FileType') group by fileID) t1 "+
						"inner join "+
						"(select uuid,measure from latestNonDeletedAentValue where AttributeID= "+
						"(select AttributeID from AttributeKey where AttributeName='FileID') and measure like '%"+keywordOfEntity+"%') t2 "+
							"on t1.fileID=t2.uuid );";
				fetchAll(searchOtherFileQuery,
						new FetchCallback() {
						onFetch(result) {
							if(!isNull(result)){
						populateList(listRef, result);}
							else{
								showWarning("No result","No record matches the keyword");
							}
						}  
				});
				
				break;
			case "All":
				searchAllFileQuery="select uuid, measure from latestNonDeletedAentValue where " +
						"latestNonDeletedAentValue.Measure like '%"+ keywordOfEntity +
						"%' and latestNonDeletedAentValue.AttributeID = "+
						"(select AttributeID from AttributeKey where AttributeName='FileID')";
				fetchAll(searchAllFileQuery,
						new FetchCallback() {
						onFetch(result) {
							if(!isNull(result)){
						populateList(listRef, result);}
							else{
								showWarning("No result","No record matches the keyword");
							}
						}  
				});
				break;
			}
			
			break;
		}
	}
  }
