import java.util.concurrent.Callable;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import android.util.Log;
import java.io.File;
/*** 'Editable' - you can edit the code below based on the needs ***/
User user; // don't touch
String userid;

/***Enable data and file syncing***/
addActionBarItem("sync", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "Disable Sync";
    }
    actionOn() {
        setSyncEnabled(false);
        setFileSyncEnabled(false);
        showToast("Sync disabled.");
    }
    isActionOff() {
        isSyncEnabled();
    }
    actionOffLabel() {
        "Enable Sync";
    }
    actionOff() {
        setSyncEnabled(true);
        setFileSyncEnabled(true);
        showToast("Sync enabled.");
    }
});

onSyncEvent("onSyncStart()", "onSyncSuccess()", "onSyncFailure()");


onSyncStart() {
    showToast("sync started");
}
 
onSyncSuccess() {
    showToast("sync success");
}
 
onSyncFailure() {
    showToast("sync failed");
}

/*** USER ***/
onEvent("user/usertab/users", "click", "login()");
onEvent("user/usertab/user_Search", "click", "userSearch()");
String username = "";
String device = "";

loadAllUserQuery="select userid, fname || ' ' || lname from user where userdeleted is null";

loadUsers() {
    fetchAll(loadAllUserQuery, new FetchCallback() {
        onFetch(result) {
            populateList("user/usertab/users", result);
        }
    });
}

loadUsers();

login() {
    fetchOne("select userid,fname,lname,email from user where userid='" + getListItemValue() + "';", new FetchCallback() {
        onFetch(result) {
            user = new User(result.get(0),result.get(1),result.get(2),result.get(3));
            setUser(user);
            username = result.get(1) + " " + result.get(2);
            createControlGroupView();
            showTabGroup("control");
            //initializeData();
        }
    });
}

createControlGroupView(){
    removeAllViewsAndContainers("control");
    createQuesnirControlPage();
    createQuestionControlPage();
    createPersonControlPage();
    createLanguageControlPage();
    createOtherControlPage();
    createSearchControlPage();
}

createQuesnirControlPage(){
    if(!hasView("control/questionnaire_control/questionnaireList")){
        executeViewTask(new ViewTask() {
        doTask() { 
            newQuesnirButtonDef = createViewDef().createButton().setLabel("New").setStyleCss("faims-blue");
            quesnirListDef=createViewDef().createList().setLabel("Questionnaire").setAnnotationEnabled(false).setStyleCss("questionnaire-list");

            createView("control/questionnaire_control/New_Questionnaire", newQuesnirButtonDef,"control/questionnaire_control");
            createView("control/questionnaire_control/questionnaireList", quesnirListDef,"control/questionnaire_control");

            refreshTabgroupCSS("control");
            onEvent("control/questionnaire_control/New_Questionnaire","click","newQuestionnaire()");
            onEvent("control/questionnaire_control","show","loadQuestionnaire()");
            onEvent("control/questionnaire_control/questionnaireList","click","loadQuestionnaireInfo()");
            }
        
        });
    }
}

createQuestionControlPage(){
    if(!hasView("control/question_control/questionList")){
        executeViewTask(new ViewTask() {
        doTask() { 
            newQuesButtonDef = createViewDef().createButton().setLabel("New").setStyleCss("faims-blue");
            langSelDropdownDef=createViewDef().createDropDown().setLabel("Select language").setAnnotationEnabled(false);
            quesListDef=createViewDef().createList().setLabel("Question").setAnnotationEnabled(false).setStyleCss("question-list");

            createView("control/question_control/New_Question", newQuesButtonDef,"control/question_control");
            createView("control/question_control/lang_sel", langSelDropdownDef,"control/question_control");
            createView("control/question_control/questionList", quesListDef,"control/question_control");

            refreshTabgroupCSS("control");
            onEvent("control/question_control/New_Question","click","newQuestion()");
            onEvent("control/question_control","show","loadQuestionBank()");
            onEvent("control/question_control/questionList","click","loadQuestionInfo()");
            onEvent("control/question_control/lang_sel", "click","searchQuestionByLang()");
            }
        
        });
    }
}

createPersonControlPage(){
    if(!hasView("control/user_control/userList")){
        executeViewTask(new ViewTask() {
        doTask() { 
            newPsButtonDef = createViewDef().createButton().setLabel("New").setStyleCss("faims-blue");
            psListDef=createViewDef().createList().setLabel("Person").setAnnotationEnabled(false).setStyleCss("user-list");

            createView("control/user_control/New_User", newPsButtonDef,"control/user_control");
            createView("control/user_control/userList", psListDef,"control/user_control");

            refreshTabgroupCSS("control");
            onEvent("control/user_control","show","loadPerson()");
            onEvent("control/user_control/New_User","click","newPerson()");
            onEvent("control/user_control/userList","click","loadPersonInfo()");
            }
        
        });
    }
}

createLanguageControlPage(){
    if(!hasView("control/language_control/userList")){
        executeViewTask(new ViewTask() {
        doTask() { 
            newLangButtonDef = createViewDef().createButton().setLabel("New").setStyleCss("faims-blue");
            langListDef=createViewDef().createList().setLabel("Language").setAnnotationEnabled(false).setStyleCss("language-list");

            createView("control/language_control/New_Language", newLangButtonDef,"control/language_control");
            createView("control/language_control/languageList", langListDef,"control/language_control");

            refreshTabgroupCSS("control");
            onEvent("control/language_control","show","loadLanguage()");
            onEvent("control/language_control/languageList","click","loadLanguageInfo()");
            onEvent("control/language_control/New_Language","click","newLanguage()");
            }
        
        });
    }
}

createOtherControlPage(){
    if(!hasView("control/other_control/Role_Control")){
        executeViewTask(new ViewTask() {
        doTask() { 
            roleButtonDef = createViewDef().createButton().setLabel("Person Role").setStyleCss("faims-blue");
            quesnirTypeButtonDef = createViewDef().createButton().setLabel("Questionnaire Type").setStyleCss("faims-blue");
            quesTypeButtonDef = createViewDef().createButton().setLabel("Question Property").setStyleCss("faims-blue");
            langTypeButtonDef = createViewDef().createButton().setLabel("Language Type").setStyleCss("faims-blue");

            createView("control/other_control/Role_Control", roleButtonDef,"control/other_control");
            createView("control/other_control/Type_Control", quesnirTypeButtonDef,"control/other_control");
            createView("control/other_control/Prop_Control", quesTypeButtonDef,"control/other_control");
            createView("control/other_control/langType_Control", langTypeButtonDef,"control/other_control");

            refreshTabgroupCSS("control");
            onEvent("control/other_control/Role_Control","click","showPropTypeControlPage(\"r\")");
            onEvent("control/other_control/Type_Control","click","showPropTypeControlPage(\"t\")");
            onEvent("control/other_control/Prop_Control","click","showPropTypeControlPage(\"p\")");
            onEvent("control/other_control/langType_Control","click","showPropTypeControlPage(\"l\")");

            }
        
        });
    }
}

createSearchControlPage(){
    if(!hasView("control/search/entityList")){
        executeViewTask(new ViewTask() {
        doTask() { 
            style1 = "orientation";
            style2 = "even";

            createContainer("control/search/searchContainer","orientation");
            createContainer("control/search/searchCtnChild1","even","control/search/searchContainer");
            createContainer("control/search/searchCtnChild2","even", "control/search/searchContainer");

            entityTypeDropDownDef=createViewDef().createDropDown().setLabel("Select entity type").setAnnotationEnabled(false);
            searchKeywordViewDef=createViewDef().createTextField().setLabel("Keyword").setAnnotationEnabled(false);

            searchButtonDef = createViewDef().createButton().setLabel("Search").setStyleCss("faims-blue");

            createView("control/search/entityTypes", entityTypeDropDownDef,"control/search/searchCtnChild1");
            createView("control/search/keyword", searchKeywordViewDef,"control/search/searchCtnChild2");
            createView("control/search/Record_Search", searchButtonDef,"control/search");

            resultListDef=createViewDef().createList().setLabel("Result").setAnnotationEnabled(false).setStyleCss("menu-list");

            createView("control/search/entityList", resultListDef,"control/search");

            refreshTabgroupCSS("control");

            onEvent("control/search","show","initializeSearch()");
            onEvent("control/search/Record_Search","click","recordSearch()");
            onEvent("control/search/entityList","click","showEntity()");
            }
        
        });
    }
}


showPropTypeControlPage(String c){
    switch(c){
        case "r":
        createPsRoleControlPage();
        showTabGroup("role_control");
        break;

        case "t":
        createQuesnirTypeControlPage();
        showTabGroup("type_control");
        break;

        case "p":
        createQuesPropertyControlPage();
        showTabGroup("prop_control");
        break;

        case "l":
        createLangTypeControlPage();
        showTabGroup("langType_control");
        break; 
    }
}

/*** Questionnaire type ***/
/*** Questionnaire type var(s) ***/
quesnirTypeId=null;
questionirType = new ArrayList();
/*** Questionnaire type queries ***/
/*** 1 usage: loadQuesnirType()***/

loadAllQuesnirTypeQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
        "WHERE latestNonDeletedAentValue.AttributeID "+
        "= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='QuesnirTypeName') "+
        "GROUP BY uuid "+
        "ORDER BY measure asc;";

createQuesnirTypeControlPage(){
    if(!hasView("type_control/type_control_info/New_Type")){
        removeAllViewsAndContainers("type_control");
        executeViewTask(new ViewTask() {
            doTask(){
                
                newQuesnirTypeViewDef=createViewDef().createButton().setLabel("New").setStyleCss("faims-blue");
                quesTypeViewDef=createViewDef().createList().setLabel("Tap to view").setAnnotationEnabled(false).setStyleCss("user-list");

                createView("type_control/type_control_info/New_Type",newQuesnirTypeViewDef,"type_control/type_control_info");
                createView("type_control/type_control_info/typeList",quesTypeViewDef,"type_control/type_control_info");

                refreshTabgroupCSS("type_control");
                
                onEvent("type_control/type_control_info","show","loadQuesnirType(\"typeLoad\")");
                onEvent("type_control/type_control_info/New_Type","click","newQuesnirType()");
                onEvent("type_control/type_control_info/typeList","click","loadTypeInfo()");
            }
        }); 
    }
}

createQuesnirTypePage(){
    if(!hasView("quesnirType/quesnirType_info/quesnirTypeName")){
        removeAllViewsAndContainers("quesnirType");
        executeViewTask(new ViewTask() {
        doTask() {
            typeNameViewDef=createViewDef().createTextField().setLabel("Type name").setAttributeName("QuesnirTypeName").setAttributeType("measure").setAnnotationEnabled(true).setStyleCss("required");
            saveTypeBtnDef=createViewDef().createButton().setLabel("Save").setStyleCss("faims-blue");
            dupListDef=createViewDef().createList().setLabel("Duplicate records");

            createView("quesnirType/quesnirType_info/quesnirTypeName",typeNameViewDef,"quesnirType/quesnirType_info");
            createView("quesnirType/quesnirType_info/SaveQuesnirType",saveTypeBtnDef,"quesnirType/quesnirType_info");
            createView("quesnirType/quesnirType_info/duplicateTypeList",dupListDef,"quesnirType/quesnirType_info");
            refreshTabgroupCSS("quesnirType");

            onEvent("quesnirType/quesnirType_info/SaveQuesnirType","click","quesnirTypePreCheck()");
            }
        });
    }

}

newQuesnirType(){
    createQuesnirTypePage();
    quesnirTypeId=null;
    newTabGroup("quesnirType");
    tempPop=new ArrayList();
    populateList("quesnirType/quesnirType_info/duplicateTypeList",tempPop);
}

loadQuesnirType(String typeFlag){
    fetchAll(loadAllQuesnirTypeQuery, new FetchCallback() {
        onFetch(result) {
            if (!isNull(result)) {
                questionirType.clear();
                questionirType.addAll(result);
                if(typeFlag.equals("typeLoad")){
                    populateList("type_control/type_control_info/typeList",questionirType);
                }
                else{
                    String firstType=result.get(0).get(1);
                    String firstTypeUuid=result.get(0).get(0);
                    populateDropDown("questionnaire/questionnaire_info/questionnaireTypeSelection",questionirType);
                    if((isNull(getFieldValue("questionnaire/questionnaire_info/questionnaireType"))) && (isNull(getFieldValue("questionnaire/questionnaire_info_hide/questionnaireTypeUuid")))){
                        setFieldValue("questionnaire/questionnaire_info/questionnaireType",firstType);
                        setFieldValue("questionnaire/questionnaire_info_hide/questionnaireTypeUuid",firstTypeUuid);
                    }
                }
            }
            else{
                if(!typeFlag.equals("typeLoad")){
                    showAlert("Questionnaire Type data", "There is no available questionnaire type yet\n"+"Do you want to create new type now?", "newQuesnirType()", "stayInCurrentPage()");
                } 
            }
            
        }

        onError(message) {
            showToast(message);
        }
    });
}

loadTypeInfo(){
    quesnirTypeId=getListItemValue();
    if(isNull(quesnirTypeId)){
        showWarning("Invalid data","No type selected");
        return;
    }
    createQuesnirTypePage();
    showTabGroup("quesnirType", quesnirTypeId, new FetchCallback() {
        onFetch(result) {
            tempPop=new ArrayList();
            tempPop.clear();
            populateList("quesnirType/quesnirType_info/duplicateTypeList",tempPop);
            showToast("Loaded type"+result.getId());       
        }
        onError(message) {
            showToast(message);
        }
    });
}

quesnirTypePreCheck(){
    String newTypeName=getFieldValue("quesnirType/quesnirType_info/quesnirTypeName").trim();
    if(isNull(newTypeName)){
        showWarning("Incomplete data", "You must input questionnaire name");
        return;
    }
    else{
        quesnirTypeCheckQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
                "WHERE latestNonDeletedAentValue.AttributeID "+
                "= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='QuesnirTypeName') "+
                "AND latestNonDeletedAentValue.measure like '%"+newTypeName+"%'; ";

        if(quesnirTypeId!=null){
            quesnirTypeCheckQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
                "WHERE latestNonDeletedAentValue.AttributeID "+
                "= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='QuesnirTypeName') "+
                "AND uuid<>'"+quesnirTypeId+"' "+
                "AND latestNonDeletedAentValue.measure like '%"+newTypeName+"%'; ";
        }
        //showWarning("quesnirTypeCheckQuery","quesnirTypeCheckQuery");                 
        fetchAll(quesnirTypeCheckQuery, new FetchCallback() {
                onFetch(result) {
                    if (!isNull(result)) {
                        populateList("quesnirType/quesnirType_info/duplicateTypeList",result);
                        showAlert("Questionnaire Type data", "This could be a duplicate type\n"+"The possible existing type is listed in the list\n"+"Do you still want to save this type?", "saveQuesnirType()", "stayInCurrentPage()");
                    }
                    else{
                        saveQuesnirType();
                    }
                }
               
            onError(message) {
                showToast(message);
            }
            });
    }   
}
saveQuesnirType(){
    saveTabGroup("quesnirType", quesnirTypeId, null, null, new SaveCallback() {
        onSave(uuid, newRecord) {
            quesnirTypeId = uuid;
            if (newRecord) {
                showToast("New record created");
                cancelTabGroup("quesnirType",true);
            }
            else{
                showToast("Record changed");
            }
        }
        onError(message) {
            showWarning("error",message);
        }  
    });
}

/*** Question property ***/
/*** Question property var(s) ***/
quesPropertyId=null;
quesProperty=new ArrayList();

/*** Question property queries ***/
loadAllQuesPropQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
        "WHERE latestNonDeletedAentValue.AttributeID "+
        "= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='QuesPropDefName') "+
        "GROUP BY uuid "+
        "ORDER BY measure asc;";

createQuesPropertyControlPage(){
    if(!hasView("prop_control/prop_control_info/New_Prop")){
        removeAllViewsAndContainers("prop_control");
        executeViewTask(new ViewTask() {
            doTask(){
                
                newQuesPropViewDef=createViewDef().createButton().setLabel("New").setStyleCss("faims-blue");
                quesPropViewDef=createViewDef().createList().setLabel("Tap to view").setAnnotationEnabled(false).setStyleCss("user-list");

                createView("prop_control/prop_control_info/New_Prop",newQuesPropViewDef,"prop_control/prop_control_info");
                createView("prop_control/prop_control_info/propList",quesPropViewDef,"prop_control/prop_control_info");
                refreshTabgroupCSS("prop_control");
                onEvent("prop_control/prop_control_info","show","loadQuesProp(\"propLoad\")");
                onEvent("prop_control/prop_control_info/New_Prop","click","newQuesProp()");
                onEvent("prop_control/prop_control_info/propList","click","loadQuesPropInfo()");
            }
        }); 
    }
}

createQuesPropPage(){
    if(!hasView("quesProperty/quesPropertyInfo/propName")){
        removeAllViewsAndContainers("quesProperty");
        executeViewTask(new ViewTask() {
        doTask() {
            propNameViewDef=createViewDef().createTextField().setLabel("Property name").setAttributeName("QuesPropDefName").setAttributeType("measure").setAnnotationEnabled(true).setStyleCss("required");
            propDescViewDef=createViewDef().createTextField().setLabel("Description").setAttributeName("QuesPropDefDesc").setAttributeType("measure").setAnnotationEnabled(true);
            savePropBtnDef=createViewDef().createButton().setLabel("Save").setStyleCss("faims-blue");
            dupListDef=createViewDef().createList().setLabel("Duplicate records");

            createView("quesProperty/quesPropertyInfo/propName",propNameViewDef,"quesProperty/quesPropertyInfo");
            createView("quesProperty/quesPropertyInfo/propDesc",propDescViewDef,"quesProperty/quesPropertyInfo");
            createView("quesProperty/quesPropertyInfo/saveProp",savePropBtnDef,"quesProperty/quesPropertyInfo");
            createView("quesProperty/quesPropertyInfo/propDupList",dupListDef,"quesProperty/quesPropertyInfo");
            refreshTabgroupCSS("quesProperty");
            onEvent("quesProperty/quesPropertyInfo/saveProp","click","quesPropCheck()");
            }
        });
    }
}

loadQuesProp(String typeflag){
    fetchAll(loadAllQuesPropQuery, new FetchCallback() {
        onFetch(result) {
            if (!isNull(result)) {
                if(typeflag.equals("propLoad")){
                    quesProperty.clear();
                    quesProperty.addAll(result);
                    populateList("prop_control/prop_control_info/propList",quesProperty);
                }
                else{
                    candidatePropList.clear();
                    candidatePropList.addAll(result);
                    populateDropDown("questionBank/questionInfo/questionProp", candidatePropList);
                }
            }
        }
        onError(message) {
            showToast(message);
        }
    });
}

newQuesProp(){
    quesPropertyId=null;
    createQuesPropPage();
    newTabGroup("quesProperty");
    tempPop=new ArrayList();
    populateList("quesProperty/quesPropertyInfo/propDupList",tempPop);
}

loadQuesPropInfo(){
    quesPropertyId=getListItemValue();
    if(isNull(quesPropertyId) || quesPropertyId.equals("placeholder")){
        showWarning("Invalid data","No data selected");
        return;
    }
    createQuesPropPage();
    showTabGroup("quesProperty", quesPropertyId, new FetchCallback() {
        onFetch(result) {
            tempPop=new ArrayList();
            tempPop.clear();
            populateList("quesProperty/quesPropertyInfo/propDupList",tempPop);
            showToast("Loaded data"+result.getId());        
        }
        onError(message) {
            showToast(message);
        }
    });
}

quesPropCheck(){
    String newPropName=getFieldValue("quesProperty/quesPropertyInfo/propName").trim();
    if(isNull(newPropName)){
            showWarning("Incomplete data", "You must input questionnaire property name");
            return;
        }
        else{

            quesnirPropCheckQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
                "WHERE latestNonDeletedAentValue.AttributeID "+
                "= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='QuesPropDefName') "+
                "AND latestNonDeletedAentValue.measure like '%"+newPropName+"%'; ";
            if(quesPropertyId!=null){
                 quesnirPropCheckQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
                "WHERE latestNonDeletedAentValue.AttributeID "+
                "= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='QuesPropDefName') "+
                "AND uuid<>'"+quesPropertyId+"' "+
                "AND latestNonDeletedAentValue.measure like '%"+newPropName+"%'; ";
            }              
            fetchAll(quesnirPropCheckQuery,new FetchCallback() {
                onFetch(result) {
                    if (!isNull(result)) {
                        populateList("quesProperty/quesPropertyInfo/propDupList",result);
                        showAlert("Question property data", "This could be a duplicate data\n"+"The possible existing data is listed in the list\n"+"Do you still want to save?", "saveQuesProp()", "stayInCurrentPage()");
                    }
                    else{
                        saveQuesProp();
                    }
                }
                   
                onError(message) {
                    showToast(message);
                }
            });
        }   
}

saveQuesProp(){
    saveTabGroup("quesProperty", quesPropertyId, null, null, new SaveCallback() {
        onSave(uuid, newRecord) {
            quesPropertyId = uuid;
            if (newRecord) {
                showToast("New record created");
                cancelTabGroup("quesProperty",true);
            }
            else{
                showToast("Record changed");
            }
        }
        onError(message) {
            showWarning("error",message);
        }  
    });
}
/*** Language Type ***/
/*** LangType var ***/
langTypeId=null;
langType=new ArrayList();
/*** LangType query ***/
loadAllLangTypeQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
        "WHERE latestNonDeletedAentValue.AttributeID "+
        "= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='LangTypeName') "+
        "GROUP BY uuid "+
        "ORDER BY measure asc";

createLangTypeControlPage(){
    if(!hasView("langType_control/langType_control_info/New_LangType")){
        removeAllViewsAndContainers("langType_control");
        executeViewTask(new ViewTask() {
            doTask(){
                langTypeListViewDef=createViewDef().createList().setLabel("Tap to view").setAnnotationEnabled(false).setStyleCss("user-list");
                newLangTypeViewDef=createViewDef().createButton().setLabel("New").setStyleCss("faims-blue");

                createView("langType_control/langType_control_info/New_LangType",newLangTypeViewDef,"langType_control/langType_control_info");
                createView("langType_control/langType_control_info/langTypeList",langTypeListViewDef,"langType_control/langType_control_info");
                refreshTabgroupCSS("langType_control");

                onEvent("langType_control/langType_control_info","show","loadLangType(\"def\")");
                onEvent("langType_control/langType_control_info/New_LangType","click","newLangType()");
                onEvent("langType_control/langType_control_info/langTypeList","click","loadLangTypeInfo()");
            }
        }); 
    }
}

createLangTypePage(){
    if(!hasView("langType/langType_info/langTypeName")){
        removeAllViewsAndContainers("langType");
        executeViewTask(new ViewTask() {
            doTask(){
                langTypeViewDef=createViewDef().createTextField().setLabel("Language type name").setAttributeName("LangTypeName").setAttributeType("measure").setAnnotationEnabled(true).setStyleCss("required");
                langDupViewDef=createViewDef().createList().setLabel("Duplicate records").setAnnotationEnabled(false).setStyleCss("menu-list");
                finLangTypeViewDef=createViewDef().createButton().setLabel("Save").setStyleCss("faims-blue");

                createView("langType/langType_info/langTypeName",langTypeViewDef,"langType/langType_info");
                createView("langType/langType_info/SaveLangType",finLangTypeViewDef,"langType/langType_info");
                createView("langType/langType_info/duplicateLangTypeList",langDupViewDef,"langType/langType_info");
                refreshTabgroupCSS("langType");
                onEvent("langType/langType_info/SaveLangType","click","langTypePreCheck()");

            }
        }); 
    }
}

loadLangType(String typeFlag){
    fetchAll(loadAllLangTypeQuery, new FetchCallback() {
        onFetch(result) {
            if (!isNull(result)) {
                langType.clear();
                langType.addAll(result);
                if(typeFlag.equals("def")){
                    populateList("langType_control/langType_control_info/langTypeList",langType);
                }
                else{
                    populateDropDown("language/languageInfo/languageType",langType);
                }
                
            }
            else{
                if(!typeFlag.equals("def")){
                    showAlert("Language Type data", "There is no available language type yet\n"+"Do you want to create new type now?", "newLangType()", "stayInCurrentPage()");
                }
                
            }
            
        }
        onError(message) {
            showToast(message);
        }
    });
}

newLangType(){
    langTypeId=null;
    createLangTypePage();
    tempPop=new ArrayList();
    populateList("langType/langType_info/duplicateLangTypeList",tempPop);
    newTabGroup("langType");
}

loadLangTypeInfo(){
    langTypeId=getListItemValue();
    if(isNull(langTypeId)){
        showWarning("Invalid data","No type selected");
        return;
    }
    showTabGroup("langType", langTypeId, new FetchCallback() {
        onFetch(result) {
            tempPop=new ArrayList();
            tempPop.clear();
            populateList("langType/langType_info/duplicateLangTypeList",tempPop);
            showToast("Loaded type"+result.getId());           
        }
        onError(message) {
            showToast(message);
        }
    });
}

langTypePreCheck(){
    String newTypeName=getFieldValue("langType/langType_info/langTypeName").trim();
    if(isNull(newTypeName)){
        showWarning("Incomplete data", "You must input questionnaire name");
        return;
    }
    else{
        langTypeCheckQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
            "WHERE latestNonDeletedAentValue.AttributeID "+
            "= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='LangTypeName') "+
            "AND latestNonDeletedAentValue.measure like '%"+newTypeName+"%'; ";
        if(langTypeId!=null){
            langTypeCheckQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
                "WHERE latestNonDeletedAentValue.AttributeID "+
                "= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='LangTypeName') "+
                "AND uuid<>'"+langTypeId+"' "+
                "AND latestNonDeletedAentValue.measure like '%"+newTypeName+"%'; ";
        }
        //showWarning("quesnirTypeCheckQuery","quesnirTypeCheckQuery");                 
        fetchAll(langTypeCheckQuery,new FetchCallback() {
            onFetch(result) {
                if (!isNull(result)) {
                    populateList("langType/langType_info/duplicateLangTypeList",result);
                    showAlert("Language Type data", "This could be a duplicate type\n"+"The possible existing type is listed in the list\n"+"Do you still want to save this type?", "saveLangType()", "stayInCurrentPage()");
                }
                else{
                    saveLangType();
                }
            }
               
            onError(message) {
                showToast(message);
            }
        });
    }   
}
saveLangType(){
    saveTabGroup("langType", langTypeId, null, null, new SaveCallback() {
        onSave(uuid, newRecord) {
            langTypeId = uuid;
            if (newRecord) {
                showToast("New record created");
                cancelTabGroup("langType",true);
            }
            else{
                showToast("Record changed");
            }
        }
        onError(message) {
            showWarning("error",message);
        }  
    });
}
/*** Person role ***/
/*** Person role var ***/
role_id=null;
role_list=new ArrayList();
/*** Person role query ***/
loadAllPersonRoleQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
        "WHERE latestNonDeletedAentValue.AttributeID "+
        "= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='PersonRoleName') "+
        "GROUP BY uuid "+
        "ORDER BY measure asc";

createPsRoleControlPage(){
    if(!hasView("role_control/role_control_info/New_Role")){
        removeAllViewsAndContainers("role_control");
        executeViewTask(new ViewTask() {
            doTask(){
                roleListViewDef=createViewDef().createList().setLabel("Tap to view").setAnnotationEnabled(false).setStyleCss("user-list");
                newRoleTypeViewDef=createViewDef().createButton().setLabel("New").setStyleCss("faims-blue");

                createView("role_control/role_control_info/New_Role",newRoleTypeViewDef,"role_control/role_control_info");
                createView("role_control/role_control_info/roleList",roleListViewDef,"role_control/role_control_info");
                refreshTabgroupCSS("role_control");
                onEvent("role_control/role_control_info/New_Role","click","newRole()");
                onEvent("role_control/role_control_info","show","loadRoles(\"newRole\",\"role_control/role_control_info/roleList\")");
                onEvent("role_control/role_control_info/roleList","click","loadRoleInfo()");
            }
        }); 
    }
}

createPsRolePage(){
    if(!hasView("personRole/personRoleInfo/personRoleName")){
        removeAllViewsAndContainers("personRole");
        executeViewTask(new ViewTask() {
            doTask(){
                roleNameViewDef=createViewDef().createTextField().setLabel("Role name").setAttributeName("PersonRoleName").setAttributeType("measure").setAnnotationEnabled(true).setStyleCss("required");
                introQuesnirReqViewDef=createViewDef().createRadioGroup().setLabel("Answering introductory questionnaire required?").setAttributeName("RoleIntroAnsRequired").setAttributeType("measure");
                photoReqViewDef=createViewDef().createRadioGroup().setLabel("Taking photo required?").setAttributeName("RolePhotoRequired").setAttributeType("measure");
                dataShownReqViewDef=createViewDef().createRadioGroup().setLabel("Shown on client module's list?").setAttributeName("RoleDataOnClient").setAttributeType("measure");
                finRoleViewDef=createViewDef().createButton().setLabel("Save").setStyleCss("faims-blue");
                roleDupViewDef=createViewDef().createList().setLabel("Duplicate records").setStyleCss("menu-list");
                
                createView("personRole/personRoleInfo/personRoleName",roleNameViewDef,"personRole/personRoleInfo");
                createView("personRole/personRoleInfo/RoleIntroRequired",introQuesnirReqViewDef,"personRole/personRoleInfo");
                createView("personRole/personRoleInfo/RolePhotoRequired",photoReqViewDef,"personRole/personRoleInfo");
                createView("personRole/personRoleInfo/RoleDataOnClient",dataShownReqViewDef,"personRole/personRoleInfo");
                createView("personRole/personRoleInfo/SavePersonRole",finRoleViewDef,"personRole/personRoleInfo");
                createView("personRole/personRoleInfo/duplicateRoleList",roleDupViewDef,"personRole/personRoleInfo");
                refreshTabgroupCSS("personRole");

                tempChoice=new ArrayList();
                tempChoice.add(new NameValuePair("Yes", "Yes"));
                tempChoice.add(new NameValuePair("No", "No"));

                populateRadioGroup("personRole/personRoleInfo/RoleIntroRequired",tempChoice);
                populateRadioGroup("personRole/personRoleInfo/RolePhotoRequired",tempChoice);
                populateRadioGroup("personRole/personRoleInfo/RoleDataOnClient",tempChoice);
                onEvent("personRole/personRoleInfo/SavePersonRole","click","checkRole()");
            }
        }); 
    }
}

newRole(){
    role_id=null;
    createPsRolePage();
    newTabGroup("personRole");
    tempPop=new ArrayList();
    tempPop.clear();
    populateList("personRole/personRoleInfo/duplicateRoleList",tempPop);
}

loadRoles(String typeFlag, String populateRef){
    fetchAll(loadAllPersonRoleQuery,new FetchCallback() {
        onFetch(result) {
            role_list.clear();
            role_list.addAll(result);
            if(typeFlag.equals("newPerson")){
                populateDropDown(populateRef, role_list);
            }
            else{
                populateList(populateRef,role_list);
            }
            
        }  
    });
}

loadRoleInfo(){
    role_id=getListItemValue();
    if(isNull(role_id)){
        showWarning("Invalid data","No role selected");
        return;
    }
    createPsRolePage();
    showTabGroup("personRole", role_id, new FetchCallback() {
        onFetch(result) {
            showToast("Loaded role"+result.getId());  
        }
        onError(message) {
            showToast(message);
        }
    });
}

checkRole(){
    String newRoleName=getFieldValue("personRole/personRoleInfo/personRoleName");
    if(isNull(newRoleName)){
        showWarning("Incomplete data","You must enter valid person role name");
        return;
    }
    if((isNull(getFieldValue("personRole/personRoleInfo/RoleIntroRequired"))) || (isNull(getFieldValue("personRole/personRoleInfo/RolePhotoRequired"))) || (isNull(getFieldValue("personRole/personRoleInfo/RoleDataOnClient")))){
        showWarning("Incomplete data","You must select answer for each requirement question");
        return;
    }
    personRoleCheckQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
        "WHERE latestNonDeletedAentValue.AttributeID "+
        "= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='PersonRoleName') "+
        "AND latestNonDeletedAentValue.measure like '%"+newRoleName+"%'; ";

    if(role_id!=null){
         personRoleCheckQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
        "WHERE latestNonDeletedAentValue.AttributeID "+
        "= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='PersonRoleName') "+
        "AND uuid<>'"+role_id+"' "+
        "AND latestNonDeletedAentValue.measure like '%"+newRoleName+"%'; ";
    }

    fetchAll(personRoleCheckQuery,new FetchCallback() {
            onFetch(result) {
                if (!isNull(result)) {
                    populateList("personRole/personRoleInfo/duplicateRoleList",result);
                    showAlert("Person Role data", "This could be a duplicate role\n"+"The possible existing roles are listed in the list\n"+"Do you still want to save this role?", "saveRole()", "stayInCurrentPage()");
                }
                else{
                    saveRole();
                }
            }
           
        onError(message) {
            showToast(message);
        }
    }); 
}

saveRole(){
    saveTabGroup("personRole", role_id, null, null, new SaveCallback() {
        onSave(uuid, newRecord) {
            role_id = uuid;
            if (newRecord) {
                showToast("New record created");
                cancelTabGroup("personRole",true);
                showTab("role_control/role_control_info");
            }
            else{
                showToast("Record changed");    
            }
          
        }
        onError(message) {
            showWarning("error",message);
        }  
    });
}
/*** Question bank ***/
/*** Question bank var ***/
question_id=null;
current_selected_language_id=null;
candidatePropList=new ArrayList();
oldPropList=new ArrayList();
newPropList=new ArrayList();
canLangList=new ArrayList();
selLangList=new ArrayList();
oldLangList=new ArrayList();
newLangList=new ArrayList();
ArrayList <HashMap<String, ArrayList<String>>> oldQuestionOptionList=new ArrayList<>();
ArrayList <HashMap<String, ArrayList<String>>> newQuestionOptionList=new ArrayList<>();
/*** Question bank query ***/
loadAllQuesPropQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
        "WHERE latestNonDeletedAentValue.AttributeID "+
        "= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='QuesPropDefName') "+
        "GROUP BY uuid "+
        "ORDER BY measure";

loadAllLWCLanguageQuery="select lang.uuid, lang.measure from latestNonDeletedAentValue as lang, latestNonDeletedAentValue as lProp "+
    "where lang.AttributeID=(select AttributeID from AttributeKey where AttributeName='LanguageName') "+
    "and lProp.AttributeID=(select AttributeID from AttributeKey where AttributeName='LanguageTypeID') "+
    "and lang.uuid=lProp.uuid "+
    "and lProp.measure=(select lPropDef.uuid from latestNonDeletedAentValue as lPropDef where lPropDef.AttributeID=(select AttributeID from AttributeKey where AttributeName='LangTypeName') "+
    "and lPropDef.measure='LWC') "+
    "and lang.uuid in (select uuid from latestNonDeletedArchEntIdentifiers where AttributeID=(select AttributeID from AttributeKey where AttributeName='LanguageID')) group by lang.uuid "+
    "ORDER BY lang.measure";
/*
createQuestionPage(){
    if(!hasView("questionBank/questionInfo/questionID")){
        removeAllViewsAndContainers("questionBank");
        executeViewTask(new ViewTask() {
            doTask(){
                quesIDInputViewDef=createViewDef().createTextField().setLabel("Question label").setAttributeName("QuestionID").setAttributeType("measure").setAnnotationEnabled(true).setStyleCss("required");      
                quesPropViewDef=createViewDef().createDropDown().setLabel("Question property").setAnnotationEnabled(false);
                createView("questionBank/questionInfo/questionID", quesIDInputViewDef,"questionBank/questionInfo");
                createView("questionBank/questionInfo/questionProp",quesPropViewDef,"questionBank/questionInfo");

                refreshTabgroupCSS("questionBank");

                onEvent("questionBank/questionInfo/","show","initialQuestionCreation()");
            }
        }); 
    }
}
*/
onEvent("questionBank/questionInfo/","show","initialQuestionCreation()");

initializeQuesBankVar(){
    question_id=null;
    current_selected_language_id=null;
    oldPropList.clear();
    newPropList.clear();
    oldLangList.clear();
    newLangList.clear();
    oldQuestionOptionList.clear();
    newQuestionOptionList.clear();
}

initialQuestionCreation(){
    canLangList.clear();
    selLangList.clear();
    candidatePropList.clear();
    if(isNull(question_id)){
        createQuesLangVer("new");
        fetchAll(loadAllQuesPropQuery,new FetchCallback() {
            onFetch(result) {
                candidatePropList.addAll(result);
                populateDropDown("questionBank/questionInfo/questionProp", result);
            }  
        }); 
    }
}

createQuesLangVer(String typeflag){
    canLangList.clear();
    selLangList.clear();
    fetchAll(loadAllLWCLanguageQuery, new FetchCallback() {
        onFetch(result) {
            canLangList.addAll(result);
            createLangVerContent(typeflag);
        }  
    }); 
}

createLangVerContent(String typeflag){
    int langCount=0;
    int langSize=canLangList.size();
    for(lang:canLangList){
        String langID=lang.get(0);
        String langName=lang.get(1);

        style1="orientation";
        style2="even";
        style3="large";
        
        if(hasView("questionBank/questionInfo/Finish_New_Question")){
            removeAllViewsAndContainers("questionBank");
        }

        executeViewTask(new ViewTask(){
            doTask(){
                createContainer("questionBank/questionInfo/lang_c"+langCount, "orientation","questionBank/questionInfo");
                createContainer("questionBank/questionInfo/langName_c" + langCount, "even", "questionBank/questionInfo/lang_c" + langCount);
                createContainer("questionBank/questionInfo/quesInput_c" + langCount, "even", "questionBank/questionInfo/lang_c" + langCount);
                if(langCount==0){
                    createView("questionBank/questionInfo/langc" + langCount, createViewDef().createCheckboxGroup().addChoice(langName, langID).setLabel("languages"), "questionBank/questionInfo/langName_c" + langCount);
                    createView("questionBank/questionInfo/quesc" + langCount, createViewDef().createTextField("string").setLabel("Question content"), "questionBank/questionInfo/quesInput_c" + langCount);
                }
                else{
                    createView("questionBank/questionInfo/langc" + langCount, createViewDef().createCheckboxGroup().addChoice(langName, langID), "questionBank/questionInfo/langName_c" + langCount);                   
                    createView("questionBank/questionInfo/quesc" + langCount, createViewDef().createTextField("string"), "questionBank/questionInfo/quesInput_c" + langCount);
                }
                
                if(langCount==langSize-1){
                    createView("questionBank/questionInfo/Finish_New_Question", createViewDef().createButton().setLabel("Save").setStyleCss("faims-blue"), "questionBank/questionInfo");    
                    onEvent("questionBank/questionInfo/Finish_New_Question","click","saveNewQuestion()");   
                }
            }
        });
        langCount++;
    }
    refreshTabgroupCSS("questionBank");
    if(typeflag.equals("new")){
        fetchOne(loadEngUuiQuery,new FetchCallback() {
            onFetch(result) {
                if(!isNull(result)){
                    for(int i=0;i<canLangList.size();i++){
                        setFieldValue("questionBank/questionInfo/langc" + i,result.get(0));
                    }
                    
                }
            }  
        });
    }
}

createMultipleChoice(){
    int langCount=0;
    int langSize=canLangList.size();
    for(lang:canLangList){
        String langID=lang.get(0);
        String langName=lang.get(1);

        style1="orientation";
        style2="even";
        style3="large";
        
        if(hasView("questionBank/questionInfo/Finish_New_Question")){
            removeAllViewsAndContainers("questionBank");
        }

        executeViewTask(new ViewTask(){
            doTask(){
                createContainer("questionBank/questionInfo/lang_c"+langCount, "orientation","questionBank/questionInfo");
                createContainer("questionBank/questionInfo/langName_c" + langCount, "even", "questionBank/questionInfo/lang_c" + langCount);
                createContainer("questionBank/questionInfo/quesInput_c" + langCount, "even", "questionBank/questionInfo/lang_c" + langCount);
                createContainer("questionBank/questionInfo/quesOpt_c" + langCount, "even", "questionBank/questionInfo/lang_c" + langCount);

                if(langCount==0){
                    createView("questionBank/questionInfo/langc" + langCount, createViewDef().createCheckboxGroup().addChoice(langName, langID).setLabel("languages"), "questionBank/questionInfo/langName_c" + langCount);
                    createView("questionBank/questionInfo/quesc" + langCount, createViewDef().createTextField("string").setLabel("Question content"), "questionBank/questionInfo/quesInput_c" + langCount);
                }
                else{
                    createView("questionBank/questionInfo/langc" + langCount, createViewDef().createCheckboxGroup().addChoice(langName, langID), "questionBank/questionInfo/langName_c" + langCount);                   
                    createView("questionBank/questionInfo/quesc" + langCount, createViewDef().createTextField("string"), "questionBank/questionInfo/quesInput_c" + langCount);
                }
                createView("questionBank/questionInfo/quesopc" + langCount, createViewDef().createButton().setLabel("Option"), "questionBank/questionInfo/quesOpt_c" + langCount);
                onEvent("questionBank/questionInfo/quesopc","click",createQuestionChoicePage(langID));
                if(langCount==langSize-1){
                    createView("questionBank/questionInfo/Finish_New_Question", createViewDef().createButton().setLabel("Save").setStyleCss("faims-blue"), "questionBank/questionInfo");    
                    onEvent("questionBank/questionInfo/Finish_New_Question","click","saveNewQuestion()");   
                }

            }
        });
        langCount++;
    }
    refreshTabgroupCSS("questionBank");
    if(typeflag.equals("new")){
        fetchOne(loadEngUuiQuery,new FetchCallback() {
            onFetch(result) {
                if(!isNull(result)){
                    for(int i=0;i<canLangList.size();i++){
                        setFieldValue("questionBank/questionInfo/langc" + i,result.get(0));
                    }
                    
                }
            }  
        });
    }
}

createQuestionChoicePage(String langVerId){
    Boolean optExist=false;
    ArrayList<String> tempOptList=new ArrayList<>();
    if(!isNull(newQuestionOptionList)){
        for(optMap: newQuestionOptionList){
            if(optMap.containsKey(langVerId)){
                optExist=true;
                tempOptList=optMap.get(langVerId);
                break;
            }
        }    
    }
    
    if(!optExist){
        removeAllViewsAndContainers("questionChoice");
        executeViewTask(new ViewTask(){
            doTask(){
                style1 = "orientation";
                style2 = "even";
                style3 = "large";

                int quesOptCount=0;

                for(quesOptCount=0;quesOptCount<2;quesOptCount++){
                    createContainer("questionChoice/questionChoiceInfo/optCtn_c"+quesOptCount, "orientation","questionChoice/questionChoiceInfo");
                    createContainer("questionChoice/questionChoiceInfo/opt_c" + quesOptCount, "even", "questionChoice/questionChoiceInfo/optCtn_c"+quesOptCount);
                    createContainer("questionChoice/questionChoiceInfo/optDel_c" + quesOptCount, "even", "questionChoice/questionChoiceInfo/optCtn_c"+quesOptCount);
                    if(quesOptCount==0){
                        createView("questionChoice/questionChoiceInfo/optc" + quesOptCount, createViewDef().createTextField("string").setLabel("Question Option"), "questionChoice/questionChoiceInfo/opt_c" + quesOptCount);        
                    }
                    else{
                        createView("questionChoice/questionChoiceInfo/optc" + quesOptCount, createViewDef().createTextField("string"), "questionChoice/questionChoiceInfo/opt_c" + quesOptCount);           
                    }
                    createView("questionChoice/questionChoiceInfo/optDelc" + quesOptCount, createViewDef().createButton().setLabel("X"), "questionChoice/questionChoiceInfo/optDel_c" + quesOptCount);
                    onEvent("questionChoice/questionChoiceInfo/optDelc" + quesOptCount,"click","delOptCheck(quesOptCount)");
                }
                createQuesOptBtn(quesOptCount, langVerId);
            }
        });
    }
    else{
        listExistingOpt(tempOptList,langVerId);
    }
}

listExistingOpt(ArrayList tempOptList, String langVerId){
    int quesOptCount=tempOptList.size();
    for(int i=0;i<tempOptList.size();i++){
        createContainer("questionChoice/questionChoiceInfo/optCtn_c"+i, "orientation","questionChoice/questionChoiceInfo");
        createContainer("questionChoice/questionChoiceInfo/opt_c" + i, "even", "questionChoice/questionChoiceInfo/optCtn_c"+i);
        createContainer("questionChoice/questionChoiceInfo/optDel_c" + i, "even", "questionChoice/questionChoiceInfo/optCtn_c"+i);
        if(i==0){
            createView("questionChoice/questionChoiceInfo/optc" + i, createViewDef().createTextField("string").setLabel("Question Option"), "questionChoice/questionChoiceInfo/opt_c" + i);        
        }
        else{
            createView("questionChoice/questionChoiceInfo/optc" + i, createViewDef().createTextField("string"), "questionChoice/questionChoiceInfo/opt_c" + i);           
        }
        createView("questionChoice/questionChoiceInfo/optDelc" + i, createViewDef().createButton().setLabel("X"), "questionChoice/questionChoiceInfo/optDel_c" + i);
        refreshTabgroupCSS("questionChoice");
        setFieldValue("questionChoice/questionChoiceInfo/optc" + i, tempOptList.get(i));
        onEvent("questionChoice/questionChoiceInfo/optDelc" + i,"click","delOptCheck(i)");
    }
    createQuesOptBtn(quesOptCount, langVerId);
}

createQuesOptBtn(int quesOptCount, String langVerId){
    createView("questionChoice/questionChoiceInfo/newOpt",createViewDef().createButton.setLabel("Add Option"),"questionChoice/questionChoiceInfo");
    createView("questionChoice/questionChoiceInfo/finOpt",createViewDef().createButton.setLabel("Finish"),"questionChoice/questionChoiceInfo");
    onEvent("questionChoice/questionChoiceInfo/newOpt","click",addQuestionChoice(quesOptCount, langVerId));
    onEvent("questionChoice/questionChoiceInfo/finOpt","click",storeQuestionChoice(quesOptCount,langVerId));
    refreshTabgroupCSS("questionChoice");
}

addQuestionChoice(int quesOptCount, String langVerId){
    removeView("questionChoice/questionChoiceInfo/newOpt"); 
    createContainer("questionChoice/questionChoiceInfo/optCtn_c"+quesOptCount, "orientation","questionChoice/questionChoiceInfo");
    createContainer("questionChoice/questionChoiceInfo/opt_c" + quesOptCount, "even", "questionChoice/questionChoiceInfo/optCtn_c"+quesOptCount);
    createContainer("questionChoice/questionChoiceInfo/optDel_c" + quesOptCount, "even", "questionChoice/questionChoiceInfo/optCtn_c"+quesOptCount);
    createView("questionChoice/questionChoiceInfo/optc" + quesOptCount, createViewDef().createTextField("string"), "questionChoice/questionChoiceInfo/opt_c" + quesOptCount);
    createView("questionChoice/questionChoiceInfo/optDelc" + quesOptCount, createViewDef().createButton().setLabel("X"), "questionChoice/questionChoiceInfo/optDel_c" + quesOptCount);
    onEvent("questionChoice/questionChoiceInfo/optDelc" + quesOptCount,"click","delOptCheck(quesOptCount)");
    
    quesOptCount++;
    createQuesOptBtn(quesOptCount,langVerId);
}

delOptCheck(int quesOptCount){
    showAlert("Deletion alert", "Are you sure to delete this option?\n"+getFieldValue("questionChoice/questionChoiceInfo/optc" + quesOptCount), "delOptConfirm(quesOptCount)", "stayInCurrentPage()"); 
}

delOptConfirm(int quesOptCount){
    removeContainer("questionChoice/questionChoiceInfo/optCtn_c"+quesOptCount);
    removeContainer("questionChoice/questionChoiceInfo/opt_cc"+quesOptCount);
    removeContainer("questionChoice/questionChoiceInfo/optDel_c"+quesOptCount);
    removeView("questionChoice/questionChoiceInfo/optc" + quesOptCount);
    removeView("questionChoice/questionChoiceInfo/optDelc" + quesOptCount);
    refreshTabgroupCSS("questionChoice");
}

storeQuestionChoice(int quesOptCount, String langVerId){
    HashMap<String, ArrayList<String>> tempOptMap=new HashMap<>();
    ArrayList<String> tempOptText=new ArrayList();
    for(int i=0;i<quesOptCount-1;i++){
        if(hasView("questionChoice/questionChoiceInfo/optc" + i)){
            tempOptText.add(getFieldValue("questionChoice/questionChoiceInfo/optc" + i));
        }
    }

    if(tempOptText==null||tempOptText.size()<2){
        showWarning("No option added","No data added, you must add at least two options for this question");
        return;
    }

    tempOptMap.put(langVerId,tempOptText);
    
    if(!isNull(newQuestionOptionList)){
        for(optMap: newQuestionOptionList){
            if(optMap.containsKey(langVerId)){
                newQuestionOptionListList.remove(optMap);
                break;
            }
        }    
    }
    newQuestionOptionList.add(tempOptMap);
    cancelTabGroup("questionChoice",true);
}

searchQuestionByLang(){
    String quesLangId=getFieldValue("control/question_control/lang_sel");

    loadQuesContentByLanguageQuery="select qId.measure, qCntt.measure from latestNonDeletedAentValue as qId, latestNonDeletedAentValue as qCntt, latestNonDeletedAentValue as qLang "+
    "where qId.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionUuid') "+
    "and qCntt.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesContent') "+
    "and qLang.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesLangUuid') "+
    "and qId.uuid=qCntt.uuid "+
    "and qCntt.uuid=qLang.uuid "+
    "and qLang.measure='"+quesLangId+"'";

    fetchAll(loadQuesContentByLanguageQuery, new FetchCallback() {
        onFetch(result) {
            populateList("control/question_control/questionList", result);
        }

        onError(message) {
            showToast(message);
        }
    });
}

saveNewQuestion(){

}
/*** Questionnaire ***/
loadQuestionnaire(){

}

newQuestionnaire(){

}

loadQuestionnaireInfo(){

}

startQuestionSelection(){

}

setQuesnirType(){

}

initializeQuestionSelect(){

}

searchQuestion(){

}
finishChangeQuestionnaire(){

}

finishCreateQuestionnaire(){

}

loadQuestionBank(){

}

searchQuestionByLang(){

}

newQuestion(){

}

loadQuestionInfo(){

}

initialQuestionCreation(){

}

/*** Language ***/
/*** Language var ***/
language_id=null;
originLangProp=new ArrayList();
newLangProp=new ArrayList();
candLangProp=new ArrayList();
/*** Language query ***/
loadAllLanguageQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
    "WHERE latestNonDeletedAentValue.AttributeID "+
    "= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='LanguageName') "+
    "and uuid in "+
    "(select uuid from latestNonDeletedArchEntIdentifiers "+
    "where AttributeID=(select AttributeID from AttributeKey where AttributeName='LanguageID')) "+
    "GROUP BY uuid ORDER BY measure asc";

createLanguagePage(){
    if(!hasView("language/languageInfo/languageID")){
        removeAllViewsAndContainers("language");
        executeViewTask(new ViewTask() {
            doTask(){
                langIDViewDef=createViewDef().createTextField().setLabel("Language code").setAttributeName("LanguageID").setAttributeType("measure").setAnnotationEnabled(true).setStyleCss("required");        
                langNameViewDef=createViewDef().createTextField().setLabel("Language name").setAttributeName("LanguageName").setAttributeType("measure").setAnnotationEnabled(true).setStyleCss("required");
                langOtherNameViewDef=createViewDef().createTextField().setLabel("Language other name(s)").setAttributeName("LanguageOtherNames").setAttributeType("measure").setAnnotationEnabled(true);
                langPropViewDef=createViewDef().createDropDown().setLabel("Language type").setAnnotationEnabled(false);
                finLangViewDef=createViewDef().createButton().setLabel("Save").setStyleCss("faims-blue");

                createView("language/languageInfo/languageID",langIDViewDef,"language/languageInfo");
                createView("language/languageInfo/languageName",langNameViewDef,"language/languageInfo");
                createView("language/languageInfo/languageOtherNames",langOtherNameViewDef,"language/languageInfo");
                createView("language/languageInfo/languageType",langPropViewDef,"language/languageInfo");
                createView("language/languageInfo/Finish_New_Language",finLangViewDef,"language/languageInfo");
                refreshTabgroupCSS("language");
                onEvent("language/languageInfo/Finish_New_Language","click","saveNewLanguage()");
                onEvent("language/languageInfo","show","loadLangType(\"new\")");

            }
        }); 
    }
}

initializeLangVar(){
    language_id=null;
    candLangProp.clear();
    originLangProp.clear();
    newLangProp.clear();
}

newLanguage(){
    initializeLangVar();
    createLanguagePage();
    newTabGroup("language");
}

loadLanguage(){
    fetchAll(loadAllLanguageQuery, new FetchCallback() {
        onFetch(result) {
            populateList("control/language_control/languageList", result);
        }

        onError(message) {
            showToast(message);
        }
    });
}

loadLanguageInfo(){
    language_id=getListItemValue();
    if(isNull(language_id)){
        showToast("No Language selected");
        return;
    }
    createLanguagePage();
    showTabGroup("language", language_id, new FetchCallback() {
        onFetch(result) {
            fetchAll(loadAllLangTypeQuery, new FetchCallback() {
                onFetch(result) {
                    candLangProp.clear();
                    candLangProp.addAll(result); 
                    loadLangPropOrder();
                }
            });
            showToast("Loaded language"+result.getId());            
        }
        onError(message) {
            showToast(message);
        }
    });
}

loadLangPropOrder(){
    loadLangPropQuery="select lProp.measure from latestNonDeletedAentValue as lProp "+
            "where lProp.AttributeID=(select AttributeID from AttributeKey where AttributeName='LanguageTypeID') "+
            "and lProp.uuid='"+language_id+"'";
    fetchOne(loadLangPropQuery,new FetchCallback() {
        onFetch(propResult) {
            if(!isNull(propResult)){
                tempPropList=new ArrayList();
                tempPropList.clear();
                String tempProp=propResult.get(0);
                originLangProp.clear();
                originLangProp.addAll(propResult);
                newLangProp.clear();

                for(prop: candLangProp){
                    if(prop.get(0).equals(tempProp)){
                        tempPropList.add(prop);
                    }
                }
                for(prop: candLangProp){
                    if(!(prop.get(0).equals(tempProp))){
                        tempPropList.add(prop);
                    }
                }
                populateDropDown("language/languageInfo/languageType", tempPropList);
            }
            else{
                showWarning("Out-of-date data","The property of the language is not using anymore");
            }
        
        }
        onError(message) {
            showToast(message);
        }
    });
}
saveNewLanguage(){
    if(isNull(getFieldValue("language/languageInfo/languageName"))){
        showWarning("Validation Error", "You must fill in the Language Name before you can continue");
        return;
    }
    if(isNull(getFieldValue("language/languageInfo/languageID"))){
        showWarning("Validation Error", "You must fill in the Language ID before you can continue");
        return;
    }

    tempLangLabel=getFieldValue("language/languageInfo/languageID");
    langDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
                "where AttributeID=(select AttributeID from AttributeKey where AttributeName='LanguageID') "+
                "and measure ='"+tempLangLabel+"' or measure like '"+tempLangLabel+"(%)'";
    if(language_id!=null){
        langDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
                "where AttributeID=(select AttributeID from AttributeKey where AttributeName='LanguageID') "+
                "and uuid<>'"+language_id+"' "+
                "and measure ='"+tempLangLabel+"' or measure like '"+tempLangLabel+"(%)'";
    }
    
    fetchAll(langDuplicateQuery,new FetchCallback() {
        onFetch(result) {
            if(!isNull(result)){
                tempLangLabel=nonDupLabelGen(result,tempLangLabel, "Language","LanguageID",true);  
            }
            setFieldValue("language/languageInfo/languageID",tempLangLabel);
            crntLangTypeId=getFieldValue("language/languageInfo/languageType");
            saveTabGroup("language", language_id, null, null, new SaveCallback() {
                onSave(uuid, newRecord) {
                      language_id = uuid;
                      if (newRecord) {
                        attributes=createAttributeList();
                        attributes.add(createEntityAttribute("LanguageTypeID", null, null, crntLangTypeId, null));
                        saveArchEnt(language_id, "Language", null, attributes);
                        showToast("New record created");
                        cancelTabGroup("language",true);
                        showTab("control/language_control");
                      }
                      else{
                        showToast("Record changed");
                      }
                }
                onError(message) {
                    showWarning("error",message);
                } 
            });

            if((language_id!=null) && (!isNull(originLangProp))){
                newLangProp.add(crntLangTypeId);
                Hashtable langPropChange=listChange(newLangProp,originLangProp);
                if(langPropChange.containsKey("ADD")){
                    attributes=createAttributeList();
                    attributes.add(createEntityAttribute("LanguageTypeID", null, null, crntLangTypeId, null));
                    saveArchEnt(language_id, "Language", null, attributes);
                    showToast("language type changed");
                }
                
            }
        }
    });
}

/*** Person ***/
/*** Person var ***/
person_id=null;
role_id=null;
role_list=new ArrayList();
savePersonWfProperty=new ArrayList();
/*** Person query ***/
loadAllPersonIDQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
        "WHERE latestNonDeletedAentValue.AttributeID "+
        "IN (SELECT AttributeID FROM AttributeKey WHERE AttributeName='PersonID') "+
        "GROUP BY uuid "+
        "ORDER BY measure asc";

createPersonRoleSelPage(){
    if(!hasView("personRoleSelect/personRoleSelectInfo/CreateNewRole")){
        removeAllViewsAndContainers("personRoleSelect");
        executeViewTask(new ViewTask() {
        doTask() { 
            style1 = "orientation";
            style2 = "even";

            createContainer("personRoleSelect/personRoleSelectInfo/searchContainer","orientation");
            createContainer("personRoleSelect/personRoleSelectInfo/searchCtnChild1","even","personRoleSelect/personRoleSelectInfo/searchContainer");
            createContainer("personRoleSelect/personRoleSelectInfo/searchCtnChild2","even", "personRoleSelect/personRoleSelectInfo/searchContainer");

            createContainer("personRoleSelect/personRoleSelectInfo/roleSelContainer","orientation");
            createContainer("personRoleSelect/personRoleSelectInfo/roleSelCtnChild1","even","personRoleSelect/personRoleSelectInfo/roleSelContainer");
            createContainer("personRoleSelect/personRoleSelectInfo/roleSelCtnChild2","even", "personRoleSelect/personRoleSelectInfo/roleSelContainer");

            searchKeywordViewDef=createViewDef().createTextField().setLabel("Keyword").setAnnotationEnabled(false);
            searchButtonDef = createViewDef().createButton().setLabel("Search").setStyleCss("faims-blue");

            roleListDropDownDef=createViewDef().createDropDown().setLabel("Role").setAnnotationEnabled(false);
            newRoleButtonDef = createViewDef().createButton().setLabel("New").setStyleCss("faims-blue");
            newPersonButtonDef = createViewDef().createButton().setLabel("New Person").setStyleCss("faims-blue");
            
            createView("personRoleSelect/personRoleSelectInfo/keywordOfRole", searchKeywordViewDef,"personRoleSelect/personRoleSelectInfo/searchCtnChild1");
            createView("personRoleSelect/personRoleSelectInfo/SearchRole", searchButtonDef,"personRoleSelect/personRoleSelectInfo/searchCtnChild2");

            createView("personRoleSelect/personRoleSelectInfo/PersonRoleSelectList", roleListDropDownDef,"personRoleSelect/personRoleSelectInfo/roleSelCtnChild1");
            createView("personRoleSelect/personRoleSelectInfo/CreateNewRole", newRoleButtonDef,"personRoleSelect/personRoleSelectInfo/roleSelCtnChild2");

            createView("personRoleSelect/personRoleSelectInfo/CreateNewPerson", newPersonButtonDef,"personRoleSelect/personRoleSelectInfo");

            refreshTabgroupCSS("personRoleSelect");
            onEvent("personRoleSelect/personRoleSelectInfo/CreateNewRole","click","newRole()");
            onEvent("personRoleSelect/personRoleSelectInfo/","show","loadRoles(\"newPerson\",\"personRoleSelect/personRoleSelectInfo/PersonRoleSelectList\")");
            onEvent("personRoleSelect/personRoleSelectInfo/CreateNewPerson","click","newPersonByRole()");
            }
        
        });
    }
}

createPersonPage(){
    if(!hasView("person/personInfo/Finish_New_Person")){
        removeAllViewsAndContainers("person");
        executeViewTask(new ViewTask() {
        doTask() { 
            personRoleIdViewDef=createViewDef().createTextField().setAttributeName("PersonRole").setAttributeType("measure");

            createView("person/personInfoHide/personRoleId",personRoleIdViewDef,"person/personInfoHide");

            personIdViewDef=createViewDef().createTextField().setLabel("Person label").setAttributeName("PersonID").setAttributeType("measure").setAnnotationEnabled(true).setReadOnly(true);
            personNameViewDef=createViewDef().createTextField().setLabel("Person name").setAttributeName("PersonName").setAttributeType("measure").setAnnotationEnabled(true).setStyleCss("required");
            personOtherNameViewDef=createViewDef().createTextField().setLabel("Person other name(s)").setAttributeName("PersonOtherNames").setAttributeType("measure").setAnnotationEnabled(true);
            personDOBViewDef=createViewDef().createTextField().setLabel("Date of birth").setAttributeName("PersonDOB").setAttributeType("measure").setAnnotationEnabled(true).setStyleCss("required");
            personRoleViewDef=createViewDef().createTextField().setLabel("Person general role").setReadOnly(true);
            personPhotoViewDef=createViewDef().createCameraGallery(true).setAttributeName("PersonPhoto").setAttributeType("measure").setAnnotationEnabled(true);
            takePhotoViewDef=createViewDef().createButton().setLabel("Take Photo").setStyleCss("faims-blue");
            psPhotoDescViewDef=createViewDef().createTextField().setLabel("Photo decription").setAttributeName("PersonPhotoDescription").setAttributeType("measure").setAnnotationEnabled(true);
            introAnsCheckViewDef=createViewDef().createCheckboxGroup().addChoice("Answered Intro quesnir", "Answered");
            introDescViewDef=createViewDef().createTextField().setLabel("Intro quesnir description").setAttributeName("PersonIntroQuenirDesp").setAttributeType("measure").setAnnotationEnabled(true);
            finishNewPsViewDef=createViewDef().createButton().setLabel("Save").setStyleCss("faims-blue");

            createView("person/personInfo/personID", personIdViewDef,"person/personInfo");
            createView("person/personInfo/personName", personNameViewDef,"person/personInfo");

            createView("person/personInfo/personOtherNames", personOtherNameViewDef,"person/personInfo");
            createView("person/personInfo/personDOB", personDOBViewDef,"person/personInfo");

            createView("person/personInfo/personRoleName", personRoleViewDef,"person/personInfo");
            createView("person/personInfo/personPhoto", personPhotoViewDef,"person/personInfo");
            createView("person/personInfo/Take_Photo", takePhotoViewDef,"person/personInfo");
            createView("person/personInfo/personPhotoDesc", psPhotoDescViewDef,"person/personInfo");
            createView("person/personInfo/introAnsChecker", introAnsCheckViewDef,"person/personInfo");
            createView("person/personInfo/personIntroDesc", introDescViewDef,"person/personInfo");
            createView("person/personInfo/Finish_New_Person", finishNewPsViewDef,"person/personInfo");

            refreshTabgroupCSS("person");
            onEvent("person/personInfo/Finish_New_Person","click","savePersonCheck()");
            onEvent("person/personInfo/Take_Photo","click","attachPictureTo(\"person/personInfo/personPhoto\")");
            }
        
        });
    }
}

newPerson(){
    createPersonRoleSelPage();
    showTabGroup("personRoleSelect");
}

newPersonByRole(){
   
    role_id=getFieldValue("personRoleSelect/personRoleSelectInfo/PersonRoleSelectList");
    roleInfo=new ArrayList();
    roleInfo.clear();
    Hashtable propertyInfo=new Hashtable();
    String roleName=null;
    if(isNull(role_id)){
        showWarning("Invalid role","This role is invalid, please select another role for continue");
        return;
    }
    for(role : role_list){
        if(role.get(0).equals(role_id)){
            roleName=role.get(1);
            break;
        }
    }
    if(isNull(roleName)){
        showWarning("Invalid role","This role is invalid, please select another role for continue");
        return;
    }
    roleInfo.add(role_id);
    roleInfo.add(roleName);
   
    checkRoleIntroQuery="SELECT measure from latestNonDeletedAentValue WHERE "+
        "latestNonDeletedAentValue.AttributeID="+
        "(select AttributeID from AttributeKey where AttributeKey.AttributeName='RoleIntroAnsRequired') "+
        "AND latestNonDeletedAentValue.uuid='"+role_id+"';";
    checkRolePhotoQuery="SELECT measure from latestNonDeletedAentValue WHERE "+
        "latestNonDeletedAentValue.AttributeID="+
        "(select AttributeID from AttributeKey where AttributeKey.AttributeName='RolePhotoRequired') "+
        "AND latestNonDeletedAentValue.uuid='"+role_id+"';";

    fetchOne(checkRoleIntroQuery,new FetchCallback() {
        onFetch(result) {
            if(!isNull(result)){
                if(result.get(0).equals("Yes")){
                    propertyInfo.put("I","Y");
                }
                else{
                    propertyInfo.put("I","N");
                    
                }
               
                fetchOne(checkRolePhotoQuery,new FetchCallback() {
                    onFetch(result) {
                        if(!isNull(result)){
                            if(result.get(0).equals("Yes")){
                                propertyInfo.put("P","Y");
                            }
                            else{
                                propertyInfo.put("P","N");
                            }
                            
                            newPersonWithIntro(roleInfo,propertyInfo);
                        }
                        else{
                            showWarning("Invalid role","This role may not be using anymore\n"+" please contact the admin for details");
                            return;
                        }
                     
                    }  
                });
            }

            else{
                showWarning("Invalid role","This role may not be using anymore\n"+" please contact the admin for details");
                                return;
            }
         
        }  
    });
}

newPersonWithIntro(ArrayList roleflag, Hashtable propertyFlag){
    createPersonPage();
    person_id=null;
    newTabGroup("person");
    setFieldValue("person/personInfoHide/personRoleId",roleflag.get(0));
    setFieldValue("person/personInfo/personRoleName",roleflag.get(1));
    savePersonWfProperty.clear();
    savePersonWfProperty.add(propertyFlag.get("I"));
    savePersonWfProperty.add(propertyFlag.get("P"));
}

savePersonCheck(){
    if((isNull(getFieldValue("person/personInfo/personName"))) || (isNull(getFieldValue("person/personInfo/personDOB")))){
        showWarning("Validation Error", "You must fill the Person Name and Person DOB before you can continue");
        return;
    }
    if(!timeValidation(getFieldValue("person/personInfo/personDOB"))){
        showWarning("Invalid DOB","1.Datetime format should be yyyy-MM-dd \n"+"2.The value for date should be valid");
        return;
    }
    if(savePersonWfProperty.get(1).equals("Y")){
        if((isNull(getFieldValue("person/personInfo/personPhoto"))) && (isNull(getFieldValue("person/personInfo/personPhotoDesc")))){
            showWarning("Validation Error", "You must either take person photo or write the reason of not taking photo");
            return;
        }
    }
    if(savePersonWfProperty.get(0).equals("Y")){
        if(person_id==null){
            if(isNull(getFieldValue("person/personInfo/personIntroDesc"))){
                showWarning("Validation Error", "You must either take person introductory questionnaire \n"+"or write the reason of not taking introductory questionnaire");
                return;
            }
            else{
                savePersonData();
            }
        }
        else{
            if(isNull(getFieldValue("person/personInfo/personIntroDesc"))){
                checkPsIntrSssQuery="select uuid,measure from latestNonDeletedArchEntIdentifiers "+
                    "where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionID') "+
                    "and uuid in ( select uuid from AentReln "+
                        "where RelationshipID in(select RelationshipID from AentReln "+
                            "where RelationshipID in (select RelationshipID from latestNonDeletedRelationship "+
                                "where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Answer and Session' ) "+
                                "and latestNonDeletedRelationship.Deleted IS NULL) "+
                    "and uuid in (select uuid from latestNonDeletedAentValue "+
                        "where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionnaireID') "+
                        "and latestNonDeletedAentValue.measure in(select uuid from latestNonDeletedAentValue "+
                            "where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionnaireType') "+
                            "and measure=(select uuid from latestNonDeletedAentValue "+
                                "where AttributeID= (select AttributeID from AttributeKey "+
                                    "where AttributeName='QuesnirTypeName') and measure = 'Introductory'))))) "+
                    "and uuid in (select measure from latestNonDeletedArchEntIdentifiers "+
                        "where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionIDforPerson') "+
                        "and uuid in (select uuid from latestNonDeletedAentValue "+
                            "where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionPersonRole') "+
                            "and measure=(select uuid from latestNonDeletedAentValue "+
                                "where AttributeID=(select AttributeID from AttributeKey where AttributeName='PersonRoleName') "+
                                "and measure='consultant') "+
                    "and uuid in (select uuid from latestNonDeletedAentValue "+
                        "where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionPersonName') "+
                        "and measure ='"+person_id+"')));";
                    fetchAll(checkPsIntrSssQuery,new FetchCallback() {
                        onFetch(result) {                               
                            if(isNull(result)){
                                showWarning("Validation Error", "You must either take person introductory questionnaire \n"+"or write the reason of not taking introductory questionnaire");
                                return;
                            }
                            else{
                                savePersonData();
                            }
                        }
                        onError(message) {
                            Log.e("error",message);
                            showToast(message);
                        }
                    });
            }
            else{
                savePersonData();
            }
        }
    }
    else{
        savePersonData();
    }
}

savePersonData(){
    String personNameOrigin=getFieldValue("person/personInfo/personName");
    String personNameCamCase=nameCamCaseConverter(personNameOrigin);
    String personLabel=personNameCamCase+"_"+getFieldValue("person/personInfo/personDOB");
    String personDOB=getFieldValue("person/personInfo/personDOB");

    psDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
        "where AttributeID=(select AttributeID from AttributeKey where AttributeName='PersonID') "+
        "and measure ='"+personLabel+"' or measure like '"+personLabel+"(%)'";

    if(person_id!=null){
        psDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
            "where AttributeID=(select AttributeID from AttributeKey where AttributeName='PersonID') "+
            "and uuid<>'"+person_id+"' "+
            "and measure ='"+personLabel+"' or measure like '"+personLabel+"(%)'";
    }
    
    fetchAll(psDuplicateQuery,new FetchCallback() {
        onFetch(result) {
            if(!isNull(result)){
                personLabel= nonDupLabelGen(result, personLabel, "Person", "PersonID",true);    
            }
            
            setFieldValue("person/personInfo/personID",personLabel);            
            saveTabGroup("person", person_id, null, null, new SaveCallback() {
                onSave(uuid, newRecord) {
                    person_id = uuid;
                    if (newRecord) {
                        showToast("New record created");
                        cancelTabGroup("person",true);
                        showTab("control/user_control");
                    }
                    else{
                        showToast("Record changed");    
                    }

                    }
                    onError(message) {
                        showWarning("error",message);
                    }  
            });
        }
    });
}
loadPerson(){
    fetchAll(loadAllPersonIDQuery, new FetchCallback() {
        onFetch(result) {
            populateList("control/user_control/userList", result);
        }

        onError(message) {
            showToast(message);
        }
    });
}
loadPersonInfo(){
    person_id=getListItemValue();
    if(isNull(person_id)){
        showToast("No Person selected");
        return;
    }
    createPersonPage();
    showTabGroup("person", person_id, new FetchCallback() {
        onFetch(result) {
            person=result;
            String roleUuid=getFieldValue("person/personInfoHide/personRoleId");
            checkPersonRoleQuery="SELECT measure from latestNonDeletedAentValue "+
                "WHERE latestNonDeletedAentValue.uuid='"+roleUuid+"' "+
                "AND latestNonDeletedAentValue.AttributeID="+
                "(select AttributeID from AttributeKey where AttributeName='PersonRoleName');";

            checkRoleIntroQuery="SELECT measure from latestNonDeletedAentValue "+
                "WHERE latestNonDeletedAentValue.uuid='"+roleUuid+"' "+
                "AND latestNonDeletedAentValue.AttributeID="+
                "(select AttributeID from AttributeKey where AttributeName='RoleIntroAnsRequired');";

            checkRolePhotoQuery="SELECT measure from latestNonDeletedAentValue "+
                "WHERE latestNonDeletedAentValue.uuid='"+roleUuid+"' "+
                "AND latestNonDeletedAentValue.AttributeID="+
                "(select AttributeID from AttributeKey where AttributeName='RolePhotoRequired');";

            fetchOne(checkPersonRoleQuery,new FetchCallback() {
                    onFetch(result) {
                        if(!isNull(result)){
                            setFieldValue("person/personInfo/personRoleName",result.get(0));
                            
                        }
                        else{
                            showWarning("Invalid role","This role may not be using anymore\n"+" please contact the admin for details");
                        }
                     
                    }  
            });
            checkPsIntrSssQuery="select uuid,measure from latestNonDeletedArchEntIdentifiers "+
                "where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionID') "+
                "and uuid in ( select uuid from AentReln "+
                    "where RelationshipID in(select RelationshipID from AentReln "+
                        "where RelationshipID in (select RelationshipID from latestNonDeletedRelationship "+
                            "where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Answer and Session' ) "+
                            "and latestNonDeletedRelationship.Deleted IS NULL) "+
                "and uuid in (select uuid from latestNonDeletedAentValue "+
                    "where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionnaireID') "+
                    "and latestNonDeletedAentValue.measure in(select uuid from latestNonDeletedAentValue "+
                        "where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionnaireType') "+
                        "and measure=(select uuid from latestNonDeletedAentValue "+
                            "where AttributeID= (select AttributeID from AttributeKey "+
                                "where AttributeName='QuesnirTypeName') and measure = 'Introductory'))))) "+
                "and uuid in (select measure from latestNonDeletedArchEntIdentifiers "+
                    "where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionIDforPerson') "+
                    "and uuid in (select uuid from latestNonDeletedAentValue "+
                        "where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionPersonRole') "+
                        "and measure=(select uuid from latestNonDeletedAentValue "+
                            "where AttributeID=(select AttributeID from AttributeKey where AttributeName='PersonRoleName') "+
                            "and measure='consultant') "+
                "and uuid in (select uuid from latestNonDeletedAentValue "+
                    "where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionPersonName') "+
                    "and measure ='"+person_id+"')));";
            
            fetchAll(checkPsIntrSssQuery, new FetchCallback() {
                onFetch(result) {
                        if(!isNull(result)){
                            setFieldValue("person/personInfo/introAnsChecker","Answered");
                        }
                    }
                    
                onError(message) {
                    showToast(message);
                }
            });

            fetchOne(checkRoleIntroQuery,new FetchCallback() {
                onFetch(result) {
                    if(!isNull(result)){
                        savePersonWfProperty.clear();
                        if(result.get(0).equals("Yes")){
                            savePersonWfProperty.add("Y");
                        }
                        else{
                            savePersonWfProperty.add("N");
                        }
                        fetchOne(checkRolePhotoQuery,new FetchCallback() {
                            onFetch(result) {
                                if(!isNull(result)){
                                    if(result.get(0).equals("Yes")){
                                        savePersonWfProperty.add("Y");
                                    }
                                    else{
                                        savePersonWfProperty.add("N");
                                    }
                                    
                                }
                                else{
                                    showWarning("Invalid role","This role may not be using anymore\n"+" please contact the admin for details");
                                }
                             
                            }  
                        });
                    }
                    else{
                        showWarning("Invalid role","This role may not be using anymore\n"+" please contact the admin for details");
                    }
                 
                }  
            });

            showToast("Loaded person"+person.getId());            
        }
        onError(message) {
            showToast(message);
        }
    });
}
/*** Search page ***/
showEntity(){
    
}

initializeSearch(){
    entityTypes = new ArrayList();
    entityTypes.add(new NameValuePair("{Questionnaire}", "Questionnaire"));
    entityTypes.add(new NameValuePair("{Question}", "QuestionBank"));
    entityTypes.add(new NameValuePair("{Person}", "Person"));
    entityTypes.add(new NameValuePair("{Language}", "Language"));
    entityTypes.add(new NameValuePair("{Role}", "PersonRole"));

    populateDropDown("control/search/entityTypes",entityTypes);
}

recordSearch(){

}

/*** Common methods ***/
stayInCurrentPage(){
    return;
}
/* 
** Getting the (\\d+) number suffix of a string
** inputString: the input string
*/
getNumSuffix(String inputString){
    String returnSuffix=null;
    Pattern numberPat = Pattern.compile("\\(\\d+\\)");
    Matcher numMatcher = numberPat.matcher(inputString);
    Boolean suffixFind=numMatcher.find();
    if(suffixFind){
        String [] patternSplit=inputString.split("\\(");
        Pattern numberPat2 = Pattern.compile("\\d+\\)");
        Matcher numMatcher2 = numberPat2.matcher(patternSplit[patternSplit.length-1]);
        if(numMatcher2.find()){
            returnSuffix="("+patternSplit[patternSplit.length-1];
        }
    }
    return returnSuffix;
}
/* 
** Generating a non-dup label
** dupList: the duplicate query result 
** tempLbl: the label to be checking for duplicate
** tableName: the table name for the label's update
** attriName: the attribute name for the label's update
** dataSaving: indicating if the old data should be updated to the database
*/
nonDupLabelGen(ArrayList dupList, String tempLbl, String tableName, String attriName, Boolean dataSaving){
    String rtnLbl=tempLbl;
    int sizeOfDup=0;
    Pattern numberPat = Pattern.compile("\\(\\d+\\)");
    sizeOfDup=dupList.size();

    if(sizeOfDup==0){
        return rtnLbl;
    }

    if(sizeOfDup==1){
        duplicateOldLabel=dupList.get(0).get(1);
        Matcher numMatcher = numberPat.matcher(duplicateOldLabel);

        String newLabel=null;
        if(numMatcher.find()){
            suffix=getNumSuffix(duplicateOldLabel);
            if(suffix!=null){
                if(!suffix.equals("(1)"))
                    {
                        int sLen=suffix.length();
                        newLabel=duplicateOldLabel.substring(0,duplicateOldLabel.length()-sLen)+"(1)";
                    }
            }
            else{
                newLabel=duplicateOldLabel+"(1)";
            }
        }
        else{
            newLabel=duplicateOldLabel+"(1)";
        }
        if(dataSaving){
            if(newLabel!=null){
                attributes = createAttributeList();
                attributes.add(createEntityAttribute(attriName, null, null, newLabel, null));
                entityId=dupList.get(0).get(0);
                saveArchEnt(entityId, tableName, null, attributes);
            }
        }
        rtnLbl=rtnLbl+"(2)";
        if(!dataSaving){
            if(newLabel!=null){
                rtnLbl=rtnLbl+"|"+newLabel;
            }
        }
    }

    else{
        int maxSuffix=0;
        for(temp: dupList){
            tempLabel=temp.get(1);
            Matcher numMatcher = numberPat.matcher(tempLabel);
            if(numMatcher.find()){
                tempSuffix=getNumSuffix(tempLabel);
                tempSuffixStr=null;
                    if(tempSuffix!=null){
                        int tempSuffixNum=Integer.parseInt(tempSuffix.replaceAll("[^0-9]", ""));
                        if(tempSuffixNum>maxSuffix){
                            maxSuffix=tempSuffixNum;
                        }
                }
            }
        }
        maxSuffix=maxSuffix+1;
        rtnLbl=rtnLbl+"("+maxSuffix+")";
    }
    return rtnLbl;
}

listChange(ArrayList targetList,ArrayList sourceList){
    //showWarning("listChange","listChange");
    Hashtable listChanges=new Hashtable();
    target_list=new ArrayList();
    source_list=new ArrayList();
    target_diff_on_source=new ArrayList();
    source_diff_on_target=new ArrayList();
    listChanges.clear();
    target_list.clear();
    source_list.clear();
    target_diff_on_source.clear();
    source_diff_on_target.clear();
    target_list.addAll(targetList);
    source_list.addAll(sourceList);
    target_list.removeAll(source_list);
    target_diff_on_source.addAll(target_list);//target - source
    target_list.clear();
    target_list.addAll(targetList);
    source_list.removeAll(target_list);
    source_diff_on_target.addAll(source_list);//source - target
    if((target_diff_on_source.isEmpty()) && (source_diff_on_target.isEmpty())){
        listChanges.put("EQUAL",targetList);
    }
    else if((!target_diff_on_source.isEmpty()) && (source_diff_on_target.isEmpty())){
        listChanges.put("PUREADD",target_diff_on_source);
    }
    else if((target_diff_on_source.isEmpty()) && (!source_diff_on_target.isEmpty())){
        listChanges.put("PUREDELETE",source_diff_on_target);
    }
    else {
        listChanges.put("ADD",target_diff_on_source);
        listChanges.put("DELETE",source_diff_on_target);
    }
    return listChanges;
}

listChange(ArrayList newList, ArrayList oldList, int newCompIdx, int oldCompIdx){
    //showWarning("listChange","listChange");
    Hashtable listChanges=new Hashtable();
    new_List=new ArrayList();
    old_List=new ArrayList();
    new_List.clear();
    old_List.clear();
    same_elements_old=new ArrayList();
    same_elements_new=new ArrayList();
    same_elements_old.clear();
    same_elements_new.clear();
    new_List.addAll(newList);
    old_List.addAll(oldList);
    //showWarning("add","addAll");
    for (elmNew : new_List){
        elmNewValue=elmNew.get(newCompIdx);
        //showWarning("elmNewValue",elmNewValue);
        for(elmOld: old_List){
            //showWarning("elmOld",elmOld.get(0));
            elmOldValue=elmOld.get(oldCompIdx);
            //showWarning("elmOldValue",elmOldValue);
            if(elmNewValue.equals(elmOldValue)){
                same_elements_old.add(elmOld);
                same_elements_new.add(elmNew);
            }
        }
    }
    //showWarning("for","for");
    //get the to be deleted elements
    if(!isNull(same_elements_old)){
        old_List.removeAll(same_elements_old);
        //showWarning("old_List","remove");
    }
    //get the to add elements
    if(!isNull(same_elements_new)){
        new_List.removeAll(same_elements_new);
    }

    if((new_List.isEmpty()) && (old_List.isEmpty())){
        listChanges.put("EQUAL",new_List);
        //showWarning("EQUAL","EQUAL");
    }
    else if((!new_List.isEmpty()) && (old_List.isEmpty())){
        listChanges.put("PUREADD",new_List);
    }
    else if((new_List.isEmpty()) && (!old_List.isEmpty())){
        listChanges.put("PUREDELETE",old_List);
    }
    else {
        listChanges.put("ADD",new_List);
        listChanges.put("DELETE",old_List);
    }
    return listChanges;
}

listChange(ArrayList newList, ArrayList oldList, int compareKey, ArrayList compareValues){
    Hashtable listChanges=new Hashtable();
    new_List=new ArrayList();
    old_List=new ArrayList();
    new_List.clear();
    old_List.clear();
    same_elements=new ArrayList();
    same_elements.clear();
    update_list=new ArrayList();
    update_list.clear();
    update_new_list=new ArrayList();
    update_new_list.clear();
    new_List.addAll(newList);
    old_List.addAll(oldList);
    del_list=new ArrayList();   
    del_list.clear();


    for(elmOld:old_List){
        elmOldKey=elmOld.get(compareKey);
        Boolean equalTo=false;
        //showWarning("elmOldKey",elmOldKey);
        for(elmNew:new_List){
            elmNewKey=elmNew.get(compareKey);
            //showWarning("elmNewKey",elmNewKey);
            if(elmOldKey.equals(elmNewKey)){
                equalTo=true;
                Boolean updated=false;
                //showWarning("equalTo","updated");
                for(int i=0;i<compareValues.size();i++){
                    if(!elmOld.get(compareValues.get(i)).equals(elmNew.get(compareValues.get(i))))
                    {
                        updated=true;
                        /*
                        tempOldUpdate=new ArrayList();
                        tempOldUpdate.add(elmOldKey);
                        tempUpdate=new ArrayList();
                        tempUpdate.add(tempOldUpdate);
                        tempUpdate.add(elmNew);
                        */
                        update_list.add(elmNew);
                        //update_new_list.add(elmNew);
                        //showWarning("updated","updated");
                        break;
                    }
                }
                if(!updated){
                    same_elements.add(elmNew);
                    //showWarning("equals","equals");
                }
                break;
            }
        }
        
        if(!equalTo){
            del_list.add(elmOld);
            //showWarning("del","del");
        }
    }

    new_List.removeAll(update_list);
    //showWarning("update_new_list","update_new_list");
    new_List.removeAll(same_elements);
    //showWarning("same_elements","same_elements");
    listChanges.put("E",same_elements);
    //showWarning("E","same_elements");
    listChanges.put("A",new_List);
    //showWarning("new_List","new_List");
    listChanges.put("D",del_list);
    //showWarning("del_list","del_list");
    listChanges.put("U",update_list);
    //showWarning("update_list","update_list");
    return listChanges;

}
timeValidation(String startDateTime){   
        String hyphenDateRegex="^\\d{4}[-]\\d{2}[-]\\d{2}$";
        Pattern hyphenDatePattern=Pattern.compile(hyphenDateRegex);
        Matcher hyphenDateMatcher=hyphenDatePattern.matcher(startDateTime);
        if (hyphenDateMatcher.find()){      
                DateFormat df=new SimpleDateFormat("yyyy-MM-dd");
                df.setLenient(false);
                Date sdt=null;
                try{
                    sdt=df.parse(startDateTime);    
                }
                catch(Exception ex){
                    return false;
                }
            return true;
        }
    return false;
}

nameCamCaseConverter(String originName){
    String camCase=null;
    String [] originNameSplit=originName.split("\\s+");
    //showWarning("originNameSplit",originNameSplit[0]);
    StringBuffer sb=new StringBuffer();
    //showWarning("StringBuffer","originNameSplit[0]");
    for (part : originNameSplit){
        if(part.length()>1){
            sb.append(Character.toUpperCase(part.charAt(0))).append(part.substring(1));
        }
        else{
            sb.append(Character.toUpperCase(part.charAt(0)));
        }
    }
    camCase=sb.toString().trim();
    return camCase;
    //showWarning("camCase",camCase);
}