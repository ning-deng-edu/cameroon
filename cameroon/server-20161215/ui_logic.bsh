import java.util.concurrent.Callable;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import android.util.Log;
import java.io.File;
/*** 'Editable' - you can edit the code below based on the needs ***/
User user; // don't touch
String userid;
/*Common queries*/
loadAllEngQuestionQuery="select qId.measure, qContent.measure "+
	"from latestNonDeletedAentValue as qId, latestNonDeletedAentValue as qContent "+
	"where qContent.AttributeID=(SELECT AttributeID FROM AttributeKey WHERE AttributeName='QuesContent') "+
	"and qId.AttributeID=(SELECT AttributeID FROM AttributeKey WHERE AttributeName='QuestionUuid') "+
	"and qId.uuid=qContent.uuid "+
	"and qId.uuid in"+
	"(select uuid from latestNonDeletedArchEntIdentifiers "+
	"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionUuid'));";

loadAllEngQuesContentQuery="select qId.measure, qCntt.measure from latestNonDeletedAentValue as qId, latestNonDeletedAentValue as qCntt, latestNonDeletedAentValue as qLang "+
	"where qId.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionUuid') "+
	"and qCntt.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesContent') "+
	"and qLang.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesLangUuid') "+
	"and qId.uuid=qCntt.uuid "+
	"and qCntt.uuid=qLang.uuid "+
	"and qLang.measure=(select eng.uuid from latestNonDeletedAentValue as eng "+
		"where eng.AttributeID=(select AttributeID from AttributeKey where AttributeName='LanguageName') "+
		"and eng.measure='English' "+
		"and eng.uuid in (select uuid from latestNonDeletedArchEntIdentifiers where AttributeID=(select AttributeID from AttributeKey where AttributeName='LanguageID')))";

loadAllQuestionnaireQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
	"WHERE latestNonDeletedAentValue.AttributeID "+
	"= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='QuestionnaireName') "+
	"GROUP BY uuid;";
	
loadAllPersonQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
	"WHERE latestNonDeletedAentValue.AttributeID "+
	"= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='PersonName') "+
	"GROUP BY uuid;";

loadAllLanguageQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
	"WHERE latestNonDeletedAentValue.AttributeID "+
	"= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='LanguageName') "+
	"and uuid in "+
	"(select uuid from latestNonDeletedArchEntIdentifiers "+
	"where AttributeID=(select AttributeID from AttributeKey where AttributeName='LanguageID')) "+
	"GROUP BY uuid;";

loadAllLWCLanguageQuery="select lang.uuid, lang.measure from latestNonDeletedAentValue as lang, latestNonDeletedAentValue as lProp "+
	"where lang.AttributeID=(select AttributeID from AttributeKey where AttributeName='LanguageName') "+
	"and lProp.AttributeID=(select AttributeID from AttributeKey where AttributeName='LanguageTypeID') "+
	"and lang.uuid=lProp.uuid "+
	"and lProp.measure=(select lPropDef.uuid from latestNonDeletedAentValue as lPropDef where lPropDef.AttributeID=(select AttributeID from AttributeKey where AttributeName='LangTypeName') "+
	"and lPropDef.measure='LWC') "+
	"and lang.uuid in (select uuid from latestNonDeletedArchEntIdentifiers where AttributeID=(select AttributeID from AttributeKey where AttributeName='LanguageID')) group by lang.uuid;";

loadEngUuiQuery="select uuid from latestNonDeletedAentValue "+
	"where AttributeID=(select AttributeID from AttributeKey where AttributeName='LanguageName') "+
	"and measure ='English' "+
	"and uuid in (select uuid from latestNonDeletedArchEntIdentifiers where AttributeID=(select AttributeID from AttributeKey where AttributeName='LanguageID'))";

loadAllPersonQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
		"WHERE latestNonDeletedAentValue.AttributeID "+
		"= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='PersonID') "+
		"GROUP BY uuid;";

loadAllUserQuery="select userid, fname || ' ' || lname from user where userdeleted is null";

loadAllQuesnirTypeQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
		"WHERE latestNonDeletedAentValue.AttributeID "+
		"= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='QuesnirTypeName') "+
		"GROUP BY uuid;";

loadAllPersonRoleQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
		"WHERE latestNonDeletedAentValue.AttributeID "+
		"= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='PersonRoleName') "+
		"GROUP BY uuid;";

loadAllQuesnirPropQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
		"WHERE latestNonDeletedAentValue.AttributeID "+
		"= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='QuesnirPropDefName') "+
		"GROUP BY uuid;";

loadAllQuesPropQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
		"WHERE latestNonDeletedAentValue.AttributeID "+
		"= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='QuesPropDefName') "+
		"GROUP BY uuid;";

loadAllLangTypeQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
		"WHERE latestNonDeletedAentValue.AttributeID "+
		"= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='LangTypeName') "+
		"GROUP BY uuid;";
/***Enable data and file syncing***/
addActionBarItem("sync", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "Disable Sync";
    }
    actionOn() {
        setSyncEnabled(false);
        setFileSyncEnabled(false);
        showToast("Sync disabled.");
    }
    isActionOff() {
        isSyncEnabled();
    }
    actionOffLabel() {
        "Enable Sync";
    }
    actionOff() {
        setSyncEnabled(true);
        setFileSyncEnabled(true);
        showToast("Sync enabled.");
    }
});

onSyncEvent("onSyncStart()", "onSyncSuccess()", "onSyncFailure()");


onSyncStart() {
    showToast("sync started");
}
 
onSyncSuccess() {
    showToast("sync success");
}
 
onSyncFailure() {
    showToast("sync failed");
}
/***Save relationships among entities***/
saveEntitiesToRel(String type, String entity1, String entity2) {
	//If this function doesn't work, generally it's because that no corresponding relationship table could be found in the data schema
	//So we need to recheck if the relationship table name are the consistency
	//showWarning("entity2",entity2);
    if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(rel_id, newRecord) {
        	//showWarning("rel_id",rel_id);
            addReln(entity1, rel_id, null);
            addReln(entity2, rel_id, null);
        }
        onError(message) {
	            //Log.e("saveEntitiesToHierRel", message);
	        	showWarning("error saveEntitiesToRel",type+":"+message);
	    }
    });
}

/*** USER ***/
onEvent("user/usertab/users", "click", "login()");
onEvent("user/usertab/user_Search", "click", "userSearch()");

loadUsers() {
    fetchAll(loadAllUserQuery, new FetchCallback() {
        onFetch(result) {
            populateList("user/usertab/users", result);
        }
    });
}

loadUsers();

initializeData(){
	//showWarning("initializeData","initializeData");
	fetchOne("select * from AentValue", new FetchCallback() {
        onFetch(result) {
            if(isNull(result)){
            	//showWarning("NO DATA","NO DATA");
            	initializeQuesnirType();
            	initializeQuesProp();
            	initilizePersonRole();
            	initilizeLangType();
            	showToast("data initilized");
            }
        }
    });
}

initializeQuesnirType(){
	regQuesnirAttributes=createAttributeList();
	regQuesnirAttributes.add(createEntityAttribute("QuesnirTypeName", null, null, "Regular", null));
	saveArchEnt(null, "QuesnirType", null, regQuesnirAttributes);

	introQuesnirAttributes=createAttributeList();
	introQuesnirAttributes.add(createEntityAttribute("QuesnirTypeName", null, null, "Introductory", null));
	saveArchEnt(null, "QuesnirType", null, introQuesnirAttributes);

	sclingQuesnirAttributes=createAttributeList();
	sclingQuesnirAttributes.add(createEntityAttribute("QuesnirTypeName", null, null, "Sociolinguistic", null));
	saveArchEnt(null, "QuesnirType", null, sclingQuesnirAttributes);

	emrQuesnirAttributes=createAttributeList();
	emrQuesnirAttributes.add(createEntityAttribute("QuesnirTypeName", null, null, "Emergency", null));
	saveArchEnt(null, "QuesnirType", null, emrQuesnirAttributes);
}

initializeQuesProp(){
	audQuesAttributes=createAttributeList();
	audQuesAttributes.add(createEntityAttribute("QuesPropDefName", null, null, "Audio_Required", null));
	saveArchEnt(null, "QuesPropDef", null, audQuesAttributes);

	vedQuesAttributes=createAttributeList();
	vedQuesAttributes.add(createEntityAttribute("QuesPropDefName", null, null, "Video_Required", null));
	saveArchEnt(null, "QuesPropDef", null, vedQuesAttributes);

	phtQuesAttributes=createAttributeList();
	phtQuesAttributes.add(createEntityAttribute("QuesPropDefName", null, null, "Photo_Required", null));
	saveArchEnt(null, "QuesPropDef", null, phtQuesAttributes);

	filQuesAttributes=createAttributeList();
	filQuesAttributes.add(createEntityAttribute("QuesPropDefName", null, null, "File_Required", null));
	saveArchEnt(null, "QuesPropDef", null, filQuesAttributes);

	nonQuesAttributes=createAttributeList();
	nonQuesAttributes.add(createEntityAttribute("QuesPropDefName", null, null, "None", null));
	saveArchEnt(null, "QuesPropDef", null, nonQuesAttributes);

	lanQuesAttributes=createAttributeList();
	lanQuesAttributes.add(createEntityAttribute("QuesPropDefName", null, null, "LangIntro", null));
	saveArchEnt(null, "QuesPropDef", null, lanQuesAttributes);

	emrQuesAttributes=createAttributeList();
	emrQuesAttributes.add(createEntityAttribute("QuesPropDefName", null, null, "EmergencyQuestion", null));
	saveArchEnt(null, "QuesPropDef", null, emrQuesAttributes);

	chkQuesAttributes=createAttributeList();
	chkQuesAttributes.add(createEntityAttribute("QuesPropDefName", null, null, "CheckList", null));
	saveArchEnt(null, "QuesPropDef", null, chkQuesAttributes);
}

initilizePersonRole(){
	colPsAttributes=createAttributeList();
	colPsAttributes.add(createEntityAttribute("PersonRoleName", null, null, "consultant", null));
	colPsAttributes.add(createEntityAttribute("RoleIntroAnsRequired", null, null, "Yes", null));
	colPsAttributes.add(createEntityAttribute("RolePhotoRequired", null, null, "Yes", null));
	colPsAttributes.add(createEntityAttribute("RoleDataOnClient", null, null, "Yes", null));
	saveArchEnt(null, "PersonRole", null, colPsAttributes);
	
	intPsAttributes=createAttributeList();
	intPsAttributes.add(createEntityAttribute("PersonRoleName", null, null, "interviewer", null));
	intPsAttributes.add(createEntityAttribute("RoleIntroAnsRequired", null, null, "No", null));
	intPsAttributes.add(createEntityAttribute("RolePhotoRequired", null, null, "No", null));
	intPsAttributes.add(createEntityAttribute("RoleDataOnClient", null, null, "Yes", null));
	saveArchEnt(null, "PersonRole", null, intPsAttributes);
}

initilizeLangType(){
	lwcLangAttributes=createAttributeList();
	lwcLangAttributes.add(createEntityAttribute("LangTypeName", null, null, "LWC", null));
	saveArchEnt(null, "LangTypeDef", null, lwcLangAttributes);
}


String username = "";
String device = "";

login() {
    fetchOne("select userid,fname,lname,email from user where userid='" + getListItemValue() + "';", new FetchCallback() {
        onFetch(result) {
            user = new User(result.get(0),result.get(1),result.get(2),result.get(3));
            setUser(user);
            username = result.get(1) + " " + result.get(2);
            showTabGroup("control");
            initializeData();
        }
    });
}

userSearch(){
	String userKeyword=getFieldValue("user/usertab/user_keyword");
	if((isNull(userKeyword)) || userKeyword.equals("*")){
		 fetchAll(loadAllUserQuery, new FetchCallback() {
		        onFetch(result) {
		            populateList("user/usertab/users", result);
		        }
		    });
	}
	else{
		searchUserQuery="select userid, fname || ' ' || lname from user where userdeleted is null and fname like '%"
						+userKeyword+"%'or lname like '%"+userKeyword+"%'";
		fetchAll(searchUserQuery, new FetchCallback() {
	        onFetch(result) {
	            populateList("user/usertab/users", result);
	        }
	    });
	}
}
/***Questionnaire***/

onEvent("control/questionnaire_control/New_Questionnaire","click","newQuestionnaire()");
onEvent("control/questionnaire_control","show","loadQuestionnaire()");
onEvent("control/questionnaire_control/questionnaireList","click","loadQuestionnaireInfo()");
onEvent("questionnaire/questionnaire_info/Start_Question_Selection","click","startQuestionSelection()");
onEvent("questionnaire/questionnaire_info","show","loadQuesnirType(\"newQuesnir\")");
onEvent("questionnaire_question/questionnaire_question_info","show","initializeQuestionSelect()");
onEvent("questionnaire_question/questionnaire_question_info/questionList","click","questionSelection()");
onEvent("questionnaire_question/questionnaire_question_info/Search_Question","click","searchQuestion()");
onEvent("questionnaire", "show", "showTab(\"questionnaire/questionnaire_info\")");
onEvent("questionnaire/questionnaire_info/questionnaireTypeSelection", "click", "setQuesnirType()");
onEvent("questionnaire/questionnaire_info/New_QuesnirType", "click", "newQuesnirType()");
//onEvent("questionnaire_question/questionnaire_question_info/Search_Question","click","searchQuestion()");
//onEvent("questionnaire/questionnaire_prop", "show", "createQuesnirPropSelPage()");
finished_questionnaire_id=null;//flag for marking if any questionnaire is selected
questionCandidates=new ArrayList();//original questions to be selected in questionnaire
questionCandidatesContent=new ArrayList();//manipulatable question list to be selected in questionnaire
questionSelected=new ArrayList();//questions selected in questionnaire
questionOriginal=new ArrayList();//when changing questionnaire, this is for showing whether or not the questions in questionnaire are changed
questionnaireInfoOriginal=new ArrayList();//Comparing whether or not the questionnaire basic info is changed
questionnaireInfoNew=new ArrayList();//Comparing whether or not the questionnaire basic info is changed
quesListRelnOrigin=new ArrayList();//Storing the existing reln between questions and questionnaire, used for deletion
questionirType = new ArrayList();
quesnirTypeRelnOrigin=new ArrayList();
searchQuesType=new ArrayList();
searchQuesType.add("candidate");
searchQuesType.add("selected");

newQuestionnaire(){	
    newTabGroup("questionnaire");
    questionCandidates.clear();
    questionCandidatesContent.clear();
    questionSelected.clear();
    questionOriginal.clear();
    questionnaireInfoOriginal.clear();
    questionnaireInfoNew.clear();
    quesListRelnOrigin.clear();
    questionirType.clear();
    quesnirTypeRelnOrigin.clear();
	finished_questionnaire_id=null;
}

stayInCurrentPage(){
	return;
}

loadQuesnirType(String typeFlag){
	fetchAll(loadAllQuesnirTypeQuery,
	new FetchCallback() {
        onFetch(result) {
			if (!isNull(result)) {
				questionirType.clear();
				questionirType.addAll(result);
				if(typeFlag.equals("typeLoad")){
					populateList("type_control/type_control_info/typeList",questionirType);
				}
				else{
					String firstType=result.get(0).get(1);
					String firstTypeUuid=result.get(0).get(0);
					populateDropDown("questionnaire/questionnaire_info/questionnaireTypeSelection",questionirType);
					if((isNull(getFieldValue("questionnaire/questionnaire_info/questionnaireType"))) && (isNull(getFieldValue("questionnaire/questionnaire_info_hide/questionnaireTypeUuid")))){
						setFieldValue("questionnaire/questionnaire_info/questionnaireType",firstType);
						setFieldValue("questionnaire/questionnaire_info_hide/questionnaireTypeUuid",firstTypeUuid);
					}
				}
				
			}
			else{
				if(!typeFlag.equals("typeLoad")){
					showAlert("Questionnaire Type data", "There is no available questionnaire type yet\n"+"Do you want to create new type now?", "newQuesnirType()", "stayInCurrentPage()");
				}
				
			}
			
        }

        onError(message) {
            showToast(message);
        }
    });
}

//load all questionnaire names
loadQuestionnaire(){
	finished_questionnaire_id=null;
	existing_questionnaires=new ArrayList();
	/*The fetchAll query returns the uuid and the question content of all the questions*/
	fetchAll(
	loadAllQuestionnaireQuery,
	new FetchCallback() {
        onFetch(result) {
			if (!isNull(result)) {
				existing_questionnaires.addAll(result);
				//for (re:result) {
				//existing_questionnaires.add(re);
				//}
			
			}
			populateList("control/questionnaire_control/questionnaireList", existing_questionnaires);
        }

        onError(message) {
            showToast(message);
        }
    });
}

//load the questionnaire basic info to the page
loadQuestionnaireInfo(){
	questionnaireInfoOriginal.clear();
	questionnaireInfoNew.clear();
	finished_questionnaire_id=getListItemValue();
	if(isNull(finished_questionnaire_id)){
		showToast("No Questionnaire selected");
		return;
	}
	//showWarning("questionnaireID",finished_questionnaire_id.toString());
	showTabGroup("questionnaire", finished_questionnaire_id, new FetchCallback() {
        onFetch(result) {
            questionnaire=result;	
            String qnirTypeUuid= getFieldValue("questionnaire/questionnaire_info_hide/questionnaireTypeUuid");
            //showWarning("qnirTypeUuid",qnirTypeUuid);
            quesnirTypeNameQuery="SELECT measure from latestNonDeletedAentValue "+
	        	"WHERE latestNonDeletedAentValue.AttributeID="+
	        	"(SELECT AttributeID from AttributeKey WHERE AttributeName='QuesnirTypeName') "+
	        	"AND latestNonDeletedAentValue.uuid='"+qnirTypeUuid+"';";

	        fetchOne(quesnirTypeNameQuery,new FetchCallback() {
					onFetch(result) {
							if(!isNull(result)){
								setFieldValue("questionnaire/questionnaire_info/questionnaireType",result.get(0));
								//showToast("Loaded question"+question_id);
							}
							else{
								showWarning("Out-of-date data","The questionnaire type in the questionnaire is not using anymore");
							}
							onError(message) {
	    						showToast(message);
	  						}
  						}
					});

            showToast("Loaded questionnaire"+questionnaire.getId());

            //populateDropDown("questionnaire/questionnaire_info/questionnaireTypeSelection",questionirType);
            

			questionnaireInfoOriginal.add(getFieldValue("questionnaire/questionnaire_info/questionnaireID"));
			questionnaireInfoOriginal.add(getFieldValue("questionnaire/questionnaire_info/questionnaireName"));
			questionnaireInfoOriginal.add(getFieldValue("questionnaire/questionnaire_info/questionnaireDescription"));
			//questionnaireInfoOriginal.add(getFieldValue("questionnaire/questionnaire_info/questionnaireType"));
			questionnaireInfoOriginal.add(qnirTypeUuid);
			loadQuesnirType("load");

			quesnir_type_reln_query="select RelationshipID from AentReln where AentReln.uuid="+finished_questionnaire_id+" "+
				"and RelationshipID in "+
				"(select RelationshipID from latestNonDeletedRelationship where RelnTypeID="+
					"(select RelnTypeID from RelnType where RelnTypeName='Questionnaire and QuesnirType') "+
				"and latestNonDeletedRelationship.Deleted IS NULL)";

			fetchAll(quesnir_type_reln_query, new FetchCallback() {
	        onFetch(result) {
	        	quesnirTypeRelnOrigin.clear();
	        	quesnirTypeRelnOrigin.addAll(result);
	        }

	        onError(message) {
	            showToast(message);
	        }
	   	 });


        }
        onError(message) {
            showToast(message);
        }
    });
}

setQuesnirType(){
	String quesnirType=getFieldValue("questionnaire/questionnaire_info/questionnaireTypeSelection");
	setFieldValue("questionnaire/questionnaire_info_hide/questionnaireTypeUuid",quesnirType);
	for (type:questionirType){
		if (type.get(0).equals(quesnirType)){
			String quernirTypeName=type.get(1);
			setFieldValue("questionnaire/questionnaire_info/questionnaireType",quernirTypeName);
			break;
		}
	}
}
/***Question Property***/
onEvent("control/other_control/Prop_Control","click","showTabGroup(\"prop_control\")");
onEvent("prop_control/prop_control_info","show","loadQuesProp(\"propLoad\")");
onEvent("prop_control/prop_control_info/New_Prop","click","newQuesProp()");
onEvent("prop_control/prop_control_info/propList","click","loadQuesPropInfo()");
quesPropertyId=null;
quesProperty=new ArrayList();
createQuesPropPage(){
	//showWarning("createQuesPropPage","createQuesPropPage");
		if(!hasView("quesProperty/quesPropertyInfo/propName")){
			removeAllViewsAndContainers("quesProperty");
	//		showWarning("removeAllViewsAndContainers","removeAllViewsAndContainers");
			executeViewTask(new ViewTask() {
		    doTask() {
		  		propNameViewDef=createViewDef().createTextField().setLabel("Property name").setAttributeName("QuesPropDefName").setAttributeType("measure").setAnnotationEnabled(true).setStyleCss("required");
		  		propDescViewDef=createViewDef().createTextField().setLabel("Description").setAttributeName("QuesPropDefDesc").setAttributeType("measure").setAnnotationEnabled(true);
		  		savePropBtnDef=createViewDef().createButton().setLabel("Save").setStyleCss("faims-blue");
		  		dupListDef=createViewDef().createList().setLabel("Duplicate records");
	//			showWarning("dupListDef","dupListDef");
		    	createView("quesProperty/quesPropertyInfo/propName",propNameViewDef,"quesProperty/quesPropertyInfo");
		    	createView("quesProperty/quesPropertyInfo/propDesc",propDescViewDef,"quesProperty/quesPropertyInfo");
		        createView("quesProperty/quesPropertyInfo/saveProp",savePropBtnDef,"quesProperty/quesPropertyInfo");
		        createView("quesProperty/quesPropertyInfo/propDupList",dupListDef,"quesProperty/quesPropertyInfo");
		        
	
				onEvent("quesProperty/quesPropertyInfo/saveProp","click","quesPropCheck()");
		   		}
			});
	}
}

loadQuesProp(String typeflag){
	fetchAll(loadAllQuesPropQuery,
	new FetchCallback() {
        onFetch(result) {
			if (!isNull(result)) {
				quesProperty.clear();
				quesProperty.addAll(result);
				if(typeflag.equals("propLoad")){
					populateList("prop_control/prop_control_info/propList",quesProperty);
				}
			}
        }
        onError(message) {
            showToast(message);
        }
    });
}

newQuesProp(){
	quesPropertyId=null;
	createQuesPropPage();
	newTabGroup("quesProperty");
}

loadQuesPropInfo(){
	quesPropertyId=getListItemValue();
	if(isNull(quesPropertyId) || quesPropertyId.equals("placeholder")){
		showWarning("Invalid data","No data selected");
		return;
	}
	createQuesPropPage();
	showTabGroup("quesProperty", quesPropertyId, new FetchCallback() {
        onFetch(result) {
        	tempPop=new ArrayList();
        	tempPop.clear();
        	populateList("quesProperty/quesPropertyInfo/propDupList",tempPop);
            showToast("Loaded data"+result.getId());  
            //showWarning("intro?",result.getClass().getName());          
        }
        onError(message) {
            showToast(message);
        }
    });
}
quesPropCheck(){
	String newPropName=getFieldValue("quesProperty/quesPropertyInfo/propName").trim();
	if(isNull(newPropName)){
			showWarning("Incomplete data", "You must input questionnaire property name");
			return;
		}
		else{

		quesnirPropCheckQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
							"WHERE latestNonDeletedAentValue.AttributeID "+
							"= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='QuesPropDefName') "+
							"AND latestNonDeletedAentValue.measure like '%"+newPropName+"%'; ";
		//showWarning("quesnirTypeCheckQuery","quesnirTypeCheckQuery");					
		fetchAll(quesnirPropCheckQuery,
			new FetchCallback() {
				onFetch(result) {
					if (!isNull(result)) {
						populateList("quesProperty/quesPropertyInfo/propDupList",result);
						showAlert("Question property data", "This could be a duplicate data\n"+"The possible existing data is listed in the list\n"+"Do you still want to save?", "saveQuesProp()", "stayInCurrentPage()");
					}
					else{
						saveQuesProp();
					}
				}
		       
			onError(message) {
				showToast(message);
			}
			});
		}	
}
saveQuesProp(){
	saveTabGroup("quesProperty", quesPropertyId, null, null, new SaveCallback() {
		onSave(uuid, newRecord) {
			quesPropertyId = uuid;
			//showWarning("saveQuesnirType",quesnirTypeId);
			if (newRecord) {
				showToast("New record created");
			    cancelTabGroup("quesProperty",true);
			}
			else{
				showToast("Record changed");
			}
		}
		onError(message) {
			showWarning("error",message);
		}  
		});
}

/***Quesnir type***/
onEvent("quesnirType/quesnirType_info/SaveQuesnirType","click","quesnirTypePreCheck()");
quesnirTypeId=null;

newQuesnirType(){
	quesnirTypeId=null;
	newTabGroup("quesnirType");
}

quesnirTypePreCheck(){
		String newTypeName=getFieldValue("quesnirType/quesnirType_info/quesnirTypeName").trim();
		//showWarning("newTypeName",newTypeName);
		if(isNull(newTypeName)){
			showWarning("Incomplete data", "You must input questionnaire name");
			return;
		}
		else{

			quesnirTypeCheckQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
								"WHERE latestNonDeletedAentValue.AttributeID "+
								"= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='QuesnirTypeName') "+
								"AND latestNonDeletedAentValue.measure like '%"+newTypeName+"%'; ";
			//showWarning("quesnirTypeCheckQuery","quesnirTypeCheckQuery");					
			fetchAll(quesnirTypeCheckQuery,
				new FetchCallback() {
					onFetch(result) {
						if (!isNull(result)) {
							populateList("quesnirType/quesnirType_info/duplicateTypeList",result);
							showAlert("Questionnaire Type data", "This could be a duplicate type\n"+"The possible existing type is listed in the list\n"+"Do you still want to save this type?", "saveQuesnirType()", "stayInCurrentPage()");
						}
						else{
							saveQuesnirType();
						}
					}
			       
				onError(message) {
					showToast(message);
				}
				});
		}	
	
}

saveQuesnirType(){

	saveTabGroup("quesnirType", quesnirTypeId, null, null, new SaveCallback() {
		onSave(uuid, newRecord) {
			quesnirTypeId = uuid;
			//showWarning("saveQuesnirType",quesnirTypeId);
			if (newRecord) {
				showToast("New record created");
			    cancelTabGroup("quesnirType",true);
			}
			else{
				showToast("Record changed");
			}
		}
		onError(message) {
			showWarning("error",message);
		}  
		});

}

//preparation for the question selection
startQuestionSelection(){   
	
    if((isNull(getFieldValue("questionnaire/questionnaire_info/questionnaireName")))||(isNull(getFieldValue("questionnaire/questionnaire_info/questionnaireID")))) {
            showWarning("Validation Error", "You must fill in the Questionnaire ID/Name before you can continue");
            return;
        } else {
        	questionnaire_id=getFieldValue("questionnaire/questionnaire_info/questionnaireID");
            questionnaire_name = getFieldValue("questionnaire/questionnaire_info/questionnaireName");
			questionnaireInfoNew.add(questionnaire_id);
			questionnaireInfoNew.add(questionnaire_name);
			questionnaireInfoNew.add(getFieldValue("questionnaire/questionnaire_info/questionnaireDescription"));

			questionnaireInfoNew.add(getFieldValue("questionnaire/questionnaire_info_hide/questionnaireTypeUuid"));
            showTabGroup("questionnaire_question");
        }
        
     //showTabGroup("questionnaire_question");
}


		
//when there is a selected questionnaire, basically show all the data in this questionnaire		
//when there is no selected questionnaire, populate question candidate list for selection
newQuestionFromQuestionnaire(){
	//flag_return_questionnaire=true;
	newTabGroup("questionBank");
	onEvent("questionBank", "show", "showTab(\"questionBank/questionInfo\");");  
}


initializeQuestionSelect(){
	//the query result is an ArrayList, and each item in query result is an ArrayList too
		questionCandidates.clear();
		questionCandidatesContent.clear();
		questionSelected.clear();
		questionOriginal.clear();
		setFieldValue("questionnaire_question/questionnaire_question_info/keywordOfQuestion", "*");
		populateDropDown("questionnaire_question/questionnaire_question_info/category",searchQuesType);
		
		//showWarning("All clear","clear done");
	//the query result is an ArrayList, and each item in query result is an ArrayList too
	if(isNull(finished_questionnaire_id)){
		//showWarning("no id","new questionnaire");
		//populateList("questionnaire_question/questionnaire_question_info/questionInQuestionnaire", questionSelected);

		fetchAll(loadAllEngQuesContentQuery,
		new FetchCallback() {
			//showWarning("fetched",finished_questionnaire_id);
			onFetch(result) {
				if (!isNull(result)) {
					//showWarning("fetch result is not null",finished_questionnaire_id);
					questionCandidates.addAll(result);
					questionCandidatesContent.addAll(result);
					populateList("questionnaire_question/questionnaire_question_info/questionList", questionCandidatesContent);
				//if(hasView("questionnaire_question/questionnaire_question_info/Check_ques_1")){
					removeAllViewsAndContainers("questionnaire_question");
					//createContainer("questionnaire_question/questionnaire_question_info/ques_container", "orientation", "questionnaire_question/questionnaire_question_info");
				//}
			}
			
        }

		onError(message) {
            showToast(message);
        }
		});
		//showWarning("questionCandidatesContent size ",questionCandidatesContent.size());
	}
	
	else{
		current_questionnaire_id=finished_questionnaire_id;
		tempQuestionList=new ArrayList();
		tempQuestionList.clear();
		if(isNull(current_questionnaire_id))
			{
				showWarning("Message","Something went wrong! please contact the Admin!");
				return;
			}
		quesnir_ques_reln_query="select uuid from latestNonDeletedArchEntIdentifiers "+
		"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesnirID') "+
		"and measure='"+current_questionnaire_id+"' ";

		quesListRelnOrigin.clear();

		fetchAll(quesnir_ques_reln_query, new FetchCallback() {
	        onFetch(result) {
	        	if(!isNull(result)){
	        		quesListRelnOrigin.addAll(result);

	        		for(reln:quesListRelnOrigin){
	        			String relnId=reln.get(0);

						loadQuesOrderQuery="select measure from latestNonDeletedAentValue "+
							"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesOrderLocal') "+
							"and uuid='"+relnId+"'";

						fetchOne(loadQuesOrderQuery,new FetchCallback() {
							onFetch(orderResult) {
								if (!isNull(orderResult)) {
									tempQuesOrder=new ArrayList();
									tempQuesOrder.addAll(orderResult);
									String tempQuesOrderNum=tempQuesOrder.get(0);
										/*
										loadQuesContentQuery="select uuid,measure from latestNonDeletedAentValue "+
					                		"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionContent') "+
					                		"and uuid=(select measure from latestNonDeletedAentValue where AttributeID="+
					                			"(select AttributeID from AttributeKey where AttributeName='QuesID') "+
					                			"and uuid='"+relnId+"')";
										*/
					                	loadQuesContentQuery="select qId.measure, qContent.measure "+
					                	"from latestNonDeletedAentValue as qId, latestNonDeletedAentValue as qContent "+
					                	"where qContent.AttributeID=(SELECT AttributeID FROM AttributeKey WHERE AttributeName='QuesContent') "+
					                	"and qId.AttributeID=(SELECT AttributeID FROM AttributeKey WHERE AttributeName='QuestionUuid') "+
					                	"and qId.uuid=qContent.uuid "+
					                	"and qId.uuid in"+
										"(select uuid from latestNonDeletedArchEntIdentifiers "+
										"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionUuid')) "+
					                	"and qId.measure=(select measure from latestNonDeletedAentValue where AttributeID="+
					                			"(select AttributeID from AttributeKey where AttributeName='QuesID') "+
					                			"and uuid='"+relnId+"')";


										fetchOne(loadQuesContentQuery,new FetchCallback() {
										onFetch(quesResult) {
											if (!isNull(quesResult)) {
												tempQues=new ArrayList();
												tempQues.addAll(quesResult);
												//tempPopulateQuestionList.addAll(quesResult);
												String tempQuesContent=tempQues.get(1);
												tempQuesContent=tempQuesOrderNum+"-"+tempQuesContent;	
												tempQues.set(1,tempQuesContent);
												questionSelected.add(tempQues);//order the questionSelected list in order
												reConstructQuesOrder();
												questionOriginal.add(tempQues);
												//populateRadioGroup("questionnaire_question/questionnaire_question_info/questionInQuestionnaire", questionSelected);
												}
											else{
													showWarning("Out-of-date Data","Some questions may not be using anymore\n"+"Please contact the admin for further information");
												}
										}
													       
										onError(message) {
											showToast(message);
											}
										});	
									}
								else{
										showWarning("Out-of-date Data","Some questions may not be using anymore\n"+"Please contact the admin for further information");
									}
							}
										       
							onError(message) {
								showToast(message);
								}
							});	
					}	
				}		
	        	else{
	        		//populateRadioGroup("questionnaire_question/questionnaire_question_info/questionInQuestionnaire",questionSelected);
					showWarning("Out-of-date Data","Some questions in this questionnaire may not be using anymore\n"+"Please contact the admin for further information");
	        	}
	        }

	        onError(message) {
	            showToast(message);
	        }
	    });
		/*
		loadAllQuesInQuesnirQuery="select uuid, measure from latestNonDeletedAentValue "+
		"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionContent') "+
		"and uuid in (select measure from latestNonDeletedArchEntIdentifiers "+
			"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesID') "+
			"and uuid in (select uuid from latestNonDeletedArchEntIdentifiers "+
				"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesnirID') "+
				"and measure='"+current_questionnaire_id+"'))";
		*/
		loadAllQuesInQuesnirQuery="select qId.measure, qContent.measure "+
		"from latestNonDeletedAentValue as qId, latestNonDeletedAentValue as qContent "+
		"where qContent.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesContent') "+
		"and qId.AttributeID=(SELECT AttributeID FROM AttributeKey WHERE AttributeName='QuestionUuid') "+
		"and qId.uuid=qContent.uuid "+
		"and qId.uuid in"+
		"(select uuid from latestNonDeletedArchEntIdentifiers "+
		"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionUuid')) "+
		"and qId.measure in (select measure from latestNonDeletedArchEntIdentifiers "+
			"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesID') "+
			"and uuid in (select uuid from latestNonDeletedArchEntIdentifiers "+
				"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesnirID') "+
				"and measure='"+current_questionnaire_id+"'))";


		fetchAll(loadAllQuesInQuesnirQuery,
				new FetchCallback() {
					onFetch(result) {
						if (!isNull(result)) {
						tempQuestionList.addAll(result);

						fetchAll(loadAllEngQuesContentQuery,
							new FetchCallback() {
								onFetch(result) {
									if (!isNull(result)) {
									questionCandidates.addAll(result);
									questionCandidatesContent.addAll(result);
									questionCandidatesContent.removeAll(tempQuestionList);
									populateList("questionnaire_question/questionnaire_question_info/questionList", questionCandidatesContent);
								}
								else{
									populateList("questionnaire_question/questionnaire_question_info/questionList", questionCandidatesContent);
								}
						
							}

							onError(message) {
							    showToast(message);
							}
							});	
	
					}
				}

				onError(message) {
				    showToast(message);
				}
				});	
		
		}
}

			
//after selected a question, add this question to questionSelected, and remove it from questionCandidatesContent
questionSelection(){
	questionnaire_question_id=getListItemValue();
	//int idx_question=-1;
	if(isNull(questionnaire_question_id)){
		showToast("No Question selected");
		return;
	}
	else{
		for(quesCandidate:questionCandidatesContent){
			if(quesCandidate.get(0).equals(questionnaire_question_id)){
				//get the question
				String quesId=quesCandidate.get(0);
				String quesContent=quesCandidate.get(1);
				int quesCount=questionSelected.size()+1;
				String quesNumber=(quesCount).toString();
				quesContent=quesNumber+"-"+quesContent;
				quesSelected=new ArrayList();
				quesSelected.add(quesId);
				quesSelected.add(quesContent);
				questionSelected.add(quesSelected);
				//rm this question from quesCandidate
				questionCandidatesContent.remove(quesCandidate);
				populateList("questionnaire_question/questionnaire_question_info/questionList", questionCandidatesContent);
				//generate a new dynamic ui
				style1 = "orientation";
            	style2 = "even";
            	style3 = "large";
				if(hasView("questionnaire_question/questionnaire_question_info/Change_Questionnaire")){
					rmQuesnirNewChangeBtn();
				}
            	executeViewTask(new ViewTask() {
    			doTask() { 	
				createContainer("questionnaire_question/questionnaire_question_info/ques_rowc_" + quesCount, "orientation", "questionnaire_question/questionnaire_question_info");

                createContainer("questionnaire_question/questionnaire_question_info/quesc_" + quesCount, "even", "questionnaire_question/questionnaire_question_info/ques_rowc_" + quesCount);
                createContainer("questionnaire_question/questionnaire_question_info/Delete_quesc_" + quesCount, "large", "questionnaire_question/questionnaire_question_info/ques_rowc_" + quesCount);
                createContainer("questionnaire_question/questionnaire_question_info/Up_quesc_" + quesCount, "large", "questionnaire_question/questionnaire_question_info/ques_rowc_" + quesCount);
                createContainer("questionnaire_question/questionnaire_question_info/Down_quesc_" + quesCount, "large", "questionnaire_question/questionnaire_question_info/ques_rowc_" + quesCount);

                createView("questionnaire_question/questionnaire_question_info/Ques_" + quesCount, createViewDef().createTextField("string").setReadOnly(true), "questionnaire_question/questionnaire_question_info/quesc_" + quesCount);
                createView("questionnaire_question/questionnaire_question_info/Delete_ques_" + quesCount, createViewDef().createButton().setLabel("X").setStyleCss("faims-danger"), "questionnaire_question/questionnaire_question_info/Delete_quesc_" + quesCount);
                createView("questionnaire_question/questionnaire_question_info/Up_ques_" + quesCount, createViewDef().createButton().setLabel("↑").setStyleCss("faims-danger"), "questionnaire_question/questionnaire_question_info/Up_quesc_" + quesCount);
                createView("questionnaire_question/questionnaire_question_info/Down_ques_" + quesCount, createViewDef().createButton().setLabel("↓").setStyleCss("faims-danger"), "questionnaire_question/questionnaire_question_info/Down_quesc_" + quesCount);

				setFieldValue("questionnaire_question/questionnaire_question_info/Ques_" + quesCount, quesContent);
				onEvent("questionnaire_question/questionnaire_question_info/Delete_ques_" + quesCount,"click","deleteQuesConfirm(\""+quesContent+"\")");
				onEvent("questionnaire_question/questionnaire_question_info/Up_ques_" + quesCount,"click","moveUpQues(\""+quesContent+"\")");
				onEvent("questionnaire_question/questionnaire_question_info/Down_ques_" + quesCount,"click","moveDownQues(\""+quesContent+"\")");
					}
				});
				createChangeBtnQuesnir();

				break;
			}
		}
		
	}
}

//after unselected a question, add this question to questionCandidatesContent, and remove it from questionSelected
deleteQuesConfirm(String quesContent){
	showAlert("Deleting question", "Do you want to delete this question?", "deleteSelectedQuestion(\""+quesContent+"\")", "stayInCurrentPage()");
}

deleteSelectedQuestion(String quesContent){
	if(isNull(quesContent)){
		showToast("No Question selected");
		return;
	}
	else{
		//showWarning("start",questionCandidatesContent.size().toString());
		for(int i=0;i<questionSelected.size();i++){
			String ques=questionSelected.get(i).get(1);
			//showWarning("ques",ques);
			if (ques.equals(quesContent)){
				//String quesId=questionSelected.get(i).get(0);
				//showWarning("quesIdEqual",quesId);
				String quesId=questionSelected.get(i).get(0);
				//showWarning("quesWithNumber",quesWithNumber);
				String quesCt=ques.substring(ques.indexOf("-")+1);
				//showWarning("quesContent",quesContent);
				quesDelete=new ArrayList();
				quesDelete.add(quesId);
				quesDelete.add(quesCt);
				questionCandidatesContent.add(quesDelete);
				populateList("questionnaire_question/questionnaire_question_info/questionList", questionCandidatesContent);
				//showWarning("questionCandidatesContent","add");
				questionSelected.remove(i);
				//showWarning("questionSelected","remove");
				adjustQuesOrder("deletion",i,null);
				//showWarning("adjustQuesOrder","adjustQuesOrder");
				reConstructQuesOrder();
				//populateRadioGroup("questionnaire_question/questionnaire_question_info/questionInQuestionnaire", questionSelected);
				break;
			}
		}
		
	}
}
moveUpQues(String quesContent){
	//question_in_questionnaire_id=getFieldValue("questionnaire_question/questionnaire_question_info/questionInQuestionnaire");
	//showWarning("question_in_questionnaire_id",question_in_questionnaire_id);
	if(isNull(quesContent)){
		showToast("No Question selected");
		return;
	}
	for(int i=0;i<questionSelected.size();i++){
			String toUpQues=questionSelected.get(i).get(1);
			//showWarning("toUpQuesId",toUpQuesId);
			if (toUpQues.equals(quesContent)){
				//String quesId=questionSelected.get(i).get(0);
				//showWarning("quesIdEqual",toUpQuesId);
				if(i==0){
					showToast("This is the upmost question");
					break;
					//return;
				}
				adjustQuesOrder("moveUp",i,null);
				reConstructQuesOrder();
				//showWarning("adjustQuesOrder","moveUp");
				//populateRadioGroup("questionnaire_question/questionnaire_question_info/questionInQuestionnaire", questionSelected);
				break;
			}
		}
}
moveDownQues(String quesContent){
//question_in_questionnaire_id=getFieldValue("questionnaire_question/questionnaire_question_info/questionInQuestionnaire");
	//showWarning("question_in_questionnaire_id",question_in_questionnaire_id);
	if(isNull(quesContent)){
		showToast("No Question selected");
		return;
	}
	int length=questionSelected.size();
	for(int i=0;i<questionSelected.size();i++){
			String toDownQues=questionSelected.get(i).get(1);
			//showWarning("toUpQuesId",toUpQuesId);
			if (toDownQues.equals(quesContent)){
				//String quesId=questionSelected.get(i).get(0);
				//showWarning("quesIdEqual",toUpQuesId);
				if(i==length-1){
					showToast("This is the last question");
					break;
					//return;
				}
				adjustQuesOrder("moveDown",i,null);
				reConstructQuesOrder();
				//showWarning("adjustQuesOrder","moveUp");
				//populateRadioGroup("questionnaire_question/questionnaire_question_info/questionInQuestionnaire", questionSelected);
				break;
			}
		}
}
adjustQuesOrder(String typeFlag, int strtIndex, ArrayList toAdjustList){
	switch(typeFlag){
		case "deletion":
		//showWarning("Adeletion",strtIndex.toString());
			for(int i=strtIndex; i<questionSelected.size();i++){
				String quesId=questionSelected.get(i).get(0);
				//showWarning("quesId",quesId);
				String quesCotntWithNumber=questionSelected.get(i).get(1);
				//showWarning("quesCotntWithNumber",quesCotntWithNumber);
				String quesCotnt=quesCotntWithNumber.substring(quesCotntWithNumber.indexOf("-")+1);
				//showWarning("quesCotnt",quesCotnt);
				String newQuesNum=(i+1).toString();
				//showWarning("newQuesNum",newQuesNum);
				quesCotnt=newQuesNum+"-"+quesCotnt;
				//showWarning("quesCotnt",quesCotnt);
				newQuesWithNum=new ArrayList();
				newQuesWithNum.add(quesId);
				newQuesWithNum.add(quesCotnt);
				questionSelected.set(i,newQuesWithNum);
			}
			//dynamic ui refreshing
			
				
		break;

		case "moveUp":
			i=strtIndex;
			//Change toUpQues (ith) info
			String toUpQuesId=questionSelected.get(i).get(0);
			//showWarning("toUpQuesId",toUpQuesId);
			String toUpQuesCotntWithNumber=questionSelected.get(i).get(1);
				//showWarning("toUpQuesCotntWithNumber",toUpQuesCotntWithNumber);
			String toUpQuesCotnt=toUpQuesCotntWithNumber.substring(toUpQuesCotntWithNumber.indexOf("-")+1);
				//showWarning("toUpQuesCotnt",toUpQuesCotnt);
			String newtoUpQuesNum=i.toString();
				//showWarning("newQuesNum",newtoUpQuesNum);
			toUpQuesCotnt=newtoUpQuesNum+"-"+toUpQuesCotnt;
				//showWarning("toUpQuesCotnt",toUpQuesCotnt);
			newToUpQuesWithNum=new ArrayList();
			newToUpQuesWithNum.add(toUpQuesId);
			newToUpQuesWithNum.add(toUpQuesCotnt);
			questionSelected.set(i,newToUpQuesWithNum);
			//showWarning("questionSelected","set(i,newQuesWithNum)");
			//Change (i-1)th ques info
			String toDownQuesId=questionSelected.get(i-1).get(0);
				//showWarning("toDownQuesId",toDownQuesId);
			String toDownQuesCotntWithNumber=questionSelected.get(i-1).get(1);
				//showWarning("toDownQuesCotntWithNumber",toDownQuesCotntWithNumber);
			String toDownQuesCotnt=toDownQuesCotntWithNumber.substring(toDownQuesCotntWithNumber.indexOf("-")+1);
				//showWarning("toDownQuesCotnt",toDownQuesCotnt);
			String newtoDownQuesNum=(i+1).toString();
			//showWarning("newtoDownQuesNum",newtoDownQuesNum);
			toDownQuesCotnt=newtoDownQuesNum+"-"+toDownQuesCotnt;
				//showWarning("toDownQuesCotnt",toDownQuesCotnt);
			newtoDownQuesWithNum=new ArrayList();
			newtoDownQuesWithNum.add(toDownQuesId);
			newtoDownQuesWithNum.add(toDownQuesCotnt);
			questionSelected.set(i-1,newtoDownQuesWithNum);
			//showWarning("questionSelected","2ndset(i,newQuesWithNum)");

			Collections.swap(questionSelected,i,i-1);
			//reConstructQuesOrder();
			//showWarning("Collections","Collections");
		break;

		case "moveDown":
			i=strtIndex;
			//Change toUpQues (ith) info
			String toDnQuesId=questionSelected.get(i).get(0);
			//showWarning("toUpQuesId",toUpQuesId);
			String toDnQuesCotntNum=questionSelected.get(i).get(1);
				//showWarning("toUpQuesCotntWithNumber",toUpQuesCotntWithNumber);
			String toDnQuesCotnt=toDnQuesCotntNum.substring(toDnQuesCotntNum.indexOf("-")+1);
				//showWarning("toUpQuesCotnt",toUpQuesCotnt);
			String newtoDnQuesNum=(i+2).toString();
				//showWarning("newQuesNum",newtoUpQuesNum);
			toDnQuesCotnt=newtoDnQuesNum+"-"+toDnQuesCotnt;
				//showWarning("toUpQuesCotnt",toUpQuesCotnt);
			newToDnQuesWithNum=new ArrayList();
			newToDnQuesWithNum.add(toDnQuesId);
			newToDnQuesWithNum.add(toDnQuesCotnt);
			questionSelected.set(i,newToDnQuesWithNum);
			//showWarning("questionSelected","set(i,newQuesWithNum)");
			//Change (i-1)th ques info
			String toSwapQuesId=questionSelected.get(i+1).get(0);
				//showWarning("toDownQuesId",toDownQuesId);
			String toSwapQuesCotntNum=questionSelected.get(i+1).get(1);
				//showWarning("toDownQuesCotntWithNumber",toDownQuesCotntWithNumber);
			String toSwapQuesCotnt=toSwapQuesCotntNum.substring(toSwapQuesCotntNum.indexOf("-")+1);
				//showWarning("toDownQuesCotnt",toDownQuesCotnt);
			String newtoUpQuesNumber=(i+1).toString();
			//showWarning("newtoDownQuesNum",newtoDownQuesNum);
			toSwapQuesCotnt=newtoUpQuesNumber+"-"+toSwapQuesCotnt;
				//showWarning("toDownQuesCotnt",toDownQuesCotnt);
			newtoUpQuesNum=new ArrayList();
			newtoUpQuesNum.add(toSwapQuesId);
			newtoUpQuesNum.add(toSwapQuesCotnt);
			questionSelected.set(i+1,newtoUpQuesNum);
			//showWarning("questionSelected","2ndset(i,newQuesWithNum)");

			Collections.swap(questionSelected,i,i+1);
			//reConstructQuesOrder();
			//showWarning("Collections","Collections");
		break;
	}

}
reConstructQuesOrder(){
	removeAllViewsAndContainers("questionnaire_question");
	for(int j=0; j<questionSelected.size();j++){
		String quesContent= questionSelected.get(j).get(1);
		//showWarning("quesContent",quesContent);
		quesCountDel=j+1;
		executeViewTask(new ViewTask() {
	    	doTask() {
	    		createContainer("questionnaire_question/questionnaire_question_info/ques_rowc_" + quesCountDel, "orientation", "questionnaire_question/questionnaire_question_info");
		        createContainer("questionnaire_question/questionnaire_question_info/quesc_" + quesCountDel, "even", "questionnaire_question/questionnaire_question_info/ques_rowc_" + quesCountDel);
		        createContainer("questionnaire_question/questionnaire_question_info/Delete_quesc_" + quesCountDel, "large", "questionnaire_question/questionnaire_question_info/ques_rowc_" + quesCountDel);
		        createContainer("questionnaire_question/questionnaire_question_info/Up_quesc_" + quesCountDel, "large", "questionnaire_question/questionnaire_question_info/ques_rowc_" + quesCountDel);
		        createContainer("questionnaire_question/questionnaire_question_info/Down_quesc_" + quesCountDel, "large", "questionnaire_question/questionnaire_question_info/ques_rowc_" + quesCountDel);
		        createView("questionnaire_question/questionnaire_question_info/Ques_" + quesCountDel, createViewDef().createTextField("string").setReadOnly(true), "questionnaire_question/questionnaire_question_info/quesc_" + quesCountDel);
		        createView("questionnaire_question/questionnaire_question_info/Delete_ques_" + quesCountDel, createViewDef().createButton().setLabel("X").setStyleCss("faims-danger"), "questionnaire_question/questionnaire_question_info/Delete_quesc_" + quesCountDel);
		        createView("questionnaire_question/questionnaire_question_info/Up_ques_" + quesCountDel, createViewDef().createButton().setLabel("↑").setStyleCss("faims-danger"), "questionnaire_question/questionnaire_question_info/Up_quesc_" + quesCountDel);
		        createView("questionnaire_question/questionnaire_question_info/Down_ques_" + quesCountDel, createViewDef().createButton().setLabel("↓").setStyleCss("faims-danger"), "questionnaire_question/questionnaire_question_info/Down_quesc_" + quesCountDel);
				setFieldValue("questionnaire_question/questionnaire_question_info/Ques_" + quesCountDel, quesContent);
				onEvent("questionnaire_question/questionnaire_question_info/Delete_ques_" + quesCountDel,"click","deleteQuesConfirm(\""+quesContent+"\")");
				onEvent("questionnaire_question/questionnaire_question_info/Up_ques_" + quesCountDel,"click","moveUpQues(\""+quesContent+"\")");
				onEvent("questionnaire_question/questionnaire_question_info/Down_ques_" + quesCountDel,"click","moveDownQues(\""+quesContent+"\")");
		    	}
	    });
		
		//quesCount++;
		//refreshTabgroupCSS("questionnaire_question");
	}
	createChangeBtnQuesnir();
}

reConstructQuesOrder(ArrayList searchResult){
	removeAllViewsAndContainers("questionnaire_question");
	for(int j=0; j<searchResult.size();j++){
		String quesContent= searchResult.get(j).get(1);
		//showWarning("quesContent",quesContent);
		quesCountDel=j+1;
		executeViewTask(new ViewTask() {
	    	doTask() {
	    		createContainer("questionnaire_question/questionnaire_question_info/ques_rowc_" + quesCountDel, "orientation", "questionnaire_question/questionnaire_question_info");
		        createContainer("questionnaire_question/questionnaire_question_info/quesc_" + quesCountDel, "even", "questionnaire_question/questionnaire_question_info/ques_rowc_" + quesCountDel);
		        createContainer("questionnaire_question/questionnaire_question_info/Delete_quesc_" + quesCountDel, "large", "questionnaire_question/questionnaire_question_info/ques_rowc_" + quesCountDel);
		        createContainer("questionnaire_question/questionnaire_question_info/Up_quesc_" + quesCountDel, "large", "questionnaire_question/questionnaire_question_info/ques_rowc_" + quesCountDel);
		        createContainer("questionnaire_question/questionnaire_question_info/Down_quesc_" + quesCountDel, "large", "questionnaire_question/questionnaire_question_info/ques_rowc_" + quesCountDel);
		        createView("questionnaire_question/questionnaire_question_info/Ques_" + quesCountDel, createViewDef().createTextField("string").setReadOnly(true), "questionnaire_question/questionnaire_question_info/quesc_" + quesCountDel);
		        createView("questionnaire_question/questionnaire_question_info/Delete_ques_" + quesCountDel, createViewDef().createButton().setLabel("X").setStyleCss("faims-danger"), "questionnaire_question/questionnaire_question_info/Delete_quesc_" + quesCountDel);
		        createView("questionnaire_question/questionnaire_question_info/Up_ques_" + quesCountDel, createViewDef().createButton().setLabel("↑").setStyleCss("faims-danger"), "questionnaire_question/questionnaire_question_info/Up_quesc_" + quesCountDel);
		        createView("questionnaire_question/questionnaire_question_info/Down_ques_" + quesCountDel, createViewDef().createButton().setLabel("↓").setStyleCss("faims-danger"), "questionnaire_question/questionnaire_question_info/Down_quesc_" + quesCountDel);
				setFieldValue("questionnaire_question/questionnaire_question_info/Ques_" + quesCountDel, quesContent);
				onEvent("questionnaire_question/questionnaire_question_info/Delete_ques_" + quesCountDel,"click","deleteQuesConfirm(\""+quesContent+"\")");
				onEvent("questionnaire_question/questionnaire_question_info/Up_ques_" + quesCountDel,"click","moveUpQues(\""+quesContent+"\")");
				onEvent("questionnaire_question/questionnaire_question_info/Down_ques_" + quesCountDel,"click","moveDownQues(\""+quesContent+"\")");
		    	}
	    });
		
		//quesCount++;
		//refreshTabgroupCSS("questionnaire_question");
	}
	createChangeBtnQuesnir();
}

createChangeBtnQuesnir(){
	executeViewTask(new ViewTask() {
		doTask(){
			createContainer("questionnaire_question/questionnaire_question_info/quesnirBtnC", "orientation", "questionnaire_question/questionnaire_question_info");
			createContainer("questionnaire_question/questionnaire_question_info/child1", "even", "questionnaire_question/questionnaire_question_info/quesnirBtnC");
			createContainer("questionnaire_question/questionnaire_question_info/child2", "even", "questionnaire_question/questionnaire_question_info/quesnirBtnC");
			createView("questionnaire_question/questionnaire_question_info/Change_Questionnaire", createViewDef().createButton().setLabel("Update").setStyleCss("faims-blue"), "questionnaire_question/questionnaire_question_info/child1");
		    createView("questionnaire_question/questionnaire_question_info/Finish_Questionnaire_Creation", createViewDef().createButton().setLabel("Create").setStyleCss("faims-blue"), "questionnaire_question/questionnaire_question_info/child2");
		    onEvent("questionnaire_question/questionnaire_question_info/Change_Questionnaire","click","finishChangeQuestionnaire()");
		    onEvent("questionnaire_question/questionnaire_question_info/Finish_Questionnaire_Creation","click","finishCreateQuestionnaire()");
			refreshTabgroupCSS("questionnaire_question");		
		}
	});	
}		
rmQuesnirNewChangeBtn(){
	removeContainer("questionnaire_question/questionnaire_question_info/quesnirBtnC");
	removeContainer("questionnaire_question/questionnaire_question_info/child1");
	removeContainer("questionnaire_question/questionnaire_question_info/child2");
	removeView("questionnaire_question/questionnaire_question_info/Change_Questionnaire");
	removeView("questionnaire_question/questionnaire_question_info/Finish_Questionnaire_Creation");
}
//if there is selected questionnaire, then change the info, else create a new questionnaire
extractOriginLbl(String inputLabel){
	String rtnLabel=inputLabel;
	Pattern numberPat = Pattern.compile("\\(\\d+\\)");
	Matcher numMatcher = numberPat.matcher(inputLabel);
	if(numMatcher.find()){
		rtnLabel=rtnLabel.substring(0,rtnLabel.indexOf("("));
	}
	return rtnLabel;
}
makeLbl(ArrayList result, String tempLbl, String attrName, String relnName){
	//showWarning("makeLbl","makeLbl");
	String rtnLbl=tempLbl;
	tempDuplicateList=new ArrayList();
	tempDuplicateList.clear();
	tempDuplicateList.addAll(result);
	int sizeOfDup=0;
	sizeOfDup=tempDuplicateList.size();
	//showWarning("sizeOfAnsDup1",sizeOfDup.toString());
	Pattern numberPat = Pattern.compile("\\(\\d+\\)");
	if(sizeOfDup==1){
		//showWarning("sizeOfAnsDup",sizeOfDup.toString());
		attributes = createAttributeList();
		duplicateOldLabel=tempDuplicateList.get(0).get(1);
		Matcher numMatcher = numberPat.matcher(duplicateOldLabel);

		if(numMatcher.find()){
			suffix=duplicateOldLabel.substring(duplicateOldLabel.indexOf("("),duplicateOldLabel.length());
			if(!suffix.equals("(1)"))
			{
				newLabel=duplicateOldLabel.substring(0,duplicateOldLabel.indexOf("("))+"(1)";
				attributes.add(createEntityAttribute(attrName, null, null, newLabel, null));
				entityId=tempDuplicateList.get(0).get(0);
				saveArchEnt(entityId, relnName, null, attributes);
			}
		}
		else{
			newLabel=duplicateOldLabel+"(1)";
			//showWarning("newLabel",newLabel);
			attributes.add(createEntityAttribute(attrName, null, null, newLabel, null));
			entityId=tempDuplicateList.get(0).get(0);
			//showWarning("entityId",entityId);
			saveArchEnt(entityId, relnName, null, attributes);
			//showWarning("saveArchEnt","saveArchEnt");
		}
		rtnLbl=rtnLbl+"(2)";
	}
	else{
		int maxSuffix=0;
		for(temp: tempDuplicateList){
			tempLabel=temp.get(1);
			Matcher numMatcher = numberPat.matcher(tempLabel);
			if(numMatcher.find()){
				tempSuffixStr=tempLabel.substring(tempLabel.indexOf("(")+1, tempLabel.length()-1);
				int tempSuffixNum=Integer.parseInt(tempSuffixStr);
				if(tempSuffixNum>maxSuffix){
					maxSuffix=tempSuffixNum;
				}
			}
		}
		maxSuffix=maxSuffix+1;
		rtnLbl=rtnLbl+"("+maxSuffix+")";
	}
	return rtnLbl;
}

finishCreateQuestionnaire(){
	if(questionSelected.isEmpty())
	{
		showWarning("No question selected","No question selected in this questionnaire");
		return;
	}
	if (!isNull(questionnaireInfoOriginal)){
		Hashtable questionnaireInfoChanges=listChange(questionnaireInfoNew,questionnaireInfoOriginal);
		//showWarning("questionnaireInfoChanges","questionnaireInfoChanges done");
		if(questionnaireInfoChanges.containsKey("EQUAL")){
			showWarning("No basic info changed","Please change at least one basic info of questionniare\n"+"Or this is viwed as an existing record.");
			return;
		}
	}
	if((isNull(getFieldValue("questionnaire/questionnaire_info/questionnaireID")))||(isNull(getFieldValue("questionnaire/questionnaire_info/questionnaireName")))){
		showWarning("Incomplete basic data","Please input questionnaire label and questionnaire name");
		return;
	}
	String quesnirTypeUuid=getFieldValue("questionnaire/questionnaire_info_hide/questionnaireTypeUuid");

	if(isNull(quesnirTypeUuid)){
		showWarning("Incomplete basic data","Please input questionnaire type data");
		return;
	}

	String tempQuesnirLabel=getFieldValue("questionnaire/questionnaire_info/questionnaireID");
	quesnirDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
		"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionnaireID') "+
				"and measure ='"+tempQuesnirLabel+"' or measure like '"+tempQuesnirLabel+"(%)'";

	fetchAll(quesnirDuplicateQuery,new FetchCallback() {
		onFetch(result) {
			if(!isNull(result)){
				tempQuesnirLabel=makeLbl(result,tempQuesnirLabel,"QuestionnaireID","Questionnaire");
		        setFieldValue("questionnaire/questionnaire_info/questionnaireID",tempQuesnirLabel);
				}
			finished_questionnaire_id=null;//Creating a new questionnaire
			//showWarning("save started","started");
			saveTabGroup("questionnaire", finished_questionnaire_id, null, null, new SaveCallback() {
			//showWarning("saveTabGroup()","started");
			onSave(uuid, newRecord) {
			//showWarning("onSave()","started");
				finished_questionnaire_id = uuid;
		  //showWarning("finished_questionnaire_id()",finished_questionnaire_id);
				if (newRecord) {
					//showWarning("questionnaire()",finished_questionnaire_id);
					for (question : questionSelected){
						//showWarning("question()",question.get(0).toString());
					//saveEntitiesToRel("Questionnaire and Question",finished_questionnaire_id,question.get(0));
						String quesInQuesnirID=question.get(0);
						String quesContnt=question.get(1);
						String quesOrderNum=quesContnt.substring(0,quesContnt.indexOf("-"));
						quesOrderAttributes= createAttributeList();
						quesOrderAttributes.add(createEntityAttribute("QuesnirID", null, null, finished_questionnaire_id, null));
						quesOrderAttributes.add(createEntityAttribute("QuesID", null, null,quesInQuesnirID, null));
						quesOrderAttributes.add(createEntityAttribute("QuesOrderLocal", null, null, quesOrderNum, null));
						saveArchEnt(null, "QuesnirQuesOrder", null, quesOrderAttributes);
				//showWarning("savedrel()",question.get(0).toString());
				}
				saveEntitiesToRel("Questionnaire and QuesnirType",finished_questionnaire_id,quesnirTypeUuid);
				//questionOriginal.addAll(questionSelected);
				showToast("New record created");
				cancelTabGroup("questionnaire_question",true);
				cancelTabGroup("questionnaire",true);
				showTab("control/questionnaire_control");
				//finished_questionnaire_id=null;
				}
				else{
					showWarning("Attention!","Something went wrong!");
			//finished_questionnaire_id=null;
				}
			}
			onError(message) {
				showWarning("error",message);
			}  
			});

		}
	});
}

finishChangeQuestionnaire(){
	if(isNull(finished_questionnaire_id)){
		showWarning("Failed","Please create questionnaire then change");
		return;
	}

	if(questionSelected.isEmpty())
	{
		showWarning("No question selected","No question selected in this questionnaire");
		return;
	}

	if((isNull(getFieldValue("questionnaire/questionnaire_info/questionnaireID")))||(isNull(getFieldValue("questionnaire/questionnaire_info/questionnaireName")))){
		showWarning("Incomplete basic data","Please input questionnaire label and questionnaire name");
		return;
	}

	String quesnirTypeUuid=getFieldValue("questionnaire/questionnaire_info_hide/questionnaireTypeUuid");

	if(isNull(quesnirTypeUuid)){
		showWarning("Incomplete basic data","Please input questionnaire type data");
		return;
	}

		question_origin=new ArrayList();
		//The onSave is executed parallel with the sentences following it, so be careful!  
		//showWarning("change started","going to start");
		question_origin.addAll(questionOriginal);
		//showWarning("change going","copied");
		Hashtable questionListChanges=listChange(questionSelected,questionOriginal);
		//showWarning("questionListChanges","questionListChanges done");
		if (!isNull(questionnaireInfoOriginal)){//change from the list
			Hashtable questionnaireInfoChanges=listChange(questionnaireInfoNew,questionnaireInfoOriginal);
			//case 1: no data changed
			if((questionnaireInfoChanges.containsKey("EQUAL"))&&(questionListChanges.containsKey("EQUAL"))){
				showWarning("Questionnaire Modification","No data is changed");
				return;
			}
			//case 2: basic info changed, question list info does not change
			else if ((!questionnaireInfoChanges.containsKey("EQUAL"))&&(questionListChanges.containsKey("EQUAL"))){
				
				String tempQuesnirLabel=getFieldValue("questionnaire/questionnaire_info/questionnaireID");
				quesnirDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
				"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionnaireID') "+
				"and measure ='"+tempQuesnirLabel+"' or measure like '"+tempQuesnirLabel+"(%)'";
				
				fetchAll(quesnirDuplicateQuery,new FetchCallback() {
						onFetch(result) {
							if(!isNull(result)){
								tempQuesnirLabel=makeLbl(result,tempQuesnirLabel,"QuestionnaireID","Questionnaire");
						        setFieldValue("questionnaire/questionnaire_info/questionnaireID",tempQuesnirLabel);
							}

							saveTabGroup("questionnaire", finished_questionnaire_id, null, null, new SaveCallback() {
								//showWarning("saveTabGroup()","started");
								onSave(uuid, newRecord) {
									for (quesTypeDel : quesnirTypeRelnOrigin){
											deleteRel(quesTypeDel.get(0));
										}
									saveEntitiesToRel("Questionnaire and QuesnirType",finished_questionnaire_id,quesnirTypeUuid);

									showToast("Questionnaire data is changed");
									cancelTabGroup("questionnaire_question",true);
									cancelTabGroup("questionnaire",true);
									showTab("control/questionnaire_control");
								}
								onError(message) {
									showWarning("error",message);
									}  
								});
					}
					});
				
			}
			//case 3: basic info does not change, question list info changed
			else if((questionnaireInfoChanges.containsKey("EQUAL"))&&(!questionListChanges.containsKey("EQUAL"))){
				//First delete old relns
				for (oldReln:quesListRelnOrigin){
					String oldRelnId=oldReln.get(0);
					deleteArchEnt(oldRelnId);
				}
				//Then add new relns
				for (question : questionSelected){
					String quesInQuesnirID=question.get(0);
					String quesContnt=question.get(1);
					String quesOrderNum=quesContnt.substring(0,quesContnt.indexOf("-"));
					quesOrderAttributes= createAttributeList();
					quesOrderAttributes.add(createEntityAttribute("QuesnirID", null, null, finished_questionnaire_id, null));
					quesOrderAttributes.add(createEntityAttribute("QuesID", null, null,quesInQuesnirID, null));
					quesOrderAttributes.add(createEntityAttribute("QuesOrderLocal", null, null, quesOrderNum, null));
					saveArchEnt(null, "QuesnirQuesOrder", null, quesOrderAttributes);
			//showWarning("savedrel()",question.get(0).toString());
				}
				showToast("question list data is changed");
				cancelTabGroup("questionnaire_question",true);
				cancelTabGroup("questionnaire",true);
				showTab("control/questionnaire_control");
			}
			//case 4: both basic info and question list changed
			else{
				tempDuplicateList=new ArrayList();
				tempDuplicateList.clear();
				int sizeOfDup=0;
				String tempQuesnirLabel=getFieldValue("questionnaire/questionnaire_info/questionnaireID");
				quesnirDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
				"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionnaireID') "+
				"and measure = '"+tempQuesnirLabel+"' or measure like '"+tempQuesnirLabel+"(%)'";
				
				fetchAll(quesnirDuplicateQuery,new FetchCallback() {
						onFetch(result) {
							if(!isNull(result)){
								tempQuesnirLabel=makeLbl(result,tempQuesnirLabel,"QuestionnaireID","Questionnaire");
						        setFieldValue("questionnaire/questionnaire_info/questionnaireID",tempQuesnirLabel);
							}
							
							saveTabGroup("questionnaire", finished_questionnaire_id, null, null, new SaveCallback() {
								//showWarning("saveTabGroup()","started");
								onSave(uuid, newRecord) {
									for (quesTypeDel : quesnirTypeRelnOrigin){
											deleteRel(quesTypeDel.get(0));
										}
									saveEntitiesToRel("Questionnaire and QuesnirType",finished_questionnaire_id,quesnirTypeUuid);
									for (oldReln:quesListRelnOrigin){
										String oldRelnId=oldReln.get(0);
										deleteArchEnt(oldRelnId);
									}
									//Then add new relns
									for (question : questionSelected){
										//showWarning("question()",question.get(0).toString());
										//saveEntitiesToRel("Questionnaire and Question",finished_questionnaire_id,question.get(0));
										String quesInQuesnirID=question.get(0);
										String quesContnt=question.get(1);
										String quesOrderNum=quesContnt.substring(0,quesContnt.indexOf("-"));
										quesOrderAttributes= createAttributeList();
										quesOrderAttributes.add(createEntityAttribute("QuesnirID", null, null, finished_questionnaire_id, null));
										quesOrderAttributes.add(createEntityAttribute("QuesID", null, null,quesInQuesnirID, null));
										quesOrderAttributes.add(createEntityAttribute("QuesOrderLocal", null, null, quesOrderNum, null));
										saveArchEnt(null, "QuesnirQuesOrder", null, quesOrderAttributes);
								//showWarning("savedrel()",question.get(0).toString());
									}

									showToast("Data is changed");
									cancelTabGroup("questionnaire_question",true);
									cancelTabGroup("questionnaire",true);
									showTab("control/questionnaire_control");
								}
								onError(message) {
									showWarning("error",message);
									}  
								});
						}
					});
				
			}
		}
		else{
			showWarning("Error","saving error happened, the old data is lost, please report to the Admin");
		}
}

//Search questions when selecting questions to questionnaire
searchQuestion(){
	String keywordForQuestion=getFieldValue("questionnaire_question/questionnaire_question_info/keywordOfQuestion").trim();
	String ctgy=getFieldValue("questionnaire_question/questionnaire_question_info/category");
	if(ctgy.equals("candidate")){
	if((isNull(keywordForQuestion))||(keywordForQuestion.equals("*"))){
		fetchAll(loadAllEngQuestionQuery,
				new FetchCallback() {
				onFetch(result) {
					questionCandidatesContent.clear();
					questionCandidates.clear();
					questionCandidates.addAll(result);
					questionCandidatesContent.addAll(result);
					tempToDelQues=new ArrayList();
					tempToDelQues.clear();
					for(quesSel:questionSelected){
						String toDelId=quesSel.get(0);
						//showWarning("toDelId",toDelId);
						for (quesDel:questionCandidatesContent){
							String delId=quesDel.get(0);
							//showWarning("quesDel",delId);
							if(delId.equals(toDelId)){
								tempToDelQues.add(quesDel);
								//questionCandidatesContent.remove(quesDel);
								//showWarning("questionCandidatesContent","questionCandidatesContent");
							}
						}
					}
					questionCandidatesContent.removeAll(tempToDelQues);
					//questionCandidatesContent.removeAll(questionSelected);
					populateList("questionnaire_question/questionnaire_question_info/questionList", questionCandidatesContent);
				}  
		});		
	}

	else {
		
		
		searchQuestionQueryFirstHalf="select qId.measure, qContent.measure "+
			"from latestNonDeletedAentValue as qId, latestNonDeletedAentValue as qContent "+
			"where qContent.measure like '%"; 
		searchQuestionQueryLastHalf="%' and qContent.AttributeID = "+
				"(select AttributeID from AttributeKey where AttributeName='QuesContent') "+
				"and qId.AttributeID=(SELECT AttributeID FROM AttributeKey WHERE AttributeName='QuestionUuid') "+
				"and qId.uuid=qContent.uuid "+
				"and qId.uuid in"+
				"(select uuid from latestNonDeletedArchEntIdentifiers "+
				"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionUuid'));";
				
						//"(select AttributeID from IdealAent where IdealAent.AentTypeID in "+
						//"(select AEntTypeID from AEntType where AEntType.AEntTypeName= 'QuestionBank'));";
//String keywordForLanguage=getFieldValue("questionBank/questionInfo/keywordInput");
		fetchAll(searchQuestionQueryFirstHalf+keywordForQuestion+searchQuestionQueryLastHalf,
				new FetchCallback() {
			onFetch(result) {
				questionCandidatesContent.clear();
				questionCandidates.clear();
				questionCandidates.addAll(result);
				questionCandidatesContent.addAll(result);
				tempToDelQues=new ArrayList();
				tempToDelQues.clear();
				for(quesSel:questionSelected){
						String toDelId=quesSel.get(0);
						for (quesDel:questionCandidatesContent){
							if(quesDel.get(0).equals(toDelId)){
								tempToDelQues.add(quesDel);
							}
						}
					}
				questionCandidatesContent.removeAll(tempToDelQues);
				populateList("questionnaire_question/questionnaire_question_info/questionList", questionCandidatesContent);
		
			}  
			});
		}
	}
	else{//searching in the arraylist 
		if((isNull(keywordForQuestion))||(keywordForQuestion.equals("*"))){
			reConstructQuesOrder();
			//populateRadioGroup("questionnaire_question/questionnaire_question_info/questionInQuestionnaire", questionSelected);
		}
		else{
			tempQuesQuery=new ArrayList();
			tempQuesQuery.clear();
			Pattern pattern = Pattern.compile(Pattern.quote(keywordForQuestion), Pattern.CASE_INSENSITIVE);
			for (ques : questionSelected){
				if(pattern.matcher(ques.get(1)).find()){
					tempQuesQuery.add(ques);
				}
			}
			reConstructQuesOrder(tempQuesQuery);
			//populateRadioGroup("questionnaire_question/questionnaire_question_info/questionInQuestionnaire", tempQuesQuery);
		}
	}
}

//measure whether two arraylists are identical, if not, recording what kinds of operation have been done
listChange(ArrayList targetList,ArrayList sourceList){
	//showWarning("listChange","listChange");
	Hashtable listChanges=new Hashtable();
	target_list=new ArrayList();
	source_list=new ArrayList();
	target_diff_on_source=new ArrayList();
	source_diff_on_target=new ArrayList();
	listChanges.clear();
	target_list.clear();
	source_list.clear();
	target_diff_on_source.clear();
	source_diff_on_target.clear();
	target_list.addAll(targetList);
	source_list.addAll(sourceList);
	target_list.removeAll(source_list);
	target_diff_on_source.addAll(target_list);//target - source
	target_list.clear();
	target_list.addAll(targetList);
	source_list.removeAll(target_list);
	source_diff_on_target.addAll(source_list);//source - target
	if((target_diff_on_source.isEmpty()) && (source_diff_on_target.isEmpty())){
		listChanges.put("EQUAL",targetList);
	}
	else if((!target_diff_on_source.isEmpty()) && (source_diff_on_target.isEmpty())){
		listChanges.put("PUREADD",target_diff_on_source);
	}
	else if((target_diff_on_source.isEmpty()) && (!source_diff_on_target.isEmpty())){
		listChanges.put("PUREDELETE",source_diff_on_target);
	}
	else {
		listChanges.put("ADD",target_diff_on_source);
		listChanges.put("DELETE",source_diff_on_target);
	}
	return listChanges;
}

listChange(ArrayList newList, ArrayList oldList, int newCompIdx, int oldCompIdx){
	//showWarning("listChange","listChange");
	Hashtable listChanges=new Hashtable();
	new_List=new ArrayList();
	old_List=new ArrayList();
	new_List.clear();
	old_List.clear();
	same_elements_old=new ArrayList();
	same_elements_new=new ArrayList();
	same_elements_old.clear();
	same_elements_new.clear();
	new_List.addAll(newList);
	old_List.addAll(oldList);
	//showWarning("add","addAll");
	for (elmNew : new_List){
		elmNewValue=elmNew.get(newCompIdx);
		//showWarning("elmNewValue",elmNewValue);
		for(elmOld: old_List){
			//showWarning("elmOld",elmOld.get(0));
			elmOldValue=elmOld.get(oldCompIdx);
			//showWarning("elmOldValue",elmOldValue);
			if(elmNewValue.equals(elmOldValue)){
				same_elements_old.add(elmOld);
				same_elements_new.add(elmNew);
			}
		}
	}
	//showWarning("for","for");
	//get the to be deleted elements
	if(!isNull(same_elements_old)){
		old_List.removeAll(same_elements_old);
		//showWarning("old_List","remove");
	}
	//get the to add elements
	if(!isNull(same_elements_new)){
		new_List.removeAll(same_elements_new);
	}

	if((new_List.isEmpty()) && (old_List.isEmpty())){
		listChanges.put("EQUAL",new_List);
		//showWarning("EQUAL","EQUAL");
	}
	else if((!new_List.isEmpty()) && (old_List.isEmpty())){
		listChanges.put("PUREADD",new_List);
	}
	else if((new_List.isEmpty()) && (!old_List.isEmpty())){
		listChanges.put("PUREDELETE",old_List);
	}
	else {
		listChanges.put("ADD",new_List);
		listChanges.put("DELETE",old_List);
	}
	return listChanges;
}

listChange(ArrayList newList, ArrayList oldList, int compareKey, ArrayList compareValues){
	Hashtable listChanges=new Hashtable();
	new_List=new ArrayList();
	old_List=new ArrayList();
	new_List.clear();
	old_List.clear();
	same_elements=new ArrayList();
	same_elements.clear();
	update_list=new ArrayList();
	update_list.clear();
	update_new_list=new ArrayList();
	update_new_list.clear();
	new_List.addAll(newList);
	old_List.addAll(oldList);
	del_list=new ArrayList();	
	del_list.clear();


	for(elmOld:old_List){
		elmOldKey=elmOld.get(compareKey);
		Boolean equalTo=false;
		//showWarning("elmOldKey",elmOldKey);
		for(elmNew:new_List){
			elmNewKey=elmNew.get(compareKey);
			//showWarning("elmNewKey",elmNewKey);
			if(elmOldKey.equals(elmNewKey)){
				equalTo=true;
				Boolean updated=false;
				//showWarning("equalTo","updated");
				for(int i=0;i<compareValues.size();i++){
					if(!elmOld.get(compareValues.get(i)).equals(elmNew.get(compareValues.get(i))))
					{
						updated=true;
						/*
						tempOldUpdate=new ArrayList();
						tempOldUpdate.add(elmOldKey);
						tempUpdate=new ArrayList();
						tempUpdate.add(tempOldUpdate);
						tempUpdate.add(elmNew);
						*/
						update_list.add(elmNew);
						//update_new_list.add(elmNew);
						//showWarning("updated","updated");
						break;
					}
				}
				if(!updated){
					same_elements.add(elmNew);
					//showWarning("equals","equals");
				}
				break;
			}
		}
		
		if(!equalTo){
			del_list.add(elmOld);
			//showWarning("del","del");
		}
	}

	new_List.removeAll(update_list);
	//showWarning("update_new_list","update_new_list");
	new_List.removeAll(same_elements);
	//showWarning("same_elements","same_elements");
	listChanges.put("E",same_elements);
	//showWarning("E","same_elements");
	listChanges.put("A",new_List);
	//showWarning("new_List","new_List");
	listChanges.put("D",del_list);
	//showWarning("del_list","del_list");
	listChanges.put("U",update_list);
	//showWarning("update_list","update_list");
	return listChanges;

}
//Dynamically generate questionnaire question order ui
/*** QuestionBank ***/

onEvent("control/question_control/New_Question","click","newQuestion()");
onEvent("control/question_control","show","loadQuestionBank()");
onEvent("questionBank/questionInfo/","show","initialQuestionCreation()");
onEvent("control/question_control/questionList","click","loadQuestionInfo()");
onEvent("control/question_control/lang_sel", "click","searchQuestionByLang()");
//indicates of there is selected question
question_id=null;
//All candidate lanaguages
//candidateLanguageList=new ArrayList();
//selected language
current_selected_language_id=null;
candidatePropList=new ArrayList();
oldPropList=new ArrayList();
newPropList=new ArrayList();
canLangList=new ArrayList();
selLangList=new ArrayList();
oldLangList=new ArrayList();
newLangList=new ArrayList();
//selected_prop_list=new ArrayList();
//Starting point of creating new question

newQuestion(){
	question_id=null;
	newTabGroup("questionBank");
	onEvent("questionBank", "show", "showTab(\"questionBank/questionInfo\");"); 
}
//preparation for question creation
initialQuestionCreation(){
	canLangList.clear();
	selLangList.clear();
	candidatePropList.clear();
	if(isNull(question_id)){
		createQuesLangVer("new");
		fetchAll(loadAllQuesPropQuery,new FetchCallback() {
			onFetch(result) {
				candidatePropList.addAll(result);
				populateDropDown("questionBank/questionInfo/questionProp", result);
			}  
		});	
	}
}

createQuesLangVer(String typeflag){
	canLangList.clear();
	selLangList.clear();
	fetchAll(loadAllLWCLanguageQuery,new FetchCallback() {
		onFetch(result) {
			canLangList.addAll(result);
			int langCount=0;
			int langSize=canLangList.size();
			for(lang:canLangList){
				String langID=lang.get(0);
				String langName=lang.get(1);

				style1="orientation";
				style2="even";
				style3="large";
				
				if(hasView("questionBank/questionInfo/Finish_New_Question")){
					removeAllViewsAndContainers("questionBank");
				}

				executeViewTask(new ViewTask(){
					doTask(){
						createContainer("questionBank/questionInfo/lang_c"+langCount, "orientation","questionBank/questionInfo");
						createContainer("questionBank/questionInfo/langName_c" + langCount, "even", "questionBank/questionInfo/lang_c" + langCount);
        				createContainer("questionBank/questionInfo/quesInput_c" + langCount, "even", "questionBank/questionInfo/lang_c" + langCount);
        				if(langCount==0){
        					createView("questionBank/questionInfo/langc" + langCount, createViewDef().createCheckboxGroup().addChoice(langName, langID).setLabel("languages"), "questionBank/questionInfo/langName_c" + langCount);
							createView("questionBank/questionInfo/quesc" + langCount, createViewDef().createTextField("string").setLabel("Question content"), "questionBank/questionInfo/quesInput_c" + langCount);
        				}
        				else{
      						createView("questionBank/questionInfo/langc" + langCount, createViewDef().createCheckboxGroup().addChoice(langName, langID), "questionBank/questionInfo/langName_c" + langCount);  					
        					createView("questionBank/questionInfo/quesc" + langCount, createViewDef().createTextField("string"), "questionBank/questionInfo/quesInput_c" + langCount);
        				}
        				
						if(langCount==langSize-1){
							createView("questionBank/questionInfo/Finish_New_Question", createViewDef().createButton().setLabel("Save").setStyleCss("faims-blue"), "questionBank/questionInfo");	
							onEvent("questionBank/questionInfo/Finish_New_Question","click","saveNewQuestion()");	
						}
					}
				});
				langCount++;
			}
			refreshTabgroupCSS("questionBank");
			if(typeflag.equals("new")){
				fetchOne(loadEngUuiQuery,new FetchCallback() {
					onFetch(result) {
						if(!isNull(result)){
							for(int i=0;i<canLangList.size();i++){
								setFieldValue("questionBank/questionInfo/langc" + i,result.get(0));
							}
							
						}
					}  
				});
				
			}
		}  
	});	
}

getSelLang(){
	returnLangVer=new ArrayList();
	returnLangVer.clear();
	for(int i=0;i<canLangList.size();i++){
		if(!isNull(getFieldValue("questionBank/questionInfo/langc" + i))){
			tempLangVer=new ArrayList();
			tempLangVer.add(getFieldValue("questionBank/questionInfo/langc" + i).get(0).getName());
			if(!isNull(getFieldValue("questionBank/questionInfo/quesc" + i))){
				tempLangVer.add(getFieldValue("questionBank/questionInfo/quesc" + i));
				returnLangVer.add(tempLangVer);
			}
			else{
				returnLangVer.clear();
				return returnLangVer;
			}
			
		}
	}
	return returnLangVer;
}
//save the question info and its relationship with language
saveNewQuestion(){
	if(isNull(getFieldValue("questionBank/questionInfo/questionID")))
	{
		showWarning("Validation Error", "You must enter the question label before you can continue");
        return;
	}
	selLangList=getSelLang();
	if(isNull(selLangList)){
		showWarning("Incomplete data", "You must:\n"+"indicate at least one language, and\n"+"enter the question content for every language");
        return;
	}

	tempDuplicateList=new ArrayList();
	tempDuplicateList.clear();
	int sizeOfDup=0;
	tempQuesLabel=getFieldValue("questionBank/questionInfo/questionID");
	quesDuplicateQuery=null;
	if(question_id!=null){
		quesDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
				"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionID') "+
				"and uuid<>'"+question_id+"' "+
				"and measure ='"+tempQuesLabel+"' or measure like '"+tempQuesLabel+"(%)'";
	}
	else{
		quesDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
				"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionID') "+
				"and measure ='"+tempQuesLabel+"' or measure like '"+tempQuesLabel+"(%)'";
	}

	fetchAll(quesDuplicateQuery,new FetchCallback() {
		onFetch(result) {
		if(!isNull(result)){
			tempQuesLabel=makeLbl(result,tempQuesLabel,"QuestionID","QuestionBank");
			setFieldValue("questionBank/questionInfo/questionID",tempQuesLabel);
		}
		recording_req_id=getFieldValue("questionBank/questionInfo/questionProp");
		//showWarning("recording_req_id",recording_req_id);
		//if(isNull(question_id)){
		saveTabGroup("questionBank", question_id, null, null, new SaveCallback() {
		    onSave(uuid, newRecord) {
		      question_id = uuid;
		      //showWarning("question_id",question_id);
			  //setFieldValue("questionBank/questionInfo/questionID", question_id);
		      if (newRecord) {
		      	//saveEntitiesToRel("Question and Language",question_id,current_selected_language_id);
				quesPropAttributes= createAttributeList();
				quesPropAttributes.add(createEntityAttribute("QuesUuid", null, null, question_id, null));
				quesPropAttributes.add(createEntityAttribute("QuesPropDefID", null, null,recording_req_id, null));
				quesPropAttributes.add(createEntityAttribute("QuesPropValue", null, null, "Yes", null));
				//showWarning("prop created1","prop created1");
				saveArchEnt(null, "QuesProperty", null, quesPropAttributes);

				//save Question languages
				for(lang: selLangList){
					//saveEntitiesToRel("Question and Language",question_id,lang.getName());
					quesLangVer=createAttributeList();
					quesLangVer.add(createEntityAttribute("QuestionUuid", null, null, question_id, null));
					quesLangVer.add(createEntityAttribute("QuesLangUuid", null, null, lang.get(0), null));
					quesLangVer.add(createEntityAttribute("QuesContent", null, null, lang.get(1), null));
					saveArchEnt(null, "QuestionLang", null, quesLangVer);
				}

		        showToast("Record created");
		        cancelTabGroup("questionBank",true);
		        showTab("control/question_control");
		      }
		      else{
		      	showToast("Record changed");
		      }
		    }
		    onError(message) {
		        showWarning("error",message);
		    }  
		  });
		//}
		//question property update
		if((question_id!=null) && (!isNull(oldPropList))){
			tempPropAttr=new ArrayList();
			tempPropAttr.add(recording_req_id);
			tempPropAttr.add("Yes");
			newPropList.add(tempPropAttr);
			//showWarning("oldPropList",oldPropList.get(0).get(0));
			Hashtable quesPropChange=listChange(newPropList,oldPropList,0,0);
			//showWarning("quesPropChange","quesPropChange");
			if(quesPropChange.containsKey("ADD")){
				//showWarning("ADD","ADD");
				for(eleDel: quesPropChange.get("DELETE")){
					//showWarning("uuid",eleDel.get(1));
					deleteArchEnt(eleDel.get(1));
				}
				for(eleAdd:quesPropChange.get("ADD")){
					quesPropAttributes= createAttributeList();
					quesPropAttributes.add(createEntityAttribute("QuesUuid", null, null, question_id, null));
					quesPropAttributes.add(createEntityAttribute("QuesPropDefID", null, null,eleAdd.get(0), null));
					quesPropAttributes.add(createEntityAttribute("QuesPropValue", null, null, "Yes", null));
					saveArchEnt(null, "QuesProperty", null, quesPropAttributes);
				}
			}
		}
		//question language update
		if((question_id!=null) && (!isNull(oldLangList))){
			tempOldLangList=new ArrayList();
			for(old:oldLangList){
				ArrayList tempLang=new ArrayList();
				tempLang.add(old.get(1));
				tempLang.add(old.get(2));
				tempOldLangList.add(tempLang);
			}
			compIndex=new ArrayList();
			compIndex.add(1);
			Hashtable quesLangChange=listChange(selLangList,tempOldLangList,0,compIndex);
			tempNewLang=quesLangChange.get("A");
			for(lang: tempNewLang){
				quesLangVer=createAttributeList();
				quesLangVer.add(createEntityAttribute("QuestionUuid", null, null, question_id, null));
				quesLangVer.add(createEntityAttribute("QuesLangUuid", null, null, lang.get(0), null));
				quesLangVer.add(createEntityAttribute("QuesContent", null, null, lang.get(1), null));
				saveArchEnt(null, "QuestionLang", null, quesLangVer);
				//showWarning("added",lang.get(0)+":"+lang.get(1));
			}
			tempDelLang=quesLangChange.get("D");
			for(delLang: tempDelLang){
				//deleteArchEnt(delLang.get(0));
				for(oldLang:oldLangList){
					if(delLang.get(0).equals(oldLang.get(1))){
						deleteArchEnt(oldLang.get(0));
						//showWarning("deleted",oldLang.get(0)+":"+delLang.get(0));
					}
				}
			}
			tempUpdLang=quesLangChange.get("U");
			for(uLang: tempUpdLang){
				for(oldLang:oldLangList){
					if(uLang.get(0).equals(oldLang.get(1))){
						quesLangVer=createAttributeList();
						quesLangVer.add(createEntityAttribute("QuestionUuid", null, null, question_id, null));
						quesLangVer.add(createEntityAttribute("QuesLangUuid", null, null, uLang.get(0), null));
						quesLangVer.add(createEntityAttribute("QuesContent", null, null, uLang.get(1), null));
						saveArchEnt(oldLang.get(0), "QuestionLang", null, quesLangVer);
						//showWarning("updated",oldLang.get(0)+":"+uLang.get(0)+":"+uLang.get(1));

					}
				}
			}
			showToast("Question language updated");
		}
	}
	});
	
}


createLangSel(){
	removeAllViewsAndContainers("questionBank");
	executeViewTask(new ViewTask() {
	doTask() { 	
		langCheckDef = createViewDef().createCheckboxGroup().addChoice("placeholder", "placeholder").setLabel("Languages");
		newQuesButtonDef = createViewDef().createButton().setLabel("Save").setStyleCss("faims-blue");
		createView("questionBank/questionInfo/langVer", langCheckDef);
		createView("questionBank/questionInfo/Finish_New_Question", newQuesButtonDef);
        refreshTabgroupCSS("questionBank");
        showTabGroup("questionBank");
        onEvent("questionBank/questionInfo/Finish_New_Question","click","saveNewQuestion()");
	}
	});
	
}

//load all question contents
loadQuestionBank(){
	question_id=null;
	questionBankList=new ArrayList();
	
	//deprecated query: 
	/*The fetchAll query returns the uuid and the question content of all the questions*/
	fetchAll(loadAllEngQuesContentQuery,
	new FetchCallback() {
        onFetch(result) {
			if (!isNull(result)) {
				questionBankList.addAll(result);
			}
			populateList("control/question_control/questionList", questionBankList);
        }

        onError(message) {
            showToast(message);
        }
    });
    fetchAll(loadAllLWCLanguageQuery, new FetchCallback() {
        onFetch(langResult) {
			populateDropDown("control/question_control/lang_sel", langResult);
        }

        onError(message) {
            showToast(message);
        }
    });

}

//load question specific info
loadQuestionInfo(){
	question_id=getListItemValue();
		if(isNull(question_id)){
			showToast("No Question selected");
			return;
		}
		createQuesLangVer("load");
		showTabGroup("questionBank", question_id, new FetchCallback() {
	        onFetch(result) {
	        
			langVerForQuesQuery="select lang.uuid, lang.measure, qContent.measure from latestNonDeletedAentValue as lang, latestNonDeletedAentValue as qContent "+
				"where lang.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesLangUuid') "+
				"and qContent.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesContent') "+
				"and lang.uuid=qContent.uuid "+
				"and lang.uuid in "+
					"(select uuid from latestNonDeletedArchEntIdentifiers "+
					"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionUuid') "+
					"and measure='"+question_id+"')";

			fetchAll(langVerForQuesQuery, new FetchCallback() {
				onFetch(langResult) {
					oldLangList.clear();
					oldLangList.addAll(langResult);
					//quesIdx=new ArrayList();
					for(int j=0;j<oldLangList.size();j++){
						for(int i=0;i<canLangList.size();i++){
							setFieldValue("questionBank/questionInfo/langc" + i,oldLangList.get(j).get(1));
							//if(!isNull(getFieldValue("questionBank/questionInfo/langc" + i))){
								//setFieldValue("questionBank/questionInfo/quesc" + i,oldLangList.get(j).get(2));
							//}
						}
					}
					//showWarning("size",quesIdx.size());
					for(int i=0;i<canLangList.size();i++){
						if(!isNull(getFieldValue("questionBank/questionInfo/langc" + i))){
							String templangID=getFieldValue("questionBank/questionInfo/langc" + i).get(0).getName();
							for(lang:oldLangList){
								if(lang.get(1).equals(templangID)){
									setFieldValue("questionBank/questionInfo/quesc" + i,lang.get(2));
								}
							}
						}
					}
					
				}
				});

	        	quesPropQuery="select measure,uuid from latestNonDeletedAentValue where "+
	        	"AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesPropDefID')"+
	        	"and uuid = (select uuid from latestNonDeletedArchEntIdentifiers "+
	        	"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesUuid') "+
	        	"and measure='"+question_id+"')";

	        	fetchAll(loadAllQuesPropQuery, new FetchCallback() {
					onFetch(result) {
						//if(!isNull(result)){
						candidatePropList.clear();
						//candidatePropList.add(placeholder);
						candidatePropList.addAll(result);
						//populateDropDown("questionBank/questionInfo/questionProp", candidatePropList);
						fetchAll(quesPropQuery,new FetchCallback() {
							onFetch(propResult) {
								if(!isNull(propResult)){
									tempPropList=new ArrayList();
									tempPropList.clear();
									//showWarning("isNull","isNull");
									String tempProp=propResult.get(0).get(0);
									//showWarning("tempProp",tempProp);
									oldPropList.clear();
									oldPropList.addAll(propResult);
									newPropList.clear();

									for(prop: candidatePropList){
										if(prop.get(0).equals(tempProp)){
											//showWarning("prop",prop.get(1));
											tempPropList.add(prop);
										}
									}
									for(prop: candidatePropList){
										if(!(prop.get(0).equals(tempProp))){
											//showWarning("prop",prop.get(1));
											tempPropList.add(prop);
										}
									}
									populateDropDown("questionBank/questionInfo/questionProp", tempPropList);
								}
								else{
									showWarning("Out-of-date data","The property in the question is not using anymore");
								}
								
								}
								onError(message) {
		    						showToast(message);
		  					}
						});
						}
					});
	        }
	        onError(message) {
	            showToast(message);
	        }
	    });
}

searchQuestionByLang(){
	String quesLangId=getFieldValue("control/question_control/lang_sel");

	loadQuesContentByLanguageQuery="select qId.measure, qCntt.measure from latestNonDeletedAentValue as qId, latestNonDeletedAentValue as qCntt, latestNonDeletedAentValue as qLang "+
	"where qId.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionUuid') "+
	"and qCntt.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesContent') "+
	"and qLang.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesLangUuid') "+
	"and qId.uuid=qCntt.uuid "+
	"and qCntt.uuid=qLang.uuid "+
	"and qLang.measure='"+quesLangId+"'";

	fetchAll(loadQuesContentByLanguageQuery,
	new FetchCallback() {
        onFetch(result) {
			populateList("control/question_control/questionList", result);
        }

        onError(message) {
            showToast(message);
        }
    });



}
/*** Person AND PersonRole***/
onEvent("control/user_control/New_User","click","newPerson()");
onEvent("person/personInfo/Finish_New_Person","click","saveNewPerson()");
onEvent("control/user_control","show","loadPerson()");
onEvent("person/personInfo/Take_Photo","click","attachPictureTo(\"person/personInfo/personPhoto\")");
onEvent("control/user_control/userList","click","loadPersonInfo()");
onEvent("personRoleSelect/personRoleSelectInfo/CreateNewRole","click","newRole()");
onEvent("personRole/personRoleInfo/SavePersonRole","click","checkRole()");
onEvent("personRoleSelect/personRoleSelectInfo/","show","loadRoles(\"newPerson\",\"personRoleSelect/personRoleSelectInfo/PersonRoleSelectList\")");
onEvent("personRoleSelect/personRoleSelectInfo/CreateNewPerson","click","newPersonByRole()");

person_id=null;
role_id=null;
role_list=new ArrayList();
//propertyIndicator= new ArrayList();
//propertyIndicator.add(new NameValuePair("Yes", "Yes"));
//propertyIndicator.add(new NameValuePair("No", "No"));
savePersonWfProperty=new ArrayList();


newRole(){
	role_id=null;
	newTabGroup("personRole");
	//populateRadioGroup("personRole/personRoleInfo/RoleIntroRequired",propertyIndicator);
	//populateRadioGroup("personRole/personRoleInfo/RolePhotoRequired",propertyIndicator);
	//populateDropDown("personRole/personRoleInfo/RoleDataOnServer",propertyIndicator);
	//populateRadioGroup("personRole/personRoleInfo/RoleDataOnClient",propertyIndicator);
}

checkRole(){
	if(isNull(role_id)){
	String newRoleName=getFieldValue("personRole/personRoleInfo/personRoleName");
	if(isNull(newRoleName)){
		showWarning("Incomplete data","You must enter valid person role name");
		return;
	}
	if((isNull(getFieldValue("personRole/personRoleInfo/RoleIntroRequired"))) || (isNull(getFieldValue("personRole/personRoleInfo/RolePhotoRequired"))) || (isNull(getFieldValue("personRole/personRoleInfo/RoleDataOnClient")))){
		showWarning("Incomplete data","You must finish all data input");
		return;
	}
	else{
			personRoleCheckQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
								"WHERE latestNonDeletedAentValue.AttributeID "+
								"= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='PersonRoleName') "+
								"AND latestNonDeletedAentValue.measure like '%"+newRoleName+"%'; ";

			fetchAll(personRoleCheckQuery,
				new FetchCallback() {
					onFetch(result) {
						if (!isNull(result)) {
							populateList("personRole/personRoleInfo/duplicateRoleList",result);
							showAlert("Person Role data", "This could be a duplicate role\n"+"The possible existing roles are listed in the list\n"+"Do you still want to save this role?", "saveRole()", "stayInCurrentPage()");
						}
						else{
							saveRole();
						}
					}
			       
				onError(message) {
					showToast(message);
				}
				});
	
	}
	}
	else{
		saveRole();
	}
}

saveRole(){

	saveTabGroup("personRole", role_id, null, null, new SaveCallback() {
    onSave(uuid, newRecord) {
      role_id = uuid;
      if (newRecord) {
		//newPerson();
		//person_id=null;
		
        showToast("New record created");
        cancelTabGroup("personRole",true);
        showTab("role_control/role_control_info");
      }
	  else{
		showToast("Record changed");	
	  }
	  
    }
	    onError(message) {
	        showWarning("error",message);
	    }  
  	});

}

newPerson(){
	showTabGroup("personRoleSelect");
	//loadRoles();
	
	/*
	person_id=null;
	newTabGroup("person");
	onEvent("person", "show", "showTab(\"person/personInfo\");"); 
	*/ 
}

loadRoles(String typeFlag, String populateRef){
	fetchAll(loadAllPersonRoleQuery,new FetchCallback() {
				onFetch(result) {
					role_list.clear();
					role_list.addAll(result);
					if(typeFlag.equals("newPerson")){
						populateDropDown(populateRef, role_list);
					}
					else{
						populateList(populateRef,role_list);
					}
					
				}  
		});

}

newPersonByRole(){
	role_id=getFieldValue("personRoleSelect/personRoleSelectInfo/PersonRoleSelectList");
	roleInfo=new ArrayList();
	roleInfo.clear();
	propertyInfo=new ArrayList();
	propertyInfo.clear();
	String roleName=null;
	if(isNull(role_id)){
		showWarning("Invalid role","This role is invalid, please select another role for continue");
		return;
	}
	for(role : role_list){
		if(role.get(0).equals(role_id)){
			roleName=role.get(1);
			break;
		}
	}
	if(isNull(roleName)){
		showWarning("Invalid role","This role is invalid, please select another role for continue");
		return;
	}
	roleInfo.add(role_id);
	roleInfo.add(roleName);
	checkRoleIntroQuery="SELECT measure from latestNonDeletedAentValue WHERE "+
	"latestNonDeletedAentValue.AttributeID="+
	"(select AttributeID from AttributeKey where AttributeKey.AttributeName='RoleIntroAnsRequired') "+
	"AND latestNonDeletedAentValue.uuid='"+role_id+"';";
	checkRolePhotoQuery="SELECT measure from latestNonDeletedAentValue WHERE "+
	"latestNonDeletedAentValue.AttributeID="+
	"(select AttributeID from AttributeKey where AttributeKey.AttributeName='RolePhotoRequired') "+
	"AND latestNonDeletedAentValue.uuid='"+role_id+"';";

	fetchOne(checkRoleIntroQuery,new FetchCallback() {
				onFetch(result) {
					if(!isNull(result)){
						if(result.get(0).equals("Yes")){
							propertyInfo.add("Y");
							fetchOne(checkRolePhotoQuery,new FetchCallback() {
								onFetch(result) {
									if(!isNull(result)){
										if(result.get(0).equals("Yes")){
											//showWarning("checkRolePhotoQuery","Yes");
											propertyInfo.add("Y");
											//showWarning("propertyInfo",propertyInfo.get(1));
											newPersonWithIntro(roleInfo,propertyInfo);
										}
										else{
											propertyInfo.add("N");
											newPersonWithIntro(roleInfo,propertyInfo);
										}
									}
									else{
										showWarning("Invalid role","This role may not be using anymore\n"+" please contact the admin for details");
										return;
									}
								 
								}  
						});
						}
						else{
							propertyInfo.add("N");
							fetchOne(checkRolePhotoQuery,new FetchCallback() {
								onFetch(result) {
									if(!isNull(result)){
										if(result.get(0).equals("Yes")){
											propertyInfo.add("Y");
											newPersonWithIntro(roleInfo,propertyInfo);
										}
										else{
											propertyInfo.add("N");
											newPersonWithIntro(roleInfo,propertyInfo);
										}
									}
									else{
										showWarning("Invalid role","This role may not be using anymore\n"+" please contact the admin for details");
										return;
									}
								 
								}  
						});
						}
					}

					else{
						showWarning("Invalid role","This role may not be using anymore\n"+" please contact the admin for details");
										return;
					}
				 
				}  
		});

}


newPersonWithIntro(ArrayList roleflag, ArrayList propertyFlag){
	person_id=null;
	newTabGroup("person");
	onEvent("person", "show", "showTab(\"person/personInfo\");");  
	setFieldValue("person/personInfoHide/personRoleId",roleflag.get(0));
	setFieldValue("person/personInfo/personRoleName",roleflag.get(1));
	savePersonWfProperty.clear();
	savePersonWfProperty.addAll(propertyFlag);
}

timeValidation(String startDateTime){	
		String hyphenDateRegex="^\\d{4}[-]\\d{2}[-]\\d{2}$";
		Pattern hyphenDatePattern=Pattern.compile(hyphenDateRegex);
		Matcher hyphenDateMatcher=hyphenDatePattern.matcher(startDateTime);
		if (hyphenDateMatcher.find()){		
				DateFormat df=new SimpleDateFormat("yyyy-MM-dd");
				df.setLenient(false);
				Date sdt=null;
				try{
					sdt=df.parse(startDateTime);	
				}
				catch(Exception ex){
					return false;
				}
			return true;
		}
	return false;
}

nameCamCaseConverter(String originName){
	String camCase=null;
	String [] originNameSplit=originName.split("\\s+");
	//showWarning("originNameSplit",originNameSplit[0]);
	StringBuffer sb=new StringBuffer();
	//showWarning("StringBuffer","originNameSplit[0]");
	for (part : originNameSplit){
		if(part.length()>1){
			sb.append(Character.toUpperCase(part.charAt(0))).append(part.substring(1));
		}
		else{
			sb.append(Character.toUpperCase(part.charAt(0)));
		}
	}
	camCase=sb.toString().trim();
	return camCase;
	//showWarning("camCase",camCase);
}

saveNewPerson(){
	if((isNull(getFieldValue("person/personInfo/personName")))|| (isNull(getFieldValue("person/personInfo/personDOB")))){
		showWarning("Validation Error", "You must fill in the Person Name and Person DOB before you can continue");
        return;
	}
	if((savePersonWfProperty.get(1).equals("Y"))&&(savePersonWfProperty.get(0).equals("N"))){
			if((isNull(getFieldValue("person/personInfo/personPhoto")))&& (isNull(getFieldValue("person/personInfo/personPhotoDescp")))){
				showWarning("Validation Error", "You must either take person photo or write the reason of not taking photo");
        		return;
			}

	}
	if((savePersonWfProperty.get(1).equals("Y"))&&(savePersonWfProperty.get(0).equals("Y"))){
			if((isNull(getFieldValue("person/personInfo/personPhoto")))&& (isNull(getFieldValue("person/personInfo/personPhotoDescp")))){
				showWarning("Validation Error", "You must either take person photo or write the reason of not taking photo");
        		return;
			}
			if((isNull(person_id)) && (isNull(getFieldValue("person/personInfo/personIntroDesc")))){
				showWarning("Validation Error", "You must either take person introductory questionnaire \n"+"or write the reason of not taking introductory questionnaire");
        		return;
			}
			if((!isNull(person_id))&&(isNull(getFieldValue("person/personInfo/personIntroDesc")))){
				checkPsIntrAnsQuery="select uuid from latestNonDeletedAentValue "+
					"where AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionnaireID') "+
					"and measure in( select uuid from latestNonDeletedAentValue "+
						"where AttributeID = (select AttributeID from AttributeKey where AttributeName='QuestionnaireType') "+
						"and measure in ( select uuid from latestNonDeletedAentValue "+
							"where AttributeID=(select AttributeID from AttributeKey where AttributeName='QuesnirTypeName') "+
							"and latestNonDeletedAentValue.measure = 'Introductory' ) ) "+
					"and uuid in( select uuid from AentReln "+
						"where RelationshipID in(select RelationshipID from AentReln where AentReln.uuid='"+person_id+"') "+
						"and RelationshipID IN(select RelationshipID from latestNonDeletedRelationship "+
							"where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Answer and Interviewee' ) "+
							"and latestNonDeletedRelationship.Deleted IS NULL));";
	
				fetchAll(checkPsIntrAnsQuery,new FetchCallback() {
						        	onFetch(result) {					        	
									if(isNull(result)){
										showWarning("Validation Error", "You must either take person introductory questionnaire \n"+"or write the reason of not taking introductory questionnaire");
        								return;
									}
								
						        }
						        onError(message) {
						        	Log.e("error",message);
						            showToast(message);
						           
						        }
						    });
			}

	}
	if((savePersonWfProperty.get(1).equals("N"))&&(savePersonWfProperty.get(0).equals("Y"))){
			if((isNull(person_id)) && (isNull(getFieldValue("person/personInfo/personIntroDesc")))){
				showWarning("Validation Error", "You must either take person introductory questionnaire \n"+"or write the reason of not taking introductory questionnaire");
        		return;
			}
			if((!isNull(person_id))&&(isNull(getFieldValue("person/personInfo/personIntroDesc")))){
				checkPsIntrAnsQuery="select uuid from latestNonDeletedAentValue "+
					"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionnaireID') "+
					"and latestNonDeletedAentValue.measure in "+
					"(select uuid from latestNonDeletedAentValue "+
						"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionnaireType') "+
						"and latestNonDeletedAentValue.measure="+
						"(select uuid from latestNonDeletedAentValue where latestNonDeletedAentValue.AttributeID= "+
							"(select AttributeID from AttributeKey where AttributeName='QuesnirTypeName') "+
							"and latestNonDeletedAentValue.measure = 'Introductory')) "+
					"and uuid in "+
					"(select uuid from AentReln where RelationshipID in "+
						"(select RelationshipID from AentReln where AentReln.uuid='"+person_id+"') "+
						"and RelationshipID in "+
						"(select RelationshipID from latestNonDeletedRelationship "+
							"where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Answer and Interviewee') "+
							"and latestNonDeletedRelationship.Deleted is null))";
	
				fetchAll(checkPsIntrAnsQuery,new FetchCallback() {
						        	onFetch(result) {					        	
									if(isNull(result)){
										showWarning("Validation Error", "You must either take person introductory questionnaire \n"+"or write the reason of not taking introductory questionnaire");
        								return;
									}
								
						        }
						        onError(message) {
						        	Log.e("error",message);
						            showToast(message);
						           
						        }
						    });
			}
	}
	//if(isNull(getFieldValue("person/personInfo/personID"))){
	String personNameOrigin=getFieldValue("person/personInfo/personName");
	String personNameCamCase=nameCamCaseConverter(personNameOrigin);
	String personLabel=personNameCamCase+"_"+getFieldValue("person/personInfo/personDOB");
	String personDOB=getFieldValue("person/personInfo/personDOB");
	tempDuplicateList=new ArrayList();
	tempDuplicateList.clear();
	int sizeOfDup=0;
	if(isNull(person_id)){
		psDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
				"where AttributeID=(select AttributeID from AttributeKey where AttributeName='PersonID') "+
				"and measure ='"+personLabel+"' or measure like '"+personLabel+"(%)'";

	}
	else{
		psDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
				"where AttributeID=(select AttributeID from AttributeKey where AttributeName='PersonID') "+
				"and uuid<>'"+person_id+"' "+
				"and measure ='"+personLabel+"' or measure like '"+personLabel+"(%)'";
	}
	

	if(timeValidation(personDOB)){
		fetchAll(psDuplicateQuery,new FetchCallback() {
			onFetch(result) {
				if(!isNull(result)){
					personLabel= makeLbl(result, personLabel, "PersonID", "Person");	
				}
				
				setFieldValue("person/personInfo/personID",personLabel);			
				saveTabGroup("person", person_id, null, null, new SaveCallback() {
					onSave(uuid, newRecord) {
						person_id = uuid;
						if (newRecord) {
							showToast("New record created");
							cancelTabGroup("person",true);
							showTab("control/user_control");
						}
						else{
							showToast("Record changed");	
						}

						}
						onError(message) {
							showWarning("error",message);
						}  
				});
			}
		});
	}
	else{
		showWarning("Invalid DOB","1.Datetime format should be yyyy-MM-dd \n"+"2.The value for date should be valid");
					return;
	}
}

loadPerson(){
	person_id=null;
	fetchAll(/*"SELECT uuid, group_concat(coalesce(measure, ''),' - ') as response " +
    "FROM (select * from latestNonDeletedArchentIdentifiers) " +
    "WHERE aenttypename = 'Person' " +
    "GROUP BY uuid " +
    "order by response;"*/
			loadAllPersonQuery, new FetchCallback() {
        onFetch(result) {
            populateList("control/user_control/userList", result);
        }

        onError(message) {
            showToast(message);
        }
    });
}

loadPersonInfo(){
person_id=getListItemValue();
	if(isNull(person_id)){
		showToast("No Person selected");
		return;
	}

	showTabGroup("person", person_id, new FetchCallback() {
        onFetch(result) {
            person=result;
            String roleUuid=getFieldValue("person/personInfoHide/personRoleId");
            checkPersonRoleQuery="SELECT measure from latestNonDeletedAentValue "+
											"WHERE latestNonDeletedAentValue.uuid='"+roleUuid+"' "+
											"AND latestNonDeletedAentValue.AttributeID="+
											"(select AttributeID from AttributeKey where AttributeName='PersonRoleName');";

			checkRoleIntroQuery="SELECT measure from latestNonDeletedAentValue "+
								"WHERE latestNonDeletedAentValue.uuid='"+roleUuid+"' "+
								"AND latestNonDeletedAentValue.AttributeID="+
								"(select AttributeID from AttributeKey where AttributeName='RoleIntroAnsRequired');";

			checkRolePhotoQuery="SELECT measure from latestNonDeletedAentValue "+
								"WHERE latestNonDeletedAentValue.uuid='"+roleUuid+"' "+
								"AND latestNonDeletedAentValue.AttributeID="+
								"(select AttributeID from AttributeKey where AttributeName='RolePhotoRequired');";

        	fetchOne(checkPersonRoleQuery,new FetchCallback() {
								onFetch(result) {
									if(!isNull(result)){
										setFieldValue("person/personInfo/personRoleName",result.get(0));
										
									}
									else{
										showWarning("Invalid role","This role may not be using anymore\n"+" please contact the admin for details");
									}
								 
								}  
						});
        checkPsIntrSssQuery="select uuid,measure from latestNonDeletedArchEntIdentifiers "+
			"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionID') "+
			"and uuid in ( select uuid from AentReln "+
				"where RelationshipID in(select RelationshipID from AentReln "+
					"where RelationshipID in (select RelationshipID from latestNonDeletedRelationship "+
						"where RelnTypeID=(select RelnTypeID from RelnType where RelnTypeName='Answer and Session' ) "+
						"and latestNonDeletedRelationship.Deleted IS NULL) "+
			"and uuid in (select uuid from latestNonDeletedAentValue "+
				"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='AnswerQuestionnaireID') "+
				"and latestNonDeletedAentValue.measure in(select uuid from latestNonDeletedAentValue "+
					"where latestNonDeletedAentValue.AttributeID=(select AttributeID from AttributeKey where AttributeName='QuestionnaireType') "+
					"and measure=(select uuid from latestNonDeletedAentValue "+
						"where AttributeID= (select AttributeID from AttributeKey "+
							"where AttributeName='QuesnirTypeName') and measure = 'Introductory'))))) "+
			"and uuid in (select measure from latestNonDeletedArchEntIdentifiers "+
				"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionIDforPerson') "+
				"and uuid in (select uuid from latestNonDeletedAentValue "+
					"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionPersonRole') "+
					"and measure=(select uuid from latestNonDeletedAentValue "+
						"where AttributeID=(select AttributeID from AttributeKey where AttributeName='PersonRoleName') "+
						"and measure='consultant') "+
			"and uuid in (select uuid from latestNonDeletedAentValue "+
				"where AttributeID=(select AttributeID from AttributeKey where AttributeName='SessionPersonName') "+
				"and measure ='"+person_id+"')));";
        	
			fetchAll(checkPsIntrSssQuery, new FetchCallback() {
				        onFetch(result) {
				        		if(!isNull(result)){
									setFieldValue("person/personInfo/introAnsChecker","Answered");
				        		}
				        	}
				            
				        onError(message) {
				            showToast(message);
				        }
				    });

        	fetchOne(checkRoleIntroQuery,new FetchCallback() {
								onFetch(result) {
									if(!isNull(result)){
										savePersonWfProperty.clear();
										if(result.get(0).equals("Yes")){
											savePersonWfProperty.add("Y");
										}
										else{
											savePersonWfProperty.add("N");
										}
										fetchOne(checkRolePhotoQuery,new FetchCallback() {
											onFetch(result) {
												if(!isNull(result)){
													if(result.get(0).equals("Yes")){
														savePersonWfProperty.add("Y");
													}
													else{
														savePersonWfProperty.add("N");
													}
													
												}
												else{
													showWarning("Invalid role","This role may not be using anymore\n"+" please contact the admin for details");
												}
											 
											}  
										});
									}
									else{
										showWarning("Invalid role","This role may not be using anymore\n"+" please contact the admin for details");
									}
								 
								}  
						});

            showToast("Loaded person"+person.getId());            
        }
        onError(message) {
            showToast(message);
        }
    });
}
/*** Language ***/
onEvent("control/language_control/New_Language","click","newLanguage()");
onEvent("language/languageInfo/Finish_New_Language","click","saveNewLanguage()");
onEvent("language/languageInfo","show","loadLangType(\"new\")");
onEvent("control/language_control","show","loadLanguage()");
onEvent("control/language_control/languageList","click","loadLanguageInfo()");
language_id=null;
originLangProp=new ArrayList();
newLangProp=new ArrayList();
candLangProp=new ArrayList();
newLanguage(){
	language_id=null;
	candLangProp.clear();
	originLangProp.clear();
	newLangProp.clear();
	newTabGroup("language");
	onEvent("language", "show", "showTab(\"language/languageInfo\");");  
}
saveNewLanguage(){
	if(isNull(getFieldValue("language/languageInfo/languageName"))){
		showWarning("Validation Error", "You must fill in the Language Name before you can continue");
        return;
	}
	if(isNull(getFieldValue("language/languageInfo/languageID"))){
		showWarning("Validation Error", "You must fill in the Language ID before you can continue");
        return;
	}
	//setFieldValue("person/personInfo/personID", getFieldValue("person/personInfo/personName")+getCurrentTime());
	tempDuplicateList=new ArrayList();
	tempDuplicateList.clear();
	int sizeOfDup=0;
	tempLangLabel=getFieldValue("language/languageInfo/languageID");
	langDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
				"where AttributeID=(select AttributeID from AttributeKey where AttributeName='LanguageID') "+
				"and measure ='"+tempLangLabel+"' or measure like '"+tempLangLabel+"(%)'";
	if(language_id!=null){
		langDuplicateQuery="SELECT uuid,measure FROM latestNonDeletedAentValue "+
				"where AttributeID=(select AttributeID from AttributeKey where AttributeName='LanguageID') "+
				"and uuid<>'"+language_id+"' "+
				"and measure ='"+tempLangLabel+"' or measure like '"+tempLangLabel+"(%)'";
	}
	
    fetchAll(langDuplicateQuery,new FetchCallback() {
		onFetch(result) {
			if(!isNull(result)){
				tempLangLabel=makeLbl(result,tempLangLabel, "LanguageID","Language");

				setFieldValue("language/languageInfo/languageID",tempLangLabel);
			}
			crntLangTypeId=getFieldValue("language/languageInfo/languageType");
			saveTabGroup("language", language_id, null, null, new SaveCallback() {
				onSave(uuid, newRecord) {
				      language_id = uuid;
				      if (newRecord) {
				      	//String langTypeID=getFieldValue("language/languageInfo/languageType");
				      	//showWarning("langTypeID",crntLangTypeId);
				    	attributes=createAttributeList();
				    	attributes.add(createEntityAttribute("LanguageTypeID", null, null, crntLangTypeId, null));
				    	saveArchEnt(language_id, "Language", null, attributes);
				        showToast("New record created");
				        cancelTabGroup("language",true);
				        showTab("control/language_control");
				      }
					  else{
						showToast("Record changed");
					  }
			    }
			    onError(message) {
			        showWarning("error",message);
			    } 
			});
			if((language_id!=null) && (!isNull(originLangProp))){
				newLangProp.add(crntLangTypeId);
				Hashtable langPropChange=listChange(newLangProp,originLangProp);
				if(langPropChange.containsKey("ADD")){
					attributes=createAttributeList();
			    	attributes.add(createEntityAttribute("LanguageTypeID", null, null, crntLangTypeId, null));
			    	saveArchEnt(language_id, "Language", null, attributes);
			    	showToast("language type changed");
				}
				
			}
		}
	});
}

loadLanguage(){
	language_id=null;
	fetchAll(loadAllLanguageQuery, new FetchCallback() {
        onFetch(result) {
            populateList("control/language_control/languageList", result);
        }

        onError(message) {
            showToast(message);
        }
    });
}
loadLanguageInfo(){
language_id=getListItemValue();
	if(isNull(language_id)){
		showToast("No Language selected");
		return;
	}
	showTabGroup("language", language_id, new FetchCallback() {
        onFetch(result) {
            language=result;
            loadLangPropQuery="select lProp.measure from latestNonDeletedAentValue as lProp "+
            "where lProp.AttributeID=(select AttributeID from AttributeKey where AttributeName='LanguageTypeID') "+
            "and lProp.uuid='"+language_id+"'";
            fetchAll(loadAllLangTypeQuery, new FetchCallback() {
			onFetch(result) {
				candLangProp.clear();
				candLangProp.addAll(result);
				fetchOne(loadLangPropQuery,new FetchCallback() {
					onFetch(propResult) {
						if(!isNull(propResult)){
							tempPropList=new ArrayList();
							tempPropList.clear();
							//showWarning("isNull","isNull");
							String tempProp=propResult.get(0);
							//showWarning("tempProp",tempProp);
							originLangProp.clear();
							originLangProp.addAll(propResult);
							newLangProp.clear();

							for(prop: candLangProp){
								if(prop.get(0).equals(tempProp)){
									//showWarning("prop",prop.get(1));
									tempPropList.add(prop);
								}
							}
							for(prop: candLangProp){
								if(!(prop.get(0).equals(tempProp))){
									//showWarning("prop",prop.get(1));
									tempPropList.add(prop);
								}
							}
							populateDropDown("language/languageInfo/languageType", tempPropList);
						}
						else{
							showWarning("Out-of-date data","The property of the language is not using anymore");
						}
						
						}
						onError(message) {
    						showToast(message);
  					}
				});
				}
			});
            

            showToast("Loaded language"+language.getId());            
        }
        onError(message) {
            showToast(message);
        }
    });
}
/***language type***/
onEvent("control/other_control/langType_Control","click","showTabGroup(\"langType_control\")");
onEvent("langType_control/langType_control_info","show","loadLangType(\"def\")");
onEvent("langType_control/langType_control_info/New_LangType","click","newLangType()");
onEvent("langType_control/langType_control_info/langTypeList","click","loadLangTypeInfo()");
onEvent("langType_control/langType_control_info/langTypeList","click","loadLangTypeInfo()");
onEvent("langType/langType_info/SaveLangType","click","langTypePreCheck()");

langTypeId=null;
langType=new ArrayList();
loadLangType(String typeFlag){
	fetchAll(loadAllLangTypeQuery,
	new FetchCallback() {
        onFetch(result) {
			if (!isNull(result)) {
				langType.clear();
				langType.addAll(result);
				if(typeFlag.equals("def")){
					populateList("langType_control/langType_control_info/langTypeList",langType);
				}
				else{
					populateDropDown("language/languageInfo/languageType",langType);
				}
				
			}
			else{
				if(!typeFlag.equals("def")){
					showAlert("Language Type data", "There is no available language type yet\n"+"Do you want to create new type now?", "newLangType()", "stayInCurrentPage()");
				}
				
			}
			
        }

        onError(message) {
            showToast(message);
        }
    });
}
newLangType(){
	langTypeId=null;
	newTabGroup("langType");
}

loadLangTypeInfo(){
	langTypeId=getListItemValue();
	if(isNull(langTypeId)){
		showWarning("Invalid data","No type selected");
		return;
	}
	showTabGroup("langType", langTypeId, new FetchCallback() {
        onFetch(result) {
        	tempPop=new ArrayList();
        	tempPop.clear();
        	populateList("langType/langType_info/duplicateLangTypeList",tempPop);
            showToast("Loaded type"+result.getId());  
            //showWarning("intro?",result.getClass().getName());          
        }
        onError(message) {
            showToast(message);
        }
    });

}

langTypePreCheck(){
		String newTypeName=getFieldValue("langType/langType_info/langTypeName").trim();
		//showWarning("newTypeName",newTypeName);
		if(isNull(newTypeName)){
			showWarning("Incomplete data", "You must input questionnaire name");
			return;
		}
		else{

			langTypeCheckQuery="SELECT uuid,measure FROM latestNonDeletedAentValue " +
								"WHERE latestNonDeletedAentValue.AttributeID "+
								"= (SELECT AttributeID FROM AttributeKey WHERE AttributeName='LangTypeName') "+
								"AND latestNonDeletedAentValue.measure like '%"+newTypeName+"%'; ";
			//showWarning("quesnirTypeCheckQuery","quesnirTypeCheckQuery");					
			fetchAll(langTypeCheckQuery,
				new FetchCallback() {
					onFetch(result) {
						if (!isNull(result)) {
							populateList("langType/langType_info/duplicateLangTypeList",result);
							showAlert("Language Type data", "This could be a duplicate type\n"+"The possible existing type is listed in the list\n"+"Do you still want to save this type?", "saveLangType()", "stayInCurrentPage()");
						}
						else{
							saveLangType();
						}
					}
			       
				onError(message) {
					showToast(message);
				}
				});
		}	
	
}
saveLangType(){
	saveTabGroup("langType", langTypeId, null, null, new SaveCallback() {
		onSave(uuid, newRecord) {
			langTypeId = uuid;
			//showWarning("saveQuesnirType",quesnirTypeId);
			if (newRecord) {
				showToast("New record created");
			    cancelTabGroup("langType",true);
			}
			else{
				showToast("Record changed");
			}
		}
		onError(message) {
			showWarning("error",message);
		}  
		});

}
/*** PersonRole ***/
onEvent("control/other_control/Role_Control","click","showTabGroup(\"role_control\")");
onEvent("role_control/role_control_info/New_Role","click","newRole()");
onEvent("role_control/role_control_info","show","loadRoles(\"newRole\",\"role_control/role_control_info/roleList\")");
onEvent("role_control/role_control_info/roleList","click","loadRoleInfo()");
//roleID=null; //This is for differenciate the role id used for creating new person and here view roles

loadRoleInfo(){
	role_id=getListItemValue();
	if(isNull(role_id)){
		showWarning("Invalid data","No role selected");
		return;
	}
	showTabGroup("personRole", role_id, new FetchCallback() {
        onFetch(result) {
            showToast("Loaded role"+result.getId());  
        }
        onError(message) {
            showToast(message);
        }
    });

}
/***Quesnir Type ***/
onEvent("control/other_control/Type_Control","click","showTabGroup(\"type_control\")");
onEvent("type_control/type_control_info","show","loadQuesnirType(\"typeLoad\")");
onEvent("type_control/type_control_info/New_Type","click","newQuesnirType()");
onEvent("type_control/type_control_info/typeList","click","loadTypeInfo()");

loadTypeInfo(){
	quesnirTypeId=getListItemValue();
	if(isNull(quesnirTypeId)){
		showWarning("Invalid data","No type selected");
		return;
	}
	showTabGroup("quesnirType", quesnirTypeId, new FetchCallback() {
        onFetch(result) {
        	tempPop=new ArrayList();
        	tempPop.clear();
        	populateList("quesnirType/quesnirType_info/duplicateTypeList",tempPop);
            showToast("Loaded type"+result.getId());  
            //showWarning("intro?",result.getClass().getName());          
        }
        onError(message) {
            showToast(message);
        }
    });

}

/*** Search Page ***/
//Add entity types
entityTypes = new ArrayList();
entityTypes.add(new NameValuePair("{Questionnaire}", "Questionnaire"));
entityTypes.add(new NameValuePair("{Question}", "QuestionBank"));
entityTypes.add(new NameValuePair("{Person}", "Person"));
entityTypes.add(new NameValuePair("{Language}", "Language"));
entityTypes.add(new NameValuePair("{Role}", "PersonRole"));

onEvent("control/search","show","initializeSearch()");
onEvent("control/search/Record_Search","click","recordSearch()");
onEvent("control/search/entityList","click","showEntity()");

type=null;// entity type recording

searchQuery_firstHalf="select uuid, measure from latestNonDeletedAentValue where " +
"latestNonDeletedAentValue.Measure like '%"; 
searchQuery_lastHalf="%' and latestNonDeletedAentValue.AttributeID in "+
"(select AttributeID from IdealAent where IdealAent.AentTypeID in "+
"(select AEntTypeID from AEntType where  AEntType.AEntTypeName= '";

initializeSearch(){
	populateDropDown("control/search/entityTypes",entityTypes);
}

recordSearch(){
	searchResult=new ArrayList();
	searchResult.clear();
	type = getFieldValue("control/search/entityTypes");
	String keyword=getFieldValue("control/search/keyword").trim();
	if((isNull(keyword)) || keyword.equals("*")){
		search_query="select uuid, measure from latestNonDeletedAentValue where "+
		"latestNonDeletedAentValue.AttributeID in "+
		"(select AttributeID from IdealAent where IdealAent.AentTypeID in "+
		"(select AEntTypeID from AEntType where  AEntType.AEntTypeName= '"+type+"'));";// without group by uuid, user can view every related details
		fetchAll(search_query, new FetchCallback() {
        onFetch(result) {
			if(!isNull(result)){
			searchResult.addAll(result);
            populateList("control/search/entityList", result);}
			else{
				showWarning("No result","Sorry, no result is found");
			}
        }

        onError(message) {
            showToast(message);
        }
    });
		 //populateCursorList("control/search/entityList", "select uuid, response from latestNonDeletedArchEntFormattedIdentifiers where aenttypename = '" + type + "' limit ? offset ?;", 25);
	}
	else{	
		search_query=searchQuery_firstHalf+keyword+searchQuery_lastHalf+type+"'));";//without group by uuid, user can view every related details
		fetchAll(search_query, new FetchCallback() {
        onFetch(result) {
			if(!isNull(result)){
			searchResult.addAll(result);
            populateList("control/search/entityList", result);}
			else{
				showWarning("No result","Sorry, no result is found");
			}
        }

        onError(message) {
            showToast(message);
        }
    });
	}
}

showEntity(){
	entity_id=getListItemValue();
	switch (type){
		case "Questionnaire":
			loadQuestionnaireInfo();
			break;
		case "Person":
			loadPersonInfo();
			break;
		case "Language":
			loadLanguageInfo();
			break;
		case "QuestionBank":
			loadQuestionInfo();
			break;
		case "PersonRole":
			loadRoleInfo();
			break;
			
	}
	
}

onEvent("control/querytest/Submit","click","testQuery()");
testQuery(){
	query=getFieldValue("control/querytest/query");
	//fetchAll("SELECT sql FROM sqlite_master WHERE name='archentity';",
	fetchAll(query.toString()+";",
	new FetchCallback() {
        onFetch(result) {
			if (isNull(result)) {
				//code
				showWarning("no","no result");
			}
			else{
				for (re : result) {
				showWarning("yes",re.toString());
				//showWarning("me",re.toString());
				
			}		    
            //populateList("control/question_control/questionList", result);
        }
		}
        onError(message) {
            showToast(message);
        }
    });
	
}

